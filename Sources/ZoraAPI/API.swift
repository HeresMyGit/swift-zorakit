// @generated
//  This file was automatically generated and should not be edited.

import Apollo
import Foundation

public struct NetworkInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  /// - Parameters:
  ///   - network
  ///   - chain
  public init(network: Network, chain: Chain) {
    graphQLMap = ["network": network, "chain": chain]
  }

  public var network: Network {
    get {
      return graphQLMap["network"] as! Network
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "network")
    }
  }

  public var chain: Chain {
    get {
      return graphQLMap["chain"] as! Chain
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "chain")
    }
  }
}

public enum Network: RawRepresentable, Equatable, Hashable, CaseIterable, Apollo.JSONDecodable, Apollo.JSONEncodable {
  public typealias RawValue = String
  case ethereum
  /// Auto generated constant for unknown enum values
  case __unknown(RawValue)

  public init?(rawValue: RawValue) {
    switch rawValue {
      case "ETHEREUM": self = .ethereum
      default: self = .__unknown(rawValue)
    }
  }

  public var rawValue: RawValue {
    switch self {
      case .ethereum: return "ETHEREUM"
      case .__unknown(let value): return value
    }
  }

  public static func == (lhs: Network, rhs: Network) -> Bool {
    switch (lhs, rhs) {
      case (.ethereum, .ethereum): return true
      case (.__unknown(let lhsValue), .__unknown(let rhsValue)): return lhsValue == rhsValue
      default: return false
    }
  }

  public static var allCases: [Network] {
    return [
      .ethereum,
    ]
  }
}

public enum Chain: RawRepresentable, Equatable, Hashable, CaseIterable, Apollo.JSONDecodable, Apollo.JSONEncodable {
  public typealias RawValue = String
  case mainnet
  /// Auto generated constant for unknown enum values
  case __unknown(RawValue)

  public init?(rawValue: RawValue) {
    switch rawValue {
      case "MAINNET": self = .mainnet
      default: self = .__unknown(rawValue)
    }
  }

  public var rawValue: RawValue {
    switch self {
      case .mainnet: return "MAINNET"
      case .__unknown(let value): return value
    }
  }

  public static func == (lhs: Chain, rhs: Chain) -> Bool {
    switch (lhs, rhs) {
      case (.mainnet, .mainnet): return true
      case (.__unknown(let lhsValue), .__unknown(let rhsValue)): return lhsValue == rhsValue
      default: return false
    }
  }

  public static var allCases: [Chain] {
    return [
      .mainnet,
    ]
  }
}

public struct EventsQueryFilter: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  /// - Parameters:
  ///   - eventTypes
  ///   - senderAddresses
  ///   - recipientAddresses
  ///   - sellerAddresses
  ///   - bidderAddresses
  ///   - timeFilter
  public init(eventTypes: Swift.Optional<[EventType]?> = nil, senderAddresses: Swift.Optional<[String]?> = nil, recipientAddresses: Swift.Optional<[String]?> = nil, sellerAddresses: Swift.Optional<[String]?> = nil, bidderAddresses: Swift.Optional<[String]?> = nil, timeFilter: Swift.Optional<TimeFilter?> = nil) {
    graphQLMap = ["eventTypes": eventTypes, "senderAddresses": senderAddresses, "recipientAddresses": recipientAddresses, "sellerAddresses": sellerAddresses, "bidderAddresses": bidderAddresses, "timeFilter": timeFilter]
  }

  public var eventTypes: Swift.Optional<[EventType]?> {
    get {
      return graphQLMap["eventTypes"] as? Swift.Optional<[EventType]?> ?? Swift.Optional<[EventType]?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "eventTypes")
    }
  }

  public var senderAddresses: Swift.Optional<[String]?> {
    get {
      return graphQLMap["senderAddresses"] as? Swift.Optional<[String]?> ?? Swift.Optional<[String]?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "senderAddresses")
    }
  }

  public var recipientAddresses: Swift.Optional<[String]?> {
    get {
      return graphQLMap["recipientAddresses"] as? Swift.Optional<[String]?> ?? Swift.Optional<[String]?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "recipientAddresses")
    }
  }

  public var sellerAddresses: Swift.Optional<[String]?> {
    get {
      return graphQLMap["sellerAddresses"] as? Swift.Optional<[String]?> ?? Swift.Optional<[String]?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "sellerAddresses")
    }
  }

  public var bidderAddresses: Swift.Optional<[String]?> {
    get {
      return graphQLMap["bidderAddresses"] as? Swift.Optional<[String]?> ?? Swift.Optional<[String]?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "bidderAddresses")
    }
  }

  public var timeFilter: Swift.Optional<TimeFilter?> {
    get {
      return graphQLMap["timeFilter"] as? Swift.Optional<TimeFilter?> ?? Swift.Optional<TimeFilter?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "timeFilter")
    }
  }
}

public enum EventType: RawRepresentable, Equatable, Hashable, CaseIterable, Apollo.JSONDecodable, Apollo.JSONEncodable {
  public typealias RawValue = String
  case approvalEvent
  case saleEvent
  case mintEvent
  case transferEvent
  case v1MarketEvent
  case v2AuctionEvent
  case v3AskEvent
  /// Auto generated constant for unknown enum values
  case __unknown(RawValue)

  public init?(rawValue: RawValue) {
    switch rawValue {
      case "APPROVAL_EVENT": self = .approvalEvent
      case "SALE_EVENT": self = .saleEvent
      case "MINT_EVENT": self = .mintEvent
      case "TRANSFER_EVENT": self = .transferEvent
      case "V1_MARKET_EVENT": self = .v1MarketEvent
      case "V2_AUCTION_EVENT": self = .v2AuctionEvent
      case "V3_ASK_EVENT": self = .v3AskEvent
      default: self = .__unknown(rawValue)
    }
  }

  public var rawValue: RawValue {
    switch self {
      case .approvalEvent: return "APPROVAL_EVENT"
      case .saleEvent: return "SALE_EVENT"
      case .mintEvent: return "MINT_EVENT"
      case .transferEvent: return "TRANSFER_EVENT"
      case .v1MarketEvent: return "V1_MARKET_EVENT"
      case .v2AuctionEvent: return "V2_AUCTION_EVENT"
      case .v3AskEvent: return "V3_ASK_EVENT"
      case .__unknown(let value): return value
    }
  }

  public static func == (lhs: EventType, rhs: EventType) -> Bool {
    switch (lhs, rhs) {
      case (.approvalEvent, .approvalEvent): return true
      case (.saleEvent, .saleEvent): return true
      case (.mintEvent, .mintEvent): return true
      case (.transferEvent, .transferEvent): return true
      case (.v1MarketEvent, .v1MarketEvent): return true
      case (.v2AuctionEvent, .v2AuctionEvent): return true
      case (.v3AskEvent, .v3AskEvent): return true
      case (.__unknown(let lhsValue), .__unknown(let rhsValue)): return lhsValue == rhsValue
      default: return false
    }
  }

  public static var allCases: [EventType] {
    return [
      .approvalEvent,
      .saleEvent,
      .mintEvent,
      .transferEvent,
      .v1MarketEvent,
      .v2AuctionEvent,
      .v3AskEvent,
    ]
  }
}

public struct TimeFilter: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  /// - Parameters:
  ///   - startDate
  ///   - endDate
  ///   - lookbackHours
  public init(startDate: Swift.Optional<String?> = nil, endDate: Swift.Optional<String?> = nil, lookbackHours: Swift.Optional<Int?> = nil) {
    graphQLMap = ["startDate": startDate, "endDate": endDate, "lookbackHours": lookbackHours]
  }

  public var startDate: Swift.Optional<String?> {
    get {
      return graphQLMap["startDate"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "startDate")
    }
  }

  public var endDate: Swift.Optional<String?> {
    get {
      return graphQLMap["endDate"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "endDate")
    }
  }

  public var lookbackHours: Swift.Optional<Int?> {
    get {
      return graphQLMap["lookbackHours"] as? Swift.Optional<Int?> ?? Swift.Optional<Int?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "lookbackHours")
    }
  }
}

public struct PaginationInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  /// - Parameters:
  ///   - limit
  ///   - after
  public init(limit: Int, after: Swift.Optional<String?> = nil) {
    graphQLMap = ["limit": limit, "after": after]
  }

  public var limit: Int {
    get {
      return graphQLMap["limit"] as! Int
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "limit")
    }
  }

  public var after: Swift.Optional<String?> {
    get {
      return graphQLMap["after"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "after")
    }
  }
}

public struct EventSortKeySortInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  /// - Parameters:
  ///   - sortKey
  ///   - sortDirection
  public init(sortKey: EventSortKey, sortDirection: SortDirection) {
    graphQLMap = ["sortKey": sortKey, "sortDirection": sortDirection]
  }

  public var sortKey: EventSortKey {
    get {
      return graphQLMap["sortKey"] as! EventSortKey
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "sortKey")
    }
  }

  public var sortDirection: SortDirection {
    get {
      return graphQLMap["sortDirection"] as! SortDirection
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "sortDirection")
    }
  }
}

public enum EventSortKey: RawRepresentable, Equatable, Hashable, CaseIterable, Apollo.JSONDecodable, Apollo.JSONEncodable {
  public typealias RawValue = String
  case created
  /// Auto generated constant for unknown enum values
  case __unknown(RawValue)

  public init?(rawValue: RawValue) {
    switch rawValue {
      case "CREATED": self = .created
      default: self = .__unknown(rawValue)
    }
  }

  public var rawValue: RawValue {
    switch self {
      case .created: return "CREATED"
      case .__unknown(let value): return value
    }
  }

  public static func == (lhs: EventSortKey, rhs: EventSortKey) -> Bool {
    switch (lhs, rhs) {
      case (.created, .created): return true
      case (.__unknown(let lhsValue), .__unknown(let rhsValue)): return lhsValue == rhsValue
      default: return false
    }
  }

  public static var allCases: [EventSortKey] {
    return [
      .created,
    ]
  }
}

public enum SortDirection: RawRepresentable, Equatable, Hashable, CaseIterable, Apollo.JSONDecodable, Apollo.JSONEncodable {
  public typealias RawValue = String
  case asc
  case desc
  /// Auto generated constant for unknown enum values
  case __unknown(RawValue)

  public init?(rawValue: RawValue) {
    switch rawValue {
      case "ASC": self = .asc
      case "DESC": self = .desc
      default: self = .__unknown(rawValue)
    }
  }

  public var rawValue: RawValue {
    switch self {
      case .asc: return "ASC"
      case .desc: return "DESC"
      case .__unknown(let value): return value
    }
  }

  public static func == (lhs: SortDirection, rhs: SortDirection) -> Bool {
    switch (lhs, rhs) {
      case (.asc, .asc): return true
      case (.desc, .desc): return true
      case (.__unknown(let lhsValue), .__unknown(let rhsValue)): return lhsValue == rhsValue
      default: return false
    }
  }

  public static var allCases: [SortDirection] {
    return [
      .asc,
      .desc,
    ]
  }
}

public struct EventsQueryInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  /// - Parameters:
  ///   - tokens
  ///   - collectionAddresses
  public init(tokens: Swift.Optional<[TokenInput]?> = nil, collectionAddresses: Swift.Optional<[String]?> = nil) {
    graphQLMap = ["tokens": tokens, "collectionAddresses": collectionAddresses]
  }

  public var tokens: Swift.Optional<[TokenInput]?> {
    get {
      return graphQLMap["tokens"] as? Swift.Optional<[TokenInput]?> ?? Swift.Optional<[TokenInput]?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "tokens")
    }
  }

  public var collectionAddresses: Swift.Optional<[String]?> {
    get {
      return graphQLMap["collectionAddresses"] as? Swift.Optional<[String]?> ?? Swift.Optional<[String]?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collectionAddresses")
    }
  }
}

public struct TokenInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  /// - Parameters:
  ///   - address
  ///   - tokenId
  public init(address: String, tokenId: String) {
    graphQLMap = ["address": address, "tokenId": tokenId]
  }

  public var address: String {
    get {
      return graphQLMap["address"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "address")
    }
  }

  public var tokenId: String {
    get {
      return graphQLMap["tokenId"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "tokenId")
    }
  }
}

public struct MarketsQueryFilter: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  /// - Parameters:
  ///   - marketFilters
  ///   - priceFilter
  public init(marketFilters: Swift.Optional<[MarketTypeFilter]?> = nil, priceFilter: Swift.Optional<PriceFilter?> = nil) {
    graphQLMap = ["marketFilters": marketFilters, "priceFilter": priceFilter]
  }

  public var marketFilters: Swift.Optional<[MarketTypeFilter]?> {
    get {
      return graphQLMap["marketFilters"] as? Swift.Optional<[MarketTypeFilter]?> ?? Swift.Optional<[MarketTypeFilter]?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "marketFilters")
    }
  }

  public var priceFilter: Swift.Optional<PriceFilter?> {
    get {
      return graphQLMap["priceFilter"] as? Swift.Optional<PriceFilter?> ?? Swift.Optional<PriceFilter?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "priceFilter")
    }
  }
}

public struct MarketTypeFilter: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  /// - Parameters:
  ///   - marketType
  ///   - statuses
  ///   - bidderAddresses
  public init(marketType: MarketType, statuses: Swift.Optional<[MarketStatus]?> = nil, bidderAddresses: Swift.Optional<[String]?> = nil) {
    graphQLMap = ["marketType": marketType, "statuses": statuses, "bidderAddresses": bidderAddresses]
  }

  public var marketType: MarketType {
    get {
      return graphQLMap["marketType"] as! MarketType
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "marketType")
    }
  }

  public var statuses: Swift.Optional<[MarketStatus]?> {
    get {
      return graphQLMap["statuses"] as? Swift.Optional<[MarketStatus]?> ?? Swift.Optional<[MarketStatus]?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "statuses")
    }
  }

  public var bidderAddresses: Swift.Optional<[String]?> {
    get {
      return graphQLMap["bidderAddresses"] as? Swift.Optional<[String]?> ?? Swift.Optional<[String]?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "bidderAddresses")
    }
  }
}

public enum MarketType: RawRepresentable, Equatable, Hashable, CaseIterable, Apollo.JSONDecodable, Apollo.JSONEncodable {
  public typealias RawValue = String
  case v1Ask
  case v1BidShare
  case v1Offer
  case v2Auction
  case v3Ask
  /// Auto generated constant for unknown enum values
  case __unknown(RawValue)

  public init?(rawValue: RawValue) {
    switch rawValue {
      case "V1_ASK": self = .v1Ask
      case "V1_BID_SHARE": self = .v1BidShare
      case "V1_OFFER": self = .v1Offer
      case "V2_AUCTION": self = .v2Auction
      case "V3_ASK": self = .v3Ask
      default: self = .__unknown(rawValue)
    }
  }

  public var rawValue: RawValue {
    switch self {
      case .v1Ask: return "V1_ASK"
      case .v1BidShare: return "V1_BID_SHARE"
      case .v1Offer: return "V1_OFFER"
      case .v2Auction: return "V2_AUCTION"
      case .v3Ask: return "V3_ASK"
      case .__unknown(let value): return value
    }
  }

  public static func == (lhs: MarketType, rhs: MarketType) -> Bool {
    switch (lhs, rhs) {
      case (.v1Ask, .v1Ask): return true
      case (.v1BidShare, .v1BidShare): return true
      case (.v1Offer, .v1Offer): return true
      case (.v2Auction, .v2Auction): return true
      case (.v3Ask, .v3Ask): return true
      case (.__unknown(let lhsValue), .__unknown(let rhsValue)): return lhsValue == rhsValue
      default: return false
    }
  }

  public static var allCases: [MarketType] {
    return [
      .v1Ask,
      .v1BidShare,
      .v1Offer,
      .v2Auction,
      .v3Ask,
    ]
  }
}

public enum MarketStatus: RawRepresentable, Equatable, Hashable, CaseIterable, Apollo.JSONDecodable, Apollo.JSONEncodable {
  public typealias RawValue = String
  case active
  case canceled
  case completed
  /// Auto generated constant for unknown enum values
  case __unknown(RawValue)

  public init?(rawValue: RawValue) {
    switch rawValue {
      case "ACTIVE": self = .active
      case "CANCELED": self = .canceled
      case "COMPLETED": self = .completed
      default: self = .__unknown(rawValue)
    }
  }

  public var rawValue: RawValue {
    switch self {
      case .active: return "ACTIVE"
      case .canceled: return "CANCELED"
      case .completed: return "COMPLETED"
      case .__unknown(let value): return value
    }
  }

  public static func == (lhs: MarketStatus, rhs: MarketStatus) -> Bool {
    switch (lhs, rhs) {
      case (.active, .active): return true
      case (.canceled, .canceled): return true
      case (.completed, .completed): return true
      case (.__unknown(let lhsValue), .__unknown(let rhsValue)): return lhsValue == rhsValue
      default: return false
    }
  }

  public static var allCases: [MarketStatus] {
    return [
      .active,
      .canceled,
      .completed,
    ]
  }
}

public struct PriceFilter: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  /// - Parameters:
  ///   - currencyAddress
  ///   - minimumChainTokenPrice
  ///   - maximumChainTokenPrice
  ///   - minimumNativePrice
  ///   - maximumNativePrice
  public init(currencyAddress: Swift.Optional<String?> = nil, minimumChainTokenPrice: Swift.Optional<String?> = nil, maximumChainTokenPrice: Swift.Optional<String?> = nil, minimumNativePrice: Swift.Optional<String?> = nil, maximumNativePrice: Swift.Optional<String?> = nil) {
    graphQLMap = ["currencyAddress": currencyAddress, "minimumChainTokenPrice": minimumChainTokenPrice, "maximumChainTokenPrice": maximumChainTokenPrice, "minimumNativePrice": minimumNativePrice, "maximumNativePrice": maximumNativePrice]
  }

  public var currencyAddress: Swift.Optional<String?> {
    get {
      return graphQLMap["currencyAddress"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "currencyAddress")
    }
  }

  public var minimumChainTokenPrice: Swift.Optional<String?> {
    get {
      return graphQLMap["minimumChainTokenPrice"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "minimumChainTokenPrice")
    }
  }

  public var maximumChainTokenPrice: Swift.Optional<String?> {
    get {
      return graphQLMap["maximumChainTokenPrice"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "maximumChainTokenPrice")
    }
  }

  public var minimumNativePrice: Swift.Optional<String?> {
    get {
      return graphQLMap["minimumNativePrice"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "minimumNativePrice")
    }
  }

  public var maximumNativePrice: Swift.Optional<String?> {
    get {
      return graphQLMap["maximumNativePrice"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "maximumNativePrice")
    }
  }
}

public struct MarketSortKeySortInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  /// - Parameters:
  ///   - sortKey
  ///   - sortDirection
  public init(sortKey: MarketSortKey, sortDirection: SortDirection) {
    graphQLMap = ["sortKey": sortKey, "sortDirection": sortDirection]
  }

  public var sortKey: MarketSortKey {
    get {
      return graphQLMap["sortKey"] as! MarketSortKey
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "sortKey")
    }
  }

  public var sortDirection: SortDirection {
    get {
      return graphQLMap["sortDirection"] as! SortDirection
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "sortDirection")
    }
  }
}

public enum MarketSortKey: RawRepresentable, Equatable, Hashable, CaseIterable, Apollo.JSONDecodable, Apollo.JSONEncodable {
  public typealias RawValue = String
  case `none`
  case created
  case chainTokenPrice
  case nativePrice
  case timedSaleEnding
  /// Auto generated constant for unknown enum values
  case __unknown(RawValue)

  public init?(rawValue: RawValue) {
    switch rawValue {
      case "NONE": self = .none
      case "CREATED": self = .created
      case "CHAIN_TOKEN_PRICE": self = .chainTokenPrice
      case "NATIVE_PRICE": self = .nativePrice
      case "TIMED_SALE_ENDING": self = .timedSaleEnding
      default: self = .__unknown(rawValue)
    }
  }

  public var rawValue: RawValue {
    switch self {
      case .none: return "NONE"
      case .created: return "CREATED"
      case .chainTokenPrice: return "CHAIN_TOKEN_PRICE"
      case .nativePrice: return "NATIVE_PRICE"
      case .timedSaleEnding: return "TIMED_SALE_ENDING"
      case .__unknown(let value): return value
    }
  }

  public static func == (lhs: MarketSortKey, rhs: MarketSortKey) -> Bool {
    switch (lhs, rhs) {
      case (.none, .none): return true
      case (.created, .created): return true
      case (.chainTokenPrice, .chainTokenPrice): return true
      case (.nativePrice, .nativePrice): return true
      case (.timedSaleEnding, .timedSaleEnding): return true
      case (.__unknown(let lhsValue), .__unknown(let rhsValue)): return lhsValue == rhsValue
      default: return false
    }
  }

  public static var allCases: [MarketSortKey] {
    return [
      .none,
      .created,
      .chainTokenPrice,
      .nativePrice,
      .timedSaleEnding,
    ]
  }
}

public struct MarketsQueryInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  /// - Parameters:
  ///   - tokens
  ///   - collectionAddresses
  public init(tokens: Swift.Optional<[TokenInput]?> = nil, collectionAddresses: Swift.Optional<[String]?> = nil) {
    graphQLMap = ["tokens": tokens, "collectionAddresses": collectionAddresses]
  }

  public var tokens: Swift.Optional<[TokenInput]?> {
    get {
      return graphQLMap["tokens"] as? Swift.Optional<[TokenInput]?> ?? Swift.Optional<[TokenInput]?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "tokens")
    }
  }

  public var collectionAddresses: Swift.Optional<[String]?> {
    get {
      return graphQLMap["collectionAddresses"] as? Swift.Optional<[String]?> ?? Swift.Optional<[String]?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collectionAddresses")
    }
  }
}

public struct MintsQueryFilter: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  /// - Parameters:
  ///   - priceFilter
  ///   - timeFilter
  public init(priceFilter: Swift.Optional<PriceFilter?> = nil, timeFilter: Swift.Optional<TimeFilter?> = nil) {
    graphQLMap = ["priceFilter": priceFilter, "timeFilter": timeFilter]
  }

  public var priceFilter: Swift.Optional<PriceFilter?> {
    get {
      return graphQLMap["priceFilter"] as? Swift.Optional<PriceFilter?> ?? Swift.Optional<PriceFilter?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "priceFilter")
    }
  }

  public var timeFilter: Swift.Optional<TimeFilter?> {
    get {
      return graphQLMap["timeFilter"] as? Swift.Optional<TimeFilter?> ?? Swift.Optional<TimeFilter?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "timeFilter")
    }
  }
}

public struct MintSortKeySortInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  /// - Parameters:
  ///   - sortKey
  ///   - sortDirection
  public init(sortKey: MintSortKey, sortDirection: SortDirection) {
    graphQLMap = ["sortKey": sortKey, "sortDirection": sortDirection]
  }

  public var sortKey: MintSortKey {
    get {
      return graphQLMap["sortKey"] as! MintSortKey
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "sortKey")
    }
  }

  public var sortDirection: SortDirection {
    get {
      return graphQLMap["sortDirection"] as! SortDirection
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "sortDirection")
    }
  }
}

public enum MintSortKey: RawRepresentable, Equatable, Hashable, CaseIterable, Apollo.JSONDecodable, Apollo.JSONEncodable {
  public typealias RawValue = String
  case `none`
  case time
  case tokenId
  case price
  /// Auto generated constant for unknown enum values
  case __unknown(RawValue)

  public init?(rawValue: RawValue) {
    switch rawValue {
      case "NONE": self = .none
      case "TIME": self = .time
      case "TOKEN_ID": self = .tokenId
      case "PRICE": self = .price
      default: self = .__unknown(rawValue)
    }
  }

  public var rawValue: RawValue {
    switch self {
      case .none: return "NONE"
      case .time: return "TIME"
      case .tokenId: return "TOKEN_ID"
      case .price: return "PRICE"
      case .__unknown(let value): return value
    }
  }

  public static func == (lhs: MintSortKey, rhs: MintSortKey) -> Bool {
    switch (lhs, rhs) {
      case (.none, .none): return true
      case (.time, .time): return true
      case (.tokenId, .tokenId): return true
      case (.price, .price): return true
      case (.__unknown(let lhsValue), .__unknown(let rhsValue)): return lhsValue == rhsValue
      default: return false
    }
  }

  public static var allCases: [MintSortKey] {
    return [
      .none,
      .time,
      .tokenId,
      .price,
    ]
  }
}

public struct MintsQueryInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  /// - Parameters:
  ///   - minterAddresses
  ///   - recipientAddresses
  ///   - collectionAddresses
  ///   - tokens
  public init(minterAddresses: Swift.Optional<[String]?> = nil, recipientAddresses: Swift.Optional<[String]?> = nil, collectionAddresses: Swift.Optional<[String]?> = nil, tokens: Swift.Optional<[TokenInput]?> = nil) {
    graphQLMap = ["minterAddresses": minterAddresses, "recipientAddresses": recipientAddresses, "collectionAddresses": collectionAddresses, "tokens": tokens]
  }

  public var minterAddresses: Swift.Optional<[String]?> {
    get {
      return graphQLMap["minterAddresses"] as? Swift.Optional<[String]?> ?? Swift.Optional<[String]?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "minterAddresses")
    }
  }

  public var recipientAddresses: Swift.Optional<[String]?> {
    get {
      return graphQLMap["recipientAddresses"] as? Swift.Optional<[String]?> ?? Swift.Optional<[String]?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "recipientAddresses")
    }
  }

  public var collectionAddresses: Swift.Optional<[String]?> {
    get {
      return graphQLMap["collectionAddresses"] as? Swift.Optional<[String]?> ?? Swift.Optional<[String]?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collectionAddresses")
    }
  }

  public var tokens: Swift.Optional<[TokenInput]?> {
    get {
      return graphQLMap["tokens"] as? Swift.Optional<[TokenInput]?> ?? Swift.Optional<[TokenInput]?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "tokens")
    }
  }
}

public struct CollectionsQueryInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  /// - Parameters:
  ///   - collectionAddresses
  public init(collectionAddresses: [String]) {
    graphQLMap = ["collectionAddresses": collectionAddresses]
  }

  public var collectionAddresses: [String] {
    get {
      return graphQLMap["collectionAddresses"] as! [String]
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collectionAddresses")
    }
  }
}

public struct CollectionSortKeySortInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  /// - Parameters:
  ///   - sortKey
  ///   - sortDirection
  public init(sortKey: CollectionSortKey, sortDirection: SortDirection) {
    graphQLMap = ["sortKey": sortKey, "sortDirection": sortDirection]
  }

  public var sortKey: CollectionSortKey {
    get {
      return graphQLMap["sortKey"] as! CollectionSortKey
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "sortKey")
    }
  }

  public var sortDirection: SortDirection {
    get {
      return graphQLMap["sortDirection"] as! SortDirection
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "sortDirection")
    }
  }
}

public enum CollectionSortKey: RawRepresentable, Equatable, Hashable, CaseIterable, Apollo.JSONDecodable, Apollo.JSONEncodable {
  public typealias RawValue = String
  case `none`
  case name
  case created
  /// Auto generated constant for unknown enum values
  case __unknown(RawValue)

  public init?(rawValue: RawValue) {
    switch rawValue {
      case "NONE": self = .none
      case "NAME": self = .name
      case "CREATED": self = .created
      default: self = .__unknown(rawValue)
    }
  }

  public var rawValue: RawValue {
    switch self {
      case .none: return "NONE"
      case .name: return "NAME"
      case .created: return "CREATED"
      case .__unknown(let value): return value
    }
  }

  public static func == (lhs: CollectionSortKey, rhs: CollectionSortKey) -> Bool {
    switch (lhs, rhs) {
      case (.none, .none): return true
      case (.name, .name): return true
      case (.created, .created): return true
      case (.__unknown(let lhsValue), .__unknown(let rhsValue)): return lhsValue == rhsValue
      default: return false
    }
  }

  public static var allCases: [CollectionSortKey] {
    return [
      .none,
      .name,
      .created,
    ]
  }
}

public struct SalesQueryInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  /// - Parameters:
  ///   - collectionAddresses
  ///   - sellerAddresses
  ///   - buyerAddresses
  ///   - tokens
  public init(collectionAddresses: Swift.Optional<[String]?> = nil, sellerAddresses: Swift.Optional<[String]?> = nil, buyerAddresses: Swift.Optional<[String]?> = nil, tokens: Swift.Optional<[TokenInput]?> = nil) {
    graphQLMap = ["collectionAddresses": collectionAddresses, "sellerAddresses": sellerAddresses, "buyerAddresses": buyerAddresses, "tokens": tokens]
  }

  public var collectionAddresses: Swift.Optional<[String]?> {
    get {
      return graphQLMap["collectionAddresses"] as? Swift.Optional<[String]?> ?? Swift.Optional<[String]?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collectionAddresses")
    }
  }

  public var sellerAddresses: Swift.Optional<[String]?> {
    get {
      return graphQLMap["sellerAddresses"] as? Swift.Optional<[String]?> ?? Swift.Optional<[String]?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "sellerAddresses")
    }
  }

  public var buyerAddresses: Swift.Optional<[String]?> {
    get {
      return graphQLMap["buyerAddresses"] as? Swift.Optional<[String]?> ?? Swift.Optional<[String]?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "buyerAddresses")
    }
  }

  public var tokens: Swift.Optional<[TokenInput]?> {
    get {
      return graphQLMap["tokens"] as? Swift.Optional<[TokenInput]?> ?? Swift.Optional<[TokenInput]?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "tokens")
    }
  }
}

public struct SalesQueryFilter: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  /// - Parameters:
  ///   - saleTypes
  ///   - priceFilter
  ///   - timeFilter
  public init(saleTypes: Swift.Optional<[SaleType]?> = nil, priceFilter: Swift.Optional<PriceFilter?> = nil, timeFilter: Swift.Optional<TimeFilter?> = nil) {
    graphQLMap = ["saleTypes": saleTypes, "priceFilter": priceFilter, "timeFilter": timeFilter]
  }

  public var saleTypes: Swift.Optional<[SaleType]?> {
    get {
      return graphQLMap["saleTypes"] as? Swift.Optional<[SaleType]?> ?? Swift.Optional<[SaleType]?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "saleTypes")
    }
  }

  public var priceFilter: Swift.Optional<PriceFilter?> {
    get {
      return graphQLMap["priceFilter"] as? Swift.Optional<PriceFilter?> ?? Swift.Optional<PriceFilter?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "priceFilter")
    }
  }

  public var timeFilter: Swift.Optional<TimeFilter?> {
    get {
      return graphQLMap["timeFilter"] as? Swift.Optional<TimeFilter?> ?? Swift.Optional<TimeFilter?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "timeFilter")
    }
  }
}

public enum SaleType: RawRepresentable, Equatable, Hashable, CaseIterable, Apollo.JSONDecodable, Apollo.JSONEncodable {
  public typealias RawValue = String
  case foundationSale
  case nounsAuctionSale
  case cryptopunksSale
  case looksRareSale
  case openseaSingleSale
  case openseaBundleSale
  case raribleSale
  case superrareSale
  case zeroxSale
  case zoraV2AuctionSale
  case zoraV3AskSale
  /// Auto generated constant for unknown enum values
  case __unknown(RawValue)

  public init?(rawValue: RawValue) {
    switch rawValue {
      case "FOUNDATION_SALE": self = .foundationSale
      case "NOUNS_AUCTION_SALE": self = .nounsAuctionSale
      case "CRYPTOPUNKS_SALE": self = .cryptopunksSale
      case "LOOKS_RARE_SALE": self = .looksRareSale
      case "OPENSEA_SINGLE_SALE": self = .openseaSingleSale
      case "OPENSEA_BUNDLE_SALE": self = .openseaBundleSale
      case "RARIBLE_SALE": self = .raribleSale
      case "SUPERRARE_SALE": self = .superrareSale
      case "ZEROX_SALE": self = .zeroxSale
      case "ZORA_V2_AUCTION_SALE": self = .zoraV2AuctionSale
      case "ZORA_V3_ASK_SALE": self = .zoraV3AskSale
      default: self = .__unknown(rawValue)
    }
  }

  public var rawValue: RawValue {
    switch self {
      case .foundationSale: return "FOUNDATION_SALE"
      case .nounsAuctionSale: return "NOUNS_AUCTION_SALE"
      case .cryptopunksSale: return "CRYPTOPUNKS_SALE"
      case .looksRareSale: return "LOOKS_RARE_SALE"
      case .openseaSingleSale: return "OPENSEA_SINGLE_SALE"
      case .openseaBundleSale: return "OPENSEA_BUNDLE_SALE"
      case .raribleSale: return "RARIBLE_SALE"
      case .superrareSale: return "SUPERRARE_SALE"
      case .zeroxSale: return "ZEROX_SALE"
      case .zoraV2AuctionSale: return "ZORA_V2_AUCTION_SALE"
      case .zoraV3AskSale: return "ZORA_V3_ASK_SALE"
      case .__unknown(let value): return value
    }
  }

  public static func == (lhs: SaleType, rhs: SaleType) -> Bool {
    switch (lhs, rhs) {
      case (.foundationSale, .foundationSale): return true
      case (.nounsAuctionSale, .nounsAuctionSale): return true
      case (.cryptopunksSale, .cryptopunksSale): return true
      case (.looksRareSale, .looksRareSale): return true
      case (.openseaSingleSale, .openseaSingleSale): return true
      case (.openseaBundleSale, .openseaBundleSale): return true
      case (.raribleSale, .raribleSale): return true
      case (.superrareSale, .superrareSale): return true
      case (.zeroxSale, .zeroxSale): return true
      case (.zoraV2AuctionSale, .zoraV2AuctionSale): return true
      case (.zoraV3AskSale, .zoraV3AskSale): return true
      case (.__unknown(let lhsValue), .__unknown(let rhsValue)): return lhsValue == rhsValue
      default: return false
    }
  }

  public static var allCases: [SaleType] {
    return [
      .foundationSale,
      .nounsAuctionSale,
      .cryptopunksSale,
      .looksRareSale,
      .openseaSingleSale,
      .openseaBundleSale,
      .raribleSale,
      .superrareSale,
      .zeroxSale,
      .zoraV2AuctionSale,
      .zoraV3AskSale,
    ]
  }
}

public struct SaleSortKeySortInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  /// - Parameters:
  ///   - sortKey
  ///   - sortDirection
  public init(sortKey: SaleSortKey, sortDirection: SortDirection) {
    graphQLMap = ["sortKey": sortKey, "sortDirection": sortDirection]
  }

  public var sortKey: SaleSortKey {
    get {
      return graphQLMap["sortKey"] as! SaleSortKey
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "sortKey")
    }
  }

  public var sortDirection: SortDirection {
    get {
      return graphQLMap["sortDirection"] as! SortDirection
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "sortDirection")
    }
  }
}

public enum SaleSortKey: RawRepresentable, Equatable, Hashable, CaseIterable, Apollo.JSONDecodable, Apollo.JSONEncodable {
  public typealias RawValue = String
  case `none`
  case chainTokenPrice
  case nativePrice
  case time
  /// Auto generated constant for unknown enum values
  case __unknown(RawValue)

  public init?(rawValue: RawValue) {
    switch rawValue {
      case "NONE": self = .none
      case "CHAIN_TOKEN_PRICE": self = .chainTokenPrice
      case "NATIVE_PRICE": self = .nativePrice
      case "TIME": self = .time
      default: self = .__unknown(rawValue)
    }
  }

  public var rawValue: RawValue {
    switch self {
      case .none: return "NONE"
      case .chainTokenPrice: return "CHAIN_TOKEN_PRICE"
      case .nativePrice: return "NATIVE_PRICE"
      case .time: return "TIME"
      case .__unknown(let value): return value
    }
  }

  public static func == (lhs: SaleSortKey, rhs: SaleSortKey) -> Bool {
    switch (lhs, rhs) {
      case (.none, .none): return true
      case (.chainTokenPrice, .chainTokenPrice): return true
      case (.nativePrice, .nativePrice): return true
      case (.time, .time): return true
      case (.__unknown(let lhsValue), .__unknown(let rhsValue)): return lhsValue == rhsValue
      default: return false
    }
  }

  public static var allCases: [SaleSortKey] {
    return [
      .none,
      .chainTokenPrice,
      .nativePrice,
      .time,
    ]
  }
}

public struct TokensQueryInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  /// - Parameters:
  ///   - collectionAddresses
  ///   - ownerAddresses
  ///   - tokens
  public init(collectionAddresses: Swift.Optional<[String]?> = nil, ownerAddresses: Swift.Optional<[String]?> = nil, tokens: Swift.Optional<[TokenInput]?> = nil) {
    graphQLMap = ["collectionAddresses": collectionAddresses, "ownerAddresses": ownerAddresses, "tokens": tokens]
  }

  public var collectionAddresses: Swift.Optional<[String]?> {
    get {
      return graphQLMap["collectionAddresses"] as? Swift.Optional<[String]?> ?? Swift.Optional<[String]?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collectionAddresses")
    }
  }

  public var ownerAddresses: Swift.Optional<[String]?> {
    get {
      return graphQLMap["ownerAddresses"] as? Swift.Optional<[String]?> ?? Swift.Optional<[String]?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "ownerAddresses")
    }
  }

  public var tokens: Swift.Optional<[TokenInput]?> {
    get {
      return graphQLMap["tokens"] as? Swift.Optional<[TokenInput]?> ?? Swift.Optional<[TokenInput]?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "tokens")
    }
  }
}

public struct TokensQueryFilter: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  /// - Parameters:
  ///   - attributeFilters
  ///   - mediaType
  ///   - marketFilters
  ///   - priceFilter
  public init(attributeFilters: Swift.Optional<[AttributeFilter]?> = nil, mediaType: Swift.Optional<MediaType?> = nil, marketFilters: Swift.Optional<[MarketTypeFilter]?> = nil, priceFilter: Swift.Optional<PriceFilter?> = nil) {
    graphQLMap = ["attributeFilters": attributeFilters, "mediaType": mediaType, "marketFilters": marketFilters, "priceFilter": priceFilter]
  }

  public var attributeFilters: Swift.Optional<[AttributeFilter]?> {
    get {
      return graphQLMap["attributeFilters"] as? Swift.Optional<[AttributeFilter]?> ?? Swift.Optional<[AttributeFilter]?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "attributeFilters")
    }
  }

  public var mediaType: Swift.Optional<MediaType?> {
    get {
      return graphQLMap["mediaType"] as? Swift.Optional<MediaType?> ?? Swift.Optional<MediaType?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "mediaType")
    }
  }

  public var marketFilters: Swift.Optional<[MarketTypeFilter]?> {
    get {
      return graphQLMap["marketFilters"] as? Swift.Optional<[MarketTypeFilter]?> ?? Swift.Optional<[MarketTypeFilter]?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "marketFilters")
    }
  }

  public var priceFilter: Swift.Optional<PriceFilter?> {
    get {
      return graphQLMap["priceFilter"] as? Swift.Optional<PriceFilter?> ?? Swift.Optional<PriceFilter?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "priceFilter")
    }
  }
}

public struct AttributeFilter: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  /// - Parameters:
  ///   - traitType
  ///   - value
  public init(traitType: String, value: Swift.Optional<String?> = nil) {
    graphQLMap = ["traitType": traitType, "value": value]
  }

  public var traitType: String {
    get {
      return graphQLMap["traitType"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "traitType")
    }
  }

  public var value: Swift.Optional<String?> {
    get {
      return graphQLMap["value"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "value")
    }
  }
}

public enum MediaType: RawRepresentable, Equatable, Hashable, CaseIterable, Apollo.JSONDecodable, Apollo.JSONEncodable {
  public typealias RawValue = String
  case image
  case gif
  case video
  case audio
  case text
  case html
  /// Auto generated constant for unknown enum values
  case __unknown(RawValue)

  public init?(rawValue: RawValue) {
    switch rawValue {
      case "IMAGE": self = .image
      case "GIF": self = .gif
      case "VIDEO": self = .video
      case "AUDIO": self = .audio
      case "TEXT": self = .text
      case "HTML": self = .html
      default: self = .__unknown(rawValue)
    }
  }

  public var rawValue: RawValue {
    switch self {
      case .image: return "IMAGE"
      case .gif: return "GIF"
      case .video: return "VIDEO"
      case .audio: return "AUDIO"
      case .text: return "TEXT"
      case .html: return "HTML"
      case .__unknown(let value): return value
    }
  }

  public static func == (lhs: MediaType, rhs: MediaType) -> Bool {
    switch (lhs, rhs) {
      case (.image, .image): return true
      case (.gif, .gif): return true
      case (.video, .video): return true
      case (.audio, .audio): return true
      case (.text, .text): return true
      case (.html, .html): return true
      case (.__unknown(let lhsValue), .__unknown(let rhsValue)): return lhsValue == rhsValue
      default: return false
    }
  }

  public static var allCases: [MediaType] {
    return [
      .image,
      .gif,
      .video,
      .audio,
      .text,
      .html,
    ]
  }
}

public struct TokenSortInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  /// - Parameters:
  ///   - sortKey
  ///   - sortDirection
  ///   - sortAxis
  public init(sortKey: TokenSortKey, sortDirection: SortDirection, sortAxis: Swift.Optional<MarketCategory?> = nil) {
    graphQLMap = ["sortKey": sortKey, "sortDirection": sortDirection, "sortAxis": sortAxis]
  }

  public var sortKey: TokenSortKey {
    get {
      return graphQLMap["sortKey"] as! TokenSortKey
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "sortKey")
    }
  }

  public var sortDirection: SortDirection {
    get {
      return graphQLMap["sortDirection"] as! SortDirection
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "sortDirection")
    }
  }

  public var sortAxis: Swift.Optional<MarketCategory?> {
    get {
      return graphQLMap["sortAxis"] as? Swift.Optional<MarketCategory?> ?? Swift.Optional<MarketCategory?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "sortAxis")
    }
  }
}

public enum TokenSortKey: RawRepresentable, Equatable, Hashable, CaseIterable, Apollo.JSONDecodable, Apollo.JSONEncodable {
  public typealias RawValue = String
  case `none`
  case minted
  case tokenId
  case transferred
  case chainTokenPrice
  case nativePrice
  case timedSaleEnding
  /// Auto generated constant for unknown enum values
  case __unknown(RawValue)

  public init?(rawValue: RawValue) {
    switch rawValue {
      case "NONE": self = .none
      case "MINTED": self = .minted
      case "TOKEN_ID": self = .tokenId
      case "TRANSFERRED": self = .transferred
      case "CHAIN_TOKEN_PRICE": self = .chainTokenPrice
      case "NATIVE_PRICE": self = .nativePrice
      case "TIMED_SALE_ENDING": self = .timedSaleEnding
      default: self = .__unknown(rawValue)
    }
  }

  public var rawValue: RawValue {
    switch self {
      case .none: return "NONE"
      case .minted: return "MINTED"
      case .tokenId: return "TOKEN_ID"
      case .transferred: return "TRANSFERRED"
      case .chainTokenPrice: return "CHAIN_TOKEN_PRICE"
      case .nativePrice: return "NATIVE_PRICE"
      case .timedSaleEnding: return "TIMED_SALE_ENDING"
      case .__unknown(let value): return value
    }
  }

  public static func == (lhs: TokenSortKey, rhs: TokenSortKey) -> Bool {
    switch (lhs, rhs) {
      case (.none, .none): return true
      case (.minted, .minted): return true
      case (.tokenId, .tokenId): return true
      case (.transferred, .transferred): return true
      case (.chainTokenPrice, .chainTokenPrice): return true
      case (.nativePrice, .nativePrice): return true
      case (.timedSaleEnding, .timedSaleEnding): return true
      case (.__unknown(let lhsValue), .__unknown(let rhsValue)): return lhsValue == rhsValue
      default: return false
    }
  }

  public static var allCases: [TokenSortKey] {
    return [
      .none,
      .minted,
      .tokenId,
      .transferred,
      .chainTokenPrice,
      .nativePrice,
      .timedSaleEnding,
    ]
  }
}

public enum MarketCategory: RawRepresentable, Equatable, Hashable, CaseIterable, Apollo.JSONDecodable, Apollo.JSONEncodable {
  public typealias RawValue = String
  case ask
  case offer
  case auction
  /// Auto generated constant for unknown enum values
  case __unknown(RawValue)

  public init?(rawValue: RawValue) {
    switch rawValue {
      case "ASK": self = .ask
      case "OFFER": self = .offer
      case "AUCTION": self = .auction
      default: self = .__unknown(rawValue)
    }
  }

  public var rawValue: RawValue {
    switch self {
      case .ask: return "ASK"
      case .offer: return "OFFER"
      case .auction: return "AUCTION"
      case .__unknown(let value): return value
    }
  }

  public static func == (lhs: MarketCategory, rhs: MarketCategory) -> Bool {
    switch (lhs, rhs) {
      case (.ask, .ask): return true
      case (.offer, .offer): return true
      case (.auction, .auction): return true
      case (.__unknown(let lhsValue), .__unknown(let rhsValue)): return lhsValue == rhsValue
      default: return false
    }
  }

  public static var allCases: [MarketCategory] {
    return [
      .ask,
      .offer,
      .auction,
    ]
  }
}

public struct AggregateAttributesQueryInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  /// - Parameters:
  ///   - collectionAddresses
  ///   - ownerAddresses
  ///   - tokens
  public init(collectionAddresses: Swift.Optional<[String]?> = nil, ownerAddresses: Swift.Optional<[String]?> = nil, tokens: Swift.Optional<[TokenInput]?> = nil) {
    graphQLMap = ["collectionAddresses": collectionAddresses, "ownerAddresses": ownerAddresses, "tokens": tokens]
  }

  public var collectionAddresses: Swift.Optional<[String]?> {
    get {
      return graphQLMap["collectionAddresses"] as? Swift.Optional<[String]?> ?? Swift.Optional<[String]?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collectionAddresses")
    }
  }

  public var ownerAddresses: Swift.Optional<[String]?> {
    get {
      return graphQLMap["ownerAddresses"] as? Swift.Optional<[String]?> ?? Swift.Optional<[String]?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "ownerAddresses")
    }
  }

  public var tokens: Swift.Optional<[TokenInput]?> {
    get {
      return graphQLMap["tokens"] as? Swift.Optional<[TokenInput]?> ?? Swift.Optional<[TokenInput]?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "tokens")
    }
  }
}

public struct CollectionAddressAndAttributesInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  /// - Parameters:
  ///   - collectionAddresses
  ///   - attributes
  public init(collectionAddresses: Swift.Optional<[String]?> = nil, attributes: Swift.Optional<[AttributeFilter]?> = nil) {
    graphQLMap = ["collectionAddresses": collectionAddresses, "attributes": attributes]
  }

  public var collectionAddresses: Swift.Optional<[String]?> {
    get {
      return graphQLMap["collectionAddresses"] as? Swift.Optional<[String]?> ?? Swift.Optional<[String]?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collectionAddresses")
    }
  }

  public var attributes: Swift.Optional<[AttributeFilter]?> {
    get {
      return graphQLMap["attributes"] as? Swift.Optional<[AttributeFilter]?> ?? Swift.Optional<[AttributeFilter]?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "attributes")
    }
  }
}

public struct CollectionAddressOwnerAddressAttributesInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  /// - Parameters:
  ///   - collectionAddresses
  ///   - ownerAddresses
  ///   - attributes
  public init(collectionAddresses: Swift.Optional<[String]?> = nil, ownerAddresses: Swift.Optional<[String]?> = nil, attributes: Swift.Optional<[AttributeFilter]?> = nil) {
    graphQLMap = ["collectionAddresses": collectionAddresses, "ownerAddresses": ownerAddresses, "attributes": attributes]
  }

  public var collectionAddresses: Swift.Optional<[String]?> {
    get {
      return graphQLMap["collectionAddresses"] as? Swift.Optional<[String]?> ?? Swift.Optional<[String]?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collectionAddresses")
    }
  }

  public var ownerAddresses: Swift.Optional<[String]?> {
    get {
      return graphQLMap["ownerAddresses"] as? Swift.Optional<[String]?> ?? Swift.Optional<[String]?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "ownerAddresses")
    }
  }

  public var attributes: Swift.Optional<[AttributeFilter]?> {
    get {
      return graphQLMap["attributes"] as? Swift.Optional<[AttributeFilter]?> ?? Swift.Optional<[AttributeFilter]?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "attributes")
    }
  }
}

public struct SearchPaginationInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  /// - Parameters:
  ///   - limit
  ///   - after
  public init(limit: Int, after: Swift.Optional<String?> = nil) {
    graphQLMap = ["limit": limit, "after": after]
  }

  public var limit: Int {
    get {
      return graphQLMap["limit"] as! Int
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "limit")
    }
  }

  public var after: Swift.Optional<String?> {
    get {
      return graphQLMap["after"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "after")
    }
  }
}

public struct SearchQueryInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  /// - Parameters:
  ///   - text
  public init(text: String) {
    graphQLMap = ["text": text]
  }

  public var text: String {
    get {
      return graphQLMap["text"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "text")
    }
  }
}

public struct SearchFilter: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  /// - Parameters:
  ///   - collectionAddresses
  ///   - entityType
  public init(collectionAddresses: Swift.Optional<[String]?> = nil, entityType: Swift.Optional<SearchableEntity?> = nil) {
    graphQLMap = ["collectionAddresses": collectionAddresses, "entityType": entityType]
  }

  public var collectionAddresses: Swift.Optional<[String]?> {
    get {
      return graphQLMap["collectionAddresses"] as? Swift.Optional<[String]?> ?? Swift.Optional<[String]?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collectionAddresses")
    }
  }

  public var entityType: Swift.Optional<SearchableEntity?> {
    get {
      return graphQLMap["entityType"] as? Swift.Optional<SearchableEntity?> ?? Swift.Optional<SearchableEntity?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "entityType")
    }
  }
}

public enum SearchableEntity: RawRepresentable, Equatable, Hashable, CaseIterable, Apollo.JSONDecodable, Apollo.JSONEncodable {
  public typealias RawValue = String
  case token
  case collection
  /// Auto generated constant for unknown enum values
  case __unknown(RawValue)

  public init?(rawValue: RawValue) {
    switch rawValue {
      case "TOKEN": self = .token
      case "COLLECTION": self = .collection
      default: self = .__unknown(rawValue)
    }
  }

  public var rawValue: RawValue {
    switch self {
      case .token: return "TOKEN"
      case .collection: return "COLLECTION"
      case .__unknown(let value): return value
    }
  }

  public static func == (lhs: SearchableEntity, rhs: SearchableEntity) -> Bool {
    switch (lhs, rhs) {
      case (.token, .token): return true
      case (.collection, .collection): return true
      case (.__unknown(let lhsValue), .__unknown(let rhsValue)): return lhsValue == rhsValue
      default: return false
    }
  }

  public static var allCases: [SearchableEntity] {
    return [
      .token,
      .collection,
    ]
  }
}

public enum V2AuctionStatus: RawRepresentable, Equatable, Hashable, CaseIterable, Apollo.JSONDecodable, Apollo.JSONEncodable {
  public typealias RawValue = String
  case active
  case canceled
  case completed
  case expired
  /// Auto generated constant for unknown enum values
  case __unknown(RawValue)

  public init?(rawValue: RawValue) {
    switch rawValue {
      case "ACTIVE": self = .active
      case "CANCELED": self = .canceled
      case "COMPLETED": self = .completed
      case "EXPIRED": self = .expired
      default: self = .__unknown(rawValue)
    }
  }

  public var rawValue: RawValue {
    switch self {
      case .active: return "ACTIVE"
      case .canceled: return "CANCELED"
      case .completed: return "COMPLETED"
      case .expired: return "EXPIRED"
      case .__unknown(let value): return value
    }
  }

  public static func == (lhs: V2AuctionStatus, rhs: V2AuctionStatus) -> Bool {
    switch (lhs, rhs) {
      case (.active, .active): return true
      case (.canceled, .canceled): return true
      case (.completed, .completed): return true
      case (.expired, .expired): return true
      case (.__unknown(let lhsValue), .__unknown(let rhsValue)): return lhsValue == rhsValue
      default: return false
    }
  }

  public static var allCases: [V2AuctionStatus] {
    return [
      .active,
      .canceled,
      .completed,
      .expired,
    ]
  }
}

public enum V3AskStatus: RawRepresentable, Equatable, Hashable, CaseIterable, Apollo.JSONDecodable, Apollo.JSONEncodable {
  public typealias RawValue = String
  case active
  case canceled
  case completed
  /// Auto generated constant for unknown enum values
  case __unknown(RawValue)

  public init?(rawValue: RawValue) {
    switch rawValue {
      case "ACTIVE": self = .active
      case "CANCELED": self = .canceled
      case "COMPLETED": self = .completed
      default: self = .__unknown(rawValue)
    }
  }

  public var rawValue: RawValue {
    switch self {
      case .active: return "ACTIVE"
      case .canceled: return "CANCELED"
      case .completed: return "COMPLETED"
      case .__unknown(let value): return value
    }
  }

  public static func == (lhs: V3AskStatus, rhs: V3AskStatus) -> Bool {
    switch (lhs, rhs) {
      case (.active, .active): return true
      case (.canceled, .canceled): return true
      case (.completed, .completed): return true
      case (.__unknown(let lhsValue), .__unknown(let rhsValue)): return lhsValue == rhsValue
      default: return false
    }
  }

  public static var allCases: [V3AskStatus] {
    return [
      .active,
      .canceled,
      .completed,
    ]
  }
}

public enum V1MarketEntityStatus: RawRepresentable, Equatable, Hashable, CaseIterable, Apollo.JSONDecodable, Apollo.JSONEncodable {
  public typealias RawValue = String
  case active
  case canceled
  case completed
  /// Auto generated constant for unknown enum values
  case __unknown(RawValue)

  public init?(rawValue: RawValue) {
    switch rawValue {
      case "ACTIVE": self = .active
      case "CANCELED": self = .canceled
      case "COMPLETED": self = .completed
      default: self = .__unknown(rawValue)
    }
  }

  public var rawValue: RawValue {
    switch self {
      case .active: return "ACTIVE"
      case .canceled: return "CANCELED"
      case .completed: return "COMPLETED"
      case .__unknown(let value): return value
    }
  }

  public static func == (lhs: V1MarketEntityStatus, rhs: V1MarketEntityStatus) -> Bool {
    switch (lhs, rhs) {
      case (.active, .active): return true
      case (.canceled, .canceled): return true
      case (.completed, .completed): return true
      case (.__unknown(let lhsValue), .__unknown(let rhsValue)): return lhsValue == rhsValue
      default: return false
    }
  }

  public static var allCases: [V1MarketEntityStatus] {
    return [
      .active,
      .canceled,
      .completed,
    ]
  }
}

public enum V1MarketEventType: RawRepresentable, Equatable, Hashable, CaseIterable, Apollo.JSONDecodable, Apollo.JSONEncodable {
  public typealias RawValue = String
  case v1MarketBidCreated
  case v1MarketBidRemoved
  case v1MarketBidFinalized
  case v1MarketAskCreated
  case v1MarketAskRemoved
  case v1MarketBidShareUpdated
  /// Auto generated constant for unknown enum values
  case __unknown(RawValue)

  public init?(rawValue: RawValue) {
    switch rawValue {
      case "V1_MARKET_BID_CREATED": self = .v1MarketBidCreated
      case "V1_MARKET_BID_REMOVED": self = .v1MarketBidRemoved
      case "V1_MARKET_BID_FINALIZED": self = .v1MarketBidFinalized
      case "V1_MARKET_ASK_CREATED": self = .v1MarketAskCreated
      case "V1_MARKET_ASK_REMOVED": self = .v1MarketAskRemoved
      case "V1_MARKET_BID_SHARE_UPDATED": self = .v1MarketBidShareUpdated
      default: self = .__unknown(rawValue)
    }
  }

  public var rawValue: RawValue {
    switch self {
      case .v1MarketBidCreated: return "V1_MARKET_BID_CREATED"
      case .v1MarketBidRemoved: return "V1_MARKET_BID_REMOVED"
      case .v1MarketBidFinalized: return "V1_MARKET_BID_FINALIZED"
      case .v1MarketAskCreated: return "V1_MARKET_ASK_CREATED"
      case .v1MarketAskRemoved: return "V1_MARKET_ASK_REMOVED"
      case .v1MarketBidShareUpdated: return "V1_MARKET_BID_SHARE_UPDATED"
      case .__unknown(let value): return value
    }
  }

  public static func == (lhs: V1MarketEventType, rhs: V1MarketEventType) -> Bool {
    switch (lhs, rhs) {
      case (.v1MarketBidCreated, .v1MarketBidCreated): return true
      case (.v1MarketBidRemoved, .v1MarketBidRemoved): return true
      case (.v1MarketBidFinalized, .v1MarketBidFinalized): return true
      case (.v1MarketAskCreated, .v1MarketAskCreated): return true
      case (.v1MarketAskRemoved, .v1MarketAskRemoved): return true
      case (.v1MarketBidShareUpdated, .v1MarketBidShareUpdated): return true
      case (.__unknown(let lhsValue), .__unknown(let rhsValue)): return lhsValue == rhsValue
      default: return false
    }
  }

  public static var allCases: [V1MarketEventType] {
    return [
      .v1MarketBidCreated,
      .v1MarketBidRemoved,
      .v1MarketBidFinalized,
      .v1MarketAskCreated,
      .v1MarketAskRemoved,
      .v1MarketBidShareUpdated,
    ]
  }
}

public enum V2AuctionEventType: RawRepresentable, Equatable, Hashable, CaseIterable, Apollo.JSONDecodable, Apollo.JSONEncodable {
  public typealias RawValue = String
  case v2AuctionCreated
  case v2AuctionCanceled
  case v2AuctionReservePriceUpdated
  case v2AuctionBid
  case v2AuctionDurationExtended
  case v2AuctionApprovalUpdated
  case v2AuctionEnded
  /// Auto generated constant for unknown enum values
  case __unknown(RawValue)

  public init?(rawValue: RawValue) {
    switch rawValue {
      case "V2_AUCTION_CREATED": self = .v2AuctionCreated
      case "V2_AUCTION_CANCELED": self = .v2AuctionCanceled
      case "V2_AUCTION_RESERVE_PRICE_UPDATED": self = .v2AuctionReservePriceUpdated
      case "V2_AUCTION_BID": self = .v2AuctionBid
      case "V2_AUCTION_DURATION_EXTENDED": self = .v2AuctionDurationExtended
      case "V2_AUCTION_APPROVAL_UPDATED": self = .v2AuctionApprovalUpdated
      case "V2_AUCTION_ENDED": self = .v2AuctionEnded
      default: self = .__unknown(rawValue)
    }
  }

  public var rawValue: RawValue {
    switch self {
      case .v2AuctionCreated: return "V2_AUCTION_CREATED"
      case .v2AuctionCanceled: return "V2_AUCTION_CANCELED"
      case .v2AuctionReservePriceUpdated: return "V2_AUCTION_RESERVE_PRICE_UPDATED"
      case .v2AuctionBid: return "V2_AUCTION_BID"
      case .v2AuctionDurationExtended: return "V2_AUCTION_DURATION_EXTENDED"
      case .v2AuctionApprovalUpdated: return "V2_AUCTION_APPROVAL_UPDATED"
      case .v2AuctionEnded: return "V2_AUCTION_ENDED"
      case .__unknown(let value): return value
    }
  }

  public static func == (lhs: V2AuctionEventType, rhs: V2AuctionEventType) -> Bool {
    switch (lhs, rhs) {
      case (.v2AuctionCreated, .v2AuctionCreated): return true
      case (.v2AuctionCanceled, .v2AuctionCanceled): return true
      case (.v2AuctionReservePriceUpdated, .v2AuctionReservePriceUpdated): return true
      case (.v2AuctionBid, .v2AuctionBid): return true
      case (.v2AuctionDurationExtended, .v2AuctionDurationExtended): return true
      case (.v2AuctionApprovalUpdated, .v2AuctionApprovalUpdated): return true
      case (.v2AuctionEnded, .v2AuctionEnded): return true
      case (.__unknown(let lhsValue), .__unknown(let rhsValue)): return lhsValue == rhsValue
      default: return false
    }
  }

  public static var allCases: [V2AuctionEventType] {
    return [
      .v2AuctionCreated,
      .v2AuctionCanceled,
      .v2AuctionReservePriceUpdated,
      .v2AuctionBid,
      .v2AuctionDurationExtended,
      .v2AuctionApprovalUpdated,
      .v2AuctionEnded,
    ]
  }
}

public enum V3AskEventType: RawRepresentable, Equatable, Hashable, CaseIterable, Apollo.JSONDecodable, Apollo.JSONEncodable {
  public typealias RawValue = String
  case v3AskCreated
  case v3AskCanceled
  case v3AskPriceUpdated
  case v3AskFilled
  /// Auto generated constant for unknown enum values
  case __unknown(RawValue)

  public init?(rawValue: RawValue) {
    switch rawValue {
      case "V3_ASK_CREATED": self = .v3AskCreated
      case "V3_ASK_CANCELED": self = .v3AskCanceled
      case "V3_ASK_PRICE_UPDATED": self = .v3AskPriceUpdated
      case "V3_ASK_FILLED": self = .v3AskFilled
      default: self = .__unknown(rawValue)
    }
  }

  public var rawValue: RawValue {
    switch self {
      case .v3AskCreated: return "V3_ASK_CREATED"
      case .v3AskCanceled: return "V3_ASK_CANCELED"
      case .v3AskPriceUpdated: return "V3_ASK_PRICE_UPDATED"
      case .v3AskFilled: return "V3_ASK_FILLED"
      case .__unknown(let value): return value
    }
  }

  public static func == (lhs: V3AskEventType, rhs: V3AskEventType) -> Bool {
    switch (lhs, rhs) {
      case (.v3AskCreated, .v3AskCreated): return true
      case (.v3AskCanceled, .v3AskCanceled): return true
      case (.v3AskPriceUpdated, .v3AskPriceUpdated): return true
      case (.v3AskFilled, .v3AskFilled): return true
      case (.__unknown(let lhsValue), .__unknown(let rhsValue)): return lhsValue == rhsValue
      default: return false
    }
  }

  public static var allCases: [V3AskEventType] {
    return [
      .v3AskCreated,
      .v3AskCanceled,
      .v3AskPriceUpdated,
      .v3AskFilled,
    ]
  }
}

public final class EventsQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    query events($networks: [NetworkInput!]!, $filter: EventsQueryFilter, $pagination: PaginationInput!, $sort: EventSortKeySortInput!, $where: EventsQueryInput!) {
      events(
        networks: $networks
        filter: $filter
        pagination: $pagination
        sort: $sort
        where: $where
      ) {
        __typename
        pageInfo {
          __typename
          endCursor
          hasNextPage
          limit
        }
        nodes {
          __typename
          ...EventInfo
        }
      }
    }
    """

  public let operationName: String = "events"

  public let operationIdentifier: String? = "ace7df344d28558c1be62a0a2620bc4ed3f7062135fd89cf6c175bc5f684f840"

  public var queryDocument: String {
    var document: String = operationDefinition
    document.append("\n" + EventInfo.fragmentDefinition)
    document.append("\n" + TransactionDetails.fragmentDefinition)
    document.append("\n" + PriceSummary.fragmentDefinition)
    document.append("\n" + V1MarketEventPropertiesInfo.fragmentDefinition)
    document.append("\n" + V2AuctionEventPropertiesInfo.fragmentDefinition)
    document.append("\n" + V3AskEventPropertiesInfo.fragmentDefinition)
    return document
  }

  public var networks: [NetworkInput]
  public var filter: EventsQueryFilter?
  public var pagination: PaginationInput
  public var sort: EventSortKeySortInput
  public var `where`: EventsQueryInput

  public init(networks: [NetworkInput], filter: EventsQueryFilter? = nil, pagination: PaginationInput, sort: EventSortKeySortInput, `where`: EventsQueryInput) {
    self.networks = networks
    self.filter = filter
    self.pagination = pagination
    self.sort = sort
    self.`where` = `where`
  }

  public var variables: GraphQLMap? {
    return ["networks": networks, "filter": filter, "pagination": pagination, "sort": sort, "where": `where`]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["RootQuery"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("events", arguments: ["networks": GraphQLVariable("networks"), "filter": GraphQLVariable("filter"), "pagination": GraphQLVariable("pagination"), "sort": GraphQLVariable("sort"), "where": GraphQLVariable("where")], type: .nonNull(.object(Event.selections))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(events: Event) {
      self.init(unsafeResultMap: ["__typename": "RootQuery", "events": events.resultMap])
    }

    /// Contract event information, e.g. Sales, Transfers, Mints, etc.
    public var events: Event {
      get {
        return Event(unsafeResultMap: resultMap["events"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "events")
      }
    }

    public struct Event: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["EventConnection"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("pageInfo", type: .nonNull(.object(PageInfo.selections))),
          GraphQLField("nodes", type: .nonNull(.list(.nonNull(.object(Node.selections))))),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(pageInfo: PageInfo, nodes: [Node]) {
        self.init(unsafeResultMap: ["__typename": "EventConnection", "pageInfo": pageInfo.resultMap, "nodes": nodes.map { (value: Node) -> ResultMap in value.resultMap }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var pageInfo: PageInfo {
        get {
          return PageInfo(unsafeResultMap: resultMap["pageInfo"]! as! ResultMap)
        }
        set {
          resultMap.updateValue(newValue.resultMap, forKey: "pageInfo")
        }
      }

      public var nodes: [Node] {
        get {
          return (resultMap["nodes"] as! [ResultMap]).map { (value: ResultMap) -> Node in Node(unsafeResultMap: value) }
        }
        set {
          resultMap.updateValue(newValue.map { (value: Node) -> ResultMap in value.resultMap }, forKey: "nodes")
        }
      }

      public struct PageInfo: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["PageInfo"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("endCursor", type: .scalar(String.self)),
            GraphQLField("hasNextPage", type: .nonNull(.scalar(Bool.self))),
            GraphQLField("limit", type: .nonNull(.scalar(Int.self))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(endCursor: String? = nil, hasNextPage: Bool, limit: Int) {
          self.init(unsafeResultMap: ["__typename": "PageInfo", "endCursor": endCursor, "hasNextPage": hasNextPage, "limit": limit])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var endCursor: String? {
          get {
            return resultMap["endCursor"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "endCursor")
          }
        }

        public var hasNextPage: Bool {
          get {
            return resultMap["hasNextPage"]! as! Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "hasNextPage")
          }
        }

        public var limit: Int {
          get {
            return resultMap["limit"]! as! Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "limit")
          }
        }
      }

      public struct Node: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["Event"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("transactionInfo", type: .nonNull(.object(TransactionInfo.selections))),
            GraphQLField("eventType", type: .nonNull(.scalar(EventType.self))),
            GraphQLField("collectionAddress", type: .nonNull(.scalar(String.self))),
            GraphQLField("tokenId", type: .scalar(String.self)),
            GraphQLField("properties", type: .nonNull(.object(Property.selections))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(transactionInfo: TransactionInfo, eventType: EventType, collectionAddress: String, tokenId: String? = nil, properties: Property) {
          self.init(unsafeResultMap: ["__typename": "Event", "transactionInfo": transactionInfo.resultMap, "eventType": eventType, "collectionAddress": collectionAddress, "tokenId": tokenId, "properties": properties.resultMap])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var transactionInfo: TransactionInfo {
          get {
            return TransactionInfo(unsafeResultMap: resultMap["transactionInfo"]! as! ResultMap)
          }
          set {
            resultMap.updateValue(newValue.resultMap, forKey: "transactionInfo")
          }
        }

        public var eventType: EventType {
          get {
            return resultMap["eventType"]! as! EventType
          }
          set {
            resultMap.updateValue(newValue, forKey: "eventType")
          }
        }

        public var collectionAddress: String {
          get {
            return resultMap["collectionAddress"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "collectionAddress")
          }
        }

        public var tokenId: String? {
          get {
            return resultMap["tokenId"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "tokenId")
          }
        }

        public var properties: Property {
          get {
            return Property(unsafeResultMap: resultMap["properties"]! as! ResultMap)
          }
          set {
            resultMap.updateValue(newValue.resultMap, forKey: "properties")
          }
        }

        public var fragments: Fragments {
          get {
            return Fragments(unsafeResultMap: resultMap)
          }
          set {
            resultMap += newValue.resultMap
          }
        }

        public struct Fragments {
          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public var eventInfo: EventInfo {
            get {
              return EventInfo(unsafeResultMap: resultMap)
            }
            set {
              resultMap += newValue.resultMap
            }
          }
        }

        public struct TransactionInfo: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["TransactionInfo"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
              GraphQLField("blockTimestamp", type: .nonNull(.scalar(String.self))),
              GraphQLField("transactionHash", type: .scalar(String.self)),
              GraphQLField("logIndex", type: .scalar(Int.self)),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(blockNumber: Int, blockTimestamp: String, transactionHash: String? = nil, logIndex: Int? = nil) {
            self.init(unsafeResultMap: ["__typename": "TransactionInfo", "blockNumber": blockNumber, "blockTimestamp": blockTimestamp, "transactionHash": transactionHash, "logIndex": logIndex])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var blockNumber: Int {
            get {
              return resultMap["blockNumber"]! as! Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "blockNumber")
            }
          }

          public var blockTimestamp: String {
            get {
              return resultMap["blockTimestamp"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "blockTimestamp")
            }
          }

          public var transactionHash: String? {
            get {
              return resultMap["transactionHash"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "transactionHash")
            }
          }

          public var logIndex: Int? {
            get {
              return resultMap["logIndex"] as? Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "logIndex")
            }
          }

          public var fragments: Fragments {
            get {
              return Fragments(unsafeResultMap: resultMap)
            }
            set {
              resultMap += newValue.resultMap
            }
          }

          public struct Fragments {
            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public var transactionDetails: TransactionDetails {
              get {
                return TransactionDetails(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }
          }
        }

        public struct Property: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["ApprovalEvent", "MintEvent", "Sale", "TransferEvent", "V1MarketEvent", "V2AuctionEvent", "V3AskEvent"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLTypeCase(
                variants: ["MintEvent": AsMintEvent.selections, "TransferEvent": AsTransferEvent.selections, "V1MarketEvent": AsV1MarketEvent.selections, "V2AuctionEvent": AsV2AuctionEvent.selections, "V3AskEvent": AsV3AskEvent.selections],
                default: [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                ]
              )
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public static func makeApprovalEvent() -> Property {
            return Property(unsafeResultMap: ["__typename": "ApprovalEvent"])
          }

          public static func makeSale() -> Property {
            return Property(unsafeResultMap: ["__typename": "Sale"])
          }

          public static func makeMintEvent(tokenId: String, collectionAddress: String, originatorAddress: String, toAddress: String, price: AsMintEvent.Price) -> Property {
            return Property(unsafeResultMap: ["__typename": "MintEvent", "tokenId": tokenId, "collectionAddress": collectionAddress, "originatorAddress": originatorAddress, "toAddress": toAddress, "price": price.resultMap])
          }

          public static func makeTransferEvent(fromAddress: String, toAddress: String, collectionAddress: String, tokenId: String) -> Property {
            return Property(unsafeResultMap: ["__typename": "TransferEvent", "fromAddress": fromAddress, "toAddress": toAddress, "collectionAddress": collectionAddress, "tokenId": tokenId])
          }

          public static func makeV1MarketEvent(v1MarketEventType: V1MarketEventType, address: String, collectionAddress: String, tokenId: String, properties: AsV1MarketEvent.Property) -> Property {
            return Property(unsafeResultMap: ["__typename": "V1MarketEvent", "v1MarketEventType": v1MarketEventType, "address": address, "collectionAddress": collectionAddress, "tokenId": tokenId, "properties": properties.resultMap])
          }

          public static func makeV2AuctionEvent(v2AuctionEventType: V2AuctionEventType, address: String, auctionId: Int, collectionAddress: String, tokenId: String, properties: AsV2AuctionEvent.Property) -> Property {
            return Property(unsafeResultMap: ["__typename": "V2AuctionEvent", "v2AuctionEventType": v2AuctionEventType, "address": address, "auctionId": auctionId, "collectionAddress": collectionAddress, "tokenId": tokenId, "properties": properties.resultMap])
          }

          public static func makeV3AskEvent(v3AskEventType: V3AskEventType, address: String, collectionAddress: String, tokenId: String, properties: AsV3AskEvent.Property) -> Property {
            return Property(unsafeResultMap: ["__typename": "V3AskEvent", "v3AskEventType": v3AskEventType, "address": address, "collectionAddress": collectionAddress, "tokenId": tokenId, "properties": properties.resultMap])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var asMintEvent: AsMintEvent? {
            get {
              if !AsMintEvent.possibleTypes.contains(__typename) { return nil }
              return AsMintEvent(unsafeResultMap: resultMap)
            }
            set {
              guard let newValue = newValue else { return }
              resultMap = newValue.resultMap
            }
          }

          public struct AsMintEvent: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["MintEvent"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("tokenId", type: .nonNull(.scalar(String.self))),
                GraphQLField("collectionAddress", type: .nonNull(.scalar(String.self))),
                GraphQLField("originatorAddress", type: .nonNull(.scalar(String.self))),
                GraphQLField("toAddress", type: .nonNull(.scalar(String.self))),
                GraphQLField("price", type: .nonNull(.object(Price.selections))),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(tokenId: String, collectionAddress: String, originatorAddress: String, toAddress: String, price: Price) {
              self.init(unsafeResultMap: ["__typename": "MintEvent", "tokenId": tokenId, "collectionAddress": collectionAddress, "originatorAddress": originatorAddress, "toAddress": toAddress, "price": price.resultMap])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var tokenId: String {
              get {
                return resultMap["tokenId"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "tokenId")
              }
            }

            public var collectionAddress: String {
              get {
                return resultMap["collectionAddress"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "collectionAddress")
              }
            }

            public var originatorAddress: String {
              get {
                return resultMap["originatorAddress"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "originatorAddress")
              }
            }

            public var toAddress: String {
              get {
                return resultMap["toAddress"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "toAddress")
              }
            }

            public var price: Price {
              get {
                return Price(unsafeResultMap: resultMap["price"]! as! ResultMap)
              }
              set {
                resultMap.updateValue(newValue.resultMap, forKey: "price")
              }
            }

            public struct Price: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["PriceAtTime"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                  GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
                  GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
                  GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
                self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var blockNumber: Int {
                get {
                  return resultMap["blockNumber"]! as! Int
                }
                set {
                  resultMap.updateValue(newValue, forKey: "blockNumber")
                }
              }

              public var chainTokenPrice: ChainTokenPrice? {
                get {
                  return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
                }
                set {
                  resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
                }
              }

              public var nativePrice: NativePrice {
                get {
                  return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
                }
                set {
                  resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
                }
              }

              public var usdcPrice: UsdcPrice? {
                get {
                  return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
                }
                set {
                  resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
                }
              }

              public var fragments: Fragments {
                get {
                  return Fragments(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }

              public struct Fragments {
                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public var priceSummary: PriceSummary {
                  get {
                    return PriceSummary(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }
              }

              public struct ChainTokenPrice: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["CurrencyAmount"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                    GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(decimal: Double, raw: String) {
                  self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var decimal: Double {
                  get {
                    return resultMap["decimal"]! as! Double
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimal")
                  }
                }

                public var raw: String {
                  get {
                    return resultMap["raw"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "raw")
                  }
                }
              }

              public struct NativePrice: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["CurrencyAmount"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                    GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                    GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(decimal: Double, raw: String, currency: Currency) {
                  self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var decimal: Double {
                  get {
                    return resultMap["decimal"]! as! Double
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimal")
                  }
                }

                public var raw: String {
                  get {
                    return resultMap["raw"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "raw")
                  }
                }

                public var currency: Currency {
                  get {
                    return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
                  }
                  set {
                    resultMap.updateValue(newValue.resultMap, forKey: "currency")
                  }
                }

                public struct Currency: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["Currency"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("address", type: .nonNull(.scalar(String.self))),
                      GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                      GraphQLField("name", type: .nonNull(.scalar(String.self))),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(address: String, decimals: Int, name: String) {
                    self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var address: String {
                    get {
                      return resultMap["address"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "address")
                    }
                  }

                  public var decimals: Int {
                    get {
                      return resultMap["decimals"]! as! Int
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "decimals")
                    }
                  }

                  public var name: String {
                    get {
                      return resultMap["name"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "name")
                    }
                  }
                }
              }

              public struct UsdcPrice: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["CurrencyAmount"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                    GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(decimal: Double, raw: String) {
                  self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var decimal: Double {
                  get {
                    return resultMap["decimal"]! as! Double
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimal")
                  }
                }

                public var raw: String {
                  get {
                    return resultMap["raw"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "raw")
                  }
                }
              }
            }
          }

          public var asTransferEvent: AsTransferEvent? {
            get {
              if !AsTransferEvent.possibleTypes.contains(__typename) { return nil }
              return AsTransferEvent(unsafeResultMap: resultMap)
            }
            set {
              guard let newValue = newValue else { return }
              resultMap = newValue.resultMap
            }
          }

          public struct AsTransferEvent: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["TransferEvent"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("fromAddress", type: .nonNull(.scalar(String.self))),
                GraphQLField("toAddress", type: .nonNull(.scalar(String.self))),
                GraphQLField("collectionAddress", type: .nonNull(.scalar(String.self))),
                GraphQLField("tokenId", type: .nonNull(.scalar(String.self))),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(fromAddress: String, toAddress: String, collectionAddress: String, tokenId: String) {
              self.init(unsafeResultMap: ["__typename": "TransferEvent", "fromAddress": fromAddress, "toAddress": toAddress, "collectionAddress": collectionAddress, "tokenId": tokenId])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var fromAddress: String {
              get {
                return resultMap["fromAddress"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "fromAddress")
              }
            }

            public var toAddress: String {
              get {
                return resultMap["toAddress"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "toAddress")
              }
            }

            public var collectionAddress: String {
              get {
                return resultMap["collectionAddress"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "collectionAddress")
              }
            }

            public var tokenId: String {
              get {
                return resultMap["tokenId"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "tokenId")
              }
            }
          }

          public var asV1MarketEvent: AsV1MarketEvent? {
            get {
              if !AsV1MarketEvent.possibleTypes.contains(__typename) { return nil }
              return AsV1MarketEvent(unsafeResultMap: resultMap)
            }
            set {
              guard let newValue = newValue else { return }
              resultMap = newValue.resultMap
            }
          }

          public struct AsV1MarketEvent: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["V1MarketEvent"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("v1MarketEventType", type: .nonNull(.scalar(V1MarketEventType.self))),
                GraphQLField("address", type: .nonNull(.scalar(String.self))),
                GraphQLField("collectionAddress", type: .nonNull(.scalar(String.self))),
                GraphQLField("tokenId", type: .nonNull(.scalar(String.self))),
                GraphQLField("properties", type: .nonNull(.object(Property.selections))),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(v1MarketEventType: V1MarketEventType, address: String, collectionAddress: String, tokenId: String, properties: Property) {
              self.init(unsafeResultMap: ["__typename": "V1MarketEvent", "v1MarketEventType": v1MarketEventType, "address": address, "collectionAddress": collectionAddress, "tokenId": tokenId, "properties": properties.resultMap])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var v1MarketEventType: V1MarketEventType {
              get {
                return resultMap["v1MarketEventType"]! as! V1MarketEventType
              }
              set {
                resultMap.updateValue(newValue, forKey: "v1MarketEventType")
              }
            }

            public var address: String {
              get {
                return resultMap["address"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "address")
              }
            }

            public var collectionAddress: String {
              get {
                return resultMap["collectionAddress"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "collectionAddress")
              }
            }

            public var tokenId: String {
              get {
                return resultMap["tokenId"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "tokenId")
              }
            }

            public var properties: Property {
              get {
                return Property(unsafeResultMap: resultMap["properties"]! as! ResultMap)
              }
              set {
                resultMap.updateValue(newValue.resultMap, forKey: "properties")
              }
            }

            public struct Property: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["V1MarketAskCreatedEventProperties", "V1MarketAskRemovedEventProperties", "V1MarketOfferCreatedEventProperties", "V1MarketOfferFinalizedEventProperties", "V1MarketOfferRemovedEventProperties", "V1MarketBidShareUpdatedEventProperties"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLTypeCase(
                    variants: ["V1MarketAskCreatedEventProperties": AsV1MarketAskCreatedEventProperties.selections, "V1MarketAskRemovedEventProperties": AsV1MarketAskRemovedEventProperties.selections, "V1MarketOfferCreatedEventProperties": AsV1MarketOfferCreatedEventProperties.selections, "V1MarketOfferFinalizedEventProperties": AsV1MarketOfferFinalizedEventProperties.selections, "V1MarketOfferRemovedEventProperties": AsV1MarketOfferRemovedEventProperties.selections],
                    default: [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    ]
                  )
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public static func makeV1MarketBidShareUpdatedEventProperties() -> Property {
                return Property(unsafeResultMap: ["__typename": "V1MarketBidShareUpdatedEventProperties"])
              }

              public static func makeV1MarketAskCreatedEventProperties(amount: String, price: AsV1MarketAskCreatedEventProperties.Price, currency: String) -> Property {
                return Property(unsafeResultMap: ["__typename": "V1MarketAskCreatedEventProperties", "amount": amount, "price": price.resultMap, "currency": currency])
              }

              public static func makeV1MarketAskRemovedEventProperties(amount: String, price: AsV1MarketAskRemovedEventProperties.Price, currency: String) -> Property {
                return Property(unsafeResultMap: ["__typename": "V1MarketAskRemovedEventProperties", "amount": amount, "price": price.resultMap, "currency": currency])
              }

              public static func makeV1MarketOfferCreatedEventProperties(amount: String, price: AsV1MarketOfferCreatedEventProperties.Price, currency: String, bidder: String) -> Property {
                return Property(unsafeResultMap: ["__typename": "V1MarketOfferCreatedEventProperties", "amount": amount, "price": price.resultMap, "currency": currency, "bidder": bidder])
              }

              public static func makeV1MarketOfferFinalizedEventProperties(amount: String, price: AsV1MarketOfferFinalizedEventProperties.Price, currency: String, bidder: String) -> Property {
                return Property(unsafeResultMap: ["__typename": "V1MarketOfferFinalizedEventProperties", "amount": amount, "price": price.resultMap, "currency": currency, "bidder": bidder])
              }

              public static func makeV1MarketOfferRemovedEventProperties(amount: String, price: AsV1MarketOfferRemovedEventProperties.Price, currency: String, bidder: String) -> Property {
                return Property(unsafeResultMap: ["__typename": "V1MarketOfferRemovedEventProperties", "amount": amount, "price": price.resultMap, "currency": currency, "bidder": bidder])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var fragments: Fragments {
                get {
                  return Fragments(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }

              public struct Fragments {
                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public var v1MarketEventPropertiesInfo: V1MarketEventPropertiesInfo {
                  get {
                    return V1MarketEventPropertiesInfo(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }
              }

              public var asV1MarketAskCreatedEventProperties: AsV1MarketAskCreatedEventProperties? {
                get {
                  if !AsV1MarketAskCreatedEventProperties.possibleTypes.contains(__typename) { return nil }
                  return AsV1MarketAskCreatedEventProperties(unsafeResultMap: resultMap)
                }
                set {
                  guard let newValue = newValue else { return }
                  resultMap = newValue.resultMap
                }
              }

              public struct AsV1MarketAskCreatedEventProperties: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["V1MarketAskCreatedEventProperties"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("amount", type: .nonNull(.scalar(String.self))),
                    GraphQLField("price", type: .nonNull(.object(Price.selections))),
                    GraphQLField("currency", type: .nonNull(.scalar(String.self))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(amount: String, price: Price, currency: String) {
                  self.init(unsafeResultMap: ["__typename": "V1MarketAskCreatedEventProperties", "amount": amount, "price": price.resultMap, "currency": currency])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var amount: String {
                  get {
                    return resultMap["amount"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "amount")
                  }
                }

                public var price: Price {
                  get {
                    return Price(unsafeResultMap: resultMap["price"]! as! ResultMap)
                  }
                  set {
                    resultMap.updateValue(newValue.resultMap, forKey: "price")
                  }
                }

                public var currency: String {
                  get {
                    return resultMap["currency"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "currency")
                  }
                }

                public var fragments: Fragments {
                  get {
                    return Fragments(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }

                public struct Fragments {
                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public var v1MarketEventPropertiesInfo: V1MarketEventPropertiesInfo {
                    get {
                      return V1MarketEventPropertiesInfo(unsafeResultMap: resultMap)
                    }
                    set {
                      resultMap += newValue.resultMap
                    }
                  }
                }

                public struct Price: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["PriceAtTime"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                      GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
                      GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
                      GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
                    self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var blockNumber: Int {
                    get {
                      return resultMap["blockNumber"]! as! Int
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "blockNumber")
                    }
                  }

                  public var chainTokenPrice: ChainTokenPrice? {
                    get {
                      return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
                    }
                    set {
                      resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
                    }
                  }

                  public var nativePrice: NativePrice {
                    get {
                      return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
                    }
                    set {
                      resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
                    }
                  }

                  public var usdcPrice: UsdcPrice? {
                    get {
                      return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
                    }
                    set {
                      resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
                    }
                  }

                  public var fragments: Fragments {
                    get {
                      return Fragments(unsafeResultMap: resultMap)
                    }
                    set {
                      resultMap += newValue.resultMap
                    }
                  }

                  public struct Fragments {
                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public var priceSummary: PriceSummary {
                      get {
                        return PriceSummary(unsafeResultMap: resultMap)
                      }
                      set {
                        resultMap += newValue.resultMap
                      }
                    }
                  }

                  public struct ChainTokenPrice: GraphQLSelectionSet {
                    public static let possibleTypes: [String] = ["CurrencyAmount"]

                    public static var selections: [GraphQLSelection] {
                      return [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                        GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                      ]
                    }

                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public init(decimal: Double, raw: String) {
                      self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                    }

                    public var __typename: String {
                      get {
                        return resultMap["__typename"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "__typename")
                      }
                    }

                    public var decimal: Double {
                      get {
                        return resultMap["decimal"]! as! Double
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "decimal")
                      }
                    }

                    public var raw: String {
                      get {
                        return resultMap["raw"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "raw")
                      }
                    }
                  }

                  public struct NativePrice: GraphQLSelectionSet {
                    public static let possibleTypes: [String] = ["CurrencyAmount"]

                    public static var selections: [GraphQLSelection] {
                      return [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                        GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                        GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
                      ]
                    }

                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public init(decimal: Double, raw: String, currency: Currency) {
                      self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
                    }

                    public var __typename: String {
                      get {
                        return resultMap["__typename"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "__typename")
                      }
                    }

                    public var decimal: Double {
                      get {
                        return resultMap["decimal"]! as! Double
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "decimal")
                      }
                    }

                    public var raw: String {
                      get {
                        return resultMap["raw"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "raw")
                      }
                    }

                    public var currency: Currency {
                      get {
                        return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
                      }
                      set {
                        resultMap.updateValue(newValue.resultMap, forKey: "currency")
                      }
                    }

                    public struct Currency: GraphQLSelectionSet {
                      public static let possibleTypes: [String] = ["Currency"]

                      public static var selections: [GraphQLSelection] {
                        return [
                          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                          GraphQLField("address", type: .nonNull(.scalar(String.self))),
                          GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                          GraphQLField("name", type: .nonNull(.scalar(String.self))),
                        ]
                      }

                      public private(set) var resultMap: ResultMap

                      public init(unsafeResultMap: ResultMap) {
                        self.resultMap = unsafeResultMap
                      }

                      public init(address: String, decimals: Int, name: String) {
                        self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
                      }

                      public var __typename: String {
                        get {
                          return resultMap["__typename"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "__typename")
                        }
                      }

                      public var address: String {
                        get {
                          return resultMap["address"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "address")
                        }
                      }

                      public var decimals: Int {
                        get {
                          return resultMap["decimals"]! as! Int
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "decimals")
                        }
                      }

                      public var name: String {
                        get {
                          return resultMap["name"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "name")
                        }
                      }
                    }
                  }

                  public struct UsdcPrice: GraphQLSelectionSet {
                    public static let possibleTypes: [String] = ["CurrencyAmount"]

                    public static var selections: [GraphQLSelection] {
                      return [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                        GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                      ]
                    }

                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public init(decimal: Double, raw: String) {
                      self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                    }

                    public var __typename: String {
                      get {
                        return resultMap["__typename"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "__typename")
                      }
                    }

                    public var decimal: Double {
                      get {
                        return resultMap["decimal"]! as! Double
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "decimal")
                      }
                    }

                    public var raw: String {
                      get {
                        return resultMap["raw"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "raw")
                      }
                    }
                  }
                }
              }

              public var asV1MarketAskRemovedEventProperties: AsV1MarketAskRemovedEventProperties? {
                get {
                  if !AsV1MarketAskRemovedEventProperties.possibleTypes.contains(__typename) { return nil }
                  return AsV1MarketAskRemovedEventProperties(unsafeResultMap: resultMap)
                }
                set {
                  guard let newValue = newValue else { return }
                  resultMap = newValue.resultMap
                }
              }

              public struct AsV1MarketAskRemovedEventProperties: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["V1MarketAskRemovedEventProperties"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("amount", type: .nonNull(.scalar(String.self))),
                    GraphQLField("price", type: .nonNull(.object(Price.selections))),
                    GraphQLField("currency", type: .nonNull(.scalar(String.self))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(amount: String, price: Price, currency: String) {
                  self.init(unsafeResultMap: ["__typename": "V1MarketAskRemovedEventProperties", "amount": amount, "price": price.resultMap, "currency": currency])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var amount: String {
                  get {
                    return resultMap["amount"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "amount")
                  }
                }

                public var price: Price {
                  get {
                    return Price(unsafeResultMap: resultMap["price"]! as! ResultMap)
                  }
                  set {
                    resultMap.updateValue(newValue.resultMap, forKey: "price")
                  }
                }

                public var currency: String {
                  get {
                    return resultMap["currency"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "currency")
                  }
                }

                public var fragments: Fragments {
                  get {
                    return Fragments(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }

                public struct Fragments {
                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public var v1MarketEventPropertiesInfo: V1MarketEventPropertiesInfo {
                    get {
                      return V1MarketEventPropertiesInfo(unsafeResultMap: resultMap)
                    }
                    set {
                      resultMap += newValue.resultMap
                    }
                  }
                }

                public struct Price: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["PriceAtTime"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                      GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
                      GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
                      GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
                    self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var blockNumber: Int {
                    get {
                      return resultMap["blockNumber"]! as! Int
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "blockNumber")
                    }
                  }

                  public var chainTokenPrice: ChainTokenPrice? {
                    get {
                      return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
                    }
                    set {
                      resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
                    }
                  }

                  public var nativePrice: NativePrice {
                    get {
                      return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
                    }
                    set {
                      resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
                    }
                  }

                  public var usdcPrice: UsdcPrice? {
                    get {
                      return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
                    }
                    set {
                      resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
                    }
                  }

                  public var fragments: Fragments {
                    get {
                      return Fragments(unsafeResultMap: resultMap)
                    }
                    set {
                      resultMap += newValue.resultMap
                    }
                  }

                  public struct Fragments {
                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public var priceSummary: PriceSummary {
                      get {
                        return PriceSummary(unsafeResultMap: resultMap)
                      }
                      set {
                        resultMap += newValue.resultMap
                      }
                    }
                  }

                  public struct ChainTokenPrice: GraphQLSelectionSet {
                    public static let possibleTypes: [String] = ["CurrencyAmount"]

                    public static var selections: [GraphQLSelection] {
                      return [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                        GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                      ]
                    }

                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public init(decimal: Double, raw: String) {
                      self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                    }

                    public var __typename: String {
                      get {
                        return resultMap["__typename"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "__typename")
                      }
                    }

                    public var decimal: Double {
                      get {
                        return resultMap["decimal"]! as! Double
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "decimal")
                      }
                    }

                    public var raw: String {
                      get {
                        return resultMap["raw"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "raw")
                      }
                    }
                  }

                  public struct NativePrice: GraphQLSelectionSet {
                    public static let possibleTypes: [String] = ["CurrencyAmount"]

                    public static var selections: [GraphQLSelection] {
                      return [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                        GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                        GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
                      ]
                    }

                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public init(decimal: Double, raw: String, currency: Currency) {
                      self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
                    }

                    public var __typename: String {
                      get {
                        return resultMap["__typename"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "__typename")
                      }
                    }

                    public var decimal: Double {
                      get {
                        return resultMap["decimal"]! as! Double
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "decimal")
                      }
                    }

                    public var raw: String {
                      get {
                        return resultMap["raw"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "raw")
                      }
                    }

                    public var currency: Currency {
                      get {
                        return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
                      }
                      set {
                        resultMap.updateValue(newValue.resultMap, forKey: "currency")
                      }
                    }

                    public struct Currency: GraphQLSelectionSet {
                      public static let possibleTypes: [String] = ["Currency"]

                      public static var selections: [GraphQLSelection] {
                        return [
                          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                          GraphQLField("address", type: .nonNull(.scalar(String.self))),
                          GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                          GraphQLField("name", type: .nonNull(.scalar(String.self))),
                        ]
                      }

                      public private(set) var resultMap: ResultMap

                      public init(unsafeResultMap: ResultMap) {
                        self.resultMap = unsafeResultMap
                      }

                      public init(address: String, decimals: Int, name: String) {
                        self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
                      }

                      public var __typename: String {
                        get {
                          return resultMap["__typename"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "__typename")
                        }
                      }

                      public var address: String {
                        get {
                          return resultMap["address"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "address")
                        }
                      }

                      public var decimals: Int {
                        get {
                          return resultMap["decimals"]! as! Int
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "decimals")
                        }
                      }

                      public var name: String {
                        get {
                          return resultMap["name"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "name")
                        }
                      }
                    }
                  }

                  public struct UsdcPrice: GraphQLSelectionSet {
                    public static let possibleTypes: [String] = ["CurrencyAmount"]

                    public static var selections: [GraphQLSelection] {
                      return [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                        GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                      ]
                    }

                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public init(decimal: Double, raw: String) {
                      self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                    }

                    public var __typename: String {
                      get {
                        return resultMap["__typename"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "__typename")
                      }
                    }

                    public var decimal: Double {
                      get {
                        return resultMap["decimal"]! as! Double
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "decimal")
                      }
                    }

                    public var raw: String {
                      get {
                        return resultMap["raw"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "raw")
                      }
                    }
                  }
                }
              }

              public var asV1MarketOfferCreatedEventProperties: AsV1MarketOfferCreatedEventProperties? {
                get {
                  if !AsV1MarketOfferCreatedEventProperties.possibleTypes.contains(__typename) { return nil }
                  return AsV1MarketOfferCreatedEventProperties(unsafeResultMap: resultMap)
                }
                set {
                  guard let newValue = newValue else { return }
                  resultMap = newValue.resultMap
                }
              }

              public struct AsV1MarketOfferCreatedEventProperties: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["V1MarketOfferCreatedEventProperties"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("amount", type: .nonNull(.scalar(String.self))),
                    GraphQLField("price", type: .nonNull(.object(Price.selections))),
                    GraphQLField("currency", type: .nonNull(.scalar(String.self))),
                    GraphQLField("bidder", type: .nonNull(.scalar(String.self))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(amount: String, price: Price, currency: String, bidder: String) {
                  self.init(unsafeResultMap: ["__typename": "V1MarketOfferCreatedEventProperties", "amount": amount, "price": price.resultMap, "currency": currency, "bidder": bidder])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var amount: String {
                  get {
                    return resultMap["amount"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "amount")
                  }
                }

                public var price: Price {
                  get {
                    return Price(unsafeResultMap: resultMap["price"]! as! ResultMap)
                  }
                  set {
                    resultMap.updateValue(newValue.resultMap, forKey: "price")
                  }
                }

                public var currency: String {
                  get {
                    return resultMap["currency"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "currency")
                  }
                }

                public var bidder: String {
                  get {
                    return resultMap["bidder"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "bidder")
                  }
                }

                public var fragments: Fragments {
                  get {
                    return Fragments(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }

                public struct Fragments {
                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public var v1MarketEventPropertiesInfo: V1MarketEventPropertiesInfo {
                    get {
                      return V1MarketEventPropertiesInfo(unsafeResultMap: resultMap)
                    }
                    set {
                      resultMap += newValue.resultMap
                    }
                  }
                }

                public struct Price: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["PriceAtTime"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                      GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
                      GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
                      GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
                    self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var blockNumber: Int {
                    get {
                      return resultMap["blockNumber"]! as! Int
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "blockNumber")
                    }
                  }

                  public var chainTokenPrice: ChainTokenPrice? {
                    get {
                      return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
                    }
                    set {
                      resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
                    }
                  }

                  public var nativePrice: NativePrice {
                    get {
                      return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
                    }
                    set {
                      resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
                    }
                  }

                  public var usdcPrice: UsdcPrice? {
                    get {
                      return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
                    }
                    set {
                      resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
                    }
                  }

                  public var fragments: Fragments {
                    get {
                      return Fragments(unsafeResultMap: resultMap)
                    }
                    set {
                      resultMap += newValue.resultMap
                    }
                  }

                  public struct Fragments {
                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public var priceSummary: PriceSummary {
                      get {
                        return PriceSummary(unsafeResultMap: resultMap)
                      }
                      set {
                        resultMap += newValue.resultMap
                      }
                    }
                  }

                  public struct ChainTokenPrice: GraphQLSelectionSet {
                    public static let possibleTypes: [String] = ["CurrencyAmount"]

                    public static var selections: [GraphQLSelection] {
                      return [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                        GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                      ]
                    }

                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public init(decimal: Double, raw: String) {
                      self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                    }

                    public var __typename: String {
                      get {
                        return resultMap["__typename"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "__typename")
                      }
                    }

                    public var decimal: Double {
                      get {
                        return resultMap["decimal"]! as! Double
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "decimal")
                      }
                    }

                    public var raw: String {
                      get {
                        return resultMap["raw"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "raw")
                      }
                    }
                  }

                  public struct NativePrice: GraphQLSelectionSet {
                    public static let possibleTypes: [String] = ["CurrencyAmount"]

                    public static var selections: [GraphQLSelection] {
                      return [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                        GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                        GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
                      ]
                    }

                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public init(decimal: Double, raw: String, currency: Currency) {
                      self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
                    }

                    public var __typename: String {
                      get {
                        return resultMap["__typename"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "__typename")
                      }
                    }

                    public var decimal: Double {
                      get {
                        return resultMap["decimal"]! as! Double
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "decimal")
                      }
                    }

                    public var raw: String {
                      get {
                        return resultMap["raw"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "raw")
                      }
                    }

                    public var currency: Currency {
                      get {
                        return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
                      }
                      set {
                        resultMap.updateValue(newValue.resultMap, forKey: "currency")
                      }
                    }

                    public struct Currency: GraphQLSelectionSet {
                      public static let possibleTypes: [String] = ["Currency"]

                      public static var selections: [GraphQLSelection] {
                        return [
                          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                          GraphQLField("address", type: .nonNull(.scalar(String.self))),
                          GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                          GraphQLField("name", type: .nonNull(.scalar(String.self))),
                        ]
                      }

                      public private(set) var resultMap: ResultMap

                      public init(unsafeResultMap: ResultMap) {
                        self.resultMap = unsafeResultMap
                      }

                      public init(address: String, decimals: Int, name: String) {
                        self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
                      }

                      public var __typename: String {
                        get {
                          return resultMap["__typename"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "__typename")
                        }
                      }

                      public var address: String {
                        get {
                          return resultMap["address"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "address")
                        }
                      }

                      public var decimals: Int {
                        get {
                          return resultMap["decimals"]! as! Int
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "decimals")
                        }
                      }

                      public var name: String {
                        get {
                          return resultMap["name"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "name")
                        }
                      }
                    }
                  }

                  public struct UsdcPrice: GraphQLSelectionSet {
                    public static let possibleTypes: [String] = ["CurrencyAmount"]

                    public static var selections: [GraphQLSelection] {
                      return [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                        GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                      ]
                    }

                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public init(decimal: Double, raw: String) {
                      self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                    }

                    public var __typename: String {
                      get {
                        return resultMap["__typename"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "__typename")
                      }
                    }

                    public var decimal: Double {
                      get {
                        return resultMap["decimal"]! as! Double
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "decimal")
                      }
                    }

                    public var raw: String {
                      get {
                        return resultMap["raw"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "raw")
                      }
                    }
                  }
                }
              }

              public var asV1MarketOfferFinalizedEventProperties: AsV1MarketOfferFinalizedEventProperties? {
                get {
                  if !AsV1MarketOfferFinalizedEventProperties.possibleTypes.contains(__typename) { return nil }
                  return AsV1MarketOfferFinalizedEventProperties(unsafeResultMap: resultMap)
                }
                set {
                  guard let newValue = newValue else { return }
                  resultMap = newValue.resultMap
                }
              }

              public struct AsV1MarketOfferFinalizedEventProperties: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["V1MarketOfferFinalizedEventProperties"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("amount", type: .nonNull(.scalar(String.self))),
                    GraphQLField("price", type: .nonNull(.object(Price.selections))),
                    GraphQLField("currency", type: .nonNull(.scalar(String.self))),
                    GraphQLField("bidder", type: .nonNull(.scalar(String.self))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(amount: String, price: Price, currency: String, bidder: String) {
                  self.init(unsafeResultMap: ["__typename": "V1MarketOfferFinalizedEventProperties", "amount": amount, "price": price.resultMap, "currency": currency, "bidder": bidder])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var amount: String {
                  get {
                    return resultMap["amount"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "amount")
                  }
                }

                public var price: Price {
                  get {
                    return Price(unsafeResultMap: resultMap["price"]! as! ResultMap)
                  }
                  set {
                    resultMap.updateValue(newValue.resultMap, forKey: "price")
                  }
                }

                public var currency: String {
                  get {
                    return resultMap["currency"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "currency")
                  }
                }

                public var bidder: String {
                  get {
                    return resultMap["bidder"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "bidder")
                  }
                }

                public var fragments: Fragments {
                  get {
                    return Fragments(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }

                public struct Fragments {
                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public var v1MarketEventPropertiesInfo: V1MarketEventPropertiesInfo {
                    get {
                      return V1MarketEventPropertiesInfo(unsafeResultMap: resultMap)
                    }
                    set {
                      resultMap += newValue.resultMap
                    }
                  }
                }

                public struct Price: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["PriceAtTime"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                      GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
                      GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
                      GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
                    self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var blockNumber: Int {
                    get {
                      return resultMap["blockNumber"]! as! Int
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "blockNumber")
                    }
                  }

                  public var chainTokenPrice: ChainTokenPrice? {
                    get {
                      return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
                    }
                    set {
                      resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
                    }
                  }

                  public var nativePrice: NativePrice {
                    get {
                      return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
                    }
                    set {
                      resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
                    }
                  }

                  public var usdcPrice: UsdcPrice? {
                    get {
                      return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
                    }
                    set {
                      resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
                    }
                  }

                  public var fragments: Fragments {
                    get {
                      return Fragments(unsafeResultMap: resultMap)
                    }
                    set {
                      resultMap += newValue.resultMap
                    }
                  }

                  public struct Fragments {
                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public var priceSummary: PriceSummary {
                      get {
                        return PriceSummary(unsafeResultMap: resultMap)
                      }
                      set {
                        resultMap += newValue.resultMap
                      }
                    }
                  }

                  public struct ChainTokenPrice: GraphQLSelectionSet {
                    public static let possibleTypes: [String] = ["CurrencyAmount"]

                    public static var selections: [GraphQLSelection] {
                      return [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                        GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                      ]
                    }

                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public init(decimal: Double, raw: String) {
                      self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                    }

                    public var __typename: String {
                      get {
                        return resultMap["__typename"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "__typename")
                      }
                    }

                    public var decimal: Double {
                      get {
                        return resultMap["decimal"]! as! Double
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "decimal")
                      }
                    }

                    public var raw: String {
                      get {
                        return resultMap["raw"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "raw")
                      }
                    }
                  }

                  public struct NativePrice: GraphQLSelectionSet {
                    public static let possibleTypes: [String] = ["CurrencyAmount"]

                    public static var selections: [GraphQLSelection] {
                      return [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                        GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                        GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
                      ]
                    }

                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public init(decimal: Double, raw: String, currency: Currency) {
                      self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
                    }

                    public var __typename: String {
                      get {
                        return resultMap["__typename"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "__typename")
                      }
                    }

                    public var decimal: Double {
                      get {
                        return resultMap["decimal"]! as! Double
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "decimal")
                      }
                    }

                    public var raw: String {
                      get {
                        return resultMap["raw"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "raw")
                      }
                    }

                    public var currency: Currency {
                      get {
                        return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
                      }
                      set {
                        resultMap.updateValue(newValue.resultMap, forKey: "currency")
                      }
                    }

                    public struct Currency: GraphQLSelectionSet {
                      public static let possibleTypes: [String] = ["Currency"]

                      public static var selections: [GraphQLSelection] {
                        return [
                          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                          GraphQLField("address", type: .nonNull(.scalar(String.self))),
                          GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                          GraphQLField("name", type: .nonNull(.scalar(String.self))),
                        ]
                      }

                      public private(set) var resultMap: ResultMap

                      public init(unsafeResultMap: ResultMap) {
                        self.resultMap = unsafeResultMap
                      }

                      public init(address: String, decimals: Int, name: String) {
                        self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
                      }

                      public var __typename: String {
                        get {
                          return resultMap["__typename"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "__typename")
                        }
                      }

                      public var address: String {
                        get {
                          return resultMap["address"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "address")
                        }
                      }

                      public var decimals: Int {
                        get {
                          return resultMap["decimals"]! as! Int
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "decimals")
                        }
                      }

                      public var name: String {
                        get {
                          return resultMap["name"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "name")
                        }
                      }
                    }
                  }

                  public struct UsdcPrice: GraphQLSelectionSet {
                    public static let possibleTypes: [String] = ["CurrencyAmount"]

                    public static var selections: [GraphQLSelection] {
                      return [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                        GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                      ]
                    }

                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public init(decimal: Double, raw: String) {
                      self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                    }

                    public var __typename: String {
                      get {
                        return resultMap["__typename"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "__typename")
                      }
                    }

                    public var decimal: Double {
                      get {
                        return resultMap["decimal"]! as! Double
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "decimal")
                      }
                    }

                    public var raw: String {
                      get {
                        return resultMap["raw"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "raw")
                      }
                    }
                  }
                }
              }

              public var asV1MarketOfferRemovedEventProperties: AsV1MarketOfferRemovedEventProperties? {
                get {
                  if !AsV1MarketOfferRemovedEventProperties.possibleTypes.contains(__typename) { return nil }
                  return AsV1MarketOfferRemovedEventProperties(unsafeResultMap: resultMap)
                }
                set {
                  guard let newValue = newValue else { return }
                  resultMap = newValue.resultMap
                }
              }

              public struct AsV1MarketOfferRemovedEventProperties: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["V1MarketOfferRemovedEventProperties"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("amount", type: .nonNull(.scalar(String.self))),
                    GraphQLField("price", type: .nonNull(.object(Price.selections))),
                    GraphQLField("currency", type: .nonNull(.scalar(String.self))),
                    GraphQLField("bidder", type: .nonNull(.scalar(String.self))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(amount: String, price: Price, currency: String, bidder: String) {
                  self.init(unsafeResultMap: ["__typename": "V1MarketOfferRemovedEventProperties", "amount": amount, "price": price.resultMap, "currency": currency, "bidder": bidder])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var amount: String {
                  get {
                    return resultMap["amount"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "amount")
                  }
                }

                public var price: Price {
                  get {
                    return Price(unsafeResultMap: resultMap["price"]! as! ResultMap)
                  }
                  set {
                    resultMap.updateValue(newValue.resultMap, forKey: "price")
                  }
                }

                public var currency: String {
                  get {
                    return resultMap["currency"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "currency")
                  }
                }

                public var bidder: String {
                  get {
                    return resultMap["bidder"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "bidder")
                  }
                }

                public var fragments: Fragments {
                  get {
                    return Fragments(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }

                public struct Fragments {
                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public var v1MarketEventPropertiesInfo: V1MarketEventPropertiesInfo {
                    get {
                      return V1MarketEventPropertiesInfo(unsafeResultMap: resultMap)
                    }
                    set {
                      resultMap += newValue.resultMap
                    }
                  }
                }

                public struct Price: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["PriceAtTime"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                      GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
                      GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
                      GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
                    self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var blockNumber: Int {
                    get {
                      return resultMap["blockNumber"]! as! Int
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "blockNumber")
                    }
                  }

                  public var chainTokenPrice: ChainTokenPrice? {
                    get {
                      return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
                    }
                    set {
                      resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
                    }
                  }

                  public var nativePrice: NativePrice {
                    get {
                      return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
                    }
                    set {
                      resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
                    }
                  }

                  public var usdcPrice: UsdcPrice? {
                    get {
                      return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
                    }
                    set {
                      resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
                    }
                  }

                  public var fragments: Fragments {
                    get {
                      return Fragments(unsafeResultMap: resultMap)
                    }
                    set {
                      resultMap += newValue.resultMap
                    }
                  }

                  public struct Fragments {
                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public var priceSummary: PriceSummary {
                      get {
                        return PriceSummary(unsafeResultMap: resultMap)
                      }
                      set {
                        resultMap += newValue.resultMap
                      }
                    }
                  }

                  public struct ChainTokenPrice: GraphQLSelectionSet {
                    public static let possibleTypes: [String] = ["CurrencyAmount"]

                    public static var selections: [GraphQLSelection] {
                      return [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                        GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                      ]
                    }

                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public init(decimal: Double, raw: String) {
                      self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                    }

                    public var __typename: String {
                      get {
                        return resultMap["__typename"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "__typename")
                      }
                    }

                    public var decimal: Double {
                      get {
                        return resultMap["decimal"]! as! Double
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "decimal")
                      }
                    }

                    public var raw: String {
                      get {
                        return resultMap["raw"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "raw")
                      }
                    }
                  }

                  public struct NativePrice: GraphQLSelectionSet {
                    public static let possibleTypes: [String] = ["CurrencyAmount"]

                    public static var selections: [GraphQLSelection] {
                      return [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                        GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                        GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
                      ]
                    }

                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public init(decimal: Double, raw: String, currency: Currency) {
                      self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
                    }

                    public var __typename: String {
                      get {
                        return resultMap["__typename"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "__typename")
                      }
                    }

                    public var decimal: Double {
                      get {
                        return resultMap["decimal"]! as! Double
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "decimal")
                      }
                    }

                    public var raw: String {
                      get {
                        return resultMap["raw"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "raw")
                      }
                    }

                    public var currency: Currency {
                      get {
                        return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
                      }
                      set {
                        resultMap.updateValue(newValue.resultMap, forKey: "currency")
                      }
                    }

                    public struct Currency: GraphQLSelectionSet {
                      public static let possibleTypes: [String] = ["Currency"]

                      public static var selections: [GraphQLSelection] {
                        return [
                          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                          GraphQLField("address", type: .nonNull(.scalar(String.self))),
                          GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                          GraphQLField("name", type: .nonNull(.scalar(String.self))),
                        ]
                      }

                      public private(set) var resultMap: ResultMap

                      public init(unsafeResultMap: ResultMap) {
                        self.resultMap = unsafeResultMap
                      }

                      public init(address: String, decimals: Int, name: String) {
                        self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
                      }

                      public var __typename: String {
                        get {
                          return resultMap["__typename"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "__typename")
                        }
                      }

                      public var address: String {
                        get {
                          return resultMap["address"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "address")
                        }
                      }

                      public var decimals: Int {
                        get {
                          return resultMap["decimals"]! as! Int
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "decimals")
                        }
                      }

                      public var name: String {
                        get {
                          return resultMap["name"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "name")
                        }
                      }
                    }
                  }

                  public struct UsdcPrice: GraphQLSelectionSet {
                    public static let possibleTypes: [String] = ["CurrencyAmount"]

                    public static var selections: [GraphQLSelection] {
                      return [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                        GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                      ]
                    }

                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public init(decimal: Double, raw: String) {
                      self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                    }

                    public var __typename: String {
                      get {
                        return resultMap["__typename"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "__typename")
                      }
                    }

                    public var decimal: Double {
                      get {
                        return resultMap["decimal"]! as! Double
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "decimal")
                      }
                    }

                    public var raw: String {
                      get {
                        return resultMap["raw"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "raw")
                      }
                    }
                  }
                }
              }
            }
          }

          public var asV2AuctionEvent: AsV2AuctionEvent? {
            get {
              if !AsV2AuctionEvent.possibleTypes.contains(__typename) { return nil }
              return AsV2AuctionEvent(unsafeResultMap: resultMap)
            }
            set {
              guard let newValue = newValue else { return }
              resultMap = newValue.resultMap
            }
          }

          public struct AsV2AuctionEvent: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["V2AuctionEvent"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("v2AuctionEventType", type: .nonNull(.scalar(V2AuctionEventType.self))),
                GraphQLField("address", type: .nonNull(.scalar(String.self))),
                GraphQLField("auctionId", type: .nonNull(.scalar(Int.self))),
                GraphQLField("collectionAddress", type: .nonNull(.scalar(String.self))),
                GraphQLField("tokenId", type: .nonNull(.scalar(String.self))),
                GraphQLField("properties", type: .nonNull(.object(Property.selections))),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(v2AuctionEventType: V2AuctionEventType, address: String, auctionId: Int, collectionAddress: String, tokenId: String, properties: Property) {
              self.init(unsafeResultMap: ["__typename": "V2AuctionEvent", "v2AuctionEventType": v2AuctionEventType, "address": address, "auctionId": auctionId, "collectionAddress": collectionAddress, "tokenId": tokenId, "properties": properties.resultMap])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var v2AuctionEventType: V2AuctionEventType {
              get {
                return resultMap["v2AuctionEventType"]! as! V2AuctionEventType
              }
              set {
                resultMap.updateValue(newValue, forKey: "v2AuctionEventType")
              }
            }

            public var address: String {
              get {
                return resultMap["address"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "address")
              }
            }

            public var auctionId: Int {
              get {
                return resultMap["auctionId"]! as! Int
              }
              set {
                resultMap.updateValue(newValue, forKey: "auctionId")
              }
            }

            public var collectionAddress: String {
              get {
                return resultMap["collectionAddress"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "collectionAddress")
              }
            }

            public var tokenId: String {
              get {
                return resultMap["tokenId"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "tokenId")
              }
            }

            public var properties: Property {
              get {
                return Property(unsafeResultMap: resultMap["properties"]! as! ResultMap)
              }
              set {
                resultMap.updateValue(newValue.resultMap, forKey: "properties")
              }
            }

            public struct Property: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["V2AuctionBidEventProperties", "V2AuctionCreatedEventProperties", "V2AuctionCanceledEventProperties", "V2AuctionDurationExtendedEventProperties", "V2AuctionEndedEventProperties", "V2AuctionReservePriceUpdatedEventProperties", "V2AuctionApprovalUpdatedEventProperties"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLTypeCase(
                    variants: ["V2AuctionBidEventProperties": AsV2AuctionBidEventProperties.selections, "V2AuctionCreatedEventProperties": AsV2AuctionCreatedEventProperties.selections, "V2AuctionCanceledEventProperties": AsV2AuctionCanceledEventProperties.selections, "V2AuctionDurationExtendedEventProperties": AsV2AuctionDurationExtendedEventProperties.selections, "V2AuctionEndedEventProperties": AsV2AuctionEndedEventProperties.selections, "V2AuctionReservePriceUpdatedEventProperties": AsV2AuctionReservePriceUpdatedEventProperties.selections, "V2AuctionApprovalUpdatedEventProperties": AsV2AuctionApprovalUpdatedEventProperties.selections],
                    default: [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    ]
                  )
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public static func makeV2AuctionBidEventProperties(sender: String, firstBid: Bool, extended: Bool, value: String, price: AsV2AuctionBidEventProperties.Price) -> Property {
                return Property(unsafeResultMap: ["__typename": "V2AuctionBidEventProperties", "sender": sender, "firstBid": firstBid, "extended": extended, "value": value, "price": price.resultMap])
              }

              public static func makeV2AuctionCreatedEventProperties(auctionCurrency: String, tokenOwner: String, curator: String, curatorFeePercentage: Int, duration: String, reservePrice: String, price: AsV2AuctionCreatedEventProperties.Price) -> Property {
                return Property(unsafeResultMap: ["__typename": "V2AuctionCreatedEventProperties", "auctionCurrency": auctionCurrency, "tokenOwner": tokenOwner, "curator": curator, "curatorFeePercentage": curatorFeePercentage, "duration": duration, "reservePrice": reservePrice, "price": price.resultMap])
              }

              public static func makeV2AuctionCanceledEventProperties(tokenOwner: String) -> Property {
                return Property(unsafeResultMap: ["__typename": "V2AuctionCanceledEventProperties", "tokenOwner": tokenOwner])
              }

              public static func makeV2AuctionDurationExtendedEventProperties(duration: String) -> Property {
                return Property(unsafeResultMap: ["__typename": "V2AuctionDurationExtendedEventProperties", "duration": duration])
              }

              public static func makeV2AuctionEndedEventProperties(tokenOwner: String, curator: String, winner: String, auctionCurrency: String, amount: String, curatorFee: String) -> Property {
                return Property(unsafeResultMap: ["__typename": "V2AuctionEndedEventProperties", "tokenOwner": tokenOwner, "curator": curator, "winner": winner, "auctionCurrency": auctionCurrency, "amount": amount, "curatorFee": curatorFee])
              }

              public static func makeV2AuctionReservePriceUpdatedEventProperties(reservePrice: String, price: AsV2AuctionReservePriceUpdatedEventProperties.Price) -> Property {
                return Property(unsafeResultMap: ["__typename": "V2AuctionReservePriceUpdatedEventProperties", "reservePrice": reservePrice, "price": price.resultMap])
              }

              public static func makeV2AuctionApprovalUpdatedEventProperties(approved: Bool) -> Property {
                return Property(unsafeResultMap: ["__typename": "V2AuctionApprovalUpdatedEventProperties", "approved": approved])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var fragments: Fragments {
                get {
                  return Fragments(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }

              public struct Fragments {
                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public var v2AuctionEventPropertiesInfo: V2AuctionEventPropertiesInfo {
                  get {
                    return V2AuctionEventPropertiesInfo(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }
              }

              public var asV2AuctionBidEventProperties: AsV2AuctionBidEventProperties? {
                get {
                  if !AsV2AuctionBidEventProperties.possibleTypes.contains(__typename) { return nil }
                  return AsV2AuctionBidEventProperties(unsafeResultMap: resultMap)
                }
                set {
                  guard let newValue = newValue else { return }
                  resultMap = newValue.resultMap
                }
              }

              public struct AsV2AuctionBidEventProperties: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["V2AuctionBidEventProperties"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("sender", type: .nonNull(.scalar(String.self))),
                    GraphQLField("firstBid", type: .nonNull(.scalar(Bool.self))),
                    GraphQLField("extended", type: .nonNull(.scalar(Bool.self))),
                    GraphQLField("value", type: .nonNull(.scalar(String.self))),
                    GraphQLField("price", type: .nonNull(.object(Price.selections))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("sender", type: .nonNull(.scalar(String.self))),
                    GraphQLField("firstBid", type: .nonNull(.scalar(Bool.self))),
                    GraphQLField("extended", type: .nonNull(.scalar(Bool.self))),
                    GraphQLField("value", type: .nonNull(.scalar(String.self))),
                    GraphQLField("price", type: .nonNull(.object(Price.selections))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(sender: String, firstBid: Bool, extended: Bool, value: String, price: Price) {
                  self.init(unsafeResultMap: ["__typename": "V2AuctionBidEventProperties", "sender": sender, "firstBid": firstBid, "extended": extended, "value": value, "price": price.resultMap])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var sender: String {
                  get {
                    return resultMap["sender"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "sender")
                  }
                }

                public var firstBid: Bool {
                  get {
                    return resultMap["firstBid"]! as! Bool
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "firstBid")
                  }
                }

                public var extended: Bool {
                  get {
                    return resultMap["extended"]! as! Bool
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "extended")
                  }
                }

                public var value: String {
                  get {
                    return resultMap["value"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "value")
                  }
                }

                public var price: Price {
                  get {
                    return Price(unsafeResultMap: resultMap["price"]! as! ResultMap)
                  }
                  set {
                    resultMap.updateValue(newValue.resultMap, forKey: "price")
                  }
                }

                public var fragments: Fragments {
                  get {
                    return Fragments(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }

                public struct Fragments {
                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public var v2AuctionEventPropertiesInfo: V2AuctionEventPropertiesInfo {
                    get {
                      return V2AuctionEventPropertiesInfo(unsafeResultMap: resultMap)
                    }
                    set {
                      resultMap += newValue.resultMap
                    }
                  }
                }

                public struct Price: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["PriceAtTime"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                      GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
                      GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
                      GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
                    self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var blockNumber: Int {
                    get {
                      return resultMap["blockNumber"]! as! Int
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "blockNumber")
                    }
                  }

                  public var chainTokenPrice: ChainTokenPrice? {
                    get {
                      return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
                    }
                    set {
                      resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
                    }
                  }

                  public var nativePrice: NativePrice {
                    get {
                      return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
                    }
                    set {
                      resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
                    }
                  }

                  public var usdcPrice: UsdcPrice? {
                    get {
                      return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
                    }
                    set {
                      resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
                    }
                  }

                  public var fragments: Fragments {
                    get {
                      return Fragments(unsafeResultMap: resultMap)
                    }
                    set {
                      resultMap += newValue.resultMap
                    }
                  }

                  public struct Fragments {
                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public var priceSummary: PriceSummary {
                      get {
                        return PriceSummary(unsafeResultMap: resultMap)
                      }
                      set {
                        resultMap += newValue.resultMap
                      }
                    }
                  }

                  public struct ChainTokenPrice: GraphQLSelectionSet {
                    public static let possibleTypes: [String] = ["CurrencyAmount"]

                    public static var selections: [GraphQLSelection] {
                      return [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                        GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                      ]
                    }

                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public init(decimal: Double, raw: String) {
                      self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                    }

                    public var __typename: String {
                      get {
                        return resultMap["__typename"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "__typename")
                      }
                    }

                    public var decimal: Double {
                      get {
                        return resultMap["decimal"]! as! Double
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "decimal")
                      }
                    }

                    public var raw: String {
                      get {
                        return resultMap["raw"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "raw")
                      }
                    }
                  }

                  public struct NativePrice: GraphQLSelectionSet {
                    public static let possibleTypes: [String] = ["CurrencyAmount"]

                    public static var selections: [GraphQLSelection] {
                      return [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                        GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                        GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
                      ]
                    }

                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public init(decimal: Double, raw: String, currency: Currency) {
                      self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
                    }

                    public var __typename: String {
                      get {
                        return resultMap["__typename"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "__typename")
                      }
                    }

                    public var decimal: Double {
                      get {
                        return resultMap["decimal"]! as! Double
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "decimal")
                      }
                    }

                    public var raw: String {
                      get {
                        return resultMap["raw"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "raw")
                      }
                    }

                    public var currency: Currency {
                      get {
                        return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
                      }
                      set {
                        resultMap.updateValue(newValue.resultMap, forKey: "currency")
                      }
                    }

                    public struct Currency: GraphQLSelectionSet {
                      public static let possibleTypes: [String] = ["Currency"]

                      public static var selections: [GraphQLSelection] {
                        return [
                          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                          GraphQLField("address", type: .nonNull(.scalar(String.self))),
                          GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                          GraphQLField("name", type: .nonNull(.scalar(String.self))),
                        ]
                      }

                      public private(set) var resultMap: ResultMap

                      public init(unsafeResultMap: ResultMap) {
                        self.resultMap = unsafeResultMap
                      }

                      public init(address: String, decimals: Int, name: String) {
                        self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
                      }

                      public var __typename: String {
                        get {
                          return resultMap["__typename"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "__typename")
                        }
                      }

                      public var address: String {
                        get {
                          return resultMap["address"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "address")
                        }
                      }

                      public var decimals: Int {
                        get {
                          return resultMap["decimals"]! as! Int
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "decimals")
                        }
                      }

                      public var name: String {
                        get {
                          return resultMap["name"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "name")
                        }
                      }
                    }
                  }

                  public struct UsdcPrice: GraphQLSelectionSet {
                    public static let possibleTypes: [String] = ["CurrencyAmount"]

                    public static var selections: [GraphQLSelection] {
                      return [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                        GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                      ]
                    }

                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public init(decimal: Double, raw: String) {
                      self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                    }

                    public var __typename: String {
                      get {
                        return resultMap["__typename"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "__typename")
                      }
                    }

                    public var decimal: Double {
                      get {
                        return resultMap["decimal"]! as! Double
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "decimal")
                      }
                    }

                    public var raw: String {
                      get {
                        return resultMap["raw"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "raw")
                      }
                    }
                  }
                }
              }

              public var asV2AuctionCreatedEventProperties: AsV2AuctionCreatedEventProperties? {
                get {
                  if !AsV2AuctionCreatedEventProperties.possibleTypes.contains(__typename) { return nil }
                  return AsV2AuctionCreatedEventProperties(unsafeResultMap: resultMap)
                }
                set {
                  guard let newValue = newValue else { return }
                  resultMap = newValue.resultMap
                }
              }

              public struct AsV2AuctionCreatedEventProperties: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["V2AuctionCreatedEventProperties"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("auctionCurrency", type: .nonNull(.scalar(String.self))),
                    GraphQLField("tokenOwner", type: .nonNull(.scalar(String.self))),
                    GraphQLField("curator", type: .nonNull(.scalar(String.self))),
                    GraphQLField("curatorFeePercentage", type: .nonNull(.scalar(Int.self))),
                    GraphQLField("duration", type: .nonNull(.scalar(String.self))),
                    GraphQLField("reservePrice", type: .nonNull(.scalar(String.self))),
                    GraphQLField("price", type: .nonNull(.object(Price.selections))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(auctionCurrency: String, tokenOwner: String, curator: String, curatorFeePercentage: Int, duration: String, reservePrice: String, price: Price) {
                  self.init(unsafeResultMap: ["__typename": "V2AuctionCreatedEventProperties", "auctionCurrency": auctionCurrency, "tokenOwner": tokenOwner, "curator": curator, "curatorFeePercentage": curatorFeePercentage, "duration": duration, "reservePrice": reservePrice, "price": price.resultMap])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var auctionCurrency: String {
                  get {
                    return resultMap["auctionCurrency"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "auctionCurrency")
                  }
                }

                public var tokenOwner: String {
                  get {
                    return resultMap["tokenOwner"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "tokenOwner")
                  }
                }

                public var curator: String {
                  get {
                    return resultMap["curator"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "curator")
                  }
                }

                public var curatorFeePercentage: Int {
                  get {
                    return resultMap["curatorFeePercentage"]! as! Int
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "curatorFeePercentage")
                  }
                }

                public var duration: String {
                  get {
                    return resultMap["duration"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "duration")
                  }
                }

                public var reservePrice: String {
                  get {
                    return resultMap["reservePrice"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "reservePrice")
                  }
                }

                public var price: Price {
                  get {
                    return Price(unsafeResultMap: resultMap["price"]! as! ResultMap)
                  }
                  set {
                    resultMap.updateValue(newValue.resultMap, forKey: "price")
                  }
                }

                public var fragments: Fragments {
                  get {
                    return Fragments(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }

                public struct Fragments {
                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public var v2AuctionEventPropertiesInfo: V2AuctionEventPropertiesInfo {
                    get {
                      return V2AuctionEventPropertiesInfo(unsafeResultMap: resultMap)
                    }
                    set {
                      resultMap += newValue.resultMap
                    }
                  }
                }

                public struct Price: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["PriceAtTime"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                      GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
                      GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
                      GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
                    self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var blockNumber: Int {
                    get {
                      return resultMap["blockNumber"]! as! Int
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "blockNumber")
                    }
                  }

                  public var chainTokenPrice: ChainTokenPrice? {
                    get {
                      return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
                    }
                    set {
                      resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
                    }
                  }

                  public var nativePrice: NativePrice {
                    get {
                      return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
                    }
                    set {
                      resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
                    }
                  }

                  public var usdcPrice: UsdcPrice? {
                    get {
                      return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
                    }
                    set {
                      resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
                    }
                  }

                  public var fragments: Fragments {
                    get {
                      return Fragments(unsafeResultMap: resultMap)
                    }
                    set {
                      resultMap += newValue.resultMap
                    }
                  }

                  public struct Fragments {
                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public var priceSummary: PriceSummary {
                      get {
                        return PriceSummary(unsafeResultMap: resultMap)
                      }
                      set {
                        resultMap += newValue.resultMap
                      }
                    }
                  }

                  public struct ChainTokenPrice: GraphQLSelectionSet {
                    public static let possibleTypes: [String] = ["CurrencyAmount"]

                    public static var selections: [GraphQLSelection] {
                      return [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                        GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                      ]
                    }

                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public init(decimal: Double, raw: String) {
                      self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                    }

                    public var __typename: String {
                      get {
                        return resultMap["__typename"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "__typename")
                      }
                    }

                    public var decimal: Double {
                      get {
                        return resultMap["decimal"]! as! Double
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "decimal")
                      }
                    }

                    public var raw: String {
                      get {
                        return resultMap["raw"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "raw")
                      }
                    }
                  }

                  public struct NativePrice: GraphQLSelectionSet {
                    public static let possibleTypes: [String] = ["CurrencyAmount"]

                    public static var selections: [GraphQLSelection] {
                      return [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                        GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                        GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
                      ]
                    }

                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public init(decimal: Double, raw: String, currency: Currency) {
                      self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
                    }

                    public var __typename: String {
                      get {
                        return resultMap["__typename"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "__typename")
                      }
                    }

                    public var decimal: Double {
                      get {
                        return resultMap["decimal"]! as! Double
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "decimal")
                      }
                    }

                    public var raw: String {
                      get {
                        return resultMap["raw"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "raw")
                      }
                    }

                    public var currency: Currency {
                      get {
                        return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
                      }
                      set {
                        resultMap.updateValue(newValue.resultMap, forKey: "currency")
                      }
                    }

                    public struct Currency: GraphQLSelectionSet {
                      public static let possibleTypes: [String] = ["Currency"]

                      public static var selections: [GraphQLSelection] {
                        return [
                          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                          GraphQLField("address", type: .nonNull(.scalar(String.self))),
                          GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                          GraphQLField("name", type: .nonNull(.scalar(String.self))),
                        ]
                      }

                      public private(set) var resultMap: ResultMap

                      public init(unsafeResultMap: ResultMap) {
                        self.resultMap = unsafeResultMap
                      }

                      public init(address: String, decimals: Int, name: String) {
                        self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
                      }

                      public var __typename: String {
                        get {
                          return resultMap["__typename"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "__typename")
                        }
                      }

                      public var address: String {
                        get {
                          return resultMap["address"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "address")
                        }
                      }

                      public var decimals: Int {
                        get {
                          return resultMap["decimals"]! as! Int
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "decimals")
                        }
                      }

                      public var name: String {
                        get {
                          return resultMap["name"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "name")
                        }
                      }
                    }
                  }

                  public struct UsdcPrice: GraphQLSelectionSet {
                    public static let possibleTypes: [String] = ["CurrencyAmount"]

                    public static var selections: [GraphQLSelection] {
                      return [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                        GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                      ]
                    }

                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public init(decimal: Double, raw: String) {
                      self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                    }

                    public var __typename: String {
                      get {
                        return resultMap["__typename"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "__typename")
                      }
                    }

                    public var decimal: Double {
                      get {
                        return resultMap["decimal"]! as! Double
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "decimal")
                      }
                    }

                    public var raw: String {
                      get {
                        return resultMap["raw"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "raw")
                      }
                    }
                  }
                }
              }

              public var asV2AuctionCanceledEventProperties: AsV2AuctionCanceledEventProperties? {
                get {
                  if !AsV2AuctionCanceledEventProperties.possibleTypes.contains(__typename) { return nil }
                  return AsV2AuctionCanceledEventProperties(unsafeResultMap: resultMap)
                }
                set {
                  guard let newValue = newValue else { return }
                  resultMap = newValue.resultMap
                }
              }

              public struct AsV2AuctionCanceledEventProperties: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["V2AuctionCanceledEventProperties"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("tokenOwner", type: .nonNull(.scalar(String.self))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(tokenOwner: String) {
                  self.init(unsafeResultMap: ["__typename": "V2AuctionCanceledEventProperties", "tokenOwner": tokenOwner])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var tokenOwner: String {
                  get {
                    return resultMap["tokenOwner"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "tokenOwner")
                  }
                }

                public var fragments: Fragments {
                  get {
                    return Fragments(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }

                public struct Fragments {
                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public var v2AuctionEventPropertiesInfo: V2AuctionEventPropertiesInfo {
                    get {
                      return V2AuctionEventPropertiesInfo(unsafeResultMap: resultMap)
                    }
                    set {
                      resultMap += newValue.resultMap
                    }
                  }
                }
              }

              public var asV2AuctionDurationExtendedEventProperties: AsV2AuctionDurationExtendedEventProperties? {
                get {
                  if !AsV2AuctionDurationExtendedEventProperties.possibleTypes.contains(__typename) { return nil }
                  return AsV2AuctionDurationExtendedEventProperties(unsafeResultMap: resultMap)
                }
                set {
                  guard let newValue = newValue else { return }
                  resultMap = newValue.resultMap
                }
              }

              public struct AsV2AuctionDurationExtendedEventProperties: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["V2AuctionDurationExtendedEventProperties"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("duration", type: .nonNull(.scalar(String.self))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(duration: String) {
                  self.init(unsafeResultMap: ["__typename": "V2AuctionDurationExtendedEventProperties", "duration": duration])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var duration: String {
                  get {
                    return resultMap["duration"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "duration")
                  }
                }

                public var fragments: Fragments {
                  get {
                    return Fragments(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }

                public struct Fragments {
                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public var v2AuctionEventPropertiesInfo: V2AuctionEventPropertiesInfo {
                    get {
                      return V2AuctionEventPropertiesInfo(unsafeResultMap: resultMap)
                    }
                    set {
                      resultMap += newValue.resultMap
                    }
                  }
                }
              }

              public var asV2AuctionEndedEventProperties: AsV2AuctionEndedEventProperties? {
                get {
                  if !AsV2AuctionEndedEventProperties.possibleTypes.contains(__typename) { return nil }
                  return AsV2AuctionEndedEventProperties(unsafeResultMap: resultMap)
                }
                set {
                  guard let newValue = newValue else { return }
                  resultMap = newValue.resultMap
                }
              }

              public struct AsV2AuctionEndedEventProperties: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["V2AuctionEndedEventProperties"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("tokenOwner", type: .nonNull(.scalar(String.self))),
                    GraphQLField("curator", type: .nonNull(.scalar(String.self))),
                    GraphQLField("winner", type: .nonNull(.scalar(String.self))),
                    GraphQLField("auctionCurrency", type: .nonNull(.scalar(String.self))),
                    GraphQLField("amount", type: .nonNull(.scalar(String.self))),
                    GraphQLField("curatorFee", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("tokenOwner", type: .nonNull(.scalar(String.self))),
                    GraphQLField("curator", type: .nonNull(.scalar(String.self))),
                    GraphQLField("winner", type: .nonNull(.scalar(String.self))),
                    GraphQLField("auctionCurrency", type: .nonNull(.scalar(String.self))),
                    GraphQLField("amount", type: .nonNull(.scalar(String.self))),
                    GraphQLField("curatorFee", type: .nonNull(.scalar(String.self))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(tokenOwner: String, curator: String, winner: String, auctionCurrency: String, amount: String, curatorFee: String) {
                  self.init(unsafeResultMap: ["__typename": "V2AuctionEndedEventProperties", "tokenOwner": tokenOwner, "curator": curator, "winner": winner, "auctionCurrency": auctionCurrency, "amount": amount, "curatorFee": curatorFee])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var tokenOwner: String {
                  get {
                    return resultMap["tokenOwner"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "tokenOwner")
                  }
                }

                public var curator: String {
                  get {
                    return resultMap["curator"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "curator")
                  }
                }

                public var winner: String {
                  get {
                    return resultMap["winner"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "winner")
                  }
                }

                public var auctionCurrency: String {
                  get {
                    return resultMap["auctionCurrency"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "auctionCurrency")
                  }
                }

                public var amount: String {
                  get {
                    return resultMap["amount"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "amount")
                  }
                }

                public var curatorFee: String {
                  get {
                    return resultMap["curatorFee"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "curatorFee")
                  }
                }

                public var fragments: Fragments {
                  get {
                    return Fragments(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }

                public struct Fragments {
                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public var v2AuctionEventPropertiesInfo: V2AuctionEventPropertiesInfo {
                    get {
                      return V2AuctionEventPropertiesInfo(unsafeResultMap: resultMap)
                    }
                    set {
                      resultMap += newValue.resultMap
                    }
                  }
                }
              }

              public var asV2AuctionReservePriceUpdatedEventProperties: AsV2AuctionReservePriceUpdatedEventProperties? {
                get {
                  if !AsV2AuctionReservePriceUpdatedEventProperties.possibleTypes.contains(__typename) { return nil }
                  return AsV2AuctionReservePriceUpdatedEventProperties(unsafeResultMap: resultMap)
                }
                set {
                  guard let newValue = newValue else { return }
                  resultMap = newValue.resultMap
                }
              }

              public struct AsV2AuctionReservePriceUpdatedEventProperties: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["V2AuctionReservePriceUpdatedEventProperties"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("reservePrice", type: .nonNull(.scalar(String.self))),
                    GraphQLField("price", type: .nonNull(.object(Price.selections))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(reservePrice: String, price: Price) {
                  self.init(unsafeResultMap: ["__typename": "V2AuctionReservePriceUpdatedEventProperties", "reservePrice": reservePrice, "price": price.resultMap])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var reservePrice: String {
                  get {
                    return resultMap["reservePrice"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "reservePrice")
                  }
                }

                public var price: Price {
                  get {
                    return Price(unsafeResultMap: resultMap["price"]! as! ResultMap)
                  }
                  set {
                    resultMap.updateValue(newValue.resultMap, forKey: "price")
                  }
                }

                public var fragments: Fragments {
                  get {
                    return Fragments(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }

                public struct Fragments {
                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public var v2AuctionEventPropertiesInfo: V2AuctionEventPropertiesInfo {
                    get {
                      return V2AuctionEventPropertiesInfo(unsafeResultMap: resultMap)
                    }
                    set {
                      resultMap += newValue.resultMap
                    }
                  }
                }

                public struct Price: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["PriceAtTime"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                      GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
                      GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
                      GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
                    self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var blockNumber: Int {
                    get {
                      return resultMap["blockNumber"]! as! Int
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "blockNumber")
                    }
                  }

                  public var chainTokenPrice: ChainTokenPrice? {
                    get {
                      return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
                    }
                    set {
                      resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
                    }
                  }

                  public var nativePrice: NativePrice {
                    get {
                      return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
                    }
                    set {
                      resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
                    }
                  }

                  public var usdcPrice: UsdcPrice? {
                    get {
                      return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
                    }
                    set {
                      resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
                    }
                  }

                  public var fragments: Fragments {
                    get {
                      return Fragments(unsafeResultMap: resultMap)
                    }
                    set {
                      resultMap += newValue.resultMap
                    }
                  }

                  public struct Fragments {
                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public var priceSummary: PriceSummary {
                      get {
                        return PriceSummary(unsafeResultMap: resultMap)
                      }
                      set {
                        resultMap += newValue.resultMap
                      }
                    }
                  }

                  public struct ChainTokenPrice: GraphQLSelectionSet {
                    public static let possibleTypes: [String] = ["CurrencyAmount"]

                    public static var selections: [GraphQLSelection] {
                      return [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                        GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                      ]
                    }

                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public init(decimal: Double, raw: String) {
                      self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                    }

                    public var __typename: String {
                      get {
                        return resultMap["__typename"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "__typename")
                      }
                    }

                    public var decimal: Double {
                      get {
                        return resultMap["decimal"]! as! Double
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "decimal")
                      }
                    }

                    public var raw: String {
                      get {
                        return resultMap["raw"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "raw")
                      }
                    }
                  }

                  public struct NativePrice: GraphQLSelectionSet {
                    public static let possibleTypes: [String] = ["CurrencyAmount"]

                    public static var selections: [GraphQLSelection] {
                      return [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                        GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                        GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
                      ]
                    }

                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public init(decimal: Double, raw: String, currency: Currency) {
                      self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
                    }

                    public var __typename: String {
                      get {
                        return resultMap["__typename"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "__typename")
                      }
                    }

                    public var decimal: Double {
                      get {
                        return resultMap["decimal"]! as! Double
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "decimal")
                      }
                    }

                    public var raw: String {
                      get {
                        return resultMap["raw"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "raw")
                      }
                    }

                    public var currency: Currency {
                      get {
                        return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
                      }
                      set {
                        resultMap.updateValue(newValue.resultMap, forKey: "currency")
                      }
                    }

                    public struct Currency: GraphQLSelectionSet {
                      public static let possibleTypes: [String] = ["Currency"]

                      public static var selections: [GraphQLSelection] {
                        return [
                          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                          GraphQLField("address", type: .nonNull(.scalar(String.self))),
                          GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                          GraphQLField("name", type: .nonNull(.scalar(String.self))),
                        ]
                      }

                      public private(set) var resultMap: ResultMap

                      public init(unsafeResultMap: ResultMap) {
                        self.resultMap = unsafeResultMap
                      }

                      public init(address: String, decimals: Int, name: String) {
                        self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
                      }

                      public var __typename: String {
                        get {
                          return resultMap["__typename"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "__typename")
                        }
                      }

                      public var address: String {
                        get {
                          return resultMap["address"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "address")
                        }
                      }

                      public var decimals: Int {
                        get {
                          return resultMap["decimals"]! as! Int
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "decimals")
                        }
                      }

                      public var name: String {
                        get {
                          return resultMap["name"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "name")
                        }
                      }
                    }
                  }

                  public struct UsdcPrice: GraphQLSelectionSet {
                    public static let possibleTypes: [String] = ["CurrencyAmount"]

                    public static var selections: [GraphQLSelection] {
                      return [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                        GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                      ]
                    }

                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public init(decimal: Double, raw: String) {
                      self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                    }

                    public var __typename: String {
                      get {
                        return resultMap["__typename"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "__typename")
                      }
                    }

                    public var decimal: Double {
                      get {
                        return resultMap["decimal"]! as! Double
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "decimal")
                      }
                    }

                    public var raw: String {
                      get {
                        return resultMap["raw"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "raw")
                      }
                    }
                  }
                }
              }

              public var asV2AuctionApprovalUpdatedEventProperties: AsV2AuctionApprovalUpdatedEventProperties? {
                get {
                  if !AsV2AuctionApprovalUpdatedEventProperties.possibleTypes.contains(__typename) { return nil }
                  return AsV2AuctionApprovalUpdatedEventProperties(unsafeResultMap: resultMap)
                }
                set {
                  guard let newValue = newValue else { return }
                  resultMap = newValue.resultMap
                }
              }

              public struct AsV2AuctionApprovalUpdatedEventProperties: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["V2AuctionApprovalUpdatedEventProperties"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("approved", type: .nonNull(.scalar(Bool.self))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(approved: Bool) {
                  self.init(unsafeResultMap: ["__typename": "V2AuctionApprovalUpdatedEventProperties", "approved": approved])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var approved: Bool {
                  get {
                    return resultMap["approved"]! as! Bool
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "approved")
                  }
                }

                public var fragments: Fragments {
                  get {
                    return Fragments(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }

                public struct Fragments {
                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public var v2AuctionEventPropertiesInfo: V2AuctionEventPropertiesInfo {
                    get {
                      return V2AuctionEventPropertiesInfo(unsafeResultMap: resultMap)
                    }
                    set {
                      resultMap += newValue.resultMap
                    }
                  }
                }
              }
            }
          }

          public var asV3AskEvent: AsV3AskEvent? {
            get {
              if !AsV3AskEvent.possibleTypes.contains(__typename) { return nil }
              return AsV3AskEvent(unsafeResultMap: resultMap)
            }
            set {
              guard let newValue = newValue else { return }
              resultMap = newValue.resultMap
            }
          }

          public struct AsV3AskEvent: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["V3AskEvent"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("v3AskEventType", type: .nonNull(.scalar(V3AskEventType.self))),
                GraphQLField("address", type: .nonNull(.scalar(String.self))),
                GraphQLField("collectionAddress", type: .nonNull(.scalar(String.self))),
                GraphQLField("tokenId", type: .nonNull(.scalar(String.self))),
                GraphQLField("properties", type: .nonNull(.object(Property.selections))),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(v3AskEventType: V3AskEventType, address: String, collectionAddress: String, tokenId: String, properties: Property) {
              self.init(unsafeResultMap: ["__typename": "V3AskEvent", "v3AskEventType": v3AskEventType, "address": address, "collectionAddress": collectionAddress, "tokenId": tokenId, "properties": properties.resultMap])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var v3AskEventType: V3AskEventType {
              get {
                return resultMap["v3AskEventType"]! as! V3AskEventType
              }
              set {
                resultMap.updateValue(newValue, forKey: "v3AskEventType")
              }
            }

            public var address: String {
              get {
                return resultMap["address"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "address")
              }
            }

            public var collectionAddress: String {
              get {
                return resultMap["collectionAddress"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "collectionAddress")
              }
            }

            public var tokenId: String {
              get {
                return resultMap["tokenId"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "tokenId")
              }
            }

            public var properties: Property {
              get {
                return Property(unsafeResultMap: resultMap["properties"]! as! ResultMap)
              }
              set {
                resultMap.updateValue(newValue.resultMap, forKey: "properties")
              }
            }

            public struct Property: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["V3AskCreatedEventProperties", "V3AskCanceledEventProperties", "V3AskPriceUpdatedEventProperties", "V3AskFilledEventProperties"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLTypeCase(
                    variants: ["V3AskCreatedEventProperties": AsV3AskCreatedEventProperties.selections, "V3AskCanceledEventProperties": AsV3AskCanceledEventProperties.selections, "V3AskPriceUpdatedEventProperties": AsV3AskPriceUpdatedEventProperties.selections, "V3AskFilledEventProperties": AsV3AskFilledEventProperties.selections],
                    default: [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    ]
                  )
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public static func makeV3AskCreatedEventProperties(seller: String, sellerFundsRecipient: String, askCurrency: String, askPrice: String, findersFeeBps: Int, price: AsV3AskCreatedEventProperties.Price) -> Property {
                return Property(unsafeResultMap: ["__typename": "V3AskCreatedEventProperties", "seller": seller, "sellerFundsRecipient": sellerFundsRecipient, "askCurrency": askCurrency, "askPrice": askPrice, "findersFeeBps": findersFeeBps, "price": price.resultMap])
              }

              public static func makeV3AskCanceledEventProperties(seller: String, sellerFundsRecipient: String, askCurrency: String, askPrice: String, findersFeeBps: Int, price: AsV3AskCanceledEventProperties.Price) -> Property {
                return Property(unsafeResultMap: ["__typename": "V3AskCanceledEventProperties", "seller": seller, "sellerFundsRecipient": sellerFundsRecipient, "askCurrency": askCurrency, "askPrice": askPrice, "findersFeeBps": findersFeeBps, "price": price.resultMap])
              }

              public static func makeV3AskPriceUpdatedEventProperties(seller: String, sellerFundsRecipient: String, askCurrency: String, askPrice: String, findersFeeBps: Int, price: AsV3AskPriceUpdatedEventProperties.Price) -> Property {
                return Property(unsafeResultMap: ["__typename": "V3AskPriceUpdatedEventProperties", "seller": seller, "sellerFundsRecipient": sellerFundsRecipient, "askCurrency": askCurrency, "askPrice": askPrice, "findersFeeBps": findersFeeBps, "price": price.resultMap])
              }

              public static func makeV3AskFilledEventProperties(seller: String, sellerFundsRecipient: String, askCurrency: String, askPrice: String, findersFeeBps: Int, price: AsV3AskFilledEventProperties.Price, finder: String, buyer: String) -> Property {
                return Property(unsafeResultMap: ["__typename": "V3AskFilledEventProperties", "seller": seller, "sellerFundsRecipient": sellerFundsRecipient, "askCurrency": askCurrency, "askPrice": askPrice, "findersFeeBps": findersFeeBps, "price": price.resultMap, "finder": finder, "buyer": buyer])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var fragments: Fragments {
                get {
                  return Fragments(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }

              public struct Fragments {
                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public var v3AskEventPropertiesInfo: V3AskEventPropertiesInfo {
                  get {
                    return V3AskEventPropertiesInfo(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }
              }

              public var asV3AskCreatedEventProperties: AsV3AskCreatedEventProperties? {
                get {
                  if !AsV3AskCreatedEventProperties.possibleTypes.contains(__typename) { return nil }
                  return AsV3AskCreatedEventProperties(unsafeResultMap: resultMap)
                }
                set {
                  guard let newValue = newValue else { return }
                  resultMap = newValue.resultMap
                }
              }

              public struct AsV3AskCreatedEventProperties: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["V3AskCreatedEventProperties"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("seller", type: .nonNull(.scalar(String.self))),
                    GraphQLField("sellerFundsRecipient", type: .nonNull(.scalar(String.self))),
                    GraphQLField("askCurrency", type: .nonNull(.scalar(String.self))),
                    GraphQLField("askPrice", type: .nonNull(.scalar(String.self))),
                    GraphQLField("findersFeeBps", type: .nonNull(.scalar(Int.self))),
                    GraphQLField("price", type: .nonNull(.object(Price.selections))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(seller: String, sellerFundsRecipient: String, askCurrency: String, askPrice: String, findersFeeBps: Int, price: Price) {
                  self.init(unsafeResultMap: ["__typename": "V3AskCreatedEventProperties", "seller": seller, "sellerFundsRecipient": sellerFundsRecipient, "askCurrency": askCurrency, "askPrice": askPrice, "findersFeeBps": findersFeeBps, "price": price.resultMap])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var seller: String {
                  get {
                    return resultMap["seller"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "seller")
                  }
                }

                public var sellerFundsRecipient: String {
                  get {
                    return resultMap["sellerFundsRecipient"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "sellerFundsRecipient")
                  }
                }

                public var askCurrency: String {
                  get {
                    return resultMap["askCurrency"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "askCurrency")
                  }
                }

                public var askPrice: String {
                  get {
                    return resultMap["askPrice"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "askPrice")
                  }
                }

                public var findersFeeBps: Int {
                  get {
                    return resultMap["findersFeeBps"]! as! Int
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "findersFeeBps")
                  }
                }

                public var price: Price {
                  get {
                    return Price(unsafeResultMap: resultMap["price"]! as! ResultMap)
                  }
                  set {
                    resultMap.updateValue(newValue.resultMap, forKey: "price")
                  }
                }

                public var fragments: Fragments {
                  get {
                    return Fragments(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }

                public struct Fragments {
                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public var v3AskEventPropertiesInfo: V3AskEventPropertiesInfo {
                    get {
                      return V3AskEventPropertiesInfo(unsafeResultMap: resultMap)
                    }
                    set {
                      resultMap += newValue.resultMap
                    }
                  }
                }

                public struct Price: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["PriceAtTime"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                      GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
                      GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
                      GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
                    self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var blockNumber: Int {
                    get {
                      return resultMap["blockNumber"]! as! Int
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "blockNumber")
                    }
                  }

                  public var chainTokenPrice: ChainTokenPrice? {
                    get {
                      return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
                    }
                    set {
                      resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
                    }
                  }

                  public var nativePrice: NativePrice {
                    get {
                      return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
                    }
                    set {
                      resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
                    }
                  }

                  public var usdcPrice: UsdcPrice? {
                    get {
                      return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
                    }
                    set {
                      resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
                    }
                  }

                  public var fragments: Fragments {
                    get {
                      return Fragments(unsafeResultMap: resultMap)
                    }
                    set {
                      resultMap += newValue.resultMap
                    }
                  }

                  public struct Fragments {
                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public var priceSummary: PriceSummary {
                      get {
                        return PriceSummary(unsafeResultMap: resultMap)
                      }
                      set {
                        resultMap += newValue.resultMap
                      }
                    }
                  }

                  public struct ChainTokenPrice: GraphQLSelectionSet {
                    public static let possibleTypes: [String] = ["CurrencyAmount"]

                    public static var selections: [GraphQLSelection] {
                      return [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                        GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                      ]
                    }

                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public init(decimal: Double, raw: String) {
                      self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                    }

                    public var __typename: String {
                      get {
                        return resultMap["__typename"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "__typename")
                      }
                    }

                    public var decimal: Double {
                      get {
                        return resultMap["decimal"]! as! Double
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "decimal")
                      }
                    }

                    public var raw: String {
                      get {
                        return resultMap["raw"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "raw")
                      }
                    }
                  }

                  public struct NativePrice: GraphQLSelectionSet {
                    public static let possibleTypes: [String] = ["CurrencyAmount"]

                    public static var selections: [GraphQLSelection] {
                      return [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                        GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                        GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
                      ]
                    }

                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public init(decimal: Double, raw: String, currency: Currency) {
                      self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
                    }

                    public var __typename: String {
                      get {
                        return resultMap["__typename"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "__typename")
                      }
                    }

                    public var decimal: Double {
                      get {
                        return resultMap["decimal"]! as! Double
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "decimal")
                      }
                    }

                    public var raw: String {
                      get {
                        return resultMap["raw"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "raw")
                      }
                    }

                    public var currency: Currency {
                      get {
                        return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
                      }
                      set {
                        resultMap.updateValue(newValue.resultMap, forKey: "currency")
                      }
                    }

                    public struct Currency: GraphQLSelectionSet {
                      public static let possibleTypes: [String] = ["Currency"]

                      public static var selections: [GraphQLSelection] {
                        return [
                          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                          GraphQLField("address", type: .nonNull(.scalar(String.self))),
                          GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                          GraphQLField("name", type: .nonNull(.scalar(String.self))),
                        ]
                      }

                      public private(set) var resultMap: ResultMap

                      public init(unsafeResultMap: ResultMap) {
                        self.resultMap = unsafeResultMap
                      }

                      public init(address: String, decimals: Int, name: String) {
                        self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
                      }

                      public var __typename: String {
                        get {
                          return resultMap["__typename"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "__typename")
                        }
                      }

                      public var address: String {
                        get {
                          return resultMap["address"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "address")
                        }
                      }

                      public var decimals: Int {
                        get {
                          return resultMap["decimals"]! as! Int
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "decimals")
                        }
                      }

                      public var name: String {
                        get {
                          return resultMap["name"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "name")
                        }
                      }
                    }
                  }

                  public struct UsdcPrice: GraphQLSelectionSet {
                    public static let possibleTypes: [String] = ["CurrencyAmount"]

                    public static var selections: [GraphQLSelection] {
                      return [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                        GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                      ]
                    }

                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public init(decimal: Double, raw: String) {
                      self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                    }

                    public var __typename: String {
                      get {
                        return resultMap["__typename"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "__typename")
                      }
                    }

                    public var decimal: Double {
                      get {
                        return resultMap["decimal"]! as! Double
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "decimal")
                      }
                    }

                    public var raw: String {
                      get {
                        return resultMap["raw"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "raw")
                      }
                    }
                  }
                }
              }

              public var asV3AskCanceledEventProperties: AsV3AskCanceledEventProperties? {
                get {
                  if !AsV3AskCanceledEventProperties.possibleTypes.contains(__typename) { return nil }
                  return AsV3AskCanceledEventProperties(unsafeResultMap: resultMap)
                }
                set {
                  guard let newValue = newValue else { return }
                  resultMap = newValue.resultMap
                }
              }

              public struct AsV3AskCanceledEventProperties: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["V3AskCanceledEventProperties"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("seller", type: .nonNull(.scalar(String.self))),
                    GraphQLField("sellerFundsRecipient", type: .nonNull(.scalar(String.self))),
                    GraphQLField("askCurrency", type: .nonNull(.scalar(String.self))),
                    GraphQLField("askPrice", type: .nonNull(.scalar(String.self))),
                    GraphQLField("findersFeeBps", type: .nonNull(.scalar(Int.self))),
                    GraphQLField("price", type: .nonNull(.object(Price.selections))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(seller: String, sellerFundsRecipient: String, askCurrency: String, askPrice: String, findersFeeBps: Int, price: Price) {
                  self.init(unsafeResultMap: ["__typename": "V3AskCanceledEventProperties", "seller": seller, "sellerFundsRecipient": sellerFundsRecipient, "askCurrency": askCurrency, "askPrice": askPrice, "findersFeeBps": findersFeeBps, "price": price.resultMap])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var seller: String {
                  get {
                    return resultMap["seller"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "seller")
                  }
                }

                public var sellerFundsRecipient: String {
                  get {
                    return resultMap["sellerFundsRecipient"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "sellerFundsRecipient")
                  }
                }

                public var askCurrency: String {
                  get {
                    return resultMap["askCurrency"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "askCurrency")
                  }
                }

                public var askPrice: String {
                  get {
                    return resultMap["askPrice"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "askPrice")
                  }
                }

                public var findersFeeBps: Int {
                  get {
                    return resultMap["findersFeeBps"]! as! Int
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "findersFeeBps")
                  }
                }

                public var price: Price {
                  get {
                    return Price(unsafeResultMap: resultMap["price"]! as! ResultMap)
                  }
                  set {
                    resultMap.updateValue(newValue.resultMap, forKey: "price")
                  }
                }

                public var fragments: Fragments {
                  get {
                    return Fragments(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }

                public struct Fragments {
                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public var v3AskEventPropertiesInfo: V3AskEventPropertiesInfo {
                    get {
                      return V3AskEventPropertiesInfo(unsafeResultMap: resultMap)
                    }
                    set {
                      resultMap += newValue.resultMap
                    }
                  }
                }

                public struct Price: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["PriceAtTime"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                      GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
                      GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
                      GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
                    self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var blockNumber: Int {
                    get {
                      return resultMap["blockNumber"]! as! Int
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "blockNumber")
                    }
                  }

                  public var chainTokenPrice: ChainTokenPrice? {
                    get {
                      return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
                    }
                    set {
                      resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
                    }
                  }

                  public var nativePrice: NativePrice {
                    get {
                      return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
                    }
                    set {
                      resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
                    }
                  }

                  public var usdcPrice: UsdcPrice? {
                    get {
                      return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
                    }
                    set {
                      resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
                    }
                  }

                  public var fragments: Fragments {
                    get {
                      return Fragments(unsafeResultMap: resultMap)
                    }
                    set {
                      resultMap += newValue.resultMap
                    }
                  }

                  public struct Fragments {
                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public var priceSummary: PriceSummary {
                      get {
                        return PriceSummary(unsafeResultMap: resultMap)
                      }
                      set {
                        resultMap += newValue.resultMap
                      }
                    }
                  }

                  public struct ChainTokenPrice: GraphQLSelectionSet {
                    public static let possibleTypes: [String] = ["CurrencyAmount"]

                    public static var selections: [GraphQLSelection] {
                      return [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                        GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                      ]
                    }

                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public init(decimal: Double, raw: String) {
                      self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                    }

                    public var __typename: String {
                      get {
                        return resultMap["__typename"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "__typename")
                      }
                    }

                    public var decimal: Double {
                      get {
                        return resultMap["decimal"]! as! Double
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "decimal")
                      }
                    }

                    public var raw: String {
                      get {
                        return resultMap["raw"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "raw")
                      }
                    }
                  }

                  public struct NativePrice: GraphQLSelectionSet {
                    public static let possibleTypes: [String] = ["CurrencyAmount"]

                    public static var selections: [GraphQLSelection] {
                      return [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                        GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                        GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
                      ]
                    }

                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public init(decimal: Double, raw: String, currency: Currency) {
                      self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
                    }

                    public var __typename: String {
                      get {
                        return resultMap["__typename"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "__typename")
                      }
                    }

                    public var decimal: Double {
                      get {
                        return resultMap["decimal"]! as! Double
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "decimal")
                      }
                    }

                    public var raw: String {
                      get {
                        return resultMap["raw"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "raw")
                      }
                    }

                    public var currency: Currency {
                      get {
                        return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
                      }
                      set {
                        resultMap.updateValue(newValue.resultMap, forKey: "currency")
                      }
                    }

                    public struct Currency: GraphQLSelectionSet {
                      public static let possibleTypes: [String] = ["Currency"]

                      public static var selections: [GraphQLSelection] {
                        return [
                          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                          GraphQLField("address", type: .nonNull(.scalar(String.self))),
                          GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                          GraphQLField("name", type: .nonNull(.scalar(String.self))),
                        ]
                      }

                      public private(set) var resultMap: ResultMap

                      public init(unsafeResultMap: ResultMap) {
                        self.resultMap = unsafeResultMap
                      }

                      public init(address: String, decimals: Int, name: String) {
                        self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
                      }

                      public var __typename: String {
                        get {
                          return resultMap["__typename"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "__typename")
                        }
                      }

                      public var address: String {
                        get {
                          return resultMap["address"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "address")
                        }
                      }

                      public var decimals: Int {
                        get {
                          return resultMap["decimals"]! as! Int
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "decimals")
                        }
                      }

                      public var name: String {
                        get {
                          return resultMap["name"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "name")
                        }
                      }
                    }
                  }

                  public struct UsdcPrice: GraphQLSelectionSet {
                    public static let possibleTypes: [String] = ["CurrencyAmount"]

                    public static var selections: [GraphQLSelection] {
                      return [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                        GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                      ]
                    }

                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public init(decimal: Double, raw: String) {
                      self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                    }

                    public var __typename: String {
                      get {
                        return resultMap["__typename"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "__typename")
                      }
                    }

                    public var decimal: Double {
                      get {
                        return resultMap["decimal"]! as! Double
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "decimal")
                      }
                    }

                    public var raw: String {
                      get {
                        return resultMap["raw"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "raw")
                      }
                    }
                  }
                }
              }

              public var asV3AskPriceUpdatedEventProperties: AsV3AskPriceUpdatedEventProperties? {
                get {
                  if !AsV3AskPriceUpdatedEventProperties.possibleTypes.contains(__typename) { return nil }
                  return AsV3AskPriceUpdatedEventProperties(unsafeResultMap: resultMap)
                }
                set {
                  guard let newValue = newValue else { return }
                  resultMap = newValue.resultMap
                }
              }

              public struct AsV3AskPriceUpdatedEventProperties: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["V3AskPriceUpdatedEventProperties"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("seller", type: .nonNull(.scalar(String.self))),
                    GraphQLField("sellerFundsRecipient", type: .nonNull(.scalar(String.self))),
                    GraphQLField("askCurrency", type: .nonNull(.scalar(String.self))),
                    GraphQLField("askPrice", type: .nonNull(.scalar(String.self))),
                    GraphQLField("findersFeeBps", type: .nonNull(.scalar(Int.self))),
                    GraphQLField("price", type: .nonNull(.object(Price.selections))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(seller: String, sellerFundsRecipient: String, askCurrency: String, askPrice: String, findersFeeBps: Int, price: Price) {
                  self.init(unsafeResultMap: ["__typename": "V3AskPriceUpdatedEventProperties", "seller": seller, "sellerFundsRecipient": sellerFundsRecipient, "askCurrency": askCurrency, "askPrice": askPrice, "findersFeeBps": findersFeeBps, "price": price.resultMap])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var seller: String {
                  get {
                    return resultMap["seller"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "seller")
                  }
                }

                public var sellerFundsRecipient: String {
                  get {
                    return resultMap["sellerFundsRecipient"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "sellerFundsRecipient")
                  }
                }

                public var askCurrency: String {
                  get {
                    return resultMap["askCurrency"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "askCurrency")
                  }
                }

                public var askPrice: String {
                  get {
                    return resultMap["askPrice"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "askPrice")
                  }
                }

                public var findersFeeBps: Int {
                  get {
                    return resultMap["findersFeeBps"]! as! Int
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "findersFeeBps")
                  }
                }

                public var price: Price {
                  get {
                    return Price(unsafeResultMap: resultMap["price"]! as! ResultMap)
                  }
                  set {
                    resultMap.updateValue(newValue.resultMap, forKey: "price")
                  }
                }

                public var fragments: Fragments {
                  get {
                    return Fragments(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }

                public struct Fragments {
                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public var v3AskEventPropertiesInfo: V3AskEventPropertiesInfo {
                    get {
                      return V3AskEventPropertiesInfo(unsafeResultMap: resultMap)
                    }
                    set {
                      resultMap += newValue.resultMap
                    }
                  }
                }

                public struct Price: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["PriceAtTime"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                      GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
                      GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
                      GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
                    self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var blockNumber: Int {
                    get {
                      return resultMap["blockNumber"]! as! Int
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "blockNumber")
                    }
                  }

                  public var chainTokenPrice: ChainTokenPrice? {
                    get {
                      return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
                    }
                    set {
                      resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
                    }
                  }

                  public var nativePrice: NativePrice {
                    get {
                      return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
                    }
                    set {
                      resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
                    }
                  }

                  public var usdcPrice: UsdcPrice? {
                    get {
                      return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
                    }
                    set {
                      resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
                    }
                  }

                  public var fragments: Fragments {
                    get {
                      return Fragments(unsafeResultMap: resultMap)
                    }
                    set {
                      resultMap += newValue.resultMap
                    }
                  }

                  public struct Fragments {
                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public var priceSummary: PriceSummary {
                      get {
                        return PriceSummary(unsafeResultMap: resultMap)
                      }
                      set {
                        resultMap += newValue.resultMap
                      }
                    }
                  }

                  public struct ChainTokenPrice: GraphQLSelectionSet {
                    public static let possibleTypes: [String] = ["CurrencyAmount"]

                    public static var selections: [GraphQLSelection] {
                      return [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                        GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                      ]
                    }

                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public init(decimal: Double, raw: String) {
                      self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                    }

                    public var __typename: String {
                      get {
                        return resultMap["__typename"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "__typename")
                      }
                    }

                    public var decimal: Double {
                      get {
                        return resultMap["decimal"]! as! Double
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "decimal")
                      }
                    }

                    public var raw: String {
                      get {
                        return resultMap["raw"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "raw")
                      }
                    }
                  }

                  public struct NativePrice: GraphQLSelectionSet {
                    public static let possibleTypes: [String] = ["CurrencyAmount"]

                    public static var selections: [GraphQLSelection] {
                      return [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                        GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                        GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
                      ]
                    }

                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public init(decimal: Double, raw: String, currency: Currency) {
                      self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
                    }

                    public var __typename: String {
                      get {
                        return resultMap["__typename"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "__typename")
                      }
                    }

                    public var decimal: Double {
                      get {
                        return resultMap["decimal"]! as! Double
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "decimal")
                      }
                    }

                    public var raw: String {
                      get {
                        return resultMap["raw"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "raw")
                      }
                    }

                    public var currency: Currency {
                      get {
                        return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
                      }
                      set {
                        resultMap.updateValue(newValue.resultMap, forKey: "currency")
                      }
                    }

                    public struct Currency: GraphQLSelectionSet {
                      public static let possibleTypes: [String] = ["Currency"]

                      public static var selections: [GraphQLSelection] {
                        return [
                          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                          GraphQLField("address", type: .nonNull(.scalar(String.self))),
                          GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                          GraphQLField("name", type: .nonNull(.scalar(String.self))),
                        ]
                      }

                      public private(set) var resultMap: ResultMap

                      public init(unsafeResultMap: ResultMap) {
                        self.resultMap = unsafeResultMap
                      }

                      public init(address: String, decimals: Int, name: String) {
                        self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
                      }

                      public var __typename: String {
                        get {
                          return resultMap["__typename"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "__typename")
                        }
                      }

                      public var address: String {
                        get {
                          return resultMap["address"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "address")
                        }
                      }

                      public var decimals: Int {
                        get {
                          return resultMap["decimals"]! as! Int
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "decimals")
                        }
                      }

                      public var name: String {
                        get {
                          return resultMap["name"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "name")
                        }
                      }
                    }
                  }

                  public struct UsdcPrice: GraphQLSelectionSet {
                    public static let possibleTypes: [String] = ["CurrencyAmount"]

                    public static var selections: [GraphQLSelection] {
                      return [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                        GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                      ]
                    }

                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public init(decimal: Double, raw: String) {
                      self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                    }

                    public var __typename: String {
                      get {
                        return resultMap["__typename"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "__typename")
                      }
                    }

                    public var decimal: Double {
                      get {
                        return resultMap["decimal"]! as! Double
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "decimal")
                      }
                    }

                    public var raw: String {
                      get {
                        return resultMap["raw"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "raw")
                      }
                    }
                  }
                }
              }

              public var asV3AskFilledEventProperties: AsV3AskFilledEventProperties? {
                get {
                  if !AsV3AskFilledEventProperties.possibleTypes.contains(__typename) { return nil }
                  return AsV3AskFilledEventProperties(unsafeResultMap: resultMap)
                }
                set {
                  guard let newValue = newValue else { return }
                  resultMap = newValue.resultMap
                }
              }

              public struct AsV3AskFilledEventProperties: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["V3AskFilledEventProperties"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("seller", type: .nonNull(.scalar(String.self))),
                    GraphQLField("sellerFundsRecipient", type: .nonNull(.scalar(String.self))),
                    GraphQLField("askCurrency", type: .nonNull(.scalar(String.self))),
                    GraphQLField("askPrice", type: .nonNull(.scalar(String.self))),
                    GraphQLField("findersFeeBps", type: .nonNull(.scalar(Int.self))),
                    GraphQLField("price", type: .nonNull(.object(Price.selections))),
                    GraphQLField("finder", type: .nonNull(.scalar(String.self))),
                    GraphQLField("buyer", type: .nonNull(.scalar(String.self))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(seller: String, sellerFundsRecipient: String, askCurrency: String, askPrice: String, findersFeeBps: Int, price: Price, finder: String, buyer: String) {
                  self.init(unsafeResultMap: ["__typename": "V3AskFilledEventProperties", "seller": seller, "sellerFundsRecipient": sellerFundsRecipient, "askCurrency": askCurrency, "askPrice": askPrice, "findersFeeBps": findersFeeBps, "price": price.resultMap, "finder": finder, "buyer": buyer])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var seller: String {
                  get {
                    return resultMap["seller"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "seller")
                  }
                }

                public var sellerFundsRecipient: String {
                  get {
                    return resultMap["sellerFundsRecipient"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "sellerFundsRecipient")
                  }
                }

                public var askCurrency: String {
                  get {
                    return resultMap["askCurrency"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "askCurrency")
                  }
                }

                public var askPrice: String {
                  get {
                    return resultMap["askPrice"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "askPrice")
                  }
                }

                public var findersFeeBps: Int {
                  get {
                    return resultMap["findersFeeBps"]! as! Int
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "findersFeeBps")
                  }
                }

                public var price: Price {
                  get {
                    return Price(unsafeResultMap: resultMap["price"]! as! ResultMap)
                  }
                  set {
                    resultMap.updateValue(newValue.resultMap, forKey: "price")
                  }
                }

                public var finder: String {
                  get {
                    return resultMap["finder"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "finder")
                  }
                }

                public var buyer: String {
                  get {
                    return resultMap["buyer"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "buyer")
                  }
                }

                public var fragments: Fragments {
                  get {
                    return Fragments(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }

                public struct Fragments {
                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public var v3AskEventPropertiesInfo: V3AskEventPropertiesInfo {
                    get {
                      return V3AskEventPropertiesInfo(unsafeResultMap: resultMap)
                    }
                    set {
                      resultMap += newValue.resultMap
                    }
                  }
                }

                public struct Price: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["PriceAtTime"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                      GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
                      GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
                      GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
                    self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var blockNumber: Int {
                    get {
                      return resultMap["blockNumber"]! as! Int
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "blockNumber")
                    }
                  }

                  public var chainTokenPrice: ChainTokenPrice? {
                    get {
                      return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
                    }
                    set {
                      resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
                    }
                  }

                  public var nativePrice: NativePrice {
                    get {
                      return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
                    }
                    set {
                      resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
                    }
                  }

                  public var usdcPrice: UsdcPrice? {
                    get {
                      return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
                    }
                    set {
                      resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
                    }
                  }

                  public var fragments: Fragments {
                    get {
                      return Fragments(unsafeResultMap: resultMap)
                    }
                    set {
                      resultMap += newValue.resultMap
                    }
                  }

                  public struct Fragments {
                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public var priceSummary: PriceSummary {
                      get {
                        return PriceSummary(unsafeResultMap: resultMap)
                      }
                      set {
                        resultMap += newValue.resultMap
                      }
                    }
                  }

                  public struct ChainTokenPrice: GraphQLSelectionSet {
                    public static let possibleTypes: [String] = ["CurrencyAmount"]

                    public static var selections: [GraphQLSelection] {
                      return [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                        GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                      ]
                    }

                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public init(decimal: Double, raw: String) {
                      self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                    }

                    public var __typename: String {
                      get {
                        return resultMap["__typename"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "__typename")
                      }
                    }

                    public var decimal: Double {
                      get {
                        return resultMap["decimal"]! as! Double
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "decimal")
                      }
                    }

                    public var raw: String {
                      get {
                        return resultMap["raw"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "raw")
                      }
                    }
                  }

                  public struct NativePrice: GraphQLSelectionSet {
                    public static let possibleTypes: [String] = ["CurrencyAmount"]

                    public static var selections: [GraphQLSelection] {
                      return [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                        GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                        GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
                      ]
                    }

                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public init(decimal: Double, raw: String, currency: Currency) {
                      self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
                    }

                    public var __typename: String {
                      get {
                        return resultMap["__typename"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "__typename")
                      }
                    }

                    public var decimal: Double {
                      get {
                        return resultMap["decimal"]! as! Double
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "decimal")
                      }
                    }

                    public var raw: String {
                      get {
                        return resultMap["raw"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "raw")
                      }
                    }

                    public var currency: Currency {
                      get {
                        return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
                      }
                      set {
                        resultMap.updateValue(newValue.resultMap, forKey: "currency")
                      }
                    }

                    public struct Currency: GraphQLSelectionSet {
                      public static let possibleTypes: [String] = ["Currency"]

                      public static var selections: [GraphQLSelection] {
                        return [
                          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                          GraphQLField("address", type: .nonNull(.scalar(String.self))),
                          GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                          GraphQLField("name", type: .nonNull(.scalar(String.self))),
                        ]
                      }

                      public private(set) var resultMap: ResultMap

                      public init(unsafeResultMap: ResultMap) {
                        self.resultMap = unsafeResultMap
                      }

                      public init(address: String, decimals: Int, name: String) {
                        self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
                      }

                      public var __typename: String {
                        get {
                          return resultMap["__typename"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "__typename")
                        }
                      }

                      public var address: String {
                        get {
                          return resultMap["address"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "address")
                        }
                      }

                      public var decimals: Int {
                        get {
                          return resultMap["decimals"]! as! Int
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "decimals")
                        }
                      }

                      public var name: String {
                        get {
                          return resultMap["name"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "name")
                        }
                      }
                    }
                  }

                  public struct UsdcPrice: GraphQLSelectionSet {
                    public static let possibleTypes: [String] = ["CurrencyAmount"]

                    public static var selections: [GraphQLSelection] {
                      return [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                        GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                      ]
                    }

                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public init(decimal: Double, raw: String) {
                      self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                    }

                    public var __typename: String {
                      get {
                        return resultMap["__typename"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "__typename")
                      }
                    }

                    public var decimal: Double {
                      get {
                        return resultMap["decimal"]! as! Double
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "decimal")
                      }
                    }

                    public var raw: String {
                      get {
                        return resultMap["raw"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "raw")
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

public final class MarketsQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    query markets($networks: [NetworkInput!]!, $filter: MarketsQueryFilter, $pagination: PaginationInput!, $sort: MarketSortKeySortInput!, $where: MarketsQueryInput, $includeFullDetails: Boolean!) {
      markets(
        networks: $networks
        filter: $filter
        sort: $sort
        where: $where
        pagination: $pagination
      ) {
        __typename
        pageInfo {
          __typename
          endCursor
          hasNextPage
          limit
        }
        nodes {
          __typename
          token {
            __typename
            ...TokenInfo
            ...TokenDetails @include(if: $includeFullDetails)
          }
          market {
            __typename
            ...MarketInfo
            ...MarketDetails @include(if: $includeFullDetails)
          }
        }
      }
    }
    """

  public let operationName: String = "markets"

  public let operationIdentifier: String? = "51aa0dc630c5a3fdd39aba182d52d22db555ad9b18a97a2f03e54ae478ffd352"

  public var queryDocument: String {
    var document: String = operationDefinition
    document.append("\n" + TokenInfo.fragmentDefinition)
    document.append("\n" + TokenContractInfo.fragmentDefinition)
    document.append("\n" + MintDetails.fragmentDefinition)
    document.append("\n" + PriceSummary.fragmentDefinition)
    document.append("\n" + TransactionDetails.fragmentDefinition)
    document.append("\n" + FullMedia.fragmentDefinition)
    document.append("\n" + TokenDetails.fragmentDefinition)
    document.append("\n" + MarketInfo.fragmentDefinition)
    document.append("\n" + NetworkInfoDetails.fragmentDefinition)
    document.append("\n" + MarketDetails.fragmentDefinition)
    document.append("\n" + MarketPropertiesFull.fragmentDefinition)
    document.append("\n" + V2AuctionMarketProperties.fragmentDefinition)
    document.append("\n" + V3AskProperties.fragmentDefinition)
    document.append("\n" + V1OfferProperties.fragmentDefinition)
    document.append("\n" + V1AskProperties.fragmentDefinition)
    return document
  }

  public var networks: [NetworkInput]
  public var filter: MarketsQueryFilter?
  public var pagination: PaginationInput
  public var sort: MarketSortKeySortInput
  public var `where`: MarketsQueryInput?
  public var includeFullDetails: Bool

  public init(networks: [NetworkInput], filter: MarketsQueryFilter? = nil, pagination: PaginationInput, sort: MarketSortKeySortInput, `where`: MarketsQueryInput? = nil, includeFullDetails: Bool) {
    self.networks = networks
    self.filter = filter
    self.pagination = pagination
    self.sort = sort
    self.`where` = `where`
    self.includeFullDetails = includeFullDetails
  }

  public var variables: GraphQLMap? {
    return ["networks": networks, "filter": filter, "pagination": pagination, "sort": sort, "where": `where`, "includeFullDetails": includeFullDetails]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["RootQuery"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("markets", arguments: ["networks": GraphQLVariable("networks"), "filter": GraphQLVariable("filter"), "sort": GraphQLVariable("sort"), "where": GraphQLVariable("where"), "pagination": GraphQLVariable("pagination")], type: .nonNull(.object(Market.selections))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(markets: Market) {
      self.init(unsafeResultMap: ["__typename": "RootQuery", "markets": markets.resultMap])
    }

    /// Data for specific ZORA markets, e.g. Buy Now, Auctions, Offers
    public var markets: Market {
      get {
        return Market(unsafeResultMap: resultMap["markets"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "markets")
      }
    }

    public struct Market: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["MarketWithTokenConnection"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("pageInfo", type: .nonNull(.object(PageInfo.selections))),
          GraphQLField("nodes", type: .nonNull(.list(.nonNull(.object(Node.selections))))),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(pageInfo: PageInfo, nodes: [Node]) {
        self.init(unsafeResultMap: ["__typename": "MarketWithTokenConnection", "pageInfo": pageInfo.resultMap, "nodes": nodes.map { (value: Node) -> ResultMap in value.resultMap }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var pageInfo: PageInfo {
        get {
          return PageInfo(unsafeResultMap: resultMap["pageInfo"]! as! ResultMap)
        }
        set {
          resultMap.updateValue(newValue.resultMap, forKey: "pageInfo")
        }
      }

      public var nodes: [Node] {
        get {
          return (resultMap["nodes"] as! [ResultMap]).map { (value: ResultMap) -> Node in Node(unsafeResultMap: value) }
        }
        set {
          resultMap.updateValue(newValue.map { (value: Node) -> ResultMap in value.resultMap }, forKey: "nodes")
        }
      }

      public struct PageInfo: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["PageInfo"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("endCursor", type: .scalar(String.self)),
            GraphQLField("hasNextPage", type: .nonNull(.scalar(Bool.self))),
            GraphQLField("limit", type: .nonNull(.scalar(Int.self))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(endCursor: String? = nil, hasNextPage: Bool, limit: Int) {
          self.init(unsafeResultMap: ["__typename": "PageInfo", "endCursor": endCursor, "hasNextPage": hasNextPage, "limit": limit])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var endCursor: String? {
          get {
            return resultMap["endCursor"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "endCursor")
          }
        }

        public var hasNextPage: Bool {
          get {
            return resultMap["hasNextPage"]! as! Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "hasNextPage")
          }
        }

        public var limit: Int {
          get {
            return resultMap["limit"]! as! Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "limit")
          }
        }
      }

      public struct Node: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["MarketWithToken"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("token", type: .object(Token.selections)),
            GraphQLField("market", type: .nonNull(.object(Market.selections))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(token: Token? = nil, market: Market) {
          self.init(unsafeResultMap: ["__typename": "MarketWithToken", "token": token.flatMap { (value: Token) -> ResultMap in value.resultMap }, "market": market.resultMap])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var token: Token? {
          get {
            return (resultMap["token"] as? ResultMap).flatMap { Token(unsafeResultMap: $0) }
          }
          set {
            resultMap.updateValue(newValue?.resultMap, forKey: "token")
          }
        }

        public var market: Market {
          get {
            return Market(unsafeResultMap: resultMap["market"]! as! ResultMap)
          }
          set {
            resultMap.updateValue(newValue.resultMap, forKey: "market")
          }
        }

        public struct Token: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["Token"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("tokenId", type: .nonNull(.scalar(String.self))),
              GraphQLField("tokenContract", type: .object(TokenContract.selections)),
              GraphQLField("mintInfo", type: .object(MintInfo.selections)),
              GraphQLField("collectionAddress", type: .nonNull(.scalar(String.self))),
              GraphQLField("lastRefreshTime", type: .scalar(String.self)),
              GraphQLField("owner", type: .scalar(String.self)),
              GraphQLField("name", type: .scalar(String.self)),
              GraphQLField("description", type: .scalar(String.self)),
              GraphQLField("image", type: .object(Image.selections)),
              GraphQLField("content", type: .object(Content.selections)),
              GraphQLBooleanCondition(variableName: "includeFullDetails", inverted: false, selections: [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("metadata", type: .scalar(String.self)),
                GraphQLField("tokenUrl", type: .scalar(String.self)),
                GraphQLField("tokenUrlMimeType", type: .scalar(String.self)),
                GraphQLField("attributes", type: .list(.nonNull(.object(Attribute.selections)))),
              ]),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(tokenId: String, tokenContract: TokenContract? = nil, mintInfo: MintInfo? = nil, collectionAddress: String, lastRefreshTime: String? = nil, owner: String? = nil, name: String? = nil, description: String? = nil, image: Image? = nil, content: Content? = nil, metadata: String? = nil, tokenUrl: String? = nil, tokenUrlMimeType: String? = nil, attributes: [Attribute]? = nil) {
            self.init(unsafeResultMap: ["__typename": "Token", "tokenId": tokenId, "tokenContract": tokenContract.flatMap { (value: TokenContract) -> ResultMap in value.resultMap }, "mintInfo": mintInfo.flatMap { (value: MintInfo) -> ResultMap in value.resultMap }, "collectionAddress": collectionAddress, "lastRefreshTime": lastRefreshTime, "owner": owner, "name": name, "description": description, "image": image.flatMap { (value: Image) -> ResultMap in value.resultMap }, "content": content.flatMap { (value: Content) -> ResultMap in value.resultMap }, "metadata": metadata, "tokenUrl": tokenUrl, "tokenUrlMimeType": tokenUrlMimeType, "attributes": attributes.flatMap { (value: [Attribute]) -> [ResultMap] in value.map { (value: Attribute) -> ResultMap in value.resultMap } }])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var tokenId: String {
            get {
              return resultMap["tokenId"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "tokenId")
            }
          }

          public var tokenContract: TokenContract? {
            get {
              return (resultMap["tokenContract"] as? ResultMap).flatMap { TokenContract(unsafeResultMap: $0) }
            }
            set {
              resultMap.updateValue(newValue?.resultMap, forKey: "tokenContract")
            }
          }

          public var mintInfo: MintInfo? {
            get {
              return (resultMap["mintInfo"] as? ResultMap).flatMap { MintInfo(unsafeResultMap: $0) }
            }
            set {
              resultMap.updateValue(newValue?.resultMap, forKey: "mintInfo")
            }
          }

          public var collectionAddress: String {
            get {
              return resultMap["collectionAddress"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "collectionAddress")
            }
          }

          public var lastRefreshTime: String? {
            get {
              return resultMap["lastRefreshTime"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "lastRefreshTime")
            }
          }

          public var owner: String? {
            get {
              return resultMap["owner"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "owner")
            }
          }

          public var name: String? {
            get {
              return resultMap["name"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "name")
            }
          }

          public var description: String? {
            get {
              return resultMap["description"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "description")
            }
          }

          public var image: Image? {
            get {
              return (resultMap["image"] as? ResultMap).flatMap { Image(unsafeResultMap: $0) }
            }
            set {
              resultMap.updateValue(newValue?.resultMap, forKey: "image")
            }
          }

          public var content: Content? {
            get {
              return (resultMap["content"] as? ResultMap).flatMap { Content(unsafeResultMap: $0) }
            }
            set {
              resultMap.updateValue(newValue?.resultMap, forKey: "content")
            }
          }

          public var metadata: String? {
            get {
              return resultMap["metadata"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "metadata")
            }
          }

          public var tokenUrl: String? {
            get {
              return resultMap["tokenUrl"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "tokenUrl")
            }
          }

          public var tokenUrlMimeType: String? {
            get {
              return resultMap["tokenUrlMimeType"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "tokenUrlMimeType")
            }
          }

          public var attributes: [Attribute]? {
            get {
              return (resultMap["attributes"] as? [ResultMap]).flatMap { (value: [ResultMap]) -> [Attribute] in value.map { (value: ResultMap) -> Attribute in Attribute(unsafeResultMap: value) } }
            }
            set {
              resultMap.updateValue(newValue.flatMap { (value: [Attribute]) -> [ResultMap] in value.map { (value: Attribute) -> ResultMap in value.resultMap } }, forKey: "attributes")
            }
          }

          public var fragments: Fragments {
            get {
              return Fragments(unsafeResultMap: resultMap)
            }
            set {
              resultMap += newValue.resultMap
            }
          }

          public struct Fragments {
            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public var tokenInfo: TokenInfo {
              get {
                return TokenInfo(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }

            public var tokenDetails: TokenDetails {
              get {
                return TokenDetails(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }
          }

          public struct TokenContract: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["TokenContract"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("name", type: .scalar(String.self)),
                GraphQLField("network", type: .nonNull(.scalar(String.self))),
                GraphQLField("description", type: .scalar(String.self)),
                GraphQLField("collectionAddress", type: .nonNull(.scalar(String.self))),
                GraphQLField("symbol", type: .scalar(String.self)),
                GraphQLField("chain", type: .nonNull(.scalar(Int.self))),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(name: String? = nil, network: String, description: String? = nil, collectionAddress: String, symbol: String? = nil, chain: Int) {
              self.init(unsafeResultMap: ["__typename": "TokenContract", "name": name, "network": network, "description": description, "collectionAddress": collectionAddress, "symbol": symbol, "chain": chain])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var name: String? {
              get {
                return resultMap["name"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "name")
              }
            }

            public var network: String {
              get {
                return resultMap["network"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "network")
              }
            }

            public var description: String? {
              get {
                return resultMap["description"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "description")
              }
            }

            public var collectionAddress: String {
              get {
                return resultMap["collectionAddress"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "collectionAddress")
              }
            }

            public var symbol: String? {
              get {
                return resultMap["symbol"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "symbol")
              }
            }

            public var chain: Int {
              get {
                return resultMap["chain"]! as! Int
              }
              set {
                resultMap.updateValue(newValue, forKey: "chain")
              }
            }

            public var fragments: Fragments {
              get {
                return Fragments(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }

            public struct Fragments {
              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public var tokenContractInfo: TokenContractInfo {
                get {
                  return TokenContractInfo(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }
            }
          }

          public struct MintInfo: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["MintInfo"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("price", type: .nonNull(.object(Price.selections))),
                GraphQLField("originatorAddress", type: .nonNull(.scalar(String.self))),
                GraphQLField("toAddress", type: .nonNull(.scalar(String.self))),
                GraphQLField("mintContext", type: .nonNull(.object(MintContext.selections))),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(price: Price, originatorAddress: String, toAddress: String, mintContext: MintContext) {
              self.init(unsafeResultMap: ["__typename": "MintInfo", "price": price.resultMap, "originatorAddress": originatorAddress, "toAddress": toAddress, "mintContext": mintContext.resultMap])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var price: Price {
              get {
                return Price(unsafeResultMap: resultMap["price"]! as! ResultMap)
              }
              set {
                resultMap.updateValue(newValue.resultMap, forKey: "price")
              }
            }

            public var originatorAddress: String {
              get {
                return resultMap["originatorAddress"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "originatorAddress")
              }
            }

            public var toAddress: String {
              get {
                return resultMap["toAddress"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "toAddress")
              }
            }

            public var mintContext: MintContext {
              get {
                return MintContext(unsafeResultMap: resultMap["mintContext"]! as! ResultMap)
              }
              set {
                resultMap.updateValue(newValue.resultMap, forKey: "mintContext")
              }
            }

            public var fragments: Fragments {
              get {
                return Fragments(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }

            public struct Fragments {
              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public var mintDetails: MintDetails {
                get {
                  return MintDetails(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }
            }

            public struct Price: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["PriceAtTime"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                  GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
                  GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
                  GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
                self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var blockNumber: Int {
                get {
                  return resultMap["blockNumber"]! as! Int
                }
                set {
                  resultMap.updateValue(newValue, forKey: "blockNumber")
                }
              }

              public var chainTokenPrice: ChainTokenPrice? {
                get {
                  return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
                }
                set {
                  resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
                }
              }

              public var nativePrice: NativePrice {
                get {
                  return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
                }
                set {
                  resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
                }
              }

              public var usdcPrice: UsdcPrice? {
                get {
                  return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
                }
                set {
                  resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
                }
              }

              public var fragments: Fragments {
                get {
                  return Fragments(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }

              public struct Fragments {
                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public var priceSummary: PriceSummary {
                  get {
                    return PriceSummary(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }
              }

              public struct ChainTokenPrice: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["CurrencyAmount"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                    GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(decimal: Double, raw: String) {
                  self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var decimal: Double {
                  get {
                    return resultMap["decimal"]! as! Double
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimal")
                  }
                }

                public var raw: String {
                  get {
                    return resultMap["raw"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "raw")
                  }
                }
              }

              public struct NativePrice: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["CurrencyAmount"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                    GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                    GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(decimal: Double, raw: String, currency: Currency) {
                  self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var decimal: Double {
                  get {
                    return resultMap["decimal"]! as! Double
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimal")
                  }
                }

                public var raw: String {
                  get {
                    return resultMap["raw"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "raw")
                  }
                }

                public var currency: Currency {
                  get {
                    return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
                  }
                  set {
                    resultMap.updateValue(newValue.resultMap, forKey: "currency")
                  }
                }

                public struct Currency: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["Currency"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("address", type: .nonNull(.scalar(String.self))),
                      GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                      GraphQLField("name", type: .nonNull(.scalar(String.self))),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(address: String, decimals: Int, name: String) {
                    self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var address: String {
                    get {
                      return resultMap["address"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "address")
                    }
                  }

                  public var decimals: Int {
                    get {
                      return resultMap["decimals"]! as! Int
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "decimals")
                    }
                  }

                  public var name: String {
                    get {
                      return resultMap["name"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "name")
                    }
                  }
                }
              }

              public struct UsdcPrice: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["CurrencyAmount"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                    GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(decimal: Double, raw: String) {
                  self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var decimal: Double {
                  get {
                    return resultMap["decimal"]! as! Double
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimal")
                  }
                }

                public var raw: String {
                  get {
                    return resultMap["raw"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "raw")
                  }
                }
              }
            }

            public struct MintContext: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["TransactionInfo"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                  GraphQLField("blockTimestamp", type: .nonNull(.scalar(String.self))),
                  GraphQLField("transactionHash", type: .scalar(String.self)),
                  GraphQLField("logIndex", type: .scalar(Int.self)),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(blockNumber: Int, blockTimestamp: String, transactionHash: String? = nil, logIndex: Int? = nil) {
                self.init(unsafeResultMap: ["__typename": "TransactionInfo", "blockNumber": blockNumber, "blockTimestamp": blockTimestamp, "transactionHash": transactionHash, "logIndex": logIndex])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var blockNumber: Int {
                get {
                  return resultMap["blockNumber"]! as! Int
                }
                set {
                  resultMap.updateValue(newValue, forKey: "blockNumber")
                }
              }

              public var blockTimestamp: String {
                get {
                  return resultMap["blockTimestamp"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "blockTimestamp")
                }
              }

              public var transactionHash: String? {
                get {
                  return resultMap["transactionHash"] as? String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "transactionHash")
                }
              }

              public var logIndex: Int? {
                get {
                  return resultMap["logIndex"] as? Int
                }
                set {
                  resultMap.updateValue(newValue, forKey: "logIndex")
                }
              }

              public var fragments: Fragments {
                get {
                  return Fragments(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }

              public struct Fragments {
                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public var transactionDetails: TransactionDetails {
                  get {
                    return TransactionDetails(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }
              }
            }
          }

          public struct Image: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["TokenContentMedia"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("size", type: .scalar(String.self)),
                GraphQLField("url", type: .scalar(String.self)),
                GraphQLField("size", type: .scalar(String.self)),
                GraphQLField("mimeType", type: .scalar(String.self)),
                GraphQLField("mediaEncoding", type: .object(MediaEncoding.selections)),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(size: String? = nil, url: String? = nil, mimeType: String? = nil, mediaEncoding: MediaEncoding? = nil) {
              self.init(unsafeResultMap: ["__typename": "TokenContentMedia", "size": size, "url": url, "mimeType": mimeType, "mediaEncoding": mediaEncoding.flatMap { (value: MediaEncoding) -> ResultMap in value.resultMap }])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var size: String? {
              get {
                return resultMap["size"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "size")
              }
            }

            public var url: String? {
              get {
                return resultMap["url"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "url")
              }
            }

            public var mimeType: String? {
              get {
                return resultMap["mimeType"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "mimeType")
              }
            }

            public var mediaEncoding: MediaEncoding? {
              get {
                return (resultMap["mediaEncoding"] as? ResultMap).flatMap { MediaEncoding(unsafeResultMap: $0) }
              }
              set {
                resultMap.updateValue(newValue?.resultMap, forKey: "mediaEncoding")
              }
            }

            public var fragments: Fragments {
              get {
                return Fragments(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }

            public struct Fragments {
              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public var fullMedia: FullMedia {
                get {
                  return FullMedia(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }
            }

            public struct MediaEncoding: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["ImageEncodingTypes", "VideoEncodingTypes", "AudioEncodingTypes", "UnsupportedEncodingTypes"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLTypeCase(
                    variants: ["ImageEncodingTypes": AsImageEncodingTypes.selections, "VideoEncodingTypes": AsVideoEncodingTypes.selections, "AudioEncodingTypes": AsAudioEncodingTypes.selections, "UnsupportedEncodingTypes": AsUnsupportedEncodingTypes.selections],
                    default: [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    ]
                  )
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public static func makeImageEncodingTypes(original: String, large: String? = nil, poster: String? = nil, thumbnail: String? = nil) -> MediaEncoding {
                return MediaEncoding(unsafeResultMap: ["__typename": "ImageEncodingTypes", "original": original, "large": large, "poster": poster, "thumbnail": thumbnail])
              }

              public static func makeVideoEncodingTypes(original: String, large: String? = nil, poster: String? = nil, preview: String? = nil, thumbnail: String? = nil) -> MediaEncoding {
                return MediaEncoding(unsafeResultMap: ["__typename": "VideoEncodingTypes", "original": original, "large": large, "poster": poster, "preview": preview, "thumbnail": thumbnail])
              }

              public static func makeAudioEncodingTypes(original: String, large: String? = nil) -> MediaEncoding {
                return MediaEncoding(unsafeResultMap: ["__typename": "AudioEncodingTypes", "original": original, "large": large])
              }

              public static func makeUnsupportedEncodingTypes(original: String) -> MediaEncoding {
                return MediaEncoding(unsafeResultMap: ["__typename": "UnsupportedEncodingTypes", "original": original])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var asImageEncodingTypes: AsImageEncodingTypes? {
                get {
                  if !AsImageEncodingTypes.possibleTypes.contains(__typename) { return nil }
                  return AsImageEncodingTypes(unsafeResultMap: resultMap)
                }
                set {
                  guard let newValue = newValue else { return }
                  resultMap = newValue.resultMap
                }
              }

              public struct AsImageEncodingTypes: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["ImageEncodingTypes"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("original", type: .nonNull(.scalar(String.self))),
                    GraphQLField("large", type: .scalar(String.self)),
                    GraphQLField("poster", type: .scalar(String.self)),
                    GraphQLField("thumbnail", type: .scalar(String.self)),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(original: String, large: String? = nil, poster: String? = nil, thumbnail: String? = nil) {
                  self.init(unsafeResultMap: ["__typename": "ImageEncodingTypes", "original": original, "large": large, "poster": poster, "thumbnail": thumbnail])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var original: String {
                  get {
                    return resultMap["original"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "original")
                  }
                }

                public var large: String? {
                  get {
                    return resultMap["large"] as? String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "large")
                  }
                }

                public var poster: String? {
                  get {
                    return resultMap["poster"] as? String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "poster")
                  }
                }

                public var thumbnail: String? {
                  get {
                    return resultMap["thumbnail"] as? String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "thumbnail")
                  }
                }
              }

              public var asVideoEncodingTypes: AsVideoEncodingTypes? {
                get {
                  if !AsVideoEncodingTypes.possibleTypes.contains(__typename) { return nil }
                  return AsVideoEncodingTypes(unsafeResultMap: resultMap)
                }
                set {
                  guard let newValue = newValue else { return }
                  resultMap = newValue.resultMap
                }
              }

              public struct AsVideoEncodingTypes: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["VideoEncodingTypes"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("original", type: .nonNull(.scalar(String.self))),
                    GraphQLField("large", type: .scalar(String.self)),
                    GraphQLField("poster", type: .scalar(String.self)),
                    GraphQLField("preview", type: .scalar(String.self)),
                    GraphQLField("thumbnail", type: .scalar(String.self)),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(original: String, large: String? = nil, poster: String? = nil, preview: String? = nil, thumbnail: String? = nil) {
                  self.init(unsafeResultMap: ["__typename": "VideoEncodingTypes", "original": original, "large": large, "poster": poster, "preview": preview, "thumbnail": thumbnail])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var original: String {
                  get {
                    return resultMap["original"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "original")
                  }
                }

                public var large: String? {
                  get {
                    return resultMap["large"] as? String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "large")
                  }
                }

                public var poster: String? {
                  get {
                    return resultMap["poster"] as? String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "poster")
                  }
                }

                public var preview: String? {
                  get {
                    return resultMap["preview"] as? String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "preview")
                  }
                }

                public var thumbnail: String? {
                  get {
                    return resultMap["thumbnail"] as? String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "thumbnail")
                  }
                }
              }

              public var asAudioEncodingTypes: AsAudioEncodingTypes? {
                get {
                  if !AsAudioEncodingTypes.possibleTypes.contains(__typename) { return nil }
                  return AsAudioEncodingTypes(unsafeResultMap: resultMap)
                }
                set {
                  guard let newValue = newValue else { return }
                  resultMap = newValue.resultMap
                }
              }

              public struct AsAudioEncodingTypes: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["AudioEncodingTypes"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("original", type: .nonNull(.scalar(String.self))),
                    GraphQLField("large", type: .scalar(String.self)),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(original: String, large: String? = nil) {
                  self.init(unsafeResultMap: ["__typename": "AudioEncodingTypes", "original": original, "large": large])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var original: String {
                  get {
                    return resultMap["original"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "original")
                  }
                }

                public var large: String? {
                  get {
                    return resultMap["large"] as? String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "large")
                  }
                }
              }

              public var asUnsupportedEncodingTypes: AsUnsupportedEncodingTypes? {
                get {
                  if !AsUnsupportedEncodingTypes.possibleTypes.contains(__typename) { return nil }
                  return AsUnsupportedEncodingTypes(unsafeResultMap: resultMap)
                }
                set {
                  guard let newValue = newValue else { return }
                  resultMap = newValue.resultMap
                }
              }

              public struct AsUnsupportedEncodingTypes: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["UnsupportedEncodingTypes"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("original", type: .nonNull(.scalar(String.self))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(original: String) {
                  self.init(unsafeResultMap: ["__typename": "UnsupportedEncodingTypes", "original": original])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var original: String {
                  get {
                    return resultMap["original"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "original")
                  }
                }
              }
            }
          }

          public struct Content: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["TokenContentMedia"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("size", type: .scalar(String.self)),
                GraphQLField("url", type: .scalar(String.self)),
                GraphQLField("size", type: .scalar(String.self)),
                GraphQLField("mimeType", type: .scalar(String.self)),
                GraphQLField("mediaEncoding", type: .object(MediaEncoding.selections)),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(size: String? = nil, url: String? = nil, mimeType: String? = nil, mediaEncoding: MediaEncoding? = nil) {
              self.init(unsafeResultMap: ["__typename": "TokenContentMedia", "size": size, "url": url, "mimeType": mimeType, "mediaEncoding": mediaEncoding.flatMap { (value: MediaEncoding) -> ResultMap in value.resultMap }])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var size: String? {
              get {
                return resultMap["size"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "size")
              }
            }

            public var url: String? {
              get {
                return resultMap["url"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "url")
              }
            }

            public var mimeType: String? {
              get {
                return resultMap["mimeType"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "mimeType")
              }
            }

            public var mediaEncoding: MediaEncoding? {
              get {
                return (resultMap["mediaEncoding"] as? ResultMap).flatMap { MediaEncoding(unsafeResultMap: $0) }
              }
              set {
                resultMap.updateValue(newValue?.resultMap, forKey: "mediaEncoding")
              }
            }

            public var fragments: Fragments {
              get {
                return Fragments(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }

            public struct Fragments {
              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public var fullMedia: FullMedia {
                get {
                  return FullMedia(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }
            }

            public struct MediaEncoding: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["ImageEncodingTypes", "VideoEncodingTypes", "AudioEncodingTypes", "UnsupportedEncodingTypes"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLTypeCase(
                    variants: ["ImageEncodingTypes": AsImageEncodingTypes.selections, "VideoEncodingTypes": AsVideoEncodingTypes.selections, "AudioEncodingTypes": AsAudioEncodingTypes.selections, "UnsupportedEncodingTypes": AsUnsupportedEncodingTypes.selections],
                    default: [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    ]
                  )
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public static func makeImageEncodingTypes(original: String, large: String? = nil, poster: String? = nil, thumbnail: String? = nil) -> MediaEncoding {
                return MediaEncoding(unsafeResultMap: ["__typename": "ImageEncodingTypes", "original": original, "large": large, "poster": poster, "thumbnail": thumbnail])
              }

              public static func makeVideoEncodingTypes(original: String, large: String? = nil, poster: String? = nil, preview: String? = nil, thumbnail: String? = nil) -> MediaEncoding {
                return MediaEncoding(unsafeResultMap: ["__typename": "VideoEncodingTypes", "original": original, "large": large, "poster": poster, "preview": preview, "thumbnail": thumbnail])
              }

              public static func makeAudioEncodingTypes(original: String, large: String? = nil) -> MediaEncoding {
                return MediaEncoding(unsafeResultMap: ["__typename": "AudioEncodingTypes", "original": original, "large": large])
              }

              public static func makeUnsupportedEncodingTypes(original: String) -> MediaEncoding {
                return MediaEncoding(unsafeResultMap: ["__typename": "UnsupportedEncodingTypes", "original": original])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var asImageEncodingTypes: AsImageEncodingTypes? {
                get {
                  if !AsImageEncodingTypes.possibleTypes.contains(__typename) { return nil }
                  return AsImageEncodingTypes(unsafeResultMap: resultMap)
                }
                set {
                  guard let newValue = newValue else { return }
                  resultMap = newValue.resultMap
                }
              }

              public struct AsImageEncodingTypes: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["ImageEncodingTypes"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("original", type: .nonNull(.scalar(String.self))),
                    GraphQLField("large", type: .scalar(String.self)),
                    GraphQLField("poster", type: .scalar(String.self)),
                    GraphQLField("thumbnail", type: .scalar(String.self)),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(original: String, large: String? = nil, poster: String? = nil, thumbnail: String? = nil) {
                  self.init(unsafeResultMap: ["__typename": "ImageEncodingTypes", "original": original, "large": large, "poster": poster, "thumbnail": thumbnail])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var original: String {
                  get {
                    return resultMap["original"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "original")
                  }
                }

                public var large: String? {
                  get {
                    return resultMap["large"] as? String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "large")
                  }
                }

                public var poster: String? {
                  get {
                    return resultMap["poster"] as? String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "poster")
                  }
                }

                public var thumbnail: String? {
                  get {
                    return resultMap["thumbnail"] as? String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "thumbnail")
                  }
                }
              }

              public var asVideoEncodingTypes: AsVideoEncodingTypes? {
                get {
                  if !AsVideoEncodingTypes.possibleTypes.contains(__typename) { return nil }
                  return AsVideoEncodingTypes(unsafeResultMap: resultMap)
                }
                set {
                  guard let newValue = newValue else { return }
                  resultMap = newValue.resultMap
                }
              }

              public struct AsVideoEncodingTypes: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["VideoEncodingTypes"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("original", type: .nonNull(.scalar(String.self))),
                    GraphQLField("large", type: .scalar(String.self)),
                    GraphQLField("poster", type: .scalar(String.self)),
                    GraphQLField("preview", type: .scalar(String.self)),
                    GraphQLField("thumbnail", type: .scalar(String.self)),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(original: String, large: String? = nil, poster: String? = nil, preview: String? = nil, thumbnail: String? = nil) {
                  self.init(unsafeResultMap: ["__typename": "VideoEncodingTypes", "original": original, "large": large, "poster": poster, "preview": preview, "thumbnail": thumbnail])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var original: String {
                  get {
                    return resultMap["original"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "original")
                  }
                }

                public var large: String? {
                  get {
                    return resultMap["large"] as? String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "large")
                  }
                }

                public var poster: String? {
                  get {
                    return resultMap["poster"] as? String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "poster")
                  }
                }

                public var preview: String? {
                  get {
                    return resultMap["preview"] as? String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "preview")
                  }
                }

                public var thumbnail: String? {
                  get {
                    return resultMap["thumbnail"] as? String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "thumbnail")
                  }
                }
              }

              public var asAudioEncodingTypes: AsAudioEncodingTypes? {
                get {
                  if !AsAudioEncodingTypes.possibleTypes.contains(__typename) { return nil }
                  return AsAudioEncodingTypes(unsafeResultMap: resultMap)
                }
                set {
                  guard let newValue = newValue else { return }
                  resultMap = newValue.resultMap
                }
              }

              public struct AsAudioEncodingTypes: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["AudioEncodingTypes"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("original", type: .nonNull(.scalar(String.self))),
                    GraphQLField("large", type: .scalar(String.self)),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(original: String, large: String? = nil) {
                  self.init(unsafeResultMap: ["__typename": "AudioEncodingTypes", "original": original, "large": large])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var original: String {
                  get {
                    return resultMap["original"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "original")
                  }
                }

                public var large: String? {
                  get {
                    return resultMap["large"] as? String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "large")
                  }
                }
              }

              public var asUnsupportedEncodingTypes: AsUnsupportedEncodingTypes? {
                get {
                  if !AsUnsupportedEncodingTypes.possibleTypes.contains(__typename) { return nil }
                  return AsUnsupportedEncodingTypes(unsafeResultMap: resultMap)
                }
                set {
                  guard let newValue = newValue else { return }
                  resultMap = newValue.resultMap
                }
              }

              public struct AsUnsupportedEncodingTypes: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["UnsupportedEncodingTypes"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("original", type: .nonNull(.scalar(String.self))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(original: String) {
                  self.init(unsafeResultMap: ["__typename": "UnsupportedEncodingTypes", "original": original])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var original: String {
                  get {
                    return resultMap["original"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "original")
                  }
                }
              }
            }
          }

          public struct Attribute: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["TokenAttribute"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("traitType", type: .scalar(String.self)),
                GraphQLField("value", type: .scalar(String.self)),
                GraphQLField("displayType", type: .scalar(String.self)),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(traitType: String? = nil, value: String? = nil, displayType: String? = nil) {
              self.init(unsafeResultMap: ["__typename": "TokenAttribute", "traitType": traitType, "value": value, "displayType": displayType])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var traitType: String? {
              get {
                return resultMap["traitType"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "traitType")
              }
            }

            public var value: String? {
              get {
                return resultMap["value"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "value")
              }
            }

            public var displayType: String? {
              get {
                return resultMap["displayType"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "displayType")
              }
            }
          }
        }

        public struct Market: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["Market"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("collectionAddress", type: .nonNull(.scalar(String.self))),
              GraphQLField("marketAddress", type: .nonNull(.scalar(String.self))),
              GraphQLField("marketType", type: .nonNull(.scalar(MarketType.self))),
              GraphQLField("transactionInfo", type: .nonNull(.object(TransactionInfo.selections))),
              GraphQLField("price", type: .object(Price.selections)),
              GraphQLField("status", type: .nonNull(.scalar(String.self))),
              GraphQLField("networkInfo", type: .nonNull(.object(NetworkInfo.selections))),
              GraphQLBooleanCondition(variableName: "includeFullDetails", inverted: false, selections: [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("properties", type: .nonNull(.object(Property.selections))),
              ]),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(collectionAddress: String, marketAddress: String, marketType: MarketType, transactionInfo: TransactionInfo, price: Price? = nil, status: String, networkInfo: NetworkInfo, properties: Property? = nil) {
            self.init(unsafeResultMap: ["__typename": "Market", "collectionAddress": collectionAddress, "marketAddress": marketAddress, "marketType": marketType, "transactionInfo": transactionInfo.resultMap, "price": price.flatMap { (value: Price) -> ResultMap in value.resultMap }, "status": status, "networkInfo": networkInfo.resultMap, "properties": properties.flatMap { (value: Property) -> ResultMap in value.resultMap }])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var collectionAddress: String {
            get {
              return resultMap["collectionAddress"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "collectionAddress")
            }
          }

          public var marketAddress: String {
            get {
              return resultMap["marketAddress"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "marketAddress")
            }
          }

          public var marketType: MarketType {
            get {
              return resultMap["marketType"]! as! MarketType
            }
            set {
              resultMap.updateValue(newValue, forKey: "marketType")
            }
          }

          public var transactionInfo: TransactionInfo {
            get {
              return TransactionInfo(unsafeResultMap: resultMap["transactionInfo"]! as! ResultMap)
            }
            set {
              resultMap.updateValue(newValue.resultMap, forKey: "transactionInfo")
            }
          }

          public var price: Price? {
            get {
              return (resultMap["price"] as? ResultMap).flatMap { Price(unsafeResultMap: $0) }
            }
            set {
              resultMap.updateValue(newValue?.resultMap, forKey: "price")
            }
          }

          public var status: String {
            get {
              return resultMap["status"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "status")
            }
          }

          public var networkInfo: NetworkInfo {
            get {
              return NetworkInfo(unsafeResultMap: resultMap["networkInfo"]! as! ResultMap)
            }
            set {
              resultMap.updateValue(newValue.resultMap, forKey: "networkInfo")
            }
          }

          public var properties: Property? {
            get {
              return (resultMap["properties"] as? ResultMap).flatMap { Property(unsafeResultMap: $0) }
            }
            set {
              resultMap.updateValue(newValue?.resultMap, forKey: "properties")
            }
          }

          public var fragments: Fragments {
            get {
              return Fragments(unsafeResultMap: resultMap)
            }
            set {
              resultMap += newValue.resultMap
            }
          }

          public struct Fragments {
            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public var marketInfo: MarketInfo {
              get {
                return MarketInfo(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }

            public var marketDetails: MarketDetails {
              get {
                return MarketDetails(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }
          }

          public struct TransactionInfo: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["TransactionInfo"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                GraphQLField("blockTimestamp", type: .nonNull(.scalar(String.self))),
                GraphQLField("transactionHash", type: .scalar(String.self)),
                GraphQLField("logIndex", type: .scalar(Int.self)),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(blockNumber: Int, blockTimestamp: String, transactionHash: String? = nil, logIndex: Int? = nil) {
              self.init(unsafeResultMap: ["__typename": "TransactionInfo", "blockNumber": blockNumber, "blockTimestamp": blockTimestamp, "transactionHash": transactionHash, "logIndex": logIndex])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var blockNumber: Int {
              get {
                return resultMap["blockNumber"]! as! Int
              }
              set {
                resultMap.updateValue(newValue, forKey: "blockNumber")
              }
            }

            public var blockTimestamp: String {
              get {
                return resultMap["blockTimestamp"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "blockTimestamp")
              }
            }

            public var transactionHash: String? {
              get {
                return resultMap["transactionHash"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "transactionHash")
              }
            }

            public var logIndex: Int? {
              get {
                return resultMap["logIndex"] as? Int
              }
              set {
                resultMap.updateValue(newValue, forKey: "logIndex")
              }
            }

            public var fragments: Fragments {
              get {
                return Fragments(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }

            public struct Fragments {
              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public var transactionDetails: TransactionDetails {
                get {
                  return TransactionDetails(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }
            }
          }

          public struct Price: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["PriceAtTime"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
                GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
                GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
              self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var blockNumber: Int {
              get {
                return resultMap["blockNumber"]! as! Int
              }
              set {
                resultMap.updateValue(newValue, forKey: "blockNumber")
              }
            }

            public var chainTokenPrice: ChainTokenPrice? {
              get {
                return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
              }
              set {
                resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
              }
            }

            public var nativePrice: NativePrice {
              get {
                return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
              }
              set {
                resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
              }
            }

            public var usdcPrice: UsdcPrice? {
              get {
                return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
              }
              set {
                resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
              }
            }

            public var fragments: Fragments {
              get {
                return Fragments(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }

            public struct Fragments {
              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public var priceSummary: PriceSummary {
                get {
                  return PriceSummary(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }
            }

            public struct ChainTokenPrice: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["CurrencyAmount"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                  GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(decimal: Double, raw: String) {
                self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var decimal: Double {
                get {
                  return resultMap["decimal"]! as! Double
                }
                set {
                  resultMap.updateValue(newValue, forKey: "decimal")
                }
              }

              public var raw: String {
                get {
                  return resultMap["raw"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "raw")
                }
              }
            }

            public struct NativePrice: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["CurrencyAmount"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                  GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                  GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(decimal: Double, raw: String, currency: Currency) {
                self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var decimal: Double {
                get {
                  return resultMap["decimal"]! as! Double
                }
                set {
                  resultMap.updateValue(newValue, forKey: "decimal")
                }
              }

              public var raw: String {
                get {
                  return resultMap["raw"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "raw")
                }
              }

              public var currency: Currency {
                get {
                  return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
                }
                set {
                  resultMap.updateValue(newValue.resultMap, forKey: "currency")
                }
              }

              public struct Currency: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["Currency"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("address", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                    GraphQLField("name", type: .nonNull(.scalar(String.self))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(address: String, decimals: Int, name: String) {
                  self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var address: String {
                  get {
                    return resultMap["address"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "address")
                  }
                }

                public var decimals: Int {
                  get {
                    return resultMap["decimals"]! as! Int
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimals")
                  }
                }

                public var name: String {
                  get {
                    return resultMap["name"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "name")
                  }
                }
              }
            }

            public struct UsdcPrice: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["CurrencyAmount"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                  GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(decimal: Double, raw: String) {
                self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var decimal: Double {
                get {
                  return resultMap["decimal"]! as! Double
                }
                set {
                  resultMap.updateValue(newValue, forKey: "decimal")
                }
              }

              public var raw: String {
                get {
                  return resultMap["raw"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "raw")
                }
              }
            }
          }

          public struct NetworkInfo: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["NetworkInfo"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("chain", type: .nonNull(.scalar(Chain.self))),
                GraphQLField("network", type: .nonNull(.scalar(Network.self))),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(chain: Chain, network: Network) {
              self.init(unsafeResultMap: ["__typename": "NetworkInfo", "chain": chain, "network": network])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var chain: Chain {
              get {
                return resultMap["chain"]! as! Chain
              }
              set {
                resultMap.updateValue(newValue, forKey: "chain")
              }
            }

            public var network: Network {
              get {
                return resultMap["network"]! as! Network
              }
              set {
                resultMap.updateValue(newValue, forKey: "network")
              }
            }

            public var fragments: Fragments {
              get {
                return Fragments(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }

            public struct Fragments {
              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public var networkInfoDetails: NetworkInfoDetails {
                get {
                  return NetworkInfoDetails(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }
            }
          }

          public struct Property: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["V1Ask", "V1Offer", "V1BidShare", "V2Auction", "V3Ask"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLTypeCase(
                  variants: ["V2Auction": AsV2Auction.selections, "V3Ask": AsV3Ask.selections, "V1Offer": AsV1Offer.selections, "V1Ask": AsV1Ask.selections],
                  default: [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  ]
                )
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public static func makeV1BidShare() -> Property {
              return Property(unsafeResultMap: ["__typename": "V1BidShare"])
            }

            public static func makeV2Auction(firstBidTime: String? = nil, highestBidder: String? = nil, curator: String, collectionAddress: String, curatorFeePercentage: Int, tokenId: String, auctionCurrency: String, duration: String, estimatedExpirationTime: String? = nil, v2AuctionStatus: V2AuctionStatus, tokenOwner: String, address: String, auctionId: String, approved: Bool, reservePrice: AsV2Auction.ReservePrice, highestBidPrice: AsV2Auction.HighestBidPrice? = nil) -> Property {
              return Property(unsafeResultMap: ["__typename": "V2Auction", "firstBidTime": firstBidTime, "highestBidder": highestBidder, "curator": curator, "collectionAddress": collectionAddress, "curatorFeePercentage": curatorFeePercentage, "tokenId": tokenId, "auctionCurrency": auctionCurrency, "duration": duration, "estimatedExpirationTime": estimatedExpirationTime, "v2AuctionStatus": v2AuctionStatus, "tokenOwner": tokenOwner, "address": address, "auctionId": auctionId, "approved": approved, "reservePrice": reservePrice.resultMap, "highestBidPrice": highestBidPrice.flatMap { (value: AsV2Auction.HighestBidPrice) -> ResultMap in value.resultMap }])
            }

            public static func makeV3Ask(buyer: String? = nil, finder: String? = nil, findersFeeBps: Int, sellerFundsRecipient: String, v3AskStatus: V3AskStatus, seller: String, address: String, askCurrency: String, collectionAddress: String, askPrice: AsV3Ask.AskPrice) -> Property {
              return Property(unsafeResultMap: ["__typename": "V3Ask", "buyer": buyer, "finder": finder, "findersFeeBps": findersFeeBps, "sellerFundsRecipient": sellerFundsRecipient, "v3AskStatus": v3AskStatus, "seller": seller, "address": address, "askCurrency": askCurrency, "collectionAddress": collectionAddress, "askPrice": askPrice.resultMap])
            }

            public static func makeV1Offer(v1OfferStatus: V1MarketEntityStatus, sellOnShare: String, bidder: String, currency: String, amount: AsV1Offer.Amount) -> Property {
              return Property(unsafeResultMap: ["__typename": "V1Offer", "v1OfferStatus": v1OfferStatus, "sellOnShare": sellOnShare, "bidder": bidder, "currency": currency, "amount": amount.resultMap])
            }

            public static func makeV1Ask(v1AskStatus: V1MarketEntityStatus, currency: String, amount: AsV1Ask.Amount) -> Property {
              return Property(unsafeResultMap: ["__typename": "V1Ask", "v1AskStatus": v1AskStatus, "currency": currency, "amount": amount.resultMap])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var fragments: Fragments {
              get {
                return Fragments(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }

            public struct Fragments {
              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public var marketPropertiesFull: MarketPropertiesFull {
                get {
                  return MarketPropertiesFull(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }

              public var v2AuctionMarketProperties: V2AuctionMarketProperties? {
                get {
                  if !V2AuctionMarketProperties.possibleTypes.contains(resultMap["__typename"]! as! String) { return nil }
                  return V2AuctionMarketProperties(unsafeResultMap: resultMap)
                }
                set {
                  guard let newValue = newValue else { return }
                  resultMap += newValue.resultMap
                }
              }

              public var v3AskProperties: V3AskProperties? {
                get {
                  if !V3AskProperties.possibleTypes.contains(resultMap["__typename"]! as! String) { return nil }
                  return V3AskProperties(unsafeResultMap: resultMap)
                }
                set {
                  guard let newValue = newValue else { return }
                  resultMap += newValue.resultMap
                }
              }

              public var v1OfferProperties: V1OfferProperties? {
                get {
                  if !V1OfferProperties.possibleTypes.contains(resultMap["__typename"]! as! String) { return nil }
                  return V1OfferProperties(unsafeResultMap: resultMap)
                }
                set {
                  guard let newValue = newValue else { return }
                  resultMap += newValue.resultMap
                }
              }

              public var v1AskProperties: V1AskProperties? {
                get {
                  if !V1AskProperties.possibleTypes.contains(resultMap["__typename"]! as! String) { return nil }
                  return V1AskProperties(unsafeResultMap: resultMap)
                }
                set {
                  guard let newValue = newValue else { return }
                  resultMap += newValue.resultMap
                }
              }
            }

            public var asV2Auction: AsV2Auction? {
              get {
                if !AsV2Auction.possibleTypes.contains(__typename) { return nil }
                return AsV2Auction(unsafeResultMap: resultMap)
              }
              set {
                guard let newValue = newValue else { return }
                resultMap = newValue.resultMap
              }
            }

            public struct AsV2Auction: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["V2Auction"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("firstBidTime", type: .scalar(String.self)),
                  GraphQLField("highestBidder", type: .scalar(String.self)),
                  GraphQLField("curator", type: .nonNull(.scalar(String.self))),
                  GraphQLField("collectionAddress", type: .nonNull(.scalar(String.self))),
                  GraphQLField("curatorFeePercentage", type: .nonNull(.scalar(Int.self))),
                  GraphQLField("tokenId", type: .nonNull(.scalar(String.self))),
                  GraphQLField("auctionCurrency", type: .nonNull(.scalar(String.self))),
                  GraphQLField("duration", type: .nonNull(.scalar(String.self))),
                  GraphQLField("estimatedExpirationTime", type: .scalar(String.self)),
                  GraphQLField("v2AuctionStatus", type: .nonNull(.scalar(V2AuctionStatus.self))),
                  GraphQLField("tokenOwner", type: .nonNull(.scalar(String.self))),
                  GraphQLField("address", type: .nonNull(.scalar(String.self))),
                  GraphQLField("auctionId", type: .nonNull(.scalar(String.self))),
                  GraphQLField("approved", type: .nonNull(.scalar(Bool.self))),
                  GraphQLField("reservePrice", type: .nonNull(.object(ReservePrice.selections))),
                  GraphQLField("highestBidPrice", type: .object(HighestBidPrice.selections)),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(firstBidTime: String? = nil, highestBidder: String? = nil, curator: String, collectionAddress: String, curatorFeePercentage: Int, tokenId: String, auctionCurrency: String, duration: String, estimatedExpirationTime: String? = nil, v2AuctionStatus: V2AuctionStatus, tokenOwner: String, address: String, auctionId: String, approved: Bool, reservePrice: ReservePrice, highestBidPrice: HighestBidPrice? = nil) {
                self.init(unsafeResultMap: ["__typename": "V2Auction", "firstBidTime": firstBidTime, "highestBidder": highestBidder, "curator": curator, "collectionAddress": collectionAddress, "curatorFeePercentage": curatorFeePercentage, "tokenId": tokenId, "auctionCurrency": auctionCurrency, "duration": duration, "estimatedExpirationTime": estimatedExpirationTime, "v2AuctionStatus": v2AuctionStatus, "tokenOwner": tokenOwner, "address": address, "auctionId": auctionId, "approved": approved, "reservePrice": reservePrice.resultMap, "highestBidPrice": highestBidPrice.flatMap { (value: HighestBidPrice) -> ResultMap in value.resultMap }])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var firstBidTime: String? {
                get {
                  return resultMap["firstBidTime"] as? String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "firstBidTime")
                }
              }

              public var highestBidder: String? {
                get {
                  return resultMap["highestBidder"] as? String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "highestBidder")
                }
              }

              public var curator: String {
                get {
                  return resultMap["curator"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "curator")
                }
              }

              public var collectionAddress: String {
                get {
                  return resultMap["collectionAddress"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "collectionAddress")
                }
              }

              public var curatorFeePercentage: Int {
                get {
                  return resultMap["curatorFeePercentage"]! as! Int
                }
                set {
                  resultMap.updateValue(newValue, forKey: "curatorFeePercentage")
                }
              }

              public var tokenId: String {
                get {
                  return resultMap["tokenId"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "tokenId")
                }
              }

              public var auctionCurrency: String {
                get {
                  return resultMap["auctionCurrency"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "auctionCurrency")
                }
              }

              public var duration: String {
                get {
                  return resultMap["duration"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "duration")
                }
              }

              public var estimatedExpirationTime: String? {
                get {
                  return resultMap["estimatedExpirationTime"] as? String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "estimatedExpirationTime")
                }
              }

              public var v2AuctionStatus: V2AuctionStatus {
                get {
                  return resultMap["v2AuctionStatus"]! as! V2AuctionStatus
                }
                set {
                  resultMap.updateValue(newValue, forKey: "v2AuctionStatus")
                }
              }

              public var tokenOwner: String {
                get {
                  return resultMap["tokenOwner"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "tokenOwner")
                }
              }

              public var address: String {
                get {
                  return resultMap["address"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "address")
                }
              }

              public var auctionId: String {
                get {
                  return resultMap["auctionId"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "auctionId")
                }
              }

              public var approved: Bool {
                get {
                  return resultMap["approved"]! as! Bool
                }
                set {
                  resultMap.updateValue(newValue, forKey: "approved")
                }
              }

              public var reservePrice: ReservePrice {
                get {
                  return ReservePrice(unsafeResultMap: resultMap["reservePrice"]! as! ResultMap)
                }
                set {
                  resultMap.updateValue(newValue.resultMap, forKey: "reservePrice")
                }
              }

              public var highestBidPrice: HighestBidPrice? {
                get {
                  return (resultMap["highestBidPrice"] as? ResultMap).flatMap { HighestBidPrice(unsafeResultMap: $0) }
                }
                set {
                  resultMap.updateValue(newValue?.resultMap, forKey: "highestBidPrice")
                }
              }

              public var fragments: Fragments {
                get {
                  return Fragments(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }

              public struct Fragments {
                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public var marketPropertiesFull: MarketPropertiesFull {
                  get {
                    return MarketPropertiesFull(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }

                public var v2AuctionMarketProperties: V2AuctionMarketProperties {
                  get {
                    return V2AuctionMarketProperties(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }

                public var v3AskProperties: V3AskProperties? {
                  get {
                    if !V3AskProperties.possibleTypes.contains(resultMap["__typename"]! as! String) { return nil }
                    return V3AskProperties(unsafeResultMap: resultMap)
                  }
                  set {
                    guard let newValue = newValue else { return }
                    resultMap += newValue.resultMap
                  }
                }

                public var v1OfferProperties: V1OfferProperties? {
                  get {
                    if !V1OfferProperties.possibleTypes.contains(resultMap["__typename"]! as! String) { return nil }
                    return V1OfferProperties(unsafeResultMap: resultMap)
                  }
                  set {
                    guard let newValue = newValue else { return }
                    resultMap += newValue.resultMap
                  }
                }

                public var v1AskProperties: V1AskProperties? {
                  get {
                    if !V1AskProperties.possibleTypes.contains(resultMap["__typename"]! as! String) { return nil }
                    return V1AskProperties(unsafeResultMap: resultMap)
                  }
                  set {
                    guard let newValue = newValue else { return }
                    resultMap += newValue.resultMap
                  }
                }
              }

              public struct ReservePrice: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["PriceAtTime"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                    GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
                    GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
                    GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
                  self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var blockNumber: Int {
                  get {
                    return resultMap["blockNumber"]! as! Int
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "blockNumber")
                  }
                }

                public var chainTokenPrice: ChainTokenPrice? {
                  get {
                    return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
                  }
                  set {
                    resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
                  }
                }

                public var nativePrice: NativePrice {
                  get {
                    return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
                  }
                  set {
                    resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
                  }
                }

                public var usdcPrice: UsdcPrice? {
                  get {
                    return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
                  }
                  set {
                    resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
                  }
                }

                public var fragments: Fragments {
                  get {
                    return Fragments(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }

                public struct Fragments {
                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public var priceSummary: PriceSummary {
                    get {
                      return PriceSummary(unsafeResultMap: resultMap)
                    }
                    set {
                      resultMap += newValue.resultMap
                    }
                  }
                }

                public struct ChainTokenPrice: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["CurrencyAmount"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                      GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(decimal: Double, raw: String) {
                    self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var decimal: Double {
                    get {
                      return resultMap["decimal"]! as! Double
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "decimal")
                    }
                  }

                  public var raw: String {
                    get {
                      return resultMap["raw"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "raw")
                    }
                  }
                }

                public struct NativePrice: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["CurrencyAmount"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                      GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                      GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(decimal: Double, raw: String, currency: Currency) {
                    self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var decimal: Double {
                    get {
                      return resultMap["decimal"]! as! Double
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "decimal")
                    }
                  }

                  public var raw: String {
                    get {
                      return resultMap["raw"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "raw")
                    }
                  }

                  public var currency: Currency {
                    get {
                      return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
                    }
                    set {
                      resultMap.updateValue(newValue.resultMap, forKey: "currency")
                    }
                  }

                  public struct Currency: GraphQLSelectionSet {
                    public static let possibleTypes: [String] = ["Currency"]

                    public static var selections: [GraphQLSelection] {
                      return [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("address", type: .nonNull(.scalar(String.self))),
                        GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                        GraphQLField("name", type: .nonNull(.scalar(String.self))),
                      ]
                    }

                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public init(address: String, decimals: Int, name: String) {
                      self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
                    }

                    public var __typename: String {
                      get {
                        return resultMap["__typename"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "__typename")
                      }
                    }

                    public var address: String {
                      get {
                        return resultMap["address"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "address")
                      }
                    }

                    public var decimals: Int {
                      get {
                        return resultMap["decimals"]! as! Int
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "decimals")
                      }
                    }

                    public var name: String {
                      get {
                        return resultMap["name"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "name")
                      }
                    }
                  }
                }

                public struct UsdcPrice: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["CurrencyAmount"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                      GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(decimal: Double, raw: String) {
                    self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var decimal: Double {
                    get {
                      return resultMap["decimal"]! as! Double
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "decimal")
                    }
                  }

                  public var raw: String {
                    get {
                      return resultMap["raw"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "raw")
                    }
                  }
                }
              }

              public struct HighestBidPrice: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["PriceAtTime"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                    GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
                    GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
                    GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
                  self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var blockNumber: Int {
                  get {
                    return resultMap["blockNumber"]! as! Int
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "blockNumber")
                  }
                }

                public var chainTokenPrice: ChainTokenPrice? {
                  get {
                    return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
                  }
                  set {
                    resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
                  }
                }

                public var nativePrice: NativePrice {
                  get {
                    return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
                  }
                  set {
                    resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
                  }
                }

                public var usdcPrice: UsdcPrice? {
                  get {
                    return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
                  }
                  set {
                    resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
                  }
                }

                public var fragments: Fragments {
                  get {
                    return Fragments(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }

                public struct Fragments {
                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public var priceSummary: PriceSummary {
                    get {
                      return PriceSummary(unsafeResultMap: resultMap)
                    }
                    set {
                      resultMap += newValue.resultMap
                    }
                  }
                }

                public struct ChainTokenPrice: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["CurrencyAmount"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                      GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(decimal: Double, raw: String) {
                    self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var decimal: Double {
                    get {
                      return resultMap["decimal"]! as! Double
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "decimal")
                    }
                  }

                  public var raw: String {
                    get {
                      return resultMap["raw"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "raw")
                    }
                  }
                }

                public struct NativePrice: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["CurrencyAmount"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                      GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                      GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(decimal: Double, raw: String, currency: Currency) {
                    self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var decimal: Double {
                    get {
                      return resultMap["decimal"]! as! Double
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "decimal")
                    }
                  }

                  public var raw: String {
                    get {
                      return resultMap["raw"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "raw")
                    }
                  }

                  public var currency: Currency {
                    get {
                      return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
                    }
                    set {
                      resultMap.updateValue(newValue.resultMap, forKey: "currency")
                    }
                  }

                  public struct Currency: GraphQLSelectionSet {
                    public static let possibleTypes: [String] = ["Currency"]

                    public static var selections: [GraphQLSelection] {
                      return [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("address", type: .nonNull(.scalar(String.self))),
                        GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                        GraphQLField("name", type: .nonNull(.scalar(String.self))),
                      ]
                    }

                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public init(address: String, decimals: Int, name: String) {
                      self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
                    }

                    public var __typename: String {
                      get {
                        return resultMap["__typename"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "__typename")
                      }
                    }

                    public var address: String {
                      get {
                        return resultMap["address"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "address")
                      }
                    }

                    public var decimals: Int {
                      get {
                        return resultMap["decimals"]! as! Int
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "decimals")
                      }
                    }

                    public var name: String {
                      get {
                        return resultMap["name"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "name")
                      }
                    }
                  }
                }

                public struct UsdcPrice: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["CurrencyAmount"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                      GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(decimal: Double, raw: String) {
                    self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var decimal: Double {
                    get {
                      return resultMap["decimal"]! as! Double
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "decimal")
                    }
                  }

                  public var raw: String {
                    get {
                      return resultMap["raw"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "raw")
                    }
                  }
                }
              }
            }

            public var asV3Ask: AsV3Ask? {
              get {
                if !AsV3Ask.possibleTypes.contains(__typename) { return nil }
                return AsV3Ask(unsafeResultMap: resultMap)
              }
              set {
                guard let newValue = newValue else { return }
                resultMap = newValue.resultMap
              }
            }

            public struct AsV3Ask: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["V3Ask"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("buyer", type: .scalar(String.self)),
                  GraphQLField("finder", type: .scalar(String.self)),
                  GraphQLField("findersFeeBps", type: .nonNull(.scalar(Int.self))),
                  GraphQLField("sellerFundsRecipient", type: .nonNull(.scalar(String.self))),
                  GraphQLField("v3AskStatus", type: .nonNull(.scalar(V3AskStatus.self))),
                  GraphQLField("seller", type: .nonNull(.scalar(String.self))),
                  GraphQLField("address", type: .nonNull(.scalar(String.self))),
                  GraphQLField("askCurrency", type: .nonNull(.scalar(String.self))),
                  GraphQLField("collectionAddress", type: .nonNull(.scalar(String.self))),
                  GraphQLField("askPrice", type: .nonNull(.object(AskPrice.selections))),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(buyer: String? = nil, finder: String? = nil, findersFeeBps: Int, sellerFundsRecipient: String, v3AskStatus: V3AskStatus, seller: String, address: String, askCurrency: String, collectionAddress: String, askPrice: AskPrice) {
                self.init(unsafeResultMap: ["__typename": "V3Ask", "buyer": buyer, "finder": finder, "findersFeeBps": findersFeeBps, "sellerFundsRecipient": sellerFundsRecipient, "v3AskStatus": v3AskStatus, "seller": seller, "address": address, "askCurrency": askCurrency, "collectionAddress": collectionAddress, "askPrice": askPrice.resultMap])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var buyer: String? {
                get {
                  return resultMap["buyer"] as? String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "buyer")
                }
              }

              public var finder: String? {
                get {
                  return resultMap["finder"] as? String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "finder")
                }
              }

              public var findersFeeBps: Int {
                get {
                  return resultMap["findersFeeBps"]! as! Int
                }
                set {
                  resultMap.updateValue(newValue, forKey: "findersFeeBps")
                }
              }

              public var sellerFundsRecipient: String {
                get {
                  return resultMap["sellerFundsRecipient"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "sellerFundsRecipient")
                }
              }

              public var v3AskStatus: V3AskStatus {
                get {
                  return resultMap["v3AskStatus"]! as! V3AskStatus
                }
                set {
                  resultMap.updateValue(newValue, forKey: "v3AskStatus")
                }
              }

              public var seller: String {
                get {
                  return resultMap["seller"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "seller")
                }
              }

              public var address: String {
                get {
                  return resultMap["address"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "address")
                }
              }

              public var askCurrency: String {
                get {
                  return resultMap["askCurrency"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "askCurrency")
                }
              }

              public var collectionAddress: String {
                get {
                  return resultMap["collectionAddress"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "collectionAddress")
                }
              }

              public var askPrice: AskPrice {
                get {
                  return AskPrice(unsafeResultMap: resultMap["askPrice"]! as! ResultMap)
                }
                set {
                  resultMap.updateValue(newValue.resultMap, forKey: "askPrice")
                }
              }

              public var fragments: Fragments {
                get {
                  return Fragments(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }

              public struct Fragments {
                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public var marketPropertiesFull: MarketPropertiesFull {
                  get {
                    return MarketPropertiesFull(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }

                public var v2AuctionMarketProperties: V2AuctionMarketProperties? {
                  get {
                    if !V2AuctionMarketProperties.possibleTypes.contains(resultMap["__typename"]! as! String) { return nil }
                    return V2AuctionMarketProperties(unsafeResultMap: resultMap)
                  }
                  set {
                    guard let newValue = newValue else { return }
                    resultMap += newValue.resultMap
                  }
                }

                public var v3AskProperties: V3AskProperties {
                  get {
                    return V3AskProperties(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }

                public var v1OfferProperties: V1OfferProperties? {
                  get {
                    if !V1OfferProperties.possibleTypes.contains(resultMap["__typename"]! as! String) { return nil }
                    return V1OfferProperties(unsafeResultMap: resultMap)
                  }
                  set {
                    guard let newValue = newValue else { return }
                    resultMap += newValue.resultMap
                  }
                }

                public var v1AskProperties: V1AskProperties? {
                  get {
                    if !V1AskProperties.possibleTypes.contains(resultMap["__typename"]! as! String) { return nil }
                    return V1AskProperties(unsafeResultMap: resultMap)
                  }
                  set {
                    guard let newValue = newValue else { return }
                    resultMap += newValue.resultMap
                  }
                }
              }

              public struct AskPrice: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["PriceAtTime"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                    GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
                    GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
                    GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
                  self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var blockNumber: Int {
                  get {
                    return resultMap["blockNumber"]! as! Int
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "blockNumber")
                  }
                }

                public var chainTokenPrice: ChainTokenPrice? {
                  get {
                    return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
                  }
                  set {
                    resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
                  }
                }

                public var nativePrice: NativePrice {
                  get {
                    return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
                  }
                  set {
                    resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
                  }
                }

                public var usdcPrice: UsdcPrice? {
                  get {
                    return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
                  }
                  set {
                    resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
                  }
                }

                public var fragments: Fragments {
                  get {
                    return Fragments(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }

                public struct Fragments {
                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public var priceSummary: PriceSummary {
                    get {
                      return PriceSummary(unsafeResultMap: resultMap)
                    }
                    set {
                      resultMap += newValue.resultMap
                    }
                  }
                }

                public struct ChainTokenPrice: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["CurrencyAmount"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                      GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(decimal: Double, raw: String) {
                    self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var decimal: Double {
                    get {
                      return resultMap["decimal"]! as! Double
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "decimal")
                    }
                  }

                  public var raw: String {
                    get {
                      return resultMap["raw"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "raw")
                    }
                  }
                }

                public struct NativePrice: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["CurrencyAmount"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                      GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                      GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(decimal: Double, raw: String, currency: Currency) {
                    self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var decimal: Double {
                    get {
                      return resultMap["decimal"]! as! Double
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "decimal")
                    }
                  }

                  public var raw: String {
                    get {
                      return resultMap["raw"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "raw")
                    }
                  }

                  public var currency: Currency {
                    get {
                      return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
                    }
                    set {
                      resultMap.updateValue(newValue.resultMap, forKey: "currency")
                    }
                  }

                  public struct Currency: GraphQLSelectionSet {
                    public static let possibleTypes: [String] = ["Currency"]

                    public static var selections: [GraphQLSelection] {
                      return [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("address", type: .nonNull(.scalar(String.self))),
                        GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                        GraphQLField("name", type: .nonNull(.scalar(String.self))),
                      ]
                    }

                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public init(address: String, decimals: Int, name: String) {
                      self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
                    }

                    public var __typename: String {
                      get {
                        return resultMap["__typename"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "__typename")
                      }
                    }

                    public var address: String {
                      get {
                        return resultMap["address"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "address")
                      }
                    }

                    public var decimals: Int {
                      get {
                        return resultMap["decimals"]! as! Int
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "decimals")
                      }
                    }

                    public var name: String {
                      get {
                        return resultMap["name"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "name")
                      }
                    }
                  }
                }

                public struct UsdcPrice: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["CurrencyAmount"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                      GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(decimal: Double, raw: String) {
                    self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var decimal: Double {
                    get {
                      return resultMap["decimal"]! as! Double
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "decimal")
                    }
                  }

                  public var raw: String {
                    get {
                      return resultMap["raw"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "raw")
                    }
                  }
                }
              }
            }

            public var asV1Offer: AsV1Offer? {
              get {
                if !AsV1Offer.possibleTypes.contains(__typename) { return nil }
                return AsV1Offer(unsafeResultMap: resultMap)
              }
              set {
                guard let newValue = newValue else { return }
                resultMap = newValue.resultMap
              }
            }

            public struct AsV1Offer: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["V1Offer"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("v1OfferStatus", type: .nonNull(.scalar(V1MarketEntityStatus.self))),
                  GraphQLField("sellOnShare", type: .nonNull(.scalar(String.self))),
                  GraphQLField("bidder", type: .nonNull(.scalar(String.self))),
                  GraphQLField("currency", type: .nonNull(.scalar(String.self))),
                  GraphQLField("amount", type: .nonNull(.object(Amount.selections))),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(v1OfferStatus: V1MarketEntityStatus, sellOnShare: String, bidder: String, currency: String, amount: Amount) {
                self.init(unsafeResultMap: ["__typename": "V1Offer", "v1OfferStatus": v1OfferStatus, "sellOnShare": sellOnShare, "bidder": bidder, "currency": currency, "amount": amount.resultMap])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var v1OfferStatus: V1MarketEntityStatus {
                get {
                  return resultMap["v1OfferStatus"]! as! V1MarketEntityStatus
                }
                set {
                  resultMap.updateValue(newValue, forKey: "v1OfferStatus")
                }
              }

              public var sellOnShare: String {
                get {
                  return resultMap["sellOnShare"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "sellOnShare")
                }
              }

              public var bidder: String {
                get {
                  return resultMap["bidder"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "bidder")
                }
              }

              public var currency: String {
                get {
                  return resultMap["currency"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "currency")
                }
              }

              public var amount: Amount {
                get {
                  return Amount(unsafeResultMap: resultMap["amount"]! as! ResultMap)
                }
                set {
                  resultMap.updateValue(newValue.resultMap, forKey: "amount")
                }
              }

              public var fragments: Fragments {
                get {
                  return Fragments(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }

              public struct Fragments {
                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public var marketPropertiesFull: MarketPropertiesFull {
                  get {
                    return MarketPropertiesFull(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }

                public var v2AuctionMarketProperties: V2AuctionMarketProperties? {
                  get {
                    if !V2AuctionMarketProperties.possibleTypes.contains(resultMap["__typename"]! as! String) { return nil }
                    return V2AuctionMarketProperties(unsafeResultMap: resultMap)
                  }
                  set {
                    guard let newValue = newValue else { return }
                    resultMap += newValue.resultMap
                  }
                }

                public var v3AskProperties: V3AskProperties? {
                  get {
                    if !V3AskProperties.possibleTypes.contains(resultMap["__typename"]! as! String) { return nil }
                    return V3AskProperties(unsafeResultMap: resultMap)
                  }
                  set {
                    guard let newValue = newValue else { return }
                    resultMap += newValue.resultMap
                  }
                }

                public var v1OfferProperties: V1OfferProperties {
                  get {
                    return V1OfferProperties(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }

                public var v1AskProperties: V1AskProperties? {
                  get {
                    if !V1AskProperties.possibleTypes.contains(resultMap["__typename"]! as! String) { return nil }
                    return V1AskProperties(unsafeResultMap: resultMap)
                  }
                  set {
                    guard let newValue = newValue else { return }
                    resultMap += newValue.resultMap
                  }
                }
              }

              public struct Amount: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["PriceAtTime"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                    GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
                    GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
                    GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
                  self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var blockNumber: Int {
                  get {
                    return resultMap["blockNumber"]! as! Int
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "blockNumber")
                  }
                }

                public var chainTokenPrice: ChainTokenPrice? {
                  get {
                    return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
                  }
                  set {
                    resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
                  }
                }

                public var nativePrice: NativePrice {
                  get {
                    return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
                  }
                  set {
                    resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
                  }
                }

                public var usdcPrice: UsdcPrice? {
                  get {
                    return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
                  }
                  set {
                    resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
                  }
                }

                public var fragments: Fragments {
                  get {
                    return Fragments(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }

                public struct Fragments {
                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public var priceSummary: PriceSummary {
                    get {
                      return PriceSummary(unsafeResultMap: resultMap)
                    }
                    set {
                      resultMap += newValue.resultMap
                    }
                  }
                }

                public struct ChainTokenPrice: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["CurrencyAmount"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                      GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(decimal: Double, raw: String) {
                    self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var decimal: Double {
                    get {
                      return resultMap["decimal"]! as! Double
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "decimal")
                    }
                  }

                  public var raw: String {
                    get {
                      return resultMap["raw"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "raw")
                    }
                  }
                }

                public struct NativePrice: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["CurrencyAmount"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                      GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                      GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(decimal: Double, raw: String, currency: Currency) {
                    self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var decimal: Double {
                    get {
                      return resultMap["decimal"]! as! Double
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "decimal")
                    }
                  }

                  public var raw: String {
                    get {
                      return resultMap["raw"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "raw")
                    }
                  }

                  public var currency: Currency {
                    get {
                      return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
                    }
                    set {
                      resultMap.updateValue(newValue.resultMap, forKey: "currency")
                    }
                  }

                  public struct Currency: GraphQLSelectionSet {
                    public static let possibleTypes: [String] = ["Currency"]

                    public static var selections: [GraphQLSelection] {
                      return [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("address", type: .nonNull(.scalar(String.self))),
                        GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                        GraphQLField("name", type: .nonNull(.scalar(String.self))),
                      ]
                    }

                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public init(address: String, decimals: Int, name: String) {
                      self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
                    }

                    public var __typename: String {
                      get {
                        return resultMap["__typename"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "__typename")
                      }
                    }

                    public var address: String {
                      get {
                        return resultMap["address"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "address")
                      }
                    }

                    public var decimals: Int {
                      get {
                        return resultMap["decimals"]! as! Int
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "decimals")
                      }
                    }

                    public var name: String {
                      get {
                        return resultMap["name"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "name")
                      }
                    }
                  }
                }

                public struct UsdcPrice: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["CurrencyAmount"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                      GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(decimal: Double, raw: String) {
                    self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var decimal: Double {
                    get {
                      return resultMap["decimal"]! as! Double
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "decimal")
                    }
                  }

                  public var raw: String {
                    get {
                      return resultMap["raw"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "raw")
                    }
                  }
                }
              }
            }

            public var asV1Ask: AsV1Ask? {
              get {
                if !AsV1Ask.possibleTypes.contains(__typename) { return nil }
                return AsV1Ask(unsafeResultMap: resultMap)
              }
              set {
                guard let newValue = newValue else { return }
                resultMap = newValue.resultMap
              }
            }

            public struct AsV1Ask: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["V1Ask"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("v1AskStatus", type: .nonNull(.scalar(V1MarketEntityStatus.self))),
                  GraphQLField("currency", type: .nonNull(.scalar(String.self))),
                  GraphQLField("amount", type: .nonNull(.object(Amount.selections))),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(v1AskStatus: V1MarketEntityStatus, currency: String, amount: Amount) {
                self.init(unsafeResultMap: ["__typename": "V1Ask", "v1AskStatus": v1AskStatus, "currency": currency, "amount": amount.resultMap])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var v1AskStatus: V1MarketEntityStatus {
                get {
                  return resultMap["v1AskStatus"]! as! V1MarketEntityStatus
                }
                set {
                  resultMap.updateValue(newValue, forKey: "v1AskStatus")
                }
              }

              public var currency: String {
                get {
                  return resultMap["currency"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "currency")
                }
              }

              public var amount: Amount {
                get {
                  return Amount(unsafeResultMap: resultMap["amount"]! as! ResultMap)
                }
                set {
                  resultMap.updateValue(newValue.resultMap, forKey: "amount")
                }
              }

              public var fragments: Fragments {
                get {
                  return Fragments(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }

              public struct Fragments {
                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public var marketPropertiesFull: MarketPropertiesFull {
                  get {
                    return MarketPropertiesFull(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }

                public var v2AuctionMarketProperties: V2AuctionMarketProperties? {
                  get {
                    if !V2AuctionMarketProperties.possibleTypes.contains(resultMap["__typename"]! as! String) { return nil }
                    return V2AuctionMarketProperties(unsafeResultMap: resultMap)
                  }
                  set {
                    guard let newValue = newValue else { return }
                    resultMap += newValue.resultMap
                  }
                }

                public var v3AskProperties: V3AskProperties? {
                  get {
                    if !V3AskProperties.possibleTypes.contains(resultMap["__typename"]! as! String) { return nil }
                    return V3AskProperties(unsafeResultMap: resultMap)
                  }
                  set {
                    guard let newValue = newValue else { return }
                    resultMap += newValue.resultMap
                  }
                }

                public var v1OfferProperties: V1OfferProperties? {
                  get {
                    if !V1OfferProperties.possibleTypes.contains(resultMap["__typename"]! as! String) { return nil }
                    return V1OfferProperties(unsafeResultMap: resultMap)
                  }
                  set {
                    guard let newValue = newValue else { return }
                    resultMap += newValue.resultMap
                  }
                }

                public var v1AskProperties: V1AskProperties {
                  get {
                    return V1AskProperties(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }
              }

              public struct Amount: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["PriceAtTime"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                    GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
                    GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
                    GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
                  self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var blockNumber: Int {
                  get {
                    return resultMap["blockNumber"]! as! Int
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "blockNumber")
                  }
                }

                public var chainTokenPrice: ChainTokenPrice? {
                  get {
                    return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
                  }
                  set {
                    resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
                  }
                }

                public var nativePrice: NativePrice {
                  get {
                    return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
                  }
                  set {
                    resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
                  }
                }

                public var usdcPrice: UsdcPrice? {
                  get {
                    return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
                  }
                  set {
                    resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
                  }
                }

                public var fragments: Fragments {
                  get {
                    return Fragments(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }

                public struct Fragments {
                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public var priceSummary: PriceSummary {
                    get {
                      return PriceSummary(unsafeResultMap: resultMap)
                    }
                    set {
                      resultMap += newValue.resultMap
                    }
                  }
                }

                public struct ChainTokenPrice: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["CurrencyAmount"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                      GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(decimal: Double, raw: String) {
                    self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var decimal: Double {
                    get {
                      return resultMap["decimal"]! as! Double
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "decimal")
                    }
                  }

                  public var raw: String {
                    get {
                      return resultMap["raw"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "raw")
                    }
                  }
                }

                public struct NativePrice: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["CurrencyAmount"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                      GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                      GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(decimal: Double, raw: String, currency: Currency) {
                    self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var decimal: Double {
                    get {
                      return resultMap["decimal"]! as! Double
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "decimal")
                    }
                  }

                  public var raw: String {
                    get {
                      return resultMap["raw"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "raw")
                    }
                  }

                  public var currency: Currency {
                    get {
                      return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
                    }
                    set {
                      resultMap.updateValue(newValue.resultMap, forKey: "currency")
                    }
                  }

                  public struct Currency: GraphQLSelectionSet {
                    public static let possibleTypes: [String] = ["Currency"]

                    public static var selections: [GraphQLSelection] {
                      return [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("address", type: .nonNull(.scalar(String.self))),
                        GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                        GraphQLField("name", type: .nonNull(.scalar(String.self))),
                      ]
                    }

                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public init(address: String, decimals: Int, name: String) {
                      self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
                    }

                    public var __typename: String {
                      get {
                        return resultMap["__typename"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "__typename")
                      }
                    }

                    public var address: String {
                      get {
                        return resultMap["address"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "address")
                      }
                    }

                    public var decimals: Int {
                      get {
                        return resultMap["decimals"]! as! Int
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "decimals")
                      }
                    }

                    public var name: String {
                      get {
                        return resultMap["name"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "name")
                      }
                    }
                  }
                }

                public struct UsdcPrice: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["CurrencyAmount"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                      GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(decimal: Double, raw: String) {
                    self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var decimal: Double {
                    get {
                      return resultMap["decimal"]! as! Double
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "decimal")
                    }
                  }

                  public var raw: String {
                    get {
                      return resultMap["raw"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "raw")
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

public final class MintsQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    query mints($networks: [NetworkInput!]!, $filter: MintsQueryFilter, $pagination: PaginationInput!, $sort: MintSortKeySortInput!, $where: MintsQueryInput, $includeFullDetails: Boolean!, $includeMarkets: Boolean!) {
      mints(
        where: $where
        networks: $networks
        filter: $filter
        pagination: $pagination
        sort: $sort
      ) {
        __typename
        pageInfo {
          __typename
          endCursor
          hasNextPage
          limit
        }
        nodes {
          __typename
          mint {
            __typename
            collectionAddress
            tokenId
            originatorAddress
            toAddress
            transactionInfo {
              __typename
              ...TransactionDetails
            }
          }
          token {
            __typename
            ...TokenInfo
            ...TokenDetails @include(if: $includeFullDetails)
          }
          ...MarketsOnMintInfo @include(if: $includeMarkets)
        }
      }
    }
    """

  public let operationName: String = "mints"

  public let operationIdentifier: String? = "9d82a823482bc523ba22298237eee0175e3d987a8da55e8140c18895f2120041"

  public var queryDocument: String {
    var document: String = operationDefinition
    document.append("\n" + TransactionDetails.fragmentDefinition)
    document.append("\n" + TokenInfo.fragmentDefinition)
    document.append("\n" + TokenContractInfo.fragmentDefinition)
    document.append("\n" + MintDetails.fragmentDefinition)
    document.append("\n" + PriceSummary.fragmentDefinition)
    document.append("\n" + FullMedia.fragmentDefinition)
    document.append("\n" + TokenDetails.fragmentDefinition)
    document.append("\n" + MarketsOnMintInfo.fragmentDefinition)
    document.append("\n" + MarketInfo.fragmentDefinition)
    document.append("\n" + NetworkInfoDetails.fragmentDefinition)
    document.append("\n" + MarketDetails.fragmentDefinition)
    document.append("\n" + MarketPropertiesFull.fragmentDefinition)
    document.append("\n" + V2AuctionMarketProperties.fragmentDefinition)
    document.append("\n" + V3AskProperties.fragmentDefinition)
    document.append("\n" + V1OfferProperties.fragmentDefinition)
    document.append("\n" + V1AskProperties.fragmentDefinition)
    return document
  }

  public var networks: [NetworkInput]
  public var filter: MintsQueryFilter?
  public var pagination: PaginationInput
  public var sort: MintSortKeySortInput
  public var `where`: MintsQueryInput?
  public var includeFullDetails: Bool
  public var includeMarkets: Bool

  public init(networks: [NetworkInput], filter: MintsQueryFilter? = nil, pagination: PaginationInput, sort: MintSortKeySortInput, `where`: MintsQueryInput? = nil, includeFullDetails: Bool, includeMarkets: Bool) {
    self.networks = networks
    self.filter = filter
    self.pagination = pagination
    self.sort = sort
    self.`where` = `where`
    self.includeFullDetails = includeFullDetails
    self.includeMarkets = includeMarkets
  }

  public var variables: GraphQLMap? {
    return ["networks": networks, "filter": filter, "pagination": pagination, "sort": sort, "where": `where`, "includeFullDetails": includeFullDetails, "includeMarkets": includeMarkets]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["RootQuery"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("mints", arguments: ["where": GraphQLVariable("where"), "networks": GraphQLVariable("networks"), "filter": GraphQLVariable("filter"), "pagination": GraphQLVariable("pagination"), "sort": GraphQLVariable("sort")], type: .nonNull(.object(Mint.selections))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(mints: Mint) {
      self.init(unsafeResultMap: ["__typename": "RootQuery", "mints": mints.resultMap])
    }

    /// Historical minting data
    public var mints: Mint {
      get {
        return Mint(unsafeResultMap: resultMap["mints"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "mints")
      }
    }

    public struct Mint: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["MintWithTokenAndMarketsConnection"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("pageInfo", type: .nonNull(.object(PageInfo.selections))),
          GraphQLField("nodes", type: .nonNull(.list(.nonNull(.object(Node.selections))))),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(pageInfo: PageInfo, nodes: [Node]) {
        self.init(unsafeResultMap: ["__typename": "MintWithTokenAndMarketsConnection", "pageInfo": pageInfo.resultMap, "nodes": nodes.map { (value: Node) -> ResultMap in value.resultMap }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var pageInfo: PageInfo {
        get {
          return PageInfo(unsafeResultMap: resultMap["pageInfo"]! as! ResultMap)
        }
        set {
          resultMap.updateValue(newValue.resultMap, forKey: "pageInfo")
        }
      }

      public var nodes: [Node] {
        get {
          return (resultMap["nodes"] as! [ResultMap]).map { (value: ResultMap) -> Node in Node(unsafeResultMap: value) }
        }
        set {
          resultMap.updateValue(newValue.map { (value: Node) -> ResultMap in value.resultMap }, forKey: "nodes")
        }
      }

      public struct PageInfo: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["PageInfo"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("endCursor", type: .scalar(String.self)),
            GraphQLField("hasNextPage", type: .nonNull(.scalar(Bool.self))),
            GraphQLField("limit", type: .nonNull(.scalar(Int.self))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(endCursor: String? = nil, hasNextPage: Bool, limit: Int) {
          self.init(unsafeResultMap: ["__typename": "PageInfo", "endCursor": endCursor, "hasNextPage": hasNextPage, "limit": limit])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var endCursor: String? {
          get {
            return resultMap["endCursor"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "endCursor")
          }
        }

        public var hasNextPage: Bool {
          get {
            return resultMap["hasNextPage"]! as! Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "hasNextPage")
          }
        }

        public var limit: Int {
          get {
            return resultMap["limit"]! as! Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "limit")
          }
        }
      }

      public struct Node: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["MintWithTokenAndMarkets"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("mint", type: .nonNull(.object(Mint.selections))),
            GraphQLField("token", type: .object(Token.selections)),
            GraphQLBooleanCondition(variableName: "includeMarkets", inverted: false, selections: [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("markets", arguments: ["pagination": ["limit": 10], "sort": ["sortKey": "NONE", "sortDirection": "DESC"]], type: .nonNull(.list(.nonNull(.object(Market.selections))))),
            ]),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(mint: Mint, token: Token? = nil, markets: [Market]? = nil) {
          self.init(unsafeResultMap: ["__typename": "MintWithTokenAndMarkets", "mint": mint.resultMap, "token": token.flatMap { (value: Token) -> ResultMap in value.resultMap }, "markets": markets.flatMap { (value: [Market]) -> [ResultMap] in value.map { (value: Market) -> ResultMap in value.resultMap } }])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var mint: Mint {
          get {
            return Mint(unsafeResultMap: resultMap["mint"]! as! ResultMap)
          }
          set {
            resultMap.updateValue(newValue.resultMap, forKey: "mint")
          }
        }

        public var token: Token? {
          get {
            return (resultMap["token"] as? ResultMap).flatMap { Token(unsafeResultMap: $0) }
          }
          set {
            resultMap.updateValue(newValue?.resultMap, forKey: "token")
          }
        }

        public var markets: [Market]? {
          get {
            return (resultMap["markets"] as? [ResultMap]).flatMap { (value: [ResultMap]) -> [Market] in value.map { (value: ResultMap) -> Market in Market(unsafeResultMap: value) } }
          }
          set {
            resultMap.updateValue(newValue.flatMap { (value: [Market]) -> [ResultMap] in value.map { (value: Market) -> ResultMap in value.resultMap } }, forKey: "markets")
          }
        }

        public var fragments: Fragments {
          get {
            return Fragments(unsafeResultMap: resultMap)
          }
          set {
            resultMap += newValue.resultMap
          }
        }

        public struct Fragments {
          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public var marketsOnMintInfo: MarketsOnMintInfo {
            get {
              return MarketsOnMintInfo(unsafeResultMap: resultMap)
            }
            set {
              resultMap += newValue.resultMap
            }
          }
        }

        public struct Mint: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["Mint"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("collectionAddress", type: .nonNull(.scalar(String.self))),
              GraphQLField("tokenId", type: .nonNull(.scalar(String.self))),
              GraphQLField("originatorAddress", type: .nonNull(.scalar(String.self))),
              GraphQLField("toAddress", type: .nonNull(.scalar(String.self))),
              GraphQLField("transactionInfo", type: .nonNull(.object(TransactionInfo.selections))),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(collectionAddress: String, tokenId: String, originatorAddress: String, toAddress: String, transactionInfo: TransactionInfo) {
            self.init(unsafeResultMap: ["__typename": "Mint", "collectionAddress": collectionAddress, "tokenId": tokenId, "originatorAddress": originatorAddress, "toAddress": toAddress, "transactionInfo": transactionInfo.resultMap])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var collectionAddress: String {
            get {
              return resultMap["collectionAddress"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "collectionAddress")
            }
          }

          public var tokenId: String {
            get {
              return resultMap["tokenId"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "tokenId")
            }
          }

          public var originatorAddress: String {
            get {
              return resultMap["originatorAddress"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "originatorAddress")
            }
          }

          public var toAddress: String {
            get {
              return resultMap["toAddress"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "toAddress")
            }
          }

          public var transactionInfo: TransactionInfo {
            get {
              return TransactionInfo(unsafeResultMap: resultMap["transactionInfo"]! as! ResultMap)
            }
            set {
              resultMap.updateValue(newValue.resultMap, forKey: "transactionInfo")
            }
          }

          public struct TransactionInfo: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["TransactionInfo"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                GraphQLField("blockTimestamp", type: .nonNull(.scalar(String.self))),
                GraphQLField("transactionHash", type: .scalar(String.self)),
                GraphQLField("logIndex", type: .scalar(Int.self)),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(blockNumber: Int, blockTimestamp: String, transactionHash: String? = nil, logIndex: Int? = nil) {
              self.init(unsafeResultMap: ["__typename": "TransactionInfo", "blockNumber": blockNumber, "blockTimestamp": blockTimestamp, "transactionHash": transactionHash, "logIndex": logIndex])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var blockNumber: Int {
              get {
                return resultMap["blockNumber"]! as! Int
              }
              set {
                resultMap.updateValue(newValue, forKey: "blockNumber")
              }
            }

            public var blockTimestamp: String {
              get {
                return resultMap["blockTimestamp"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "blockTimestamp")
              }
            }

            public var transactionHash: String? {
              get {
                return resultMap["transactionHash"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "transactionHash")
              }
            }

            public var logIndex: Int? {
              get {
                return resultMap["logIndex"] as? Int
              }
              set {
                resultMap.updateValue(newValue, forKey: "logIndex")
              }
            }

            public var fragments: Fragments {
              get {
                return Fragments(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }

            public struct Fragments {
              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public var transactionDetails: TransactionDetails {
                get {
                  return TransactionDetails(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }
            }
          }
        }

        public struct Token: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["Token"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("tokenId", type: .nonNull(.scalar(String.self))),
              GraphQLField("tokenContract", type: .object(TokenContract.selections)),
              GraphQLField("mintInfo", type: .object(MintInfo.selections)),
              GraphQLField("collectionAddress", type: .nonNull(.scalar(String.self))),
              GraphQLField("lastRefreshTime", type: .scalar(String.self)),
              GraphQLField("owner", type: .scalar(String.self)),
              GraphQLField("name", type: .scalar(String.self)),
              GraphQLField("description", type: .scalar(String.self)),
              GraphQLField("image", type: .object(Image.selections)),
              GraphQLField("content", type: .object(Content.selections)),
              GraphQLBooleanCondition(variableName: "includeFullDetails", inverted: false, selections: [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("metadata", type: .scalar(String.self)),
                GraphQLField("tokenUrl", type: .scalar(String.self)),
                GraphQLField("tokenUrlMimeType", type: .scalar(String.self)),
                GraphQLField("attributes", type: .list(.nonNull(.object(Attribute.selections)))),
              ]),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(tokenId: String, tokenContract: TokenContract? = nil, mintInfo: MintInfo? = nil, collectionAddress: String, lastRefreshTime: String? = nil, owner: String? = nil, name: String? = nil, description: String? = nil, image: Image? = nil, content: Content? = nil, metadata: String? = nil, tokenUrl: String? = nil, tokenUrlMimeType: String? = nil, attributes: [Attribute]? = nil) {
            self.init(unsafeResultMap: ["__typename": "Token", "tokenId": tokenId, "tokenContract": tokenContract.flatMap { (value: TokenContract) -> ResultMap in value.resultMap }, "mintInfo": mintInfo.flatMap { (value: MintInfo) -> ResultMap in value.resultMap }, "collectionAddress": collectionAddress, "lastRefreshTime": lastRefreshTime, "owner": owner, "name": name, "description": description, "image": image.flatMap { (value: Image) -> ResultMap in value.resultMap }, "content": content.flatMap { (value: Content) -> ResultMap in value.resultMap }, "metadata": metadata, "tokenUrl": tokenUrl, "tokenUrlMimeType": tokenUrlMimeType, "attributes": attributes.flatMap { (value: [Attribute]) -> [ResultMap] in value.map { (value: Attribute) -> ResultMap in value.resultMap } }])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var tokenId: String {
            get {
              return resultMap["tokenId"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "tokenId")
            }
          }

          public var tokenContract: TokenContract? {
            get {
              return (resultMap["tokenContract"] as? ResultMap).flatMap { TokenContract(unsafeResultMap: $0) }
            }
            set {
              resultMap.updateValue(newValue?.resultMap, forKey: "tokenContract")
            }
          }

          public var mintInfo: MintInfo? {
            get {
              return (resultMap["mintInfo"] as? ResultMap).flatMap { MintInfo(unsafeResultMap: $0) }
            }
            set {
              resultMap.updateValue(newValue?.resultMap, forKey: "mintInfo")
            }
          }

          public var collectionAddress: String {
            get {
              return resultMap["collectionAddress"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "collectionAddress")
            }
          }

          public var lastRefreshTime: String? {
            get {
              return resultMap["lastRefreshTime"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "lastRefreshTime")
            }
          }

          public var owner: String? {
            get {
              return resultMap["owner"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "owner")
            }
          }

          public var name: String? {
            get {
              return resultMap["name"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "name")
            }
          }

          public var description: String? {
            get {
              return resultMap["description"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "description")
            }
          }

          public var image: Image? {
            get {
              return (resultMap["image"] as? ResultMap).flatMap { Image(unsafeResultMap: $0) }
            }
            set {
              resultMap.updateValue(newValue?.resultMap, forKey: "image")
            }
          }

          public var content: Content? {
            get {
              return (resultMap["content"] as? ResultMap).flatMap { Content(unsafeResultMap: $0) }
            }
            set {
              resultMap.updateValue(newValue?.resultMap, forKey: "content")
            }
          }

          public var metadata: String? {
            get {
              return resultMap["metadata"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "metadata")
            }
          }

          public var tokenUrl: String? {
            get {
              return resultMap["tokenUrl"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "tokenUrl")
            }
          }

          public var tokenUrlMimeType: String? {
            get {
              return resultMap["tokenUrlMimeType"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "tokenUrlMimeType")
            }
          }

          public var attributes: [Attribute]? {
            get {
              return (resultMap["attributes"] as? [ResultMap]).flatMap { (value: [ResultMap]) -> [Attribute] in value.map { (value: ResultMap) -> Attribute in Attribute(unsafeResultMap: value) } }
            }
            set {
              resultMap.updateValue(newValue.flatMap { (value: [Attribute]) -> [ResultMap] in value.map { (value: Attribute) -> ResultMap in value.resultMap } }, forKey: "attributes")
            }
          }

          public var fragments: Fragments {
            get {
              return Fragments(unsafeResultMap: resultMap)
            }
            set {
              resultMap += newValue.resultMap
            }
          }

          public struct Fragments {
            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public var tokenInfo: TokenInfo {
              get {
                return TokenInfo(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }

            public var tokenDetails: TokenDetails {
              get {
                return TokenDetails(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }
          }

          public struct TokenContract: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["TokenContract"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("name", type: .scalar(String.self)),
                GraphQLField("network", type: .nonNull(.scalar(String.self))),
                GraphQLField("description", type: .scalar(String.self)),
                GraphQLField("collectionAddress", type: .nonNull(.scalar(String.self))),
                GraphQLField("symbol", type: .scalar(String.self)),
                GraphQLField("chain", type: .nonNull(.scalar(Int.self))),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(name: String? = nil, network: String, description: String? = nil, collectionAddress: String, symbol: String? = nil, chain: Int) {
              self.init(unsafeResultMap: ["__typename": "TokenContract", "name": name, "network": network, "description": description, "collectionAddress": collectionAddress, "symbol": symbol, "chain": chain])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var name: String? {
              get {
                return resultMap["name"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "name")
              }
            }

            public var network: String {
              get {
                return resultMap["network"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "network")
              }
            }

            public var description: String? {
              get {
                return resultMap["description"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "description")
              }
            }

            public var collectionAddress: String {
              get {
                return resultMap["collectionAddress"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "collectionAddress")
              }
            }

            public var symbol: String? {
              get {
                return resultMap["symbol"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "symbol")
              }
            }

            public var chain: Int {
              get {
                return resultMap["chain"]! as! Int
              }
              set {
                resultMap.updateValue(newValue, forKey: "chain")
              }
            }

            public var fragments: Fragments {
              get {
                return Fragments(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }

            public struct Fragments {
              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public var tokenContractInfo: TokenContractInfo {
                get {
                  return TokenContractInfo(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }
            }
          }

          public struct MintInfo: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["MintInfo"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("price", type: .nonNull(.object(Price.selections))),
                GraphQLField("originatorAddress", type: .nonNull(.scalar(String.self))),
                GraphQLField("toAddress", type: .nonNull(.scalar(String.self))),
                GraphQLField("mintContext", type: .nonNull(.object(MintContext.selections))),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(price: Price, originatorAddress: String, toAddress: String, mintContext: MintContext) {
              self.init(unsafeResultMap: ["__typename": "MintInfo", "price": price.resultMap, "originatorAddress": originatorAddress, "toAddress": toAddress, "mintContext": mintContext.resultMap])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var price: Price {
              get {
                return Price(unsafeResultMap: resultMap["price"]! as! ResultMap)
              }
              set {
                resultMap.updateValue(newValue.resultMap, forKey: "price")
              }
            }

            public var originatorAddress: String {
              get {
                return resultMap["originatorAddress"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "originatorAddress")
              }
            }

            public var toAddress: String {
              get {
                return resultMap["toAddress"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "toAddress")
              }
            }

            public var mintContext: MintContext {
              get {
                return MintContext(unsafeResultMap: resultMap["mintContext"]! as! ResultMap)
              }
              set {
                resultMap.updateValue(newValue.resultMap, forKey: "mintContext")
              }
            }

            public var fragments: Fragments {
              get {
                return Fragments(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }

            public struct Fragments {
              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public var mintDetails: MintDetails {
                get {
                  return MintDetails(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }
            }

            public struct Price: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["PriceAtTime"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                  GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
                  GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
                  GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
                self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var blockNumber: Int {
                get {
                  return resultMap["blockNumber"]! as! Int
                }
                set {
                  resultMap.updateValue(newValue, forKey: "blockNumber")
                }
              }

              public var chainTokenPrice: ChainTokenPrice? {
                get {
                  return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
                }
                set {
                  resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
                }
              }

              public var nativePrice: NativePrice {
                get {
                  return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
                }
                set {
                  resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
                }
              }

              public var usdcPrice: UsdcPrice? {
                get {
                  return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
                }
                set {
                  resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
                }
              }

              public var fragments: Fragments {
                get {
                  return Fragments(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }

              public struct Fragments {
                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public var priceSummary: PriceSummary {
                  get {
                    return PriceSummary(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }
              }

              public struct ChainTokenPrice: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["CurrencyAmount"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                    GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(decimal: Double, raw: String) {
                  self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var decimal: Double {
                  get {
                    return resultMap["decimal"]! as! Double
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimal")
                  }
                }

                public var raw: String {
                  get {
                    return resultMap["raw"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "raw")
                  }
                }
              }

              public struct NativePrice: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["CurrencyAmount"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                    GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                    GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(decimal: Double, raw: String, currency: Currency) {
                  self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var decimal: Double {
                  get {
                    return resultMap["decimal"]! as! Double
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimal")
                  }
                }

                public var raw: String {
                  get {
                    return resultMap["raw"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "raw")
                  }
                }

                public var currency: Currency {
                  get {
                    return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
                  }
                  set {
                    resultMap.updateValue(newValue.resultMap, forKey: "currency")
                  }
                }

                public struct Currency: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["Currency"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("address", type: .nonNull(.scalar(String.self))),
                      GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                      GraphQLField("name", type: .nonNull(.scalar(String.self))),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(address: String, decimals: Int, name: String) {
                    self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var address: String {
                    get {
                      return resultMap["address"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "address")
                    }
                  }

                  public var decimals: Int {
                    get {
                      return resultMap["decimals"]! as! Int
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "decimals")
                    }
                  }

                  public var name: String {
                    get {
                      return resultMap["name"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "name")
                    }
                  }
                }
              }

              public struct UsdcPrice: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["CurrencyAmount"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                    GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(decimal: Double, raw: String) {
                  self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var decimal: Double {
                  get {
                    return resultMap["decimal"]! as! Double
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimal")
                  }
                }

                public var raw: String {
                  get {
                    return resultMap["raw"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "raw")
                  }
                }
              }
            }

            public struct MintContext: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["TransactionInfo"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                  GraphQLField("blockTimestamp", type: .nonNull(.scalar(String.self))),
                  GraphQLField("transactionHash", type: .scalar(String.self)),
                  GraphQLField("logIndex", type: .scalar(Int.self)),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(blockNumber: Int, blockTimestamp: String, transactionHash: String? = nil, logIndex: Int? = nil) {
                self.init(unsafeResultMap: ["__typename": "TransactionInfo", "blockNumber": blockNumber, "blockTimestamp": blockTimestamp, "transactionHash": transactionHash, "logIndex": logIndex])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var blockNumber: Int {
                get {
                  return resultMap["blockNumber"]! as! Int
                }
                set {
                  resultMap.updateValue(newValue, forKey: "blockNumber")
                }
              }

              public var blockTimestamp: String {
                get {
                  return resultMap["blockTimestamp"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "blockTimestamp")
                }
              }

              public var transactionHash: String? {
                get {
                  return resultMap["transactionHash"] as? String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "transactionHash")
                }
              }

              public var logIndex: Int? {
                get {
                  return resultMap["logIndex"] as? Int
                }
                set {
                  resultMap.updateValue(newValue, forKey: "logIndex")
                }
              }

              public var fragments: Fragments {
                get {
                  return Fragments(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }

              public struct Fragments {
                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public var transactionDetails: TransactionDetails {
                  get {
                    return TransactionDetails(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }
              }
            }
          }

          public struct Image: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["TokenContentMedia"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("size", type: .scalar(String.self)),
                GraphQLField("url", type: .scalar(String.self)),
                GraphQLField("size", type: .scalar(String.self)),
                GraphQLField("mimeType", type: .scalar(String.self)),
                GraphQLField("mediaEncoding", type: .object(MediaEncoding.selections)),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(size: String? = nil, url: String? = nil, mimeType: String? = nil, mediaEncoding: MediaEncoding? = nil) {
              self.init(unsafeResultMap: ["__typename": "TokenContentMedia", "size": size, "url": url, "mimeType": mimeType, "mediaEncoding": mediaEncoding.flatMap { (value: MediaEncoding) -> ResultMap in value.resultMap }])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var size: String? {
              get {
                return resultMap["size"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "size")
              }
            }

            public var url: String? {
              get {
                return resultMap["url"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "url")
              }
            }

            public var mimeType: String? {
              get {
                return resultMap["mimeType"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "mimeType")
              }
            }

            public var mediaEncoding: MediaEncoding? {
              get {
                return (resultMap["mediaEncoding"] as? ResultMap).flatMap { MediaEncoding(unsafeResultMap: $0) }
              }
              set {
                resultMap.updateValue(newValue?.resultMap, forKey: "mediaEncoding")
              }
            }

            public var fragments: Fragments {
              get {
                return Fragments(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }

            public struct Fragments {
              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public var fullMedia: FullMedia {
                get {
                  return FullMedia(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }
            }

            public struct MediaEncoding: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["ImageEncodingTypes", "VideoEncodingTypes", "AudioEncodingTypes", "UnsupportedEncodingTypes"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLTypeCase(
                    variants: ["ImageEncodingTypes": AsImageEncodingTypes.selections, "VideoEncodingTypes": AsVideoEncodingTypes.selections, "AudioEncodingTypes": AsAudioEncodingTypes.selections, "UnsupportedEncodingTypes": AsUnsupportedEncodingTypes.selections],
                    default: [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    ]
                  )
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public static func makeImageEncodingTypes(original: String, large: String? = nil, poster: String? = nil, thumbnail: String? = nil) -> MediaEncoding {
                return MediaEncoding(unsafeResultMap: ["__typename": "ImageEncodingTypes", "original": original, "large": large, "poster": poster, "thumbnail": thumbnail])
              }

              public static func makeVideoEncodingTypes(original: String, large: String? = nil, poster: String? = nil, preview: String? = nil, thumbnail: String? = nil) -> MediaEncoding {
                return MediaEncoding(unsafeResultMap: ["__typename": "VideoEncodingTypes", "original": original, "large": large, "poster": poster, "preview": preview, "thumbnail": thumbnail])
              }

              public static func makeAudioEncodingTypes(original: String, large: String? = nil) -> MediaEncoding {
                return MediaEncoding(unsafeResultMap: ["__typename": "AudioEncodingTypes", "original": original, "large": large])
              }

              public static func makeUnsupportedEncodingTypes(original: String) -> MediaEncoding {
                return MediaEncoding(unsafeResultMap: ["__typename": "UnsupportedEncodingTypes", "original": original])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var asImageEncodingTypes: AsImageEncodingTypes? {
                get {
                  if !AsImageEncodingTypes.possibleTypes.contains(__typename) { return nil }
                  return AsImageEncodingTypes(unsafeResultMap: resultMap)
                }
                set {
                  guard let newValue = newValue else { return }
                  resultMap = newValue.resultMap
                }
              }

              public struct AsImageEncodingTypes: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["ImageEncodingTypes"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("original", type: .nonNull(.scalar(String.self))),
                    GraphQLField("large", type: .scalar(String.self)),
                    GraphQLField("poster", type: .scalar(String.self)),
                    GraphQLField("thumbnail", type: .scalar(String.self)),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(original: String, large: String? = nil, poster: String? = nil, thumbnail: String? = nil) {
                  self.init(unsafeResultMap: ["__typename": "ImageEncodingTypes", "original": original, "large": large, "poster": poster, "thumbnail": thumbnail])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var original: String {
                  get {
                    return resultMap["original"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "original")
                  }
                }

                public var large: String? {
                  get {
                    return resultMap["large"] as? String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "large")
                  }
                }

                public var poster: String? {
                  get {
                    return resultMap["poster"] as? String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "poster")
                  }
                }

                public var thumbnail: String? {
                  get {
                    return resultMap["thumbnail"] as? String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "thumbnail")
                  }
                }
              }

              public var asVideoEncodingTypes: AsVideoEncodingTypes? {
                get {
                  if !AsVideoEncodingTypes.possibleTypes.contains(__typename) { return nil }
                  return AsVideoEncodingTypes(unsafeResultMap: resultMap)
                }
                set {
                  guard let newValue = newValue else { return }
                  resultMap = newValue.resultMap
                }
              }

              public struct AsVideoEncodingTypes: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["VideoEncodingTypes"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("original", type: .nonNull(.scalar(String.self))),
                    GraphQLField("large", type: .scalar(String.self)),
                    GraphQLField("poster", type: .scalar(String.self)),
                    GraphQLField("preview", type: .scalar(String.self)),
                    GraphQLField("thumbnail", type: .scalar(String.self)),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(original: String, large: String? = nil, poster: String? = nil, preview: String? = nil, thumbnail: String? = nil) {
                  self.init(unsafeResultMap: ["__typename": "VideoEncodingTypes", "original": original, "large": large, "poster": poster, "preview": preview, "thumbnail": thumbnail])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var original: String {
                  get {
                    return resultMap["original"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "original")
                  }
                }

                public var large: String? {
                  get {
                    return resultMap["large"] as? String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "large")
                  }
                }

                public var poster: String? {
                  get {
                    return resultMap["poster"] as? String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "poster")
                  }
                }

                public var preview: String? {
                  get {
                    return resultMap["preview"] as? String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "preview")
                  }
                }

                public var thumbnail: String? {
                  get {
                    return resultMap["thumbnail"] as? String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "thumbnail")
                  }
                }
              }

              public var asAudioEncodingTypes: AsAudioEncodingTypes? {
                get {
                  if !AsAudioEncodingTypes.possibleTypes.contains(__typename) { return nil }
                  return AsAudioEncodingTypes(unsafeResultMap: resultMap)
                }
                set {
                  guard let newValue = newValue else { return }
                  resultMap = newValue.resultMap
                }
              }

              public struct AsAudioEncodingTypes: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["AudioEncodingTypes"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("original", type: .nonNull(.scalar(String.self))),
                    GraphQLField("large", type: .scalar(String.self)),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(original: String, large: String? = nil) {
                  self.init(unsafeResultMap: ["__typename": "AudioEncodingTypes", "original": original, "large": large])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var original: String {
                  get {
                    return resultMap["original"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "original")
                  }
                }

                public var large: String? {
                  get {
                    return resultMap["large"] as? String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "large")
                  }
                }
              }

              public var asUnsupportedEncodingTypes: AsUnsupportedEncodingTypes? {
                get {
                  if !AsUnsupportedEncodingTypes.possibleTypes.contains(__typename) { return nil }
                  return AsUnsupportedEncodingTypes(unsafeResultMap: resultMap)
                }
                set {
                  guard let newValue = newValue else { return }
                  resultMap = newValue.resultMap
                }
              }

              public struct AsUnsupportedEncodingTypes: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["UnsupportedEncodingTypes"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("original", type: .nonNull(.scalar(String.self))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(original: String) {
                  self.init(unsafeResultMap: ["__typename": "UnsupportedEncodingTypes", "original": original])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var original: String {
                  get {
                    return resultMap["original"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "original")
                  }
                }
              }
            }
          }

          public struct Content: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["TokenContentMedia"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("size", type: .scalar(String.self)),
                GraphQLField("url", type: .scalar(String.self)),
                GraphQLField("size", type: .scalar(String.self)),
                GraphQLField("mimeType", type: .scalar(String.self)),
                GraphQLField("mediaEncoding", type: .object(MediaEncoding.selections)),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(size: String? = nil, url: String? = nil, mimeType: String? = nil, mediaEncoding: MediaEncoding? = nil) {
              self.init(unsafeResultMap: ["__typename": "TokenContentMedia", "size": size, "url": url, "mimeType": mimeType, "mediaEncoding": mediaEncoding.flatMap { (value: MediaEncoding) -> ResultMap in value.resultMap }])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var size: String? {
              get {
                return resultMap["size"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "size")
              }
            }

            public var url: String? {
              get {
                return resultMap["url"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "url")
              }
            }

            public var mimeType: String? {
              get {
                return resultMap["mimeType"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "mimeType")
              }
            }

            public var mediaEncoding: MediaEncoding? {
              get {
                return (resultMap["mediaEncoding"] as? ResultMap).flatMap { MediaEncoding(unsafeResultMap: $0) }
              }
              set {
                resultMap.updateValue(newValue?.resultMap, forKey: "mediaEncoding")
              }
            }

            public var fragments: Fragments {
              get {
                return Fragments(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }

            public struct Fragments {
              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public var fullMedia: FullMedia {
                get {
                  return FullMedia(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }
            }

            public struct MediaEncoding: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["ImageEncodingTypes", "VideoEncodingTypes", "AudioEncodingTypes", "UnsupportedEncodingTypes"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLTypeCase(
                    variants: ["ImageEncodingTypes": AsImageEncodingTypes.selections, "VideoEncodingTypes": AsVideoEncodingTypes.selections, "AudioEncodingTypes": AsAudioEncodingTypes.selections, "UnsupportedEncodingTypes": AsUnsupportedEncodingTypes.selections],
                    default: [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    ]
                  )
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public static func makeImageEncodingTypes(original: String, large: String? = nil, poster: String? = nil, thumbnail: String? = nil) -> MediaEncoding {
                return MediaEncoding(unsafeResultMap: ["__typename": "ImageEncodingTypes", "original": original, "large": large, "poster": poster, "thumbnail": thumbnail])
              }

              public static func makeVideoEncodingTypes(original: String, large: String? = nil, poster: String? = nil, preview: String? = nil, thumbnail: String? = nil) -> MediaEncoding {
                return MediaEncoding(unsafeResultMap: ["__typename": "VideoEncodingTypes", "original": original, "large": large, "poster": poster, "preview": preview, "thumbnail": thumbnail])
              }

              public static func makeAudioEncodingTypes(original: String, large: String? = nil) -> MediaEncoding {
                return MediaEncoding(unsafeResultMap: ["__typename": "AudioEncodingTypes", "original": original, "large": large])
              }

              public static func makeUnsupportedEncodingTypes(original: String) -> MediaEncoding {
                return MediaEncoding(unsafeResultMap: ["__typename": "UnsupportedEncodingTypes", "original": original])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var asImageEncodingTypes: AsImageEncodingTypes? {
                get {
                  if !AsImageEncodingTypes.possibleTypes.contains(__typename) { return nil }
                  return AsImageEncodingTypes(unsafeResultMap: resultMap)
                }
                set {
                  guard let newValue = newValue else { return }
                  resultMap = newValue.resultMap
                }
              }

              public struct AsImageEncodingTypes: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["ImageEncodingTypes"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("original", type: .nonNull(.scalar(String.self))),
                    GraphQLField("large", type: .scalar(String.self)),
                    GraphQLField("poster", type: .scalar(String.self)),
                    GraphQLField("thumbnail", type: .scalar(String.self)),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(original: String, large: String? = nil, poster: String? = nil, thumbnail: String? = nil) {
                  self.init(unsafeResultMap: ["__typename": "ImageEncodingTypes", "original": original, "large": large, "poster": poster, "thumbnail": thumbnail])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var original: String {
                  get {
                    return resultMap["original"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "original")
                  }
                }

                public var large: String? {
                  get {
                    return resultMap["large"] as? String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "large")
                  }
                }

                public var poster: String? {
                  get {
                    return resultMap["poster"] as? String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "poster")
                  }
                }

                public var thumbnail: String? {
                  get {
                    return resultMap["thumbnail"] as? String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "thumbnail")
                  }
                }
              }

              public var asVideoEncodingTypes: AsVideoEncodingTypes? {
                get {
                  if !AsVideoEncodingTypes.possibleTypes.contains(__typename) { return nil }
                  return AsVideoEncodingTypes(unsafeResultMap: resultMap)
                }
                set {
                  guard let newValue = newValue else { return }
                  resultMap = newValue.resultMap
                }
              }

              public struct AsVideoEncodingTypes: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["VideoEncodingTypes"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("original", type: .nonNull(.scalar(String.self))),
                    GraphQLField("large", type: .scalar(String.self)),
                    GraphQLField("poster", type: .scalar(String.self)),
                    GraphQLField("preview", type: .scalar(String.self)),
                    GraphQLField("thumbnail", type: .scalar(String.self)),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(original: String, large: String? = nil, poster: String? = nil, preview: String? = nil, thumbnail: String? = nil) {
                  self.init(unsafeResultMap: ["__typename": "VideoEncodingTypes", "original": original, "large": large, "poster": poster, "preview": preview, "thumbnail": thumbnail])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var original: String {
                  get {
                    return resultMap["original"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "original")
                  }
                }

                public var large: String? {
                  get {
                    return resultMap["large"] as? String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "large")
                  }
                }

                public var poster: String? {
                  get {
                    return resultMap["poster"] as? String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "poster")
                  }
                }

                public var preview: String? {
                  get {
                    return resultMap["preview"] as? String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "preview")
                  }
                }

                public var thumbnail: String? {
                  get {
                    return resultMap["thumbnail"] as? String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "thumbnail")
                  }
                }
              }

              public var asAudioEncodingTypes: AsAudioEncodingTypes? {
                get {
                  if !AsAudioEncodingTypes.possibleTypes.contains(__typename) { return nil }
                  return AsAudioEncodingTypes(unsafeResultMap: resultMap)
                }
                set {
                  guard let newValue = newValue else { return }
                  resultMap = newValue.resultMap
                }
              }

              public struct AsAudioEncodingTypes: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["AudioEncodingTypes"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("original", type: .nonNull(.scalar(String.self))),
                    GraphQLField("large", type: .scalar(String.self)),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(original: String, large: String? = nil) {
                  self.init(unsafeResultMap: ["__typename": "AudioEncodingTypes", "original": original, "large": large])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var original: String {
                  get {
                    return resultMap["original"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "original")
                  }
                }

                public var large: String? {
                  get {
                    return resultMap["large"] as? String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "large")
                  }
                }
              }

              public var asUnsupportedEncodingTypes: AsUnsupportedEncodingTypes? {
                get {
                  if !AsUnsupportedEncodingTypes.possibleTypes.contains(__typename) { return nil }
                  return AsUnsupportedEncodingTypes(unsafeResultMap: resultMap)
                }
                set {
                  guard let newValue = newValue else { return }
                  resultMap = newValue.resultMap
                }
              }

              public struct AsUnsupportedEncodingTypes: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["UnsupportedEncodingTypes"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("original", type: .nonNull(.scalar(String.self))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(original: String) {
                  self.init(unsafeResultMap: ["__typename": "UnsupportedEncodingTypes", "original": original])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var original: String {
                  get {
                    return resultMap["original"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "original")
                  }
                }
              }
            }
          }

          public struct Attribute: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["TokenAttribute"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("traitType", type: .scalar(String.self)),
                GraphQLField("value", type: .scalar(String.self)),
                GraphQLField("displayType", type: .scalar(String.self)),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(traitType: String? = nil, value: String? = nil, displayType: String? = nil) {
              self.init(unsafeResultMap: ["__typename": "TokenAttribute", "traitType": traitType, "value": value, "displayType": displayType])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var traitType: String? {
              get {
                return resultMap["traitType"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "traitType")
              }
            }

            public var value: String? {
              get {
                return resultMap["value"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "value")
              }
            }

            public var displayType: String? {
              get {
                return resultMap["displayType"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "displayType")
              }
            }
          }
        }

        public struct Market: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["Market"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("collectionAddress", type: .nonNull(.scalar(String.self))),
              GraphQLField("marketAddress", type: .nonNull(.scalar(String.self))),
              GraphQLField("marketType", type: .nonNull(.scalar(MarketType.self))),
              GraphQLField("transactionInfo", type: .nonNull(.object(TransactionInfo.selections))),
              GraphQLField("price", type: .object(Price.selections)),
              GraphQLField("status", type: .nonNull(.scalar(String.self))),
              GraphQLField("networkInfo", type: .nonNull(.object(NetworkInfo.selections))),
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("properties", type: .nonNull(.object(Property.selections))),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(collectionAddress: String, marketAddress: String, marketType: MarketType, transactionInfo: TransactionInfo, price: Price? = nil, status: String, networkInfo: NetworkInfo, properties: Property) {
            self.init(unsafeResultMap: ["__typename": "Market", "collectionAddress": collectionAddress, "marketAddress": marketAddress, "marketType": marketType, "transactionInfo": transactionInfo.resultMap, "price": price.flatMap { (value: Price) -> ResultMap in value.resultMap }, "status": status, "networkInfo": networkInfo.resultMap, "properties": properties.resultMap])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var collectionAddress: String {
            get {
              return resultMap["collectionAddress"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "collectionAddress")
            }
          }

          public var marketAddress: String {
            get {
              return resultMap["marketAddress"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "marketAddress")
            }
          }

          public var marketType: MarketType {
            get {
              return resultMap["marketType"]! as! MarketType
            }
            set {
              resultMap.updateValue(newValue, forKey: "marketType")
            }
          }

          public var transactionInfo: TransactionInfo {
            get {
              return TransactionInfo(unsafeResultMap: resultMap["transactionInfo"]! as! ResultMap)
            }
            set {
              resultMap.updateValue(newValue.resultMap, forKey: "transactionInfo")
            }
          }

          public var price: Price? {
            get {
              return (resultMap["price"] as? ResultMap).flatMap { Price(unsafeResultMap: $0) }
            }
            set {
              resultMap.updateValue(newValue?.resultMap, forKey: "price")
            }
          }

          public var status: String {
            get {
              return resultMap["status"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "status")
            }
          }

          public var networkInfo: NetworkInfo {
            get {
              return NetworkInfo(unsafeResultMap: resultMap["networkInfo"]! as! ResultMap)
            }
            set {
              resultMap.updateValue(newValue.resultMap, forKey: "networkInfo")
            }
          }

          public var properties: Property {
            get {
              return Property(unsafeResultMap: resultMap["properties"]! as! ResultMap)
            }
            set {
              resultMap.updateValue(newValue.resultMap, forKey: "properties")
            }
          }

          public var fragments: Fragments {
            get {
              return Fragments(unsafeResultMap: resultMap)
            }
            set {
              resultMap += newValue.resultMap
            }
          }

          public struct Fragments {
            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public var marketInfo: MarketInfo {
              get {
                return MarketInfo(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }

            public var marketDetails: MarketDetails {
              get {
                return MarketDetails(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }
          }

          public struct TransactionInfo: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["TransactionInfo"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                GraphQLField("blockTimestamp", type: .nonNull(.scalar(String.self))),
                GraphQLField("transactionHash", type: .scalar(String.self)),
                GraphQLField("logIndex", type: .scalar(Int.self)),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(blockNumber: Int, blockTimestamp: String, transactionHash: String? = nil, logIndex: Int? = nil) {
              self.init(unsafeResultMap: ["__typename": "TransactionInfo", "blockNumber": blockNumber, "blockTimestamp": blockTimestamp, "transactionHash": transactionHash, "logIndex": logIndex])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var blockNumber: Int {
              get {
                return resultMap["blockNumber"]! as! Int
              }
              set {
                resultMap.updateValue(newValue, forKey: "blockNumber")
              }
            }

            public var blockTimestamp: String {
              get {
                return resultMap["blockTimestamp"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "blockTimestamp")
              }
            }

            public var transactionHash: String? {
              get {
                return resultMap["transactionHash"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "transactionHash")
              }
            }

            public var logIndex: Int? {
              get {
                return resultMap["logIndex"] as? Int
              }
              set {
                resultMap.updateValue(newValue, forKey: "logIndex")
              }
            }

            public var fragments: Fragments {
              get {
                return Fragments(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }

            public struct Fragments {
              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public var transactionDetails: TransactionDetails {
                get {
                  return TransactionDetails(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }
            }
          }

          public struct Price: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["PriceAtTime"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
                GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
                GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
              self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var blockNumber: Int {
              get {
                return resultMap["blockNumber"]! as! Int
              }
              set {
                resultMap.updateValue(newValue, forKey: "blockNumber")
              }
            }

            public var chainTokenPrice: ChainTokenPrice? {
              get {
                return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
              }
              set {
                resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
              }
            }

            public var nativePrice: NativePrice {
              get {
                return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
              }
              set {
                resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
              }
            }

            public var usdcPrice: UsdcPrice? {
              get {
                return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
              }
              set {
                resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
              }
            }

            public var fragments: Fragments {
              get {
                return Fragments(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }

            public struct Fragments {
              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public var priceSummary: PriceSummary {
                get {
                  return PriceSummary(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }
            }

            public struct ChainTokenPrice: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["CurrencyAmount"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                  GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(decimal: Double, raw: String) {
                self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var decimal: Double {
                get {
                  return resultMap["decimal"]! as! Double
                }
                set {
                  resultMap.updateValue(newValue, forKey: "decimal")
                }
              }

              public var raw: String {
                get {
                  return resultMap["raw"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "raw")
                }
              }
            }

            public struct NativePrice: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["CurrencyAmount"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                  GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                  GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(decimal: Double, raw: String, currency: Currency) {
                self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var decimal: Double {
                get {
                  return resultMap["decimal"]! as! Double
                }
                set {
                  resultMap.updateValue(newValue, forKey: "decimal")
                }
              }

              public var raw: String {
                get {
                  return resultMap["raw"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "raw")
                }
              }

              public var currency: Currency {
                get {
                  return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
                }
                set {
                  resultMap.updateValue(newValue.resultMap, forKey: "currency")
                }
              }

              public struct Currency: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["Currency"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("address", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                    GraphQLField("name", type: .nonNull(.scalar(String.self))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(address: String, decimals: Int, name: String) {
                  self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var address: String {
                  get {
                    return resultMap["address"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "address")
                  }
                }

                public var decimals: Int {
                  get {
                    return resultMap["decimals"]! as! Int
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimals")
                  }
                }

                public var name: String {
                  get {
                    return resultMap["name"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "name")
                  }
                }
              }
            }

            public struct UsdcPrice: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["CurrencyAmount"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                  GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(decimal: Double, raw: String) {
                self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var decimal: Double {
                get {
                  return resultMap["decimal"]! as! Double
                }
                set {
                  resultMap.updateValue(newValue, forKey: "decimal")
                }
              }

              public var raw: String {
                get {
                  return resultMap["raw"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "raw")
                }
              }
            }
          }

          public struct NetworkInfo: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["NetworkInfo"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("chain", type: .nonNull(.scalar(Chain.self))),
                GraphQLField("network", type: .nonNull(.scalar(Network.self))),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(chain: Chain, network: Network) {
              self.init(unsafeResultMap: ["__typename": "NetworkInfo", "chain": chain, "network": network])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var chain: Chain {
              get {
                return resultMap["chain"]! as! Chain
              }
              set {
                resultMap.updateValue(newValue, forKey: "chain")
              }
            }

            public var network: Network {
              get {
                return resultMap["network"]! as! Network
              }
              set {
                resultMap.updateValue(newValue, forKey: "network")
              }
            }

            public var fragments: Fragments {
              get {
                return Fragments(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }

            public struct Fragments {
              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public var networkInfoDetails: NetworkInfoDetails {
                get {
                  return NetworkInfoDetails(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }
            }
          }

          public struct Property: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["V1Ask", "V1Offer", "V1BidShare", "V2Auction", "V3Ask"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLTypeCase(
                  variants: ["V2Auction": AsV2Auction.selections, "V3Ask": AsV3Ask.selections, "V1Offer": AsV1Offer.selections, "V1Ask": AsV1Ask.selections],
                  default: [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  ]
                )
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public static func makeV1BidShare() -> Property {
              return Property(unsafeResultMap: ["__typename": "V1BidShare"])
            }

            public static func makeV2Auction(firstBidTime: String? = nil, highestBidder: String? = nil, curator: String, collectionAddress: String, curatorFeePercentage: Int, tokenId: String, auctionCurrency: String, duration: String, estimatedExpirationTime: String? = nil, v2AuctionStatus: V2AuctionStatus, tokenOwner: String, address: String, auctionId: String, approved: Bool, reservePrice: AsV2Auction.ReservePrice, highestBidPrice: AsV2Auction.HighestBidPrice? = nil) -> Property {
              return Property(unsafeResultMap: ["__typename": "V2Auction", "firstBidTime": firstBidTime, "highestBidder": highestBidder, "curator": curator, "collectionAddress": collectionAddress, "curatorFeePercentage": curatorFeePercentage, "tokenId": tokenId, "auctionCurrency": auctionCurrency, "duration": duration, "estimatedExpirationTime": estimatedExpirationTime, "v2AuctionStatus": v2AuctionStatus, "tokenOwner": tokenOwner, "address": address, "auctionId": auctionId, "approved": approved, "reservePrice": reservePrice.resultMap, "highestBidPrice": highestBidPrice.flatMap { (value: AsV2Auction.HighestBidPrice) -> ResultMap in value.resultMap }])
            }

            public static func makeV3Ask(buyer: String? = nil, finder: String? = nil, findersFeeBps: Int, sellerFundsRecipient: String, v3AskStatus: V3AskStatus, seller: String, address: String, askCurrency: String, collectionAddress: String, askPrice: AsV3Ask.AskPrice) -> Property {
              return Property(unsafeResultMap: ["__typename": "V3Ask", "buyer": buyer, "finder": finder, "findersFeeBps": findersFeeBps, "sellerFundsRecipient": sellerFundsRecipient, "v3AskStatus": v3AskStatus, "seller": seller, "address": address, "askCurrency": askCurrency, "collectionAddress": collectionAddress, "askPrice": askPrice.resultMap])
            }

            public static func makeV1Offer(v1OfferStatus: V1MarketEntityStatus, sellOnShare: String, bidder: String, currency: String, amount: AsV1Offer.Amount) -> Property {
              return Property(unsafeResultMap: ["__typename": "V1Offer", "v1OfferStatus": v1OfferStatus, "sellOnShare": sellOnShare, "bidder": bidder, "currency": currency, "amount": amount.resultMap])
            }

            public static func makeV1Ask(v1AskStatus: V1MarketEntityStatus, currency: String, amount: AsV1Ask.Amount) -> Property {
              return Property(unsafeResultMap: ["__typename": "V1Ask", "v1AskStatus": v1AskStatus, "currency": currency, "amount": amount.resultMap])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var fragments: Fragments {
              get {
                return Fragments(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }

            public struct Fragments {
              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public var marketPropertiesFull: MarketPropertiesFull {
                get {
                  return MarketPropertiesFull(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }

              public var v2AuctionMarketProperties: V2AuctionMarketProperties? {
                get {
                  if !V2AuctionMarketProperties.possibleTypes.contains(resultMap["__typename"]! as! String) { return nil }
                  return V2AuctionMarketProperties(unsafeResultMap: resultMap)
                }
                set {
                  guard let newValue = newValue else { return }
                  resultMap += newValue.resultMap
                }
              }

              public var v3AskProperties: V3AskProperties? {
                get {
                  if !V3AskProperties.possibleTypes.contains(resultMap["__typename"]! as! String) { return nil }
                  return V3AskProperties(unsafeResultMap: resultMap)
                }
                set {
                  guard let newValue = newValue else { return }
                  resultMap += newValue.resultMap
                }
              }

              public var v1OfferProperties: V1OfferProperties? {
                get {
                  if !V1OfferProperties.possibleTypes.contains(resultMap["__typename"]! as! String) { return nil }
                  return V1OfferProperties(unsafeResultMap: resultMap)
                }
                set {
                  guard let newValue = newValue else { return }
                  resultMap += newValue.resultMap
                }
              }

              public var v1AskProperties: V1AskProperties? {
                get {
                  if !V1AskProperties.possibleTypes.contains(resultMap["__typename"]! as! String) { return nil }
                  return V1AskProperties(unsafeResultMap: resultMap)
                }
                set {
                  guard let newValue = newValue else { return }
                  resultMap += newValue.resultMap
                }
              }
            }

            public var asV2Auction: AsV2Auction? {
              get {
                if !AsV2Auction.possibleTypes.contains(__typename) { return nil }
                return AsV2Auction(unsafeResultMap: resultMap)
              }
              set {
                guard let newValue = newValue else { return }
                resultMap = newValue.resultMap
              }
            }

            public struct AsV2Auction: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["V2Auction"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("firstBidTime", type: .scalar(String.self)),
                  GraphQLField("highestBidder", type: .scalar(String.self)),
                  GraphQLField("curator", type: .nonNull(.scalar(String.self))),
                  GraphQLField("collectionAddress", type: .nonNull(.scalar(String.self))),
                  GraphQLField("curatorFeePercentage", type: .nonNull(.scalar(Int.self))),
                  GraphQLField("tokenId", type: .nonNull(.scalar(String.self))),
                  GraphQLField("auctionCurrency", type: .nonNull(.scalar(String.self))),
                  GraphQLField("duration", type: .nonNull(.scalar(String.self))),
                  GraphQLField("estimatedExpirationTime", type: .scalar(String.self)),
                  GraphQLField("v2AuctionStatus", type: .nonNull(.scalar(V2AuctionStatus.self))),
                  GraphQLField("tokenOwner", type: .nonNull(.scalar(String.self))),
                  GraphQLField("address", type: .nonNull(.scalar(String.self))),
                  GraphQLField("auctionId", type: .nonNull(.scalar(String.self))),
                  GraphQLField("approved", type: .nonNull(.scalar(Bool.self))),
                  GraphQLField("reservePrice", type: .nonNull(.object(ReservePrice.selections))),
                  GraphQLField("highestBidPrice", type: .object(HighestBidPrice.selections)),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(firstBidTime: String? = nil, highestBidder: String? = nil, curator: String, collectionAddress: String, curatorFeePercentage: Int, tokenId: String, auctionCurrency: String, duration: String, estimatedExpirationTime: String? = nil, v2AuctionStatus: V2AuctionStatus, tokenOwner: String, address: String, auctionId: String, approved: Bool, reservePrice: ReservePrice, highestBidPrice: HighestBidPrice? = nil) {
                self.init(unsafeResultMap: ["__typename": "V2Auction", "firstBidTime": firstBidTime, "highestBidder": highestBidder, "curator": curator, "collectionAddress": collectionAddress, "curatorFeePercentage": curatorFeePercentage, "tokenId": tokenId, "auctionCurrency": auctionCurrency, "duration": duration, "estimatedExpirationTime": estimatedExpirationTime, "v2AuctionStatus": v2AuctionStatus, "tokenOwner": tokenOwner, "address": address, "auctionId": auctionId, "approved": approved, "reservePrice": reservePrice.resultMap, "highestBidPrice": highestBidPrice.flatMap { (value: HighestBidPrice) -> ResultMap in value.resultMap }])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var firstBidTime: String? {
                get {
                  return resultMap["firstBidTime"] as? String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "firstBidTime")
                }
              }

              public var highestBidder: String? {
                get {
                  return resultMap["highestBidder"] as? String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "highestBidder")
                }
              }

              public var curator: String {
                get {
                  return resultMap["curator"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "curator")
                }
              }

              public var collectionAddress: String {
                get {
                  return resultMap["collectionAddress"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "collectionAddress")
                }
              }

              public var curatorFeePercentage: Int {
                get {
                  return resultMap["curatorFeePercentage"]! as! Int
                }
                set {
                  resultMap.updateValue(newValue, forKey: "curatorFeePercentage")
                }
              }

              public var tokenId: String {
                get {
                  return resultMap["tokenId"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "tokenId")
                }
              }

              public var auctionCurrency: String {
                get {
                  return resultMap["auctionCurrency"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "auctionCurrency")
                }
              }

              public var duration: String {
                get {
                  return resultMap["duration"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "duration")
                }
              }

              public var estimatedExpirationTime: String? {
                get {
                  return resultMap["estimatedExpirationTime"] as? String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "estimatedExpirationTime")
                }
              }

              public var v2AuctionStatus: V2AuctionStatus {
                get {
                  return resultMap["v2AuctionStatus"]! as! V2AuctionStatus
                }
                set {
                  resultMap.updateValue(newValue, forKey: "v2AuctionStatus")
                }
              }

              public var tokenOwner: String {
                get {
                  return resultMap["tokenOwner"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "tokenOwner")
                }
              }

              public var address: String {
                get {
                  return resultMap["address"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "address")
                }
              }

              public var auctionId: String {
                get {
                  return resultMap["auctionId"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "auctionId")
                }
              }

              public var approved: Bool {
                get {
                  return resultMap["approved"]! as! Bool
                }
                set {
                  resultMap.updateValue(newValue, forKey: "approved")
                }
              }

              public var reservePrice: ReservePrice {
                get {
                  return ReservePrice(unsafeResultMap: resultMap["reservePrice"]! as! ResultMap)
                }
                set {
                  resultMap.updateValue(newValue.resultMap, forKey: "reservePrice")
                }
              }

              public var highestBidPrice: HighestBidPrice? {
                get {
                  return (resultMap["highestBidPrice"] as? ResultMap).flatMap { HighestBidPrice(unsafeResultMap: $0) }
                }
                set {
                  resultMap.updateValue(newValue?.resultMap, forKey: "highestBidPrice")
                }
              }

              public var fragments: Fragments {
                get {
                  return Fragments(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }

              public struct Fragments {
                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public var marketPropertiesFull: MarketPropertiesFull {
                  get {
                    return MarketPropertiesFull(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }

                public var v2AuctionMarketProperties: V2AuctionMarketProperties {
                  get {
                    return V2AuctionMarketProperties(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }

                public var v3AskProperties: V3AskProperties? {
                  get {
                    if !V3AskProperties.possibleTypes.contains(resultMap["__typename"]! as! String) { return nil }
                    return V3AskProperties(unsafeResultMap: resultMap)
                  }
                  set {
                    guard let newValue = newValue else { return }
                    resultMap += newValue.resultMap
                  }
                }

                public var v1OfferProperties: V1OfferProperties? {
                  get {
                    if !V1OfferProperties.possibleTypes.contains(resultMap["__typename"]! as! String) { return nil }
                    return V1OfferProperties(unsafeResultMap: resultMap)
                  }
                  set {
                    guard let newValue = newValue else { return }
                    resultMap += newValue.resultMap
                  }
                }

                public var v1AskProperties: V1AskProperties? {
                  get {
                    if !V1AskProperties.possibleTypes.contains(resultMap["__typename"]! as! String) { return nil }
                    return V1AskProperties(unsafeResultMap: resultMap)
                  }
                  set {
                    guard let newValue = newValue else { return }
                    resultMap += newValue.resultMap
                  }
                }
              }

              public struct ReservePrice: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["PriceAtTime"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                    GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
                    GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
                    GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
                  self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var blockNumber: Int {
                  get {
                    return resultMap["blockNumber"]! as! Int
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "blockNumber")
                  }
                }

                public var chainTokenPrice: ChainTokenPrice? {
                  get {
                    return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
                  }
                  set {
                    resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
                  }
                }

                public var nativePrice: NativePrice {
                  get {
                    return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
                  }
                  set {
                    resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
                  }
                }

                public var usdcPrice: UsdcPrice? {
                  get {
                    return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
                  }
                  set {
                    resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
                  }
                }

                public var fragments: Fragments {
                  get {
                    return Fragments(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }

                public struct Fragments {
                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public var priceSummary: PriceSummary {
                    get {
                      return PriceSummary(unsafeResultMap: resultMap)
                    }
                    set {
                      resultMap += newValue.resultMap
                    }
                  }
                }

                public struct ChainTokenPrice: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["CurrencyAmount"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                      GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(decimal: Double, raw: String) {
                    self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var decimal: Double {
                    get {
                      return resultMap["decimal"]! as! Double
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "decimal")
                    }
                  }

                  public var raw: String {
                    get {
                      return resultMap["raw"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "raw")
                    }
                  }
                }

                public struct NativePrice: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["CurrencyAmount"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                      GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                      GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(decimal: Double, raw: String, currency: Currency) {
                    self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var decimal: Double {
                    get {
                      return resultMap["decimal"]! as! Double
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "decimal")
                    }
                  }

                  public var raw: String {
                    get {
                      return resultMap["raw"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "raw")
                    }
                  }

                  public var currency: Currency {
                    get {
                      return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
                    }
                    set {
                      resultMap.updateValue(newValue.resultMap, forKey: "currency")
                    }
                  }

                  public struct Currency: GraphQLSelectionSet {
                    public static let possibleTypes: [String] = ["Currency"]

                    public static var selections: [GraphQLSelection] {
                      return [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("address", type: .nonNull(.scalar(String.self))),
                        GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                        GraphQLField("name", type: .nonNull(.scalar(String.self))),
                      ]
                    }

                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public init(address: String, decimals: Int, name: String) {
                      self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
                    }

                    public var __typename: String {
                      get {
                        return resultMap["__typename"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "__typename")
                      }
                    }

                    public var address: String {
                      get {
                        return resultMap["address"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "address")
                      }
                    }

                    public var decimals: Int {
                      get {
                        return resultMap["decimals"]! as! Int
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "decimals")
                      }
                    }

                    public var name: String {
                      get {
                        return resultMap["name"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "name")
                      }
                    }
                  }
                }

                public struct UsdcPrice: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["CurrencyAmount"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                      GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(decimal: Double, raw: String) {
                    self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var decimal: Double {
                    get {
                      return resultMap["decimal"]! as! Double
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "decimal")
                    }
                  }

                  public var raw: String {
                    get {
                      return resultMap["raw"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "raw")
                    }
                  }
                }
              }

              public struct HighestBidPrice: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["PriceAtTime"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                    GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
                    GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
                    GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
                  self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var blockNumber: Int {
                  get {
                    return resultMap["blockNumber"]! as! Int
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "blockNumber")
                  }
                }

                public var chainTokenPrice: ChainTokenPrice? {
                  get {
                    return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
                  }
                  set {
                    resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
                  }
                }

                public var nativePrice: NativePrice {
                  get {
                    return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
                  }
                  set {
                    resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
                  }
                }

                public var usdcPrice: UsdcPrice? {
                  get {
                    return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
                  }
                  set {
                    resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
                  }
                }

                public var fragments: Fragments {
                  get {
                    return Fragments(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }

                public struct Fragments {
                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public var priceSummary: PriceSummary {
                    get {
                      return PriceSummary(unsafeResultMap: resultMap)
                    }
                    set {
                      resultMap += newValue.resultMap
                    }
                  }
                }

                public struct ChainTokenPrice: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["CurrencyAmount"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                      GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(decimal: Double, raw: String) {
                    self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var decimal: Double {
                    get {
                      return resultMap["decimal"]! as! Double
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "decimal")
                    }
                  }

                  public var raw: String {
                    get {
                      return resultMap["raw"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "raw")
                    }
                  }
                }

                public struct NativePrice: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["CurrencyAmount"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                      GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                      GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(decimal: Double, raw: String, currency: Currency) {
                    self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var decimal: Double {
                    get {
                      return resultMap["decimal"]! as! Double
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "decimal")
                    }
                  }

                  public var raw: String {
                    get {
                      return resultMap["raw"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "raw")
                    }
                  }

                  public var currency: Currency {
                    get {
                      return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
                    }
                    set {
                      resultMap.updateValue(newValue.resultMap, forKey: "currency")
                    }
                  }

                  public struct Currency: GraphQLSelectionSet {
                    public static let possibleTypes: [String] = ["Currency"]

                    public static var selections: [GraphQLSelection] {
                      return [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("address", type: .nonNull(.scalar(String.self))),
                        GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                        GraphQLField("name", type: .nonNull(.scalar(String.self))),
                      ]
                    }

                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public init(address: String, decimals: Int, name: String) {
                      self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
                    }

                    public var __typename: String {
                      get {
                        return resultMap["__typename"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "__typename")
                      }
                    }

                    public var address: String {
                      get {
                        return resultMap["address"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "address")
                      }
                    }

                    public var decimals: Int {
                      get {
                        return resultMap["decimals"]! as! Int
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "decimals")
                      }
                    }

                    public var name: String {
                      get {
                        return resultMap["name"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "name")
                      }
                    }
                  }
                }

                public struct UsdcPrice: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["CurrencyAmount"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                      GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(decimal: Double, raw: String) {
                    self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var decimal: Double {
                    get {
                      return resultMap["decimal"]! as! Double
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "decimal")
                    }
                  }

                  public var raw: String {
                    get {
                      return resultMap["raw"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "raw")
                    }
                  }
                }
              }
            }

            public var asV3Ask: AsV3Ask? {
              get {
                if !AsV3Ask.possibleTypes.contains(__typename) { return nil }
                return AsV3Ask(unsafeResultMap: resultMap)
              }
              set {
                guard let newValue = newValue else { return }
                resultMap = newValue.resultMap
              }
            }

            public struct AsV3Ask: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["V3Ask"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("buyer", type: .scalar(String.self)),
                  GraphQLField("finder", type: .scalar(String.self)),
                  GraphQLField("findersFeeBps", type: .nonNull(.scalar(Int.self))),
                  GraphQLField("sellerFundsRecipient", type: .nonNull(.scalar(String.self))),
                  GraphQLField("v3AskStatus", type: .nonNull(.scalar(V3AskStatus.self))),
                  GraphQLField("seller", type: .nonNull(.scalar(String.self))),
                  GraphQLField("address", type: .nonNull(.scalar(String.self))),
                  GraphQLField("askCurrency", type: .nonNull(.scalar(String.self))),
                  GraphQLField("collectionAddress", type: .nonNull(.scalar(String.self))),
                  GraphQLField("askPrice", type: .nonNull(.object(AskPrice.selections))),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(buyer: String? = nil, finder: String? = nil, findersFeeBps: Int, sellerFundsRecipient: String, v3AskStatus: V3AskStatus, seller: String, address: String, askCurrency: String, collectionAddress: String, askPrice: AskPrice) {
                self.init(unsafeResultMap: ["__typename": "V3Ask", "buyer": buyer, "finder": finder, "findersFeeBps": findersFeeBps, "sellerFundsRecipient": sellerFundsRecipient, "v3AskStatus": v3AskStatus, "seller": seller, "address": address, "askCurrency": askCurrency, "collectionAddress": collectionAddress, "askPrice": askPrice.resultMap])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var buyer: String? {
                get {
                  return resultMap["buyer"] as? String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "buyer")
                }
              }

              public var finder: String? {
                get {
                  return resultMap["finder"] as? String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "finder")
                }
              }

              public var findersFeeBps: Int {
                get {
                  return resultMap["findersFeeBps"]! as! Int
                }
                set {
                  resultMap.updateValue(newValue, forKey: "findersFeeBps")
                }
              }

              public var sellerFundsRecipient: String {
                get {
                  return resultMap["sellerFundsRecipient"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "sellerFundsRecipient")
                }
              }

              public var v3AskStatus: V3AskStatus {
                get {
                  return resultMap["v3AskStatus"]! as! V3AskStatus
                }
                set {
                  resultMap.updateValue(newValue, forKey: "v3AskStatus")
                }
              }

              public var seller: String {
                get {
                  return resultMap["seller"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "seller")
                }
              }

              public var address: String {
                get {
                  return resultMap["address"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "address")
                }
              }

              public var askCurrency: String {
                get {
                  return resultMap["askCurrency"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "askCurrency")
                }
              }

              public var collectionAddress: String {
                get {
                  return resultMap["collectionAddress"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "collectionAddress")
                }
              }

              public var askPrice: AskPrice {
                get {
                  return AskPrice(unsafeResultMap: resultMap["askPrice"]! as! ResultMap)
                }
                set {
                  resultMap.updateValue(newValue.resultMap, forKey: "askPrice")
                }
              }

              public var fragments: Fragments {
                get {
                  return Fragments(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }

              public struct Fragments {
                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public var marketPropertiesFull: MarketPropertiesFull {
                  get {
                    return MarketPropertiesFull(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }

                public var v2AuctionMarketProperties: V2AuctionMarketProperties? {
                  get {
                    if !V2AuctionMarketProperties.possibleTypes.contains(resultMap["__typename"]! as! String) { return nil }
                    return V2AuctionMarketProperties(unsafeResultMap: resultMap)
                  }
                  set {
                    guard let newValue = newValue else { return }
                    resultMap += newValue.resultMap
                  }
                }

                public var v3AskProperties: V3AskProperties {
                  get {
                    return V3AskProperties(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }

                public var v1OfferProperties: V1OfferProperties? {
                  get {
                    if !V1OfferProperties.possibleTypes.contains(resultMap["__typename"]! as! String) { return nil }
                    return V1OfferProperties(unsafeResultMap: resultMap)
                  }
                  set {
                    guard let newValue = newValue else { return }
                    resultMap += newValue.resultMap
                  }
                }

                public var v1AskProperties: V1AskProperties? {
                  get {
                    if !V1AskProperties.possibleTypes.contains(resultMap["__typename"]! as! String) { return nil }
                    return V1AskProperties(unsafeResultMap: resultMap)
                  }
                  set {
                    guard let newValue = newValue else { return }
                    resultMap += newValue.resultMap
                  }
                }
              }

              public struct AskPrice: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["PriceAtTime"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                    GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
                    GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
                    GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
                  self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var blockNumber: Int {
                  get {
                    return resultMap["blockNumber"]! as! Int
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "blockNumber")
                  }
                }

                public var chainTokenPrice: ChainTokenPrice? {
                  get {
                    return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
                  }
                  set {
                    resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
                  }
                }

                public var nativePrice: NativePrice {
                  get {
                    return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
                  }
                  set {
                    resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
                  }
                }

                public var usdcPrice: UsdcPrice? {
                  get {
                    return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
                  }
                  set {
                    resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
                  }
                }

                public var fragments: Fragments {
                  get {
                    return Fragments(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }

                public struct Fragments {
                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public var priceSummary: PriceSummary {
                    get {
                      return PriceSummary(unsafeResultMap: resultMap)
                    }
                    set {
                      resultMap += newValue.resultMap
                    }
                  }
                }

                public struct ChainTokenPrice: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["CurrencyAmount"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                      GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(decimal: Double, raw: String) {
                    self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var decimal: Double {
                    get {
                      return resultMap["decimal"]! as! Double
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "decimal")
                    }
                  }

                  public var raw: String {
                    get {
                      return resultMap["raw"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "raw")
                    }
                  }
                }

                public struct NativePrice: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["CurrencyAmount"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                      GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                      GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(decimal: Double, raw: String, currency: Currency) {
                    self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var decimal: Double {
                    get {
                      return resultMap["decimal"]! as! Double
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "decimal")
                    }
                  }

                  public var raw: String {
                    get {
                      return resultMap["raw"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "raw")
                    }
                  }

                  public var currency: Currency {
                    get {
                      return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
                    }
                    set {
                      resultMap.updateValue(newValue.resultMap, forKey: "currency")
                    }
                  }

                  public struct Currency: GraphQLSelectionSet {
                    public static let possibleTypes: [String] = ["Currency"]

                    public static var selections: [GraphQLSelection] {
                      return [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("address", type: .nonNull(.scalar(String.self))),
                        GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                        GraphQLField("name", type: .nonNull(.scalar(String.self))),
                      ]
                    }

                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public init(address: String, decimals: Int, name: String) {
                      self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
                    }

                    public var __typename: String {
                      get {
                        return resultMap["__typename"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "__typename")
                      }
                    }

                    public var address: String {
                      get {
                        return resultMap["address"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "address")
                      }
                    }

                    public var decimals: Int {
                      get {
                        return resultMap["decimals"]! as! Int
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "decimals")
                      }
                    }

                    public var name: String {
                      get {
                        return resultMap["name"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "name")
                      }
                    }
                  }
                }

                public struct UsdcPrice: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["CurrencyAmount"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                      GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(decimal: Double, raw: String) {
                    self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var decimal: Double {
                    get {
                      return resultMap["decimal"]! as! Double
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "decimal")
                    }
                  }

                  public var raw: String {
                    get {
                      return resultMap["raw"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "raw")
                    }
                  }
                }
              }
            }

            public var asV1Offer: AsV1Offer? {
              get {
                if !AsV1Offer.possibleTypes.contains(__typename) { return nil }
                return AsV1Offer(unsafeResultMap: resultMap)
              }
              set {
                guard let newValue = newValue else { return }
                resultMap = newValue.resultMap
              }
            }

            public struct AsV1Offer: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["V1Offer"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("v1OfferStatus", type: .nonNull(.scalar(V1MarketEntityStatus.self))),
                  GraphQLField("sellOnShare", type: .nonNull(.scalar(String.self))),
                  GraphQLField("bidder", type: .nonNull(.scalar(String.self))),
                  GraphQLField("currency", type: .nonNull(.scalar(String.self))),
                  GraphQLField("amount", type: .nonNull(.object(Amount.selections))),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(v1OfferStatus: V1MarketEntityStatus, sellOnShare: String, bidder: String, currency: String, amount: Amount) {
                self.init(unsafeResultMap: ["__typename": "V1Offer", "v1OfferStatus": v1OfferStatus, "sellOnShare": sellOnShare, "bidder": bidder, "currency": currency, "amount": amount.resultMap])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var v1OfferStatus: V1MarketEntityStatus {
                get {
                  return resultMap["v1OfferStatus"]! as! V1MarketEntityStatus
                }
                set {
                  resultMap.updateValue(newValue, forKey: "v1OfferStatus")
                }
              }

              public var sellOnShare: String {
                get {
                  return resultMap["sellOnShare"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "sellOnShare")
                }
              }

              public var bidder: String {
                get {
                  return resultMap["bidder"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "bidder")
                }
              }

              public var currency: String {
                get {
                  return resultMap["currency"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "currency")
                }
              }

              public var amount: Amount {
                get {
                  return Amount(unsafeResultMap: resultMap["amount"]! as! ResultMap)
                }
                set {
                  resultMap.updateValue(newValue.resultMap, forKey: "amount")
                }
              }

              public var fragments: Fragments {
                get {
                  return Fragments(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }

              public struct Fragments {
                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public var marketPropertiesFull: MarketPropertiesFull {
                  get {
                    return MarketPropertiesFull(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }

                public var v2AuctionMarketProperties: V2AuctionMarketProperties? {
                  get {
                    if !V2AuctionMarketProperties.possibleTypes.contains(resultMap["__typename"]! as! String) { return nil }
                    return V2AuctionMarketProperties(unsafeResultMap: resultMap)
                  }
                  set {
                    guard let newValue = newValue else { return }
                    resultMap += newValue.resultMap
                  }
                }

                public var v3AskProperties: V3AskProperties? {
                  get {
                    if !V3AskProperties.possibleTypes.contains(resultMap["__typename"]! as! String) { return nil }
                    return V3AskProperties(unsafeResultMap: resultMap)
                  }
                  set {
                    guard let newValue = newValue else { return }
                    resultMap += newValue.resultMap
                  }
                }

                public var v1OfferProperties: V1OfferProperties {
                  get {
                    return V1OfferProperties(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }

                public var v1AskProperties: V1AskProperties? {
                  get {
                    if !V1AskProperties.possibleTypes.contains(resultMap["__typename"]! as! String) { return nil }
                    return V1AskProperties(unsafeResultMap: resultMap)
                  }
                  set {
                    guard let newValue = newValue else { return }
                    resultMap += newValue.resultMap
                  }
                }
              }

              public struct Amount: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["PriceAtTime"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                    GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
                    GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
                    GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
                  self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var blockNumber: Int {
                  get {
                    return resultMap["blockNumber"]! as! Int
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "blockNumber")
                  }
                }

                public var chainTokenPrice: ChainTokenPrice? {
                  get {
                    return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
                  }
                  set {
                    resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
                  }
                }

                public var nativePrice: NativePrice {
                  get {
                    return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
                  }
                  set {
                    resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
                  }
                }

                public var usdcPrice: UsdcPrice? {
                  get {
                    return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
                  }
                  set {
                    resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
                  }
                }

                public var fragments: Fragments {
                  get {
                    return Fragments(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }

                public struct Fragments {
                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public var priceSummary: PriceSummary {
                    get {
                      return PriceSummary(unsafeResultMap: resultMap)
                    }
                    set {
                      resultMap += newValue.resultMap
                    }
                  }
                }

                public struct ChainTokenPrice: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["CurrencyAmount"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                      GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(decimal: Double, raw: String) {
                    self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var decimal: Double {
                    get {
                      return resultMap["decimal"]! as! Double
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "decimal")
                    }
                  }

                  public var raw: String {
                    get {
                      return resultMap["raw"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "raw")
                    }
                  }
                }

                public struct NativePrice: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["CurrencyAmount"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                      GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                      GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(decimal: Double, raw: String, currency: Currency) {
                    self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var decimal: Double {
                    get {
                      return resultMap["decimal"]! as! Double
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "decimal")
                    }
                  }

                  public var raw: String {
                    get {
                      return resultMap["raw"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "raw")
                    }
                  }

                  public var currency: Currency {
                    get {
                      return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
                    }
                    set {
                      resultMap.updateValue(newValue.resultMap, forKey: "currency")
                    }
                  }

                  public struct Currency: GraphQLSelectionSet {
                    public static let possibleTypes: [String] = ["Currency"]

                    public static var selections: [GraphQLSelection] {
                      return [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("address", type: .nonNull(.scalar(String.self))),
                        GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                        GraphQLField("name", type: .nonNull(.scalar(String.self))),
                      ]
                    }

                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public init(address: String, decimals: Int, name: String) {
                      self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
                    }

                    public var __typename: String {
                      get {
                        return resultMap["__typename"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "__typename")
                      }
                    }

                    public var address: String {
                      get {
                        return resultMap["address"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "address")
                      }
                    }

                    public var decimals: Int {
                      get {
                        return resultMap["decimals"]! as! Int
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "decimals")
                      }
                    }

                    public var name: String {
                      get {
                        return resultMap["name"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "name")
                      }
                    }
                  }
                }

                public struct UsdcPrice: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["CurrencyAmount"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                      GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(decimal: Double, raw: String) {
                    self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var decimal: Double {
                    get {
                      return resultMap["decimal"]! as! Double
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "decimal")
                    }
                  }

                  public var raw: String {
                    get {
                      return resultMap["raw"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "raw")
                    }
                  }
                }
              }
            }

            public var asV1Ask: AsV1Ask? {
              get {
                if !AsV1Ask.possibleTypes.contains(__typename) { return nil }
                return AsV1Ask(unsafeResultMap: resultMap)
              }
              set {
                guard let newValue = newValue else { return }
                resultMap = newValue.resultMap
              }
            }

            public struct AsV1Ask: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["V1Ask"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("v1AskStatus", type: .nonNull(.scalar(V1MarketEntityStatus.self))),
                  GraphQLField("currency", type: .nonNull(.scalar(String.self))),
                  GraphQLField("amount", type: .nonNull(.object(Amount.selections))),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(v1AskStatus: V1MarketEntityStatus, currency: String, amount: Amount) {
                self.init(unsafeResultMap: ["__typename": "V1Ask", "v1AskStatus": v1AskStatus, "currency": currency, "amount": amount.resultMap])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var v1AskStatus: V1MarketEntityStatus {
                get {
                  return resultMap["v1AskStatus"]! as! V1MarketEntityStatus
                }
                set {
                  resultMap.updateValue(newValue, forKey: "v1AskStatus")
                }
              }

              public var currency: String {
                get {
                  return resultMap["currency"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "currency")
                }
              }

              public var amount: Amount {
                get {
                  return Amount(unsafeResultMap: resultMap["amount"]! as! ResultMap)
                }
                set {
                  resultMap.updateValue(newValue.resultMap, forKey: "amount")
                }
              }

              public var fragments: Fragments {
                get {
                  return Fragments(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }

              public struct Fragments {
                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public var marketPropertiesFull: MarketPropertiesFull {
                  get {
                    return MarketPropertiesFull(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }

                public var v2AuctionMarketProperties: V2AuctionMarketProperties? {
                  get {
                    if !V2AuctionMarketProperties.possibleTypes.contains(resultMap["__typename"]! as! String) { return nil }
                    return V2AuctionMarketProperties(unsafeResultMap: resultMap)
                  }
                  set {
                    guard let newValue = newValue else { return }
                    resultMap += newValue.resultMap
                  }
                }

                public var v3AskProperties: V3AskProperties? {
                  get {
                    if !V3AskProperties.possibleTypes.contains(resultMap["__typename"]! as! String) { return nil }
                    return V3AskProperties(unsafeResultMap: resultMap)
                  }
                  set {
                    guard let newValue = newValue else { return }
                    resultMap += newValue.resultMap
                  }
                }

                public var v1OfferProperties: V1OfferProperties? {
                  get {
                    if !V1OfferProperties.possibleTypes.contains(resultMap["__typename"]! as! String) { return nil }
                    return V1OfferProperties(unsafeResultMap: resultMap)
                  }
                  set {
                    guard let newValue = newValue else { return }
                    resultMap += newValue.resultMap
                  }
                }

                public var v1AskProperties: V1AskProperties {
                  get {
                    return V1AskProperties(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }
              }

              public struct Amount: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["PriceAtTime"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                    GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
                    GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
                    GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
                  self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var blockNumber: Int {
                  get {
                    return resultMap["blockNumber"]! as! Int
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "blockNumber")
                  }
                }

                public var chainTokenPrice: ChainTokenPrice? {
                  get {
                    return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
                  }
                  set {
                    resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
                  }
                }

                public var nativePrice: NativePrice {
                  get {
                    return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
                  }
                  set {
                    resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
                  }
                }

                public var usdcPrice: UsdcPrice? {
                  get {
                    return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
                  }
                  set {
                    resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
                  }
                }

                public var fragments: Fragments {
                  get {
                    return Fragments(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }

                public struct Fragments {
                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public var priceSummary: PriceSummary {
                    get {
                      return PriceSummary(unsafeResultMap: resultMap)
                    }
                    set {
                      resultMap += newValue.resultMap
                    }
                  }
                }

                public struct ChainTokenPrice: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["CurrencyAmount"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                      GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(decimal: Double, raw: String) {
                    self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var decimal: Double {
                    get {
                      return resultMap["decimal"]! as! Double
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "decimal")
                    }
                  }

                  public var raw: String {
                    get {
                      return resultMap["raw"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "raw")
                    }
                  }
                }

                public struct NativePrice: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["CurrencyAmount"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                      GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                      GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(decimal: Double, raw: String, currency: Currency) {
                    self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var decimal: Double {
                    get {
                      return resultMap["decimal"]! as! Double
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "decimal")
                    }
                  }

                  public var raw: String {
                    get {
                      return resultMap["raw"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "raw")
                    }
                  }

                  public var currency: Currency {
                    get {
                      return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
                    }
                    set {
                      resultMap.updateValue(newValue.resultMap, forKey: "currency")
                    }
                  }

                  public struct Currency: GraphQLSelectionSet {
                    public static let possibleTypes: [String] = ["Currency"]

                    public static var selections: [GraphQLSelection] {
                      return [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("address", type: .nonNull(.scalar(String.self))),
                        GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                        GraphQLField("name", type: .nonNull(.scalar(String.self))),
                      ]
                    }

                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public init(address: String, decimals: Int, name: String) {
                      self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
                    }

                    public var __typename: String {
                      get {
                        return resultMap["__typename"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "__typename")
                      }
                    }

                    public var address: String {
                      get {
                        return resultMap["address"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "address")
                      }
                    }

                    public var decimals: Int {
                      get {
                        return resultMap["decimals"]! as! Int
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "decimals")
                      }
                    }

                    public var name: String {
                      get {
                        return resultMap["name"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "name")
                      }
                    }
                  }
                }

                public struct UsdcPrice: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["CurrencyAmount"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                      GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(decimal: Double, raw: String) {
                    self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var decimal: Double {
                    get {
                      return resultMap["decimal"]! as! Double
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "decimal")
                    }
                  }

                  public var raw: String {
                    get {
                      return resultMap["raw"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "raw")
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

public final class CollectionsQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    query collections($networks: [NetworkInput!]!, $where: CollectionsQueryInput!, $pagination: PaginationInput!, $sort: CollectionSortKeySortInput!, $includeFullDetails: Boolean!) {
      collections(
        where: $where
        networks: $networks
        pagination: $pagination
        sort: $sort
      ) {
        __typename
        pageInfo {
          __typename
          endCursor
          hasNextPage
          limit
        }
        nodes {
          __typename
          ...CollectionInfo
          ...CollectionDetails @include(if: $includeFullDetails)
        }
      }
    }
    """

  public let operationName: String = "collections"

  public let operationIdentifier: String? = "a380f873c97a9673cf8a4c005bc94af5c6872f185a70dcb331cc0277b1fe9cd0"

  public var queryDocument: String {
    var document: String = operationDefinition
    document.append("\n" + CollectionInfo.fragmentDefinition)
    document.append("\n" + NetworkInfoDetails.fragmentDefinition)
    document.append("\n" + CollectionDetails.fragmentDefinition)
    return document
  }

  public var networks: [NetworkInput]
  public var `where`: CollectionsQueryInput
  public var pagination: PaginationInput
  public var sort: CollectionSortKeySortInput
  public var includeFullDetails: Bool

  public init(networks: [NetworkInput], `where`: CollectionsQueryInput, pagination: PaginationInput, sort: CollectionSortKeySortInput, includeFullDetails: Bool) {
    self.networks = networks
    self.`where` = `where`
    self.pagination = pagination
    self.sort = sort
    self.includeFullDetails = includeFullDetails
  }

  public var variables: GraphQLMap? {
    return ["networks": networks, "where": `where`, "pagination": pagination, "sort": sort, "includeFullDetails": includeFullDetails]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["RootQuery"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("collections", arguments: ["where": GraphQLVariable("where"), "networks": GraphQLVariable("networks"), "pagination": GraphQLVariable("pagination"), "sort": GraphQLVariable("sort")], type: .nonNull(.object(Collection.selections))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(collections: Collection) {
      self.init(unsafeResultMap: ["__typename": "RootQuery", "collections": collections.resultMap])
    }

    /// NFT collection data
    public var collections: Collection {
      get {
        return Collection(unsafeResultMap: resultMap["collections"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "collections")
      }
    }

    public struct Collection: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["CollectionConnection"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("pageInfo", type: .nonNull(.object(PageInfo.selections))),
          GraphQLField("nodes", type: .nonNull(.list(.nonNull(.object(Node.selections))))),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(pageInfo: PageInfo, nodes: [Node]) {
        self.init(unsafeResultMap: ["__typename": "CollectionConnection", "pageInfo": pageInfo.resultMap, "nodes": nodes.map { (value: Node) -> ResultMap in value.resultMap }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var pageInfo: PageInfo {
        get {
          return PageInfo(unsafeResultMap: resultMap["pageInfo"]! as! ResultMap)
        }
        set {
          resultMap.updateValue(newValue.resultMap, forKey: "pageInfo")
        }
      }

      public var nodes: [Node] {
        get {
          return (resultMap["nodes"] as! [ResultMap]).map { (value: ResultMap) -> Node in Node(unsafeResultMap: value) }
        }
        set {
          resultMap.updateValue(newValue.map { (value: Node) -> ResultMap in value.resultMap }, forKey: "nodes")
        }
      }

      public struct PageInfo: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["PageInfo"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("endCursor", type: .scalar(String.self)),
            GraphQLField("hasNextPage", type: .nonNull(.scalar(Bool.self))),
            GraphQLField("limit", type: .nonNull(.scalar(Int.self))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(endCursor: String? = nil, hasNextPage: Bool, limit: Int) {
          self.init(unsafeResultMap: ["__typename": "PageInfo", "endCursor": endCursor, "hasNextPage": hasNextPage, "limit": limit])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var endCursor: String? {
          get {
            return resultMap["endCursor"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "endCursor")
          }
        }

        public var hasNextPage: Bool {
          get {
            return resultMap["hasNextPage"]! as! Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "hasNextPage")
          }
        }

        public var limit: Int {
          get {
            return resultMap["limit"]! as! Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "limit")
          }
        }
      }

      public struct Node: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["Collection"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("address", type: .nonNull(.scalar(String.self))),
            GraphQLField("description", type: .nonNull(.scalar(String.self))),
            GraphQLField("name", type: .scalar(String.self)),
            GraphQLField("symbol", type: .scalar(String.self)),
            GraphQLField("totalSupply", type: .scalar(Int.self)),
            GraphQLField("networkInfo", type: .nonNull(.object(NetworkInfo.selections))),
            GraphQLBooleanCondition(variableName: "includeFullDetails", inverted: false, selections: [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("networkInfo", type: .nonNull(.object(NetworkInfo.selections))),
              GraphQLField("attributes", type: .list(.nonNull(.object(Attribute.selections)))),
            ]),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(address: String, description: String, name: String? = nil, symbol: String? = nil, totalSupply: Int? = nil, networkInfo: NetworkInfo, attributes: [Attribute]? = nil) {
          self.init(unsafeResultMap: ["__typename": "Collection", "address": address, "description": description, "name": name, "symbol": symbol, "totalSupply": totalSupply, "networkInfo": networkInfo.resultMap, "attributes": attributes.flatMap { (value: [Attribute]) -> [ResultMap] in value.map { (value: Attribute) -> ResultMap in value.resultMap } }])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var address: String {
          get {
            return resultMap["address"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "address")
          }
        }

        public var description: String {
          get {
            return resultMap["description"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "description")
          }
        }

        public var name: String? {
          get {
            return resultMap["name"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "name")
          }
        }

        public var symbol: String? {
          get {
            return resultMap["symbol"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "symbol")
          }
        }

        public var totalSupply: Int? {
          get {
            return resultMap["totalSupply"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "totalSupply")
          }
        }

        public var networkInfo: NetworkInfo {
          get {
            return NetworkInfo(unsafeResultMap: resultMap["networkInfo"]! as! ResultMap)
          }
          set {
            resultMap.updateValue(newValue.resultMap, forKey: "networkInfo")
          }
        }

        public var attributes: [Attribute]? {
          get {
            return (resultMap["attributes"] as? [ResultMap]).flatMap { (value: [ResultMap]) -> [Attribute] in value.map { (value: ResultMap) -> Attribute in Attribute(unsafeResultMap: value) } }
          }
          set {
            resultMap.updateValue(newValue.flatMap { (value: [Attribute]) -> [ResultMap] in value.map { (value: Attribute) -> ResultMap in value.resultMap } }, forKey: "attributes")
          }
        }

        public var fragments: Fragments {
          get {
            return Fragments(unsafeResultMap: resultMap)
          }
          set {
            resultMap += newValue.resultMap
          }
        }

        public struct Fragments {
          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public var collectionInfo: CollectionInfo {
            get {
              return CollectionInfo(unsafeResultMap: resultMap)
            }
            set {
              resultMap += newValue.resultMap
            }
          }

          public var collectionDetails: CollectionDetails {
            get {
              return CollectionDetails(unsafeResultMap: resultMap)
            }
            set {
              resultMap += newValue.resultMap
            }
          }
        }

        public struct NetworkInfo: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["NetworkInfo"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLTypeCase(
                variants: ["Collection": AsCollection.selections],
                default: [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("chain", type: .nonNull(.scalar(Chain.self))),
                  GraphQLField("network", type: .nonNull(.scalar(Network.self))),
                ]
              )
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public static func makeNetworkInfo(chain: Chain, network: Network) -> NetworkInfo {
            return NetworkInfo(unsafeResultMap: ["__typename": "NetworkInfo", "chain": chain, "network": network])
          }

          public static func makeCollection(chain: Chain, network: Network) -> NetworkInfo {
            return NetworkInfo(unsafeResultMap: ["__typename": "Collection", "chain": chain, "network": network])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var chain: Chain {
            get {
              return resultMap["chain"]! as! Chain
            }
            set {
              resultMap.updateValue(newValue, forKey: "chain")
            }
          }

          public var network: Network {
            get {
              return resultMap["network"]! as! Network
            }
            set {
              resultMap.updateValue(newValue, forKey: "network")
            }
          }

          public var fragments: Fragments {
            get {
              return Fragments(unsafeResultMap: resultMap)
            }
            set {
              resultMap += newValue.resultMap
            }
          }

          public struct Fragments {
            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public var networkInfoDetails: NetworkInfoDetails {
              get {
                return NetworkInfoDetails(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }
          }

          public var asCollection: AsCollection? {
            get {
              if !AsCollection.possibleTypes.contains(__typename) { return nil }
              return AsCollection(unsafeResultMap: resultMap)
            }
            set {
              guard let newValue = newValue else { return }
              resultMap = newValue.resultMap
            }
          }

          public struct AsCollection: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["Collection"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("chain", type: .nonNull(.scalar(Chain.self))),
                GraphQLField("network", type: .nonNull(.scalar(Network.self))),
                GraphQLBooleanCondition(variableName: "includeFullDetails", inverted: false, selections: [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                ]),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(chain: Chain, network: Network) {
              self.init(unsafeResultMap: ["__typename": "Collection", "chain": chain, "network": network])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var chain: Chain {
              get {
                return resultMap["chain"]! as! Chain
              }
              set {
                resultMap.updateValue(newValue, forKey: "chain")
              }
            }

            public var network: Network {
              get {
                return resultMap["network"]! as! Network
              }
              set {
                resultMap.updateValue(newValue, forKey: "network")
              }
            }

            public var fragments: Fragments {
              get {
                return Fragments(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }

            public struct Fragments {
              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public var networkInfoDetails: NetworkInfoDetails? {
                get {
                  if !NetworkInfoDetails.possibleTypes.contains(resultMap["__typename"]! as! String) { return nil }
                  return NetworkInfoDetails(unsafeResultMap: resultMap)
                }
                set {
                  guard let newValue = newValue else { return }
                  resultMap += newValue.resultMap
                }
              }
            }
          }
        }

        public struct Attribute: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["CollectionAttribute"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("traitType", type: .scalar(String.self)),
              GraphQLField("valueMetrics", type: .nonNull(.list(.nonNull(.object(ValueMetric.selections))))),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(traitType: String? = nil, valueMetrics: [ValueMetric]) {
            self.init(unsafeResultMap: ["__typename": "CollectionAttribute", "traitType": traitType, "valueMetrics": valueMetrics.map { (value: ValueMetric) -> ResultMap in value.resultMap }])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var traitType: String? {
            get {
              return resultMap["traitType"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "traitType")
            }
          }

          public var valueMetrics: [ValueMetric] {
            get {
              return (resultMap["valueMetrics"] as! [ResultMap]).map { (value: ResultMap) -> ValueMetric in ValueMetric(unsafeResultMap: value) }
            }
            set {
              resultMap.updateValue(newValue.map { (value: ValueMetric) -> ResultMap in value.resultMap }, forKey: "valueMetrics")
            }
          }

          public struct ValueMetric: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["CollectionAttributeValue"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("count", type: .nonNull(.scalar(Int.self))),
                GraphQLField("percent", type: .nonNull(.scalar(Double.self))),
                GraphQLField("value", type: .nonNull(.scalar(String.self))),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(count: Int, percent: Double, value: String) {
              self.init(unsafeResultMap: ["__typename": "CollectionAttributeValue", "count": count, "percent": percent, "value": value])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var count: Int {
              get {
                return resultMap["count"]! as! Int
              }
              set {
                resultMap.updateValue(newValue, forKey: "count")
              }
            }

            public var percent: Double {
              get {
                return resultMap["percent"]! as! Double
              }
              set {
                resultMap.updateValue(newValue, forKey: "percent")
              }
            }

            public var value: String {
              get {
                return resultMap["value"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "value")
              }
            }
          }
        }
      }
    }
  }
}

public final class SalesQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    query sales($networks: [NetworkInput!]!, $where: SalesQueryInput!, $filter: SalesQueryFilter, $sort: SaleSortKeySortInput!, $pagination: PaginationInput!, $includeFullDetails: Boolean!) {
      sales(
        networks: $networks
        where: $where
        filter: $filter
        sort: $sort
        pagination: $pagination
      ) {
        __typename
        pageInfo {
          __typename
          endCursor
          hasNextPage
          limit
        }
        nodes {
          __typename
          sale {
            __typename
            ...SaleInfo
          }
          token {
            __typename
            ...TokenInfo
            ...TokenDetails @include(if: $includeFullDetails)
          }
        }
      }
    }
    """

  public let operationName: String = "sales"

  public let operationIdentifier: String? = "5a1ef9fdb6451972259ab5f9ecf3b3f10a3f05583d6dc476931f7259323d2f29"

  public var queryDocument: String {
    var document: String = operationDefinition
    document.append("\n" + SaleInfo.fragmentDefinition)
    document.append("\n" + TransactionDetails.fragmentDefinition)
    document.append("\n" + PriceSummary.fragmentDefinition)
    document.append("\n" + TokenInfo.fragmentDefinition)
    document.append("\n" + TokenContractInfo.fragmentDefinition)
    document.append("\n" + MintDetails.fragmentDefinition)
    document.append("\n" + FullMedia.fragmentDefinition)
    document.append("\n" + TokenDetails.fragmentDefinition)
    return document
  }

  public var networks: [NetworkInput]
  public var `where`: SalesQueryInput
  public var filter: SalesQueryFilter?
  public var sort: SaleSortKeySortInput
  public var pagination: PaginationInput
  public var includeFullDetails: Bool

  public init(networks: [NetworkInput], `where`: SalesQueryInput, filter: SalesQueryFilter? = nil, sort: SaleSortKeySortInput, pagination: PaginationInput, includeFullDetails: Bool) {
    self.networks = networks
    self.`where` = `where`
    self.filter = filter
    self.sort = sort
    self.pagination = pagination
    self.includeFullDetails = includeFullDetails
  }

  public var variables: GraphQLMap? {
    return ["networks": networks, "where": `where`, "filter": filter, "sort": sort, "pagination": pagination, "includeFullDetails": includeFullDetails]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["RootQuery"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("sales", arguments: ["networks": GraphQLVariable("networks"), "where": GraphQLVariable("where"), "filter": GraphQLVariable("filter"), "sort": GraphQLVariable("sort"), "pagination": GraphQLVariable("pagination")], type: .nonNull(.object(Sale.selections))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(sales: Sale) {
      self.init(unsafeResultMap: ["__typename": "RootQuery", "sales": sales.resultMap])
    }

    /// Historical sales data from ZORA, OpenSea, LooksRare, 0x, and more
    public var sales: Sale {
      get {
        return Sale(unsafeResultMap: resultMap["sales"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "sales")
      }
    }

    public struct Sale: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["SaleWithTokenConnection"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("pageInfo", type: .nonNull(.object(PageInfo.selections))),
          GraphQLField("nodes", type: .nonNull(.list(.nonNull(.object(Node.selections))))),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(pageInfo: PageInfo, nodes: [Node]) {
        self.init(unsafeResultMap: ["__typename": "SaleWithTokenConnection", "pageInfo": pageInfo.resultMap, "nodes": nodes.map { (value: Node) -> ResultMap in value.resultMap }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var pageInfo: PageInfo {
        get {
          return PageInfo(unsafeResultMap: resultMap["pageInfo"]! as! ResultMap)
        }
        set {
          resultMap.updateValue(newValue.resultMap, forKey: "pageInfo")
        }
      }

      public var nodes: [Node] {
        get {
          return (resultMap["nodes"] as! [ResultMap]).map { (value: ResultMap) -> Node in Node(unsafeResultMap: value) }
        }
        set {
          resultMap.updateValue(newValue.map { (value: Node) -> ResultMap in value.resultMap }, forKey: "nodes")
        }
      }

      public struct PageInfo: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["PageInfo"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("endCursor", type: .scalar(String.self)),
            GraphQLField("hasNextPage", type: .nonNull(.scalar(Bool.self))),
            GraphQLField("limit", type: .nonNull(.scalar(Int.self))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(endCursor: String? = nil, hasNextPage: Bool, limit: Int) {
          self.init(unsafeResultMap: ["__typename": "PageInfo", "endCursor": endCursor, "hasNextPage": hasNextPage, "limit": limit])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var endCursor: String? {
          get {
            return resultMap["endCursor"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "endCursor")
          }
        }

        public var hasNextPage: Bool {
          get {
            return resultMap["hasNextPage"]! as! Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "hasNextPage")
          }
        }

        public var limit: Int {
          get {
            return resultMap["limit"]! as! Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "limit")
          }
        }
      }

      public struct Node: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["SaleWithToken"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("sale", type: .nonNull(.object(Sale.selections))),
            GraphQLField("token", type: .object(Token.selections)),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(sale: Sale, token: Token? = nil) {
          self.init(unsafeResultMap: ["__typename": "SaleWithToken", "sale": sale.resultMap, "token": token.flatMap { (value: Token) -> ResultMap in value.resultMap }])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var sale: Sale {
          get {
            return Sale(unsafeResultMap: resultMap["sale"]! as! ResultMap)
          }
          set {
            resultMap.updateValue(newValue.resultMap, forKey: "sale")
          }
        }

        public var token: Token? {
          get {
            return (resultMap["token"] as? ResultMap).flatMap { Token(unsafeResultMap: $0) }
          }
          set {
            resultMap.updateValue(newValue?.resultMap, forKey: "token")
          }
        }

        public struct Sale: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["Sale"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("saleContractAddress", type: .scalar(String.self)),
              GraphQLField("transactionInfo", type: .nonNull(.object(TransactionInfo.selections))),
              GraphQLField("buyerAddress", type: .nonNull(.scalar(String.self))),
              GraphQLField("collectionAddress", type: .nonNull(.scalar(String.self))),
              GraphQLField("price", type: .nonNull(.object(Price.selections))),
              GraphQLField("sellerAddress", type: .nonNull(.scalar(String.self))),
              GraphQLField("tokenId", type: .nonNull(.scalar(String.self))),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(saleContractAddress: String? = nil, transactionInfo: TransactionInfo, buyerAddress: String, collectionAddress: String, price: Price, sellerAddress: String, tokenId: String) {
            self.init(unsafeResultMap: ["__typename": "Sale", "saleContractAddress": saleContractAddress, "transactionInfo": transactionInfo.resultMap, "buyerAddress": buyerAddress, "collectionAddress": collectionAddress, "price": price.resultMap, "sellerAddress": sellerAddress, "tokenId": tokenId])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var saleContractAddress: String? {
            get {
              return resultMap["saleContractAddress"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "saleContractAddress")
            }
          }

          public var transactionInfo: TransactionInfo {
            get {
              return TransactionInfo(unsafeResultMap: resultMap["transactionInfo"]! as! ResultMap)
            }
            set {
              resultMap.updateValue(newValue.resultMap, forKey: "transactionInfo")
            }
          }

          public var buyerAddress: String {
            get {
              return resultMap["buyerAddress"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "buyerAddress")
            }
          }

          public var collectionAddress: String {
            get {
              return resultMap["collectionAddress"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "collectionAddress")
            }
          }

          public var price: Price {
            get {
              return Price(unsafeResultMap: resultMap["price"]! as! ResultMap)
            }
            set {
              resultMap.updateValue(newValue.resultMap, forKey: "price")
            }
          }

          public var sellerAddress: String {
            get {
              return resultMap["sellerAddress"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "sellerAddress")
            }
          }

          public var tokenId: String {
            get {
              return resultMap["tokenId"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "tokenId")
            }
          }

          public var fragments: Fragments {
            get {
              return Fragments(unsafeResultMap: resultMap)
            }
            set {
              resultMap += newValue.resultMap
            }
          }

          public struct Fragments {
            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public var saleInfo: SaleInfo {
              get {
                return SaleInfo(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }
          }

          public struct TransactionInfo: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["TransactionInfo"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                GraphQLField("blockTimestamp", type: .nonNull(.scalar(String.self))),
                GraphQLField("transactionHash", type: .scalar(String.self)),
                GraphQLField("logIndex", type: .scalar(Int.self)),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(blockNumber: Int, blockTimestamp: String, transactionHash: String? = nil, logIndex: Int? = nil) {
              self.init(unsafeResultMap: ["__typename": "TransactionInfo", "blockNumber": blockNumber, "blockTimestamp": blockTimestamp, "transactionHash": transactionHash, "logIndex": logIndex])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var blockNumber: Int {
              get {
                return resultMap["blockNumber"]! as! Int
              }
              set {
                resultMap.updateValue(newValue, forKey: "blockNumber")
              }
            }

            public var blockTimestamp: String {
              get {
                return resultMap["blockTimestamp"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "blockTimestamp")
              }
            }

            public var transactionHash: String? {
              get {
                return resultMap["transactionHash"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "transactionHash")
              }
            }

            public var logIndex: Int? {
              get {
                return resultMap["logIndex"] as? Int
              }
              set {
                resultMap.updateValue(newValue, forKey: "logIndex")
              }
            }

            public var fragments: Fragments {
              get {
                return Fragments(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }

            public struct Fragments {
              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public var transactionDetails: TransactionDetails {
                get {
                  return TransactionDetails(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }
            }
          }

          public struct Price: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["PriceAtTime"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
                GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
                GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
              self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var blockNumber: Int {
              get {
                return resultMap["blockNumber"]! as! Int
              }
              set {
                resultMap.updateValue(newValue, forKey: "blockNumber")
              }
            }

            public var chainTokenPrice: ChainTokenPrice? {
              get {
                return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
              }
              set {
                resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
              }
            }

            public var nativePrice: NativePrice {
              get {
                return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
              }
              set {
                resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
              }
            }

            public var usdcPrice: UsdcPrice? {
              get {
                return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
              }
              set {
                resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
              }
            }

            public var fragments: Fragments {
              get {
                return Fragments(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }

            public struct Fragments {
              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public var priceSummary: PriceSummary {
                get {
                  return PriceSummary(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }
            }

            public struct ChainTokenPrice: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["CurrencyAmount"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                  GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(decimal: Double, raw: String) {
                self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var decimal: Double {
                get {
                  return resultMap["decimal"]! as! Double
                }
                set {
                  resultMap.updateValue(newValue, forKey: "decimal")
                }
              }

              public var raw: String {
                get {
                  return resultMap["raw"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "raw")
                }
              }
            }

            public struct NativePrice: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["CurrencyAmount"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                  GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                  GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(decimal: Double, raw: String, currency: Currency) {
                self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var decimal: Double {
                get {
                  return resultMap["decimal"]! as! Double
                }
                set {
                  resultMap.updateValue(newValue, forKey: "decimal")
                }
              }

              public var raw: String {
                get {
                  return resultMap["raw"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "raw")
                }
              }

              public var currency: Currency {
                get {
                  return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
                }
                set {
                  resultMap.updateValue(newValue.resultMap, forKey: "currency")
                }
              }

              public struct Currency: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["Currency"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("address", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                    GraphQLField("name", type: .nonNull(.scalar(String.self))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(address: String, decimals: Int, name: String) {
                  self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var address: String {
                  get {
                    return resultMap["address"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "address")
                  }
                }

                public var decimals: Int {
                  get {
                    return resultMap["decimals"]! as! Int
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimals")
                  }
                }

                public var name: String {
                  get {
                    return resultMap["name"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "name")
                  }
                }
              }
            }

            public struct UsdcPrice: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["CurrencyAmount"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                  GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(decimal: Double, raw: String) {
                self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var decimal: Double {
                get {
                  return resultMap["decimal"]! as! Double
                }
                set {
                  resultMap.updateValue(newValue, forKey: "decimal")
                }
              }

              public var raw: String {
                get {
                  return resultMap["raw"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "raw")
                }
              }
            }
          }
        }

        public struct Token: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["Token"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("tokenId", type: .nonNull(.scalar(String.self))),
              GraphQLField("tokenContract", type: .object(TokenContract.selections)),
              GraphQLField("mintInfo", type: .object(MintInfo.selections)),
              GraphQLField("collectionAddress", type: .nonNull(.scalar(String.self))),
              GraphQLField("lastRefreshTime", type: .scalar(String.self)),
              GraphQLField("owner", type: .scalar(String.self)),
              GraphQLField("name", type: .scalar(String.self)),
              GraphQLField("description", type: .scalar(String.self)),
              GraphQLField("image", type: .object(Image.selections)),
              GraphQLField("content", type: .object(Content.selections)),
              GraphQLBooleanCondition(variableName: "includeFullDetails", inverted: false, selections: [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("metadata", type: .scalar(String.self)),
                GraphQLField("tokenUrl", type: .scalar(String.self)),
                GraphQLField("tokenUrlMimeType", type: .scalar(String.self)),
                GraphQLField("attributes", type: .list(.nonNull(.object(Attribute.selections)))),
              ]),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(tokenId: String, tokenContract: TokenContract? = nil, mintInfo: MintInfo? = nil, collectionAddress: String, lastRefreshTime: String? = nil, owner: String? = nil, name: String? = nil, description: String? = nil, image: Image? = nil, content: Content? = nil, metadata: String? = nil, tokenUrl: String? = nil, tokenUrlMimeType: String? = nil, attributes: [Attribute]? = nil) {
            self.init(unsafeResultMap: ["__typename": "Token", "tokenId": tokenId, "tokenContract": tokenContract.flatMap { (value: TokenContract) -> ResultMap in value.resultMap }, "mintInfo": mintInfo.flatMap { (value: MintInfo) -> ResultMap in value.resultMap }, "collectionAddress": collectionAddress, "lastRefreshTime": lastRefreshTime, "owner": owner, "name": name, "description": description, "image": image.flatMap { (value: Image) -> ResultMap in value.resultMap }, "content": content.flatMap { (value: Content) -> ResultMap in value.resultMap }, "metadata": metadata, "tokenUrl": tokenUrl, "tokenUrlMimeType": tokenUrlMimeType, "attributes": attributes.flatMap { (value: [Attribute]) -> [ResultMap] in value.map { (value: Attribute) -> ResultMap in value.resultMap } }])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var tokenId: String {
            get {
              return resultMap["tokenId"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "tokenId")
            }
          }

          public var tokenContract: TokenContract? {
            get {
              return (resultMap["tokenContract"] as? ResultMap).flatMap { TokenContract(unsafeResultMap: $0) }
            }
            set {
              resultMap.updateValue(newValue?.resultMap, forKey: "tokenContract")
            }
          }

          public var mintInfo: MintInfo? {
            get {
              return (resultMap["mintInfo"] as? ResultMap).flatMap { MintInfo(unsafeResultMap: $0) }
            }
            set {
              resultMap.updateValue(newValue?.resultMap, forKey: "mintInfo")
            }
          }

          public var collectionAddress: String {
            get {
              return resultMap["collectionAddress"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "collectionAddress")
            }
          }

          public var lastRefreshTime: String? {
            get {
              return resultMap["lastRefreshTime"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "lastRefreshTime")
            }
          }

          public var owner: String? {
            get {
              return resultMap["owner"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "owner")
            }
          }

          public var name: String? {
            get {
              return resultMap["name"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "name")
            }
          }

          public var description: String? {
            get {
              return resultMap["description"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "description")
            }
          }

          public var image: Image? {
            get {
              return (resultMap["image"] as? ResultMap).flatMap { Image(unsafeResultMap: $0) }
            }
            set {
              resultMap.updateValue(newValue?.resultMap, forKey: "image")
            }
          }

          public var content: Content? {
            get {
              return (resultMap["content"] as? ResultMap).flatMap { Content(unsafeResultMap: $0) }
            }
            set {
              resultMap.updateValue(newValue?.resultMap, forKey: "content")
            }
          }

          public var metadata: String? {
            get {
              return resultMap["metadata"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "metadata")
            }
          }

          public var tokenUrl: String? {
            get {
              return resultMap["tokenUrl"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "tokenUrl")
            }
          }

          public var tokenUrlMimeType: String? {
            get {
              return resultMap["tokenUrlMimeType"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "tokenUrlMimeType")
            }
          }

          public var attributes: [Attribute]? {
            get {
              return (resultMap["attributes"] as? [ResultMap]).flatMap { (value: [ResultMap]) -> [Attribute] in value.map { (value: ResultMap) -> Attribute in Attribute(unsafeResultMap: value) } }
            }
            set {
              resultMap.updateValue(newValue.flatMap { (value: [Attribute]) -> [ResultMap] in value.map { (value: Attribute) -> ResultMap in value.resultMap } }, forKey: "attributes")
            }
          }

          public var fragments: Fragments {
            get {
              return Fragments(unsafeResultMap: resultMap)
            }
            set {
              resultMap += newValue.resultMap
            }
          }

          public struct Fragments {
            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public var tokenInfo: TokenInfo {
              get {
                return TokenInfo(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }

            public var tokenDetails: TokenDetails {
              get {
                return TokenDetails(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }
          }

          public struct TokenContract: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["TokenContract"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("name", type: .scalar(String.self)),
                GraphQLField("network", type: .nonNull(.scalar(String.self))),
                GraphQLField("description", type: .scalar(String.self)),
                GraphQLField("collectionAddress", type: .nonNull(.scalar(String.self))),
                GraphQLField("symbol", type: .scalar(String.self)),
                GraphQLField("chain", type: .nonNull(.scalar(Int.self))),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(name: String? = nil, network: String, description: String? = nil, collectionAddress: String, symbol: String? = nil, chain: Int) {
              self.init(unsafeResultMap: ["__typename": "TokenContract", "name": name, "network": network, "description": description, "collectionAddress": collectionAddress, "symbol": symbol, "chain": chain])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var name: String? {
              get {
                return resultMap["name"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "name")
              }
            }

            public var network: String {
              get {
                return resultMap["network"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "network")
              }
            }

            public var description: String? {
              get {
                return resultMap["description"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "description")
              }
            }

            public var collectionAddress: String {
              get {
                return resultMap["collectionAddress"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "collectionAddress")
              }
            }

            public var symbol: String? {
              get {
                return resultMap["symbol"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "symbol")
              }
            }

            public var chain: Int {
              get {
                return resultMap["chain"]! as! Int
              }
              set {
                resultMap.updateValue(newValue, forKey: "chain")
              }
            }

            public var fragments: Fragments {
              get {
                return Fragments(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }

            public struct Fragments {
              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public var tokenContractInfo: TokenContractInfo {
                get {
                  return TokenContractInfo(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }
            }
          }

          public struct MintInfo: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["MintInfo"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("price", type: .nonNull(.object(Price.selections))),
                GraphQLField("originatorAddress", type: .nonNull(.scalar(String.self))),
                GraphQLField("toAddress", type: .nonNull(.scalar(String.self))),
                GraphQLField("mintContext", type: .nonNull(.object(MintContext.selections))),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(price: Price, originatorAddress: String, toAddress: String, mintContext: MintContext) {
              self.init(unsafeResultMap: ["__typename": "MintInfo", "price": price.resultMap, "originatorAddress": originatorAddress, "toAddress": toAddress, "mintContext": mintContext.resultMap])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var price: Price {
              get {
                return Price(unsafeResultMap: resultMap["price"]! as! ResultMap)
              }
              set {
                resultMap.updateValue(newValue.resultMap, forKey: "price")
              }
            }

            public var originatorAddress: String {
              get {
                return resultMap["originatorAddress"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "originatorAddress")
              }
            }

            public var toAddress: String {
              get {
                return resultMap["toAddress"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "toAddress")
              }
            }

            public var mintContext: MintContext {
              get {
                return MintContext(unsafeResultMap: resultMap["mintContext"]! as! ResultMap)
              }
              set {
                resultMap.updateValue(newValue.resultMap, forKey: "mintContext")
              }
            }

            public var fragments: Fragments {
              get {
                return Fragments(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }

            public struct Fragments {
              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public var mintDetails: MintDetails {
                get {
                  return MintDetails(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }
            }

            public struct Price: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["PriceAtTime"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                  GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
                  GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
                  GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
                self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var blockNumber: Int {
                get {
                  return resultMap["blockNumber"]! as! Int
                }
                set {
                  resultMap.updateValue(newValue, forKey: "blockNumber")
                }
              }

              public var chainTokenPrice: ChainTokenPrice? {
                get {
                  return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
                }
                set {
                  resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
                }
              }

              public var nativePrice: NativePrice {
                get {
                  return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
                }
                set {
                  resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
                }
              }

              public var usdcPrice: UsdcPrice? {
                get {
                  return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
                }
                set {
                  resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
                }
              }

              public var fragments: Fragments {
                get {
                  return Fragments(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }

              public struct Fragments {
                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public var priceSummary: PriceSummary {
                  get {
                    return PriceSummary(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }
              }

              public struct ChainTokenPrice: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["CurrencyAmount"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                    GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(decimal: Double, raw: String) {
                  self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var decimal: Double {
                  get {
                    return resultMap["decimal"]! as! Double
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimal")
                  }
                }

                public var raw: String {
                  get {
                    return resultMap["raw"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "raw")
                  }
                }
              }

              public struct NativePrice: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["CurrencyAmount"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                    GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                    GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(decimal: Double, raw: String, currency: Currency) {
                  self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var decimal: Double {
                  get {
                    return resultMap["decimal"]! as! Double
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimal")
                  }
                }

                public var raw: String {
                  get {
                    return resultMap["raw"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "raw")
                  }
                }

                public var currency: Currency {
                  get {
                    return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
                  }
                  set {
                    resultMap.updateValue(newValue.resultMap, forKey: "currency")
                  }
                }

                public struct Currency: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["Currency"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("address", type: .nonNull(.scalar(String.self))),
                      GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                      GraphQLField("name", type: .nonNull(.scalar(String.self))),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(address: String, decimals: Int, name: String) {
                    self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var address: String {
                    get {
                      return resultMap["address"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "address")
                    }
                  }

                  public var decimals: Int {
                    get {
                      return resultMap["decimals"]! as! Int
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "decimals")
                    }
                  }

                  public var name: String {
                    get {
                      return resultMap["name"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "name")
                    }
                  }
                }
              }

              public struct UsdcPrice: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["CurrencyAmount"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                    GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(decimal: Double, raw: String) {
                  self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var decimal: Double {
                  get {
                    return resultMap["decimal"]! as! Double
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimal")
                  }
                }

                public var raw: String {
                  get {
                    return resultMap["raw"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "raw")
                  }
                }
              }
            }

            public struct MintContext: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["TransactionInfo"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                  GraphQLField("blockTimestamp", type: .nonNull(.scalar(String.self))),
                  GraphQLField("transactionHash", type: .scalar(String.self)),
                  GraphQLField("logIndex", type: .scalar(Int.self)),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(blockNumber: Int, blockTimestamp: String, transactionHash: String? = nil, logIndex: Int? = nil) {
                self.init(unsafeResultMap: ["__typename": "TransactionInfo", "blockNumber": blockNumber, "blockTimestamp": blockTimestamp, "transactionHash": transactionHash, "logIndex": logIndex])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var blockNumber: Int {
                get {
                  return resultMap["blockNumber"]! as! Int
                }
                set {
                  resultMap.updateValue(newValue, forKey: "blockNumber")
                }
              }

              public var blockTimestamp: String {
                get {
                  return resultMap["blockTimestamp"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "blockTimestamp")
                }
              }

              public var transactionHash: String? {
                get {
                  return resultMap["transactionHash"] as? String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "transactionHash")
                }
              }

              public var logIndex: Int? {
                get {
                  return resultMap["logIndex"] as? Int
                }
                set {
                  resultMap.updateValue(newValue, forKey: "logIndex")
                }
              }

              public var fragments: Fragments {
                get {
                  return Fragments(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }

              public struct Fragments {
                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public var transactionDetails: TransactionDetails {
                  get {
                    return TransactionDetails(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }
              }
            }
          }

          public struct Image: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["TokenContentMedia"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("size", type: .scalar(String.self)),
                GraphQLField("url", type: .scalar(String.self)),
                GraphQLField("size", type: .scalar(String.self)),
                GraphQLField("mimeType", type: .scalar(String.self)),
                GraphQLField("mediaEncoding", type: .object(MediaEncoding.selections)),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(size: String? = nil, url: String? = nil, mimeType: String? = nil, mediaEncoding: MediaEncoding? = nil) {
              self.init(unsafeResultMap: ["__typename": "TokenContentMedia", "size": size, "url": url, "mimeType": mimeType, "mediaEncoding": mediaEncoding.flatMap { (value: MediaEncoding) -> ResultMap in value.resultMap }])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var size: String? {
              get {
                return resultMap["size"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "size")
              }
            }

            public var url: String? {
              get {
                return resultMap["url"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "url")
              }
            }

            public var mimeType: String? {
              get {
                return resultMap["mimeType"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "mimeType")
              }
            }

            public var mediaEncoding: MediaEncoding? {
              get {
                return (resultMap["mediaEncoding"] as? ResultMap).flatMap { MediaEncoding(unsafeResultMap: $0) }
              }
              set {
                resultMap.updateValue(newValue?.resultMap, forKey: "mediaEncoding")
              }
            }

            public var fragments: Fragments {
              get {
                return Fragments(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }

            public struct Fragments {
              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public var fullMedia: FullMedia {
                get {
                  return FullMedia(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }
            }

            public struct MediaEncoding: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["ImageEncodingTypes", "VideoEncodingTypes", "AudioEncodingTypes", "UnsupportedEncodingTypes"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLTypeCase(
                    variants: ["ImageEncodingTypes": AsImageEncodingTypes.selections, "VideoEncodingTypes": AsVideoEncodingTypes.selections, "AudioEncodingTypes": AsAudioEncodingTypes.selections, "UnsupportedEncodingTypes": AsUnsupportedEncodingTypes.selections],
                    default: [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    ]
                  )
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public static func makeImageEncodingTypes(original: String, large: String? = nil, poster: String? = nil, thumbnail: String? = nil) -> MediaEncoding {
                return MediaEncoding(unsafeResultMap: ["__typename": "ImageEncodingTypes", "original": original, "large": large, "poster": poster, "thumbnail": thumbnail])
              }

              public static func makeVideoEncodingTypes(original: String, large: String? = nil, poster: String? = nil, preview: String? = nil, thumbnail: String? = nil) -> MediaEncoding {
                return MediaEncoding(unsafeResultMap: ["__typename": "VideoEncodingTypes", "original": original, "large": large, "poster": poster, "preview": preview, "thumbnail": thumbnail])
              }

              public static func makeAudioEncodingTypes(original: String, large: String? = nil) -> MediaEncoding {
                return MediaEncoding(unsafeResultMap: ["__typename": "AudioEncodingTypes", "original": original, "large": large])
              }

              public static func makeUnsupportedEncodingTypes(original: String) -> MediaEncoding {
                return MediaEncoding(unsafeResultMap: ["__typename": "UnsupportedEncodingTypes", "original": original])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var asImageEncodingTypes: AsImageEncodingTypes? {
                get {
                  if !AsImageEncodingTypes.possibleTypes.contains(__typename) { return nil }
                  return AsImageEncodingTypes(unsafeResultMap: resultMap)
                }
                set {
                  guard let newValue = newValue else { return }
                  resultMap = newValue.resultMap
                }
              }

              public struct AsImageEncodingTypes: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["ImageEncodingTypes"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("original", type: .nonNull(.scalar(String.self))),
                    GraphQLField("large", type: .scalar(String.self)),
                    GraphQLField("poster", type: .scalar(String.self)),
                    GraphQLField("thumbnail", type: .scalar(String.self)),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(original: String, large: String? = nil, poster: String? = nil, thumbnail: String? = nil) {
                  self.init(unsafeResultMap: ["__typename": "ImageEncodingTypes", "original": original, "large": large, "poster": poster, "thumbnail": thumbnail])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var original: String {
                  get {
                    return resultMap["original"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "original")
                  }
                }

                public var large: String? {
                  get {
                    return resultMap["large"] as? String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "large")
                  }
                }

                public var poster: String? {
                  get {
                    return resultMap["poster"] as? String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "poster")
                  }
                }

                public var thumbnail: String? {
                  get {
                    return resultMap["thumbnail"] as? String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "thumbnail")
                  }
                }
              }

              public var asVideoEncodingTypes: AsVideoEncodingTypes? {
                get {
                  if !AsVideoEncodingTypes.possibleTypes.contains(__typename) { return nil }
                  return AsVideoEncodingTypes(unsafeResultMap: resultMap)
                }
                set {
                  guard let newValue = newValue else { return }
                  resultMap = newValue.resultMap
                }
              }

              public struct AsVideoEncodingTypes: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["VideoEncodingTypes"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("original", type: .nonNull(.scalar(String.self))),
                    GraphQLField("large", type: .scalar(String.self)),
                    GraphQLField("poster", type: .scalar(String.self)),
                    GraphQLField("preview", type: .scalar(String.self)),
                    GraphQLField("thumbnail", type: .scalar(String.self)),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(original: String, large: String? = nil, poster: String? = nil, preview: String? = nil, thumbnail: String? = nil) {
                  self.init(unsafeResultMap: ["__typename": "VideoEncodingTypes", "original": original, "large": large, "poster": poster, "preview": preview, "thumbnail": thumbnail])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var original: String {
                  get {
                    return resultMap["original"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "original")
                  }
                }

                public var large: String? {
                  get {
                    return resultMap["large"] as? String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "large")
                  }
                }

                public var poster: String? {
                  get {
                    return resultMap["poster"] as? String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "poster")
                  }
                }

                public var preview: String? {
                  get {
                    return resultMap["preview"] as? String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "preview")
                  }
                }

                public var thumbnail: String? {
                  get {
                    return resultMap["thumbnail"] as? String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "thumbnail")
                  }
                }
              }

              public var asAudioEncodingTypes: AsAudioEncodingTypes? {
                get {
                  if !AsAudioEncodingTypes.possibleTypes.contains(__typename) { return nil }
                  return AsAudioEncodingTypes(unsafeResultMap: resultMap)
                }
                set {
                  guard let newValue = newValue else { return }
                  resultMap = newValue.resultMap
                }
              }

              public struct AsAudioEncodingTypes: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["AudioEncodingTypes"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("original", type: .nonNull(.scalar(String.self))),
                    GraphQLField("large", type: .scalar(String.self)),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(original: String, large: String? = nil) {
                  self.init(unsafeResultMap: ["__typename": "AudioEncodingTypes", "original": original, "large": large])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var original: String {
                  get {
                    return resultMap["original"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "original")
                  }
                }

                public var large: String? {
                  get {
                    return resultMap["large"] as? String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "large")
                  }
                }
              }

              public var asUnsupportedEncodingTypes: AsUnsupportedEncodingTypes? {
                get {
                  if !AsUnsupportedEncodingTypes.possibleTypes.contains(__typename) { return nil }
                  return AsUnsupportedEncodingTypes(unsafeResultMap: resultMap)
                }
                set {
                  guard let newValue = newValue else { return }
                  resultMap = newValue.resultMap
                }
              }

              public struct AsUnsupportedEncodingTypes: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["UnsupportedEncodingTypes"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("original", type: .nonNull(.scalar(String.self))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(original: String) {
                  self.init(unsafeResultMap: ["__typename": "UnsupportedEncodingTypes", "original": original])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var original: String {
                  get {
                    return resultMap["original"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "original")
                  }
                }
              }
            }
          }

          public struct Content: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["TokenContentMedia"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("size", type: .scalar(String.self)),
                GraphQLField("url", type: .scalar(String.self)),
                GraphQLField("size", type: .scalar(String.self)),
                GraphQLField("mimeType", type: .scalar(String.self)),
                GraphQLField("mediaEncoding", type: .object(MediaEncoding.selections)),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(size: String? = nil, url: String? = nil, mimeType: String? = nil, mediaEncoding: MediaEncoding? = nil) {
              self.init(unsafeResultMap: ["__typename": "TokenContentMedia", "size": size, "url": url, "mimeType": mimeType, "mediaEncoding": mediaEncoding.flatMap { (value: MediaEncoding) -> ResultMap in value.resultMap }])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var size: String? {
              get {
                return resultMap["size"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "size")
              }
            }

            public var url: String? {
              get {
                return resultMap["url"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "url")
              }
            }

            public var mimeType: String? {
              get {
                return resultMap["mimeType"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "mimeType")
              }
            }

            public var mediaEncoding: MediaEncoding? {
              get {
                return (resultMap["mediaEncoding"] as? ResultMap).flatMap { MediaEncoding(unsafeResultMap: $0) }
              }
              set {
                resultMap.updateValue(newValue?.resultMap, forKey: "mediaEncoding")
              }
            }

            public var fragments: Fragments {
              get {
                return Fragments(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }

            public struct Fragments {
              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public var fullMedia: FullMedia {
                get {
                  return FullMedia(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }
            }

            public struct MediaEncoding: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["ImageEncodingTypes", "VideoEncodingTypes", "AudioEncodingTypes", "UnsupportedEncodingTypes"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLTypeCase(
                    variants: ["ImageEncodingTypes": AsImageEncodingTypes.selections, "VideoEncodingTypes": AsVideoEncodingTypes.selections, "AudioEncodingTypes": AsAudioEncodingTypes.selections, "UnsupportedEncodingTypes": AsUnsupportedEncodingTypes.selections],
                    default: [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    ]
                  )
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public static func makeImageEncodingTypes(original: String, large: String? = nil, poster: String? = nil, thumbnail: String? = nil) -> MediaEncoding {
                return MediaEncoding(unsafeResultMap: ["__typename": "ImageEncodingTypes", "original": original, "large": large, "poster": poster, "thumbnail": thumbnail])
              }

              public static func makeVideoEncodingTypes(original: String, large: String? = nil, poster: String? = nil, preview: String? = nil, thumbnail: String? = nil) -> MediaEncoding {
                return MediaEncoding(unsafeResultMap: ["__typename": "VideoEncodingTypes", "original": original, "large": large, "poster": poster, "preview": preview, "thumbnail": thumbnail])
              }

              public static func makeAudioEncodingTypes(original: String, large: String? = nil) -> MediaEncoding {
                return MediaEncoding(unsafeResultMap: ["__typename": "AudioEncodingTypes", "original": original, "large": large])
              }

              public static func makeUnsupportedEncodingTypes(original: String) -> MediaEncoding {
                return MediaEncoding(unsafeResultMap: ["__typename": "UnsupportedEncodingTypes", "original": original])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var asImageEncodingTypes: AsImageEncodingTypes? {
                get {
                  if !AsImageEncodingTypes.possibleTypes.contains(__typename) { return nil }
                  return AsImageEncodingTypes(unsafeResultMap: resultMap)
                }
                set {
                  guard let newValue = newValue else { return }
                  resultMap = newValue.resultMap
                }
              }

              public struct AsImageEncodingTypes: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["ImageEncodingTypes"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("original", type: .nonNull(.scalar(String.self))),
                    GraphQLField("large", type: .scalar(String.self)),
                    GraphQLField("poster", type: .scalar(String.self)),
                    GraphQLField("thumbnail", type: .scalar(String.self)),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(original: String, large: String? = nil, poster: String? = nil, thumbnail: String? = nil) {
                  self.init(unsafeResultMap: ["__typename": "ImageEncodingTypes", "original": original, "large": large, "poster": poster, "thumbnail": thumbnail])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var original: String {
                  get {
                    return resultMap["original"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "original")
                  }
                }

                public var large: String? {
                  get {
                    return resultMap["large"] as? String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "large")
                  }
                }

                public var poster: String? {
                  get {
                    return resultMap["poster"] as? String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "poster")
                  }
                }

                public var thumbnail: String? {
                  get {
                    return resultMap["thumbnail"] as? String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "thumbnail")
                  }
                }
              }

              public var asVideoEncodingTypes: AsVideoEncodingTypes? {
                get {
                  if !AsVideoEncodingTypes.possibleTypes.contains(__typename) { return nil }
                  return AsVideoEncodingTypes(unsafeResultMap: resultMap)
                }
                set {
                  guard let newValue = newValue else { return }
                  resultMap = newValue.resultMap
                }
              }

              public struct AsVideoEncodingTypes: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["VideoEncodingTypes"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("original", type: .nonNull(.scalar(String.self))),
                    GraphQLField("large", type: .scalar(String.self)),
                    GraphQLField("poster", type: .scalar(String.self)),
                    GraphQLField("preview", type: .scalar(String.self)),
                    GraphQLField("thumbnail", type: .scalar(String.self)),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(original: String, large: String? = nil, poster: String? = nil, preview: String? = nil, thumbnail: String? = nil) {
                  self.init(unsafeResultMap: ["__typename": "VideoEncodingTypes", "original": original, "large": large, "poster": poster, "preview": preview, "thumbnail": thumbnail])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var original: String {
                  get {
                    return resultMap["original"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "original")
                  }
                }

                public var large: String? {
                  get {
                    return resultMap["large"] as? String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "large")
                  }
                }

                public var poster: String? {
                  get {
                    return resultMap["poster"] as? String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "poster")
                  }
                }

                public var preview: String? {
                  get {
                    return resultMap["preview"] as? String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "preview")
                  }
                }

                public var thumbnail: String? {
                  get {
                    return resultMap["thumbnail"] as? String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "thumbnail")
                  }
                }
              }

              public var asAudioEncodingTypes: AsAudioEncodingTypes? {
                get {
                  if !AsAudioEncodingTypes.possibleTypes.contains(__typename) { return nil }
                  return AsAudioEncodingTypes(unsafeResultMap: resultMap)
                }
                set {
                  guard let newValue = newValue else { return }
                  resultMap = newValue.resultMap
                }
              }

              public struct AsAudioEncodingTypes: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["AudioEncodingTypes"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("original", type: .nonNull(.scalar(String.self))),
                    GraphQLField("large", type: .scalar(String.self)),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(original: String, large: String? = nil) {
                  self.init(unsafeResultMap: ["__typename": "AudioEncodingTypes", "original": original, "large": large])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var original: String {
                  get {
                    return resultMap["original"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "original")
                  }
                }

                public var large: String? {
                  get {
                    return resultMap["large"] as? String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "large")
                  }
                }
              }

              public var asUnsupportedEncodingTypes: AsUnsupportedEncodingTypes? {
                get {
                  if !AsUnsupportedEncodingTypes.possibleTypes.contains(__typename) { return nil }
                  return AsUnsupportedEncodingTypes(unsafeResultMap: resultMap)
                }
                set {
                  guard let newValue = newValue else { return }
                  resultMap = newValue.resultMap
                }
              }

              public struct AsUnsupportedEncodingTypes: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["UnsupportedEncodingTypes"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("original", type: .nonNull(.scalar(String.self))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(original: String) {
                  self.init(unsafeResultMap: ["__typename": "UnsupportedEncodingTypes", "original": original])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var original: String {
                  get {
                    return resultMap["original"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "original")
                  }
                }
              }
            }
          }

          public struct Attribute: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["TokenAttribute"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("traitType", type: .scalar(String.self)),
                GraphQLField("value", type: .scalar(String.self)),
                GraphQLField("displayType", type: .scalar(String.self)),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(traitType: String? = nil, value: String? = nil, displayType: String? = nil) {
              self.init(unsafeResultMap: ["__typename": "TokenAttribute", "traitType": traitType, "value": value, "displayType": displayType])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var traitType: String? {
              get {
                return resultMap["traitType"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "traitType")
              }
            }

            public var value: String? {
              get {
                return resultMap["value"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "value")
              }
            }

            public var displayType: String? {
              get {
                return resultMap["displayType"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "displayType")
              }
            }
          }
        }
      }
    }
  }
}

public final class TokensQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    query tokens($networks: [NetworkInput!]!, $where: TokensQueryInput, $filter: TokensQueryFilter, $pagination: PaginationInput!, $sort: TokenSortInput!, $includeFullDetails: Boolean!, $includeSalesHistory: Boolean!) {
      tokens(
        where: $where
        networks: $networks
        pagination: $pagination
        sort: $sort
        filter: $filter
      ) {
        __typename
        pageInfo {
          __typename
          endCursor
          hasNextPage
          limit
        }
        nodes {
          __typename
          marketsSummary {
            __typename
            ...MarketInfo
            ...MarketDetails @include(if: $includeFullDetails)
          }
          token {
            __typename
            ...TokenInfo
            ...TokenDetails @include(if: $includeFullDetails)
          }
          ...TokensSalesInfo @include(if: $includeSalesHistory)
          ...TokensEventsInfo @include(if: $includeFullDetails)
        }
      }
    }
    """

  public let operationName: String = "tokens"

  public let operationIdentifier: String? = "3366aeecf9fed7de2745dff0ca78e74d43b47d5a81e8efbb4bae260808d3120e"

  public var queryDocument: String {
    var document: String = operationDefinition
    document.append("\n" + MarketInfo.fragmentDefinition)
    document.append("\n" + TransactionDetails.fragmentDefinition)
    document.append("\n" + PriceSummary.fragmentDefinition)
    document.append("\n" + NetworkInfoDetails.fragmentDefinition)
    document.append("\n" + MarketDetails.fragmentDefinition)
    document.append("\n" + MarketPropertiesFull.fragmentDefinition)
    document.append("\n" + V2AuctionMarketProperties.fragmentDefinition)
    document.append("\n" + V3AskProperties.fragmentDefinition)
    document.append("\n" + V1OfferProperties.fragmentDefinition)
    document.append("\n" + V1AskProperties.fragmentDefinition)
    document.append("\n" + TokenInfo.fragmentDefinition)
    document.append("\n" + TokenContractInfo.fragmentDefinition)
    document.append("\n" + MintDetails.fragmentDefinition)
    document.append("\n" + FullMedia.fragmentDefinition)
    document.append("\n" + TokenDetails.fragmentDefinition)
    document.append("\n" + TokensSalesInfo.fragmentDefinition)
    document.append("\n" + SaleInfo.fragmentDefinition)
    document.append("\n" + TokensEventsInfo.fragmentDefinition)
    document.append("\n" + EventInfo.fragmentDefinition)
    document.append("\n" + V1MarketEventPropertiesInfo.fragmentDefinition)
    document.append("\n" + V2AuctionEventPropertiesInfo.fragmentDefinition)
    document.append("\n" + V3AskEventPropertiesInfo.fragmentDefinition)
    return document
  }

  public var networks: [NetworkInput]
  public var `where`: TokensQueryInput?
  public var filter: TokensQueryFilter?
  public var pagination: PaginationInput
  public var sort: TokenSortInput
  public var includeFullDetails: Bool
  public var includeSalesHistory: Bool

  public init(networks: [NetworkInput], `where`: TokensQueryInput? = nil, filter: TokensQueryFilter? = nil, pagination: PaginationInput, sort: TokenSortInput, includeFullDetails: Bool, includeSalesHistory: Bool) {
    self.networks = networks
    self.`where` = `where`
    self.filter = filter
    self.pagination = pagination
    self.sort = sort
    self.includeFullDetails = includeFullDetails
    self.includeSalesHistory = includeSalesHistory
  }

  public var variables: GraphQLMap? {
    return ["networks": networks, "where": `where`, "filter": filter, "pagination": pagination, "sort": sort, "includeFullDetails": includeFullDetails, "includeSalesHistory": includeSalesHistory]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["RootQuery"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("tokens", arguments: ["where": GraphQLVariable("where"), "networks": GraphQLVariable("networks"), "pagination": GraphQLVariable("pagination"), "sort": GraphQLVariable("sort"), "filter": GraphQLVariable("filter")], type: .nonNull(.object(Token.selections))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(tokens: Token) {
      self.init(unsafeResultMap: ["__typename": "RootQuery", "tokens": tokens.resultMap])
    }

    /// Gets data for multiple tokens
    public var tokens: Token {
      get {
        return Token(unsafeResultMap: resultMap["tokens"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "tokens")
      }
    }

    public struct Token: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["TokenWithMarketsSummaryConnection"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("pageInfo", type: .nonNull(.object(PageInfo.selections))),
          GraphQLField("nodes", type: .nonNull(.list(.nonNull(.object(Node.selections))))),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(pageInfo: PageInfo, nodes: [Node]) {
        self.init(unsafeResultMap: ["__typename": "TokenWithMarketsSummaryConnection", "pageInfo": pageInfo.resultMap, "nodes": nodes.map { (value: Node) -> ResultMap in value.resultMap }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var pageInfo: PageInfo {
        get {
          return PageInfo(unsafeResultMap: resultMap["pageInfo"]! as! ResultMap)
        }
        set {
          resultMap.updateValue(newValue.resultMap, forKey: "pageInfo")
        }
      }

      public var nodes: [Node] {
        get {
          return (resultMap["nodes"] as! [ResultMap]).map { (value: ResultMap) -> Node in Node(unsafeResultMap: value) }
        }
        set {
          resultMap.updateValue(newValue.map { (value: Node) -> ResultMap in value.resultMap }, forKey: "nodes")
        }
      }

      public struct PageInfo: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["PageInfo"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("endCursor", type: .scalar(String.self)),
            GraphQLField("hasNextPage", type: .nonNull(.scalar(Bool.self))),
            GraphQLField("limit", type: .nonNull(.scalar(Int.self))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(endCursor: String? = nil, hasNextPage: Bool, limit: Int) {
          self.init(unsafeResultMap: ["__typename": "PageInfo", "endCursor": endCursor, "hasNextPage": hasNextPage, "limit": limit])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var endCursor: String? {
          get {
            return resultMap["endCursor"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "endCursor")
          }
        }

        public var hasNextPage: Bool {
          get {
            return resultMap["hasNextPage"]! as! Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "hasNextPage")
          }
        }

        public var limit: Int {
          get {
            return resultMap["limit"]! as! Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "limit")
          }
        }
      }

      public struct Node: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["TokenWithMarketsSummary"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("marketsSummary", type: .nonNull(.list(.nonNull(.object(MarketsSummary.selections))))),
            GraphQLField("token", type: .nonNull(.object(Token.selections))),
            GraphQLBooleanCondition(variableName: "includeSalesHistory", inverted: false, selections: [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("sales", arguments: ["pagination": ["limit": 10], "sort": ["sortKey": "TIME", "sortDirection": "DESC"]], type: .nonNull(.list(.nonNull(.object(Sale.selections))))),
            ]),
            GraphQLBooleanCondition(variableName: "includeFullDetails", inverted: false, selections: [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("events", arguments: ["pagination": ["limit": 10], "sort": ["sortKey": "CREATED", "sortDirection": "DESC"]], type: .nonNull(.list(.nonNull(.object(Event.selections))))),
            ]),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(marketsSummary: [MarketsSummary], token: Token, sales: [Sale]? = nil, events: [Event]? = nil) {
          self.init(unsafeResultMap: ["__typename": "TokenWithMarketsSummary", "marketsSummary": marketsSummary.map { (value: MarketsSummary) -> ResultMap in value.resultMap }, "token": token.resultMap, "sales": sales.flatMap { (value: [Sale]) -> [ResultMap] in value.map { (value: Sale) -> ResultMap in value.resultMap } }, "events": events.flatMap { (value: [Event]) -> [ResultMap] in value.map { (value: Event) -> ResultMap in value.resultMap } }])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var marketsSummary: [MarketsSummary] {
          get {
            return (resultMap["marketsSummary"] as! [ResultMap]).map { (value: ResultMap) -> MarketsSummary in MarketsSummary(unsafeResultMap: value) }
          }
          set {
            resultMap.updateValue(newValue.map { (value: MarketsSummary) -> ResultMap in value.resultMap }, forKey: "marketsSummary")
          }
        }

        public var token: Token {
          get {
            return Token(unsafeResultMap: resultMap["token"]! as! ResultMap)
          }
          set {
            resultMap.updateValue(newValue.resultMap, forKey: "token")
          }
        }

        public var sales: [Sale]? {
          get {
            return (resultMap["sales"] as? [ResultMap]).flatMap { (value: [ResultMap]) -> [Sale] in value.map { (value: ResultMap) -> Sale in Sale(unsafeResultMap: value) } }
          }
          set {
            resultMap.updateValue(newValue.flatMap { (value: [Sale]) -> [ResultMap] in value.map { (value: Sale) -> ResultMap in value.resultMap } }, forKey: "sales")
          }
        }

        public var events: [Event]? {
          get {
            return (resultMap["events"] as? [ResultMap]).flatMap { (value: [ResultMap]) -> [Event] in value.map { (value: ResultMap) -> Event in Event(unsafeResultMap: value) } }
          }
          set {
            resultMap.updateValue(newValue.flatMap { (value: [Event]) -> [ResultMap] in value.map { (value: Event) -> ResultMap in value.resultMap } }, forKey: "events")
          }
        }

        public var fragments: Fragments {
          get {
            return Fragments(unsafeResultMap: resultMap)
          }
          set {
            resultMap += newValue.resultMap
          }
        }

        public struct Fragments {
          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public var tokensSalesInfo: TokensSalesInfo {
            get {
              return TokensSalesInfo(unsafeResultMap: resultMap)
            }
            set {
              resultMap += newValue.resultMap
            }
          }

          public var tokensEventsInfo: TokensEventsInfo {
            get {
              return TokensEventsInfo(unsafeResultMap: resultMap)
            }
            set {
              resultMap += newValue.resultMap
            }
          }
        }

        public struct MarketsSummary: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["Market"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("collectionAddress", type: .nonNull(.scalar(String.self))),
              GraphQLField("marketAddress", type: .nonNull(.scalar(String.self))),
              GraphQLField("marketType", type: .nonNull(.scalar(MarketType.self))),
              GraphQLField("transactionInfo", type: .nonNull(.object(TransactionInfo.selections))),
              GraphQLField("price", type: .object(Price.selections)),
              GraphQLField("status", type: .nonNull(.scalar(String.self))),
              GraphQLField("networkInfo", type: .nonNull(.object(NetworkInfo.selections))),
              GraphQLBooleanCondition(variableName: "includeFullDetails", inverted: false, selections: [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("properties", type: .nonNull(.object(Property.selections))),
              ]),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(collectionAddress: String, marketAddress: String, marketType: MarketType, transactionInfo: TransactionInfo, price: Price? = nil, status: String, networkInfo: NetworkInfo, properties: Property? = nil) {
            self.init(unsafeResultMap: ["__typename": "Market", "collectionAddress": collectionAddress, "marketAddress": marketAddress, "marketType": marketType, "transactionInfo": transactionInfo.resultMap, "price": price.flatMap { (value: Price) -> ResultMap in value.resultMap }, "status": status, "networkInfo": networkInfo.resultMap, "properties": properties.flatMap { (value: Property) -> ResultMap in value.resultMap }])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var collectionAddress: String {
            get {
              return resultMap["collectionAddress"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "collectionAddress")
            }
          }

          public var marketAddress: String {
            get {
              return resultMap["marketAddress"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "marketAddress")
            }
          }

          public var marketType: MarketType {
            get {
              return resultMap["marketType"]! as! MarketType
            }
            set {
              resultMap.updateValue(newValue, forKey: "marketType")
            }
          }

          public var transactionInfo: TransactionInfo {
            get {
              return TransactionInfo(unsafeResultMap: resultMap["transactionInfo"]! as! ResultMap)
            }
            set {
              resultMap.updateValue(newValue.resultMap, forKey: "transactionInfo")
            }
          }

          public var price: Price? {
            get {
              return (resultMap["price"] as? ResultMap).flatMap { Price(unsafeResultMap: $0) }
            }
            set {
              resultMap.updateValue(newValue?.resultMap, forKey: "price")
            }
          }

          public var status: String {
            get {
              return resultMap["status"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "status")
            }
          }

          public var networkInfo: NetworkInfo {
            get {
              return NetworkInfo(unsafeResultMap: resultMap["networkInfo"]! as! ResultMap)
            }
            set {
              resultMap.updateValue(newValue.resultMap, forKey: "networkInfo")
            }
          }

          public var properties: Property? {
            get {
              return (resultMap["properties"] as? ResultMap).flatMap { Property(unsafeResultMap: $0) }
            }
            set {
              resultMap.updateValue(newValue?.resultMap, forKey: "properties")
            }
          }

          public var fragments: Fragments {
            get {
              return Fragments(unsafeResultMap: resultMap)
            }
            set {
              resultMap += newValue.resultMap
            }
          }

          public struct Fragments {
            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public var marketInfo: MarketInfo {
              get {
                return MarketInfo(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }

            public var marketDetails: MarketDetails {
              get {
                return MarketDetails(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }
          }

          public struct TransactionInfo: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["TransactionInfo"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                GraphQLField("blockTimestamp", type: .nonNull(.scalar(String.self))),
                GraphQLField("transactionHash", type: .scalar(String.self)),
                GraphQLField("logIndex", type: .scalar(Int.self)),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(blockNumber: Int, blockTimestamp: String, transactionHash: String? = nil, logIndex: Int? = nil) {
              self.init(unsafeResultMap: ["__typename": "TransactionInfo", "blockNumber": blockNumber, "blockTimestamp": blockTimestamp, "transactionHash": transactionHash, "logIndex": logIndex])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var blockNumber: Int {
              get {
                return resultMap["blockNumber"]! as! Int
              }
              set {
                resultMap.updateValue(newValue, forKey: "blockNumber")
              }
            }

            public var blockTimestamp: String {
              get {
                return resultMap["blockTimestamp"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "blockTimestamp")
              }
            }

            public var transactionHash: String? {
              get {
                return resultMap["transactionHash"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "transactionHash")
              }
            }

            public var logIndex: Int? {
              get {
                return resultMap["logIndex"] as? Int
              }
              set {
                resultMap.updateValue(newValue, forKey: "logIndex")
              }
            }

            public var fragments: Fragments {
              get {
                return Fragments(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }

            public struct Fragments {
              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public var transactionDetails: TransactionDetails {
                get {
                  return TransactionDetails(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }
            }
          }

          public struct Price: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["PriceAtTime"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
                GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
                GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
              self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var blockNumber: Int {
              get {
                return resultMap["blockNumber"]! as! Int
              }
              set {
                resultMap.updateValue(newValue, forKey: "blockNumber")
              }
            }

            public var chainTokenPrice: ChainTokenPrice? {
              get {
                return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
              }
              set {
                resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
              }
            }

            public var nativePrice: NativePrice {
              get {
                return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
              }
              set {
                resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
              }
            }

            public var usdcPrice: UsdcPrice? {
              get {
                return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
              }
              set {
                resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
              }
            }

            public var fragments: Fragments {
              get {
                return Fragments(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }

            public struct Fragments {
              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public var priceSummary: PriceSummary {
                get {
                  return PriceSummary(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }
            }

            public struct ChainTokenPrice: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["CurrencyAmount"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                  GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(decimal: Double, raw: String) {
                self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var decimal: Double {
                get {
                  return resultMap["decimal"]! as! Double
                }
                set {
                  resultMap.updateValue(newValue, forKey: "decimal")
                }
              }

              public var raw: String {
                get {
                  return resultMap["raw"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "raw")
                }
              }
            }

            public struct NativePrice: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["CurrencyAmount"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                  GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                  GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(decimal: Double, raw: String, currency: Currency) {
                self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var decimal: Double {
                get {
                  return resultMap["decimal"]! as! Double
                }
                set {
                  resultMap.updateValue(newValue, forKey: "decimal")
                }
              }

              public var raw: String {
                get {
                  return resultMap["raw"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "raw")
                }
              }

              public var currency: Currency {
                get {
                  return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
                }
                set {
                  resultMap.updateValue(newValue.resultMap, forKey: "currency")
                }
              }

              public struct Currency: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["Currency"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("address", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                    GraphQLField("name", type: .nonNull(.scalar(String.self))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(address: String, decimals: Int, name: String) {
                  self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var address: String {
                  get {
                    return resultMap["address"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "address")
                  }
                }

                public var decimals: Int {
                  get {
                    return resultMap["decimals"]! as! Int
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimals")
                  }
                }

                public var name: String {
                  get {
                    return resultMap["name"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "name")
                  }
                }
              }
            }

            public struct UsdcPrice: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["CurrencyAmount"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                  GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(decimal: Double, raw: String) {
                self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var decimal: Double {
                get {
                  return resultMap["decimal"]! as! Double
                }
                set {
                  resultMap.updateValue(newValue, forKey: "decimal")
                }
              }

              public var raw: String {
                get {
                  return resultMap["raw"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "raw")
                }
              }
            }
          }

          public struct NetworkInfo: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["NetworkInfo"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("chain", type: .nonNull(.scalar(Chain.self))),
                GraphQLField("network", type: .nonNull(.scalar(Network.self))),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(chain: Chain, network: Network) {
              self.init(unsafeResultMap: ["__typename": "NetworkInfo", "chain": chain, "network": network])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var chain: Chain {
              get {
                return resultMap["chain"]! as! Chain
              }
              set {
                resultMap.updateValue(newValue, forKey: "chain")
              }
            }

            public var network: Network {
              get {
                return resultMap["network"]! as! Network
              }
              set {
                resultMap.updateValue(newValue, forKey: "network")
              }
            }

            public var fragments: Fragments {
              get {
                return Fragments(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }

            public struct Fragments {
              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public var networkInfoDetails: NetworkInfoDetails {
                get {
                  return NetworkInfoDetails(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }
            }
          }

          public struct Property: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["V1Ask", "V1Offer", "V1BidShare", "V2Auction", "V3Ask"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLTypeCase(
                  variants: ["V2Auction": AsV2Auction.selections, "V3Ask": AsV3Ask.selections, "V1Offer": AsV1Offer.selections, "V1Ask": AsV1Ask.selections],
                  default: [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  ]
                )
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public static func makeV1BidShare() -> Property {
              return Property(unsafeResultMap: ["__typename": "V1BidShare"])
            }

            public static func makeV2Auction(firstBidTime: String? = nil, highestBidder: String? = nil, curator: String, collectionAddress: String, curatorFeePercentage: Int, tokenId: String, auctionCurrency: String, duration: String, estimatedExpirationTime: String? = nil, v2AuctionStatus: V2AuctionStatus, tokenOwner: String, address: String, auctionId: String, approved: Bool, reservePrice: AsV2Auction.ReservePrice, highestBidPrice: AsV2Auction.HighestBidPrice? = nil) -> Property {
              return Property(unsafeResultMap: ["__typename": "V2Auction", "firstBidTime": firstBidTime, "highestBidder": highestBidder, "curator": curator, "collectionAddress": collectionAddress, "curatorFeePercentage": curatorFeePercentage, "tokenId": tokenId, "auctionCurrency": auctionCurrency, "duration": duration, "estimatedExpirationTime": estimatedExpirationTime, "v2AuctionStatus": v2AuctionStatus, "tokenOwner": tokenOwner, "address": address, "auctionId": auctionId, "approved": approved, "reservePrice": reservePrice.resultMap, "highestBidPrice": highestBidPrice.flatMap { (value: AsV2Auction.HighestBidPrice) -> ResultMap in value.resultMap }])
            }

            public static func makeV3Ask(buyer: String? = nil, finder: String? = nil, findersFeeBps: Int, sellerFundsRecipient: String, v3AskStatus: V3AskStatus, seller: String, address: String, askCurrency: String, collectionAddress: String, askPrice: AsV3Ask.AskPrice) -> Property {
              return Property(unsafeResultMap: ["__typename": "V3Ask", "buyer": buyer, "finder": finder, "findersFeeBps": findersFeeBps, "sellerFundsRecipient": sellerFundsRecipient, "v3AskStatus": v3AskStatus, "seller": seller, "address": address, "askCurrency": askCurrency, "collectionAddress": collectionAddress, "askPrice": askPrice.resultMap])
            }

            public static func makeV1Offer(v1OfferStatus: V1MarketEntityStatus, sellOnShare: String, bidder: String, currency: String, amount: AsV1Offer.Amount) -> Property {
              return Property(unsafeResultMap: ["__typename": "V1Offer", "v1OfferStatus": v1OfferStatus, "sellOnShare": sellOnShare, "bidder": bidder, "currency": currency, "amount": amount.resultMap])
            }

            public static func makeV1Ask(v1AskStatus: V1MarketEntityStatus, currency: String, amount: AsV1Ask.Amount) -> Property {
              return Property(unsafeResultMap: ["__typename": "V1Ask", "v1AskStatus": v1AskStatus, "currency": currency, "amount": amount.resultMap])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var fragments: Fragments {
              get {
                return Fragments(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }

            public struct Fragments {
              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public var marketPropertiesFull: MarketPropertiesFull {
                get {
                  return MarketPropertiesFull(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }

              public var v2AuctionMarketProperties: V2AuctionMarketProperties? {
                get {
                  if !V2AuctionMarketProperties.possibleTypes.contains(resultMap["__typename"]! as! String) { return nil }
                  return V2AuctionMarketProperties(unsafeResultMap: resultMap)
                }
                set {
                  guard let newValue = newValue else { return }
                  resultMap += newValue.resultMap
                }
              }

              public var v3AskProperties: V3AskProperties? {
                get {
                  if !V3AskProperties.possibleTypes.contains(resultMap["__typename"]! as! String) { return nil }
                  return V3AskProperties(unsafeResultMap: resultMap)
                }
                set {
                  guard let newValue = newValue else { return }
                  resultMap += newValue.resultMap
                }
              }

              public var v1OfferProperties: V1OfferProperties? {
                get {
                  if !V1OfferProperties.possibleTypes.contains(resultMap["__typename"]! as! String) { return nil }
                  return V1OfferProperties(unsafeResultMap: resultMap)
                }
                set {
                  guard let newValue = newValue else { return }
                  resultMap += newValue.resultMap
                }
              }

              public var v1AskProperties: V1AskProperties? {
                get {
                  if !V1AskProperties.possibleTypes.contains(resultMap["__typename"]! as! String) { return nil }
                  return V1AskProperties(unsafeResultMap: resultMap)
                }
                set {
                  guard let newValue = newValue else { return }
                  resultMap += newValue.resultMap
                }
              }
            }

            public var asV2Auction: AsV2Auction? {
              get {
                if !AsV2Auction.possibleTypes.contains(__typename) { return nil }
                return AsV2Auction(unsafeResultMap: resultMap)
              }
              set {
                guard let newValue = newValue else { return }
                resultMap = newValue.resultMap
              }
            }

            public struct AsV2Auction: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["V2Auction"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("firstBidTime", type: .scalar(String.self)),
                  GraphQLField("highestBidder", type: .scalar(String.self)),
                  GraphQLField("curator", type: .nonNull(.scalar(String.self))),
                  GraphQLField("collectionAddress", type: .nonNull(.scalar(String.self))),
                  GraphQLField("curatorFeePercentage", type: .nonNull(.scalar(Int.self))),
                  GraphQLField("tokenId", type: .nonNull(.scalar(String.self))),
                  GraphQLField("auctionCurrency", type: .nonNull(.scalar(String.self))),
                  GraphQLField("duration", type: .nonNull(.scalar(String.self))),
                  GraphQLField("estimatedExpirationTime", type: .scalar(String.self)),
                  GraphQLField("v2AuctionStatus", type: .nonNull(.scalar(V2AuctionStatus.self))),
                  GraphQLField("tokenOwner", type: .nonNull(.scalar(String.self))),
                  GraphQLField("address", type: .nonNull(.scalar(String.self))),
                  GraphQLField("auctionId", type: .nonNull(.scalar(String.self))),
                  GraphQLField("approved", type: .nonNull(.scalar(Bool.self))),
                  GraphQLField("reservePrice", type: .nonNull(.object(ReservePrice.selections))),
                  GraphQLField("highestBidPrice", type: .object(HighestBidPrice.selections)),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(firstBidTime: String? = nil, highestBidder: String? = nil, curator: String, collectionAddress: String, curatorFeePercentage: Int, tokenId: String, auctionCurrency: String, duration: String, estimatedExpirationTime: String? = nil, v2AuctionStatus: V2AuctionStatus, tokenOwner: String, address: String, auctionId: String, approved: Bool, reservePrice: ReservePrice, highestBidPrice: HighestBidPrice? = nil) {
                self.init(unsafeResultMap: ["__typename": "V2Auction", "firstBidTime": firstBidTime, "highestBidder": highestBidder, "curator": curator, "collectionAddress": collectionAddress, "curatorFeePercentage": curatorFeePercentage, "tokenId": tokenId, "auctionCurrency": auctionCurrency, "duration": duration, "estimatedExpirationTime": estimatedExpirationTime, "v2AuctionStatus": v2AuctionStatus, "tokenOwner": tokenOwner, "address": address, "auctionId": auctionId, "approved": approved, "reservePrice": reservePrice.resultMap, "highestBidPrice": highestBidPrice.flatMap { (value: HighestBidPrice) -> ResultMap in value.resultMap }])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var firstBidTime: String? {
                get {
                  return resultMap["firstBidTime"] as? String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "firstBidTime")
                }
              }

              public var highestBidder: String? {
                get {
                  return resultMap["highestBidder"] as? String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "highestBidder")
                }
              }

              public var curator: String {
                get {
                  return resultMap["curator"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "curator")
                }
              }

              public var collectionAddress: String {
                get {
                  return resultMap["collectionAddress"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "collectionAddress")
                }
              }

              public var curatorFeePercentage: Int {
                get {
                  return resultMap["curatorFeePercentage"]! as! Int
                }
                set {
                  resultMap.updateValue(newValue, forKey: "curatorFeePercentage")
                }
              }

              public var tokenId: String {
                get {
                  return resultMap["tokenId"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "tokenId")
                }
              }

              public var auctionCurrency: String {
                get {
                  return resultMap["auctionCurrency"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "auctionCurrency")
                }
              }

              public var duration: String {
                get {
                  return resultMap["duration"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "duration")
                }
              }

              public var estimatedExpirationTime: String? {
                get {
                  return resultMap["estimatedExpirationTime"] as? String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "estimatedExpirationTime")
                }
              }

              public var v2AuctionStatus: V2AuctionStatus {
                get {
                  return resultMap["v2AuctionStatus"]! as! V2AuctionStatus
                }
                set {
                  resultMap.updateValue(newValue, forKey: "v2AuctionStatus")
                }
              }

              public var tokenOwner: String {
                get {
                  return resultMap["tokenOwner"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "tokenOwner")
                }
              }

              public var address: String {
                get {
                  return resultMap["address"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "address")
                }
              }

              public var auctionId: String {
                get {
                  return resultMap["auctionId"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "auctionId")
                }
              }

              public var approved: Bool {
                get {
                  return resultMap["approved"]! as! Bool
                }
                set {
                  resultMap.updateValue(newValue, forKey: "approved")
                }
              }

              public var reservePrice: ReservePrice {
                get {
                  return ReservePrice(unsafeResultMap: resultMap["reservePrice"]! as! ResultMap)
                }
                set {
                  resultMap.updateValue(newValue.resultMap, forKey: "reservePrice")
                }
              }

              public var highestBidPrice: HighestBidPrice? {
                get {
                  return (resultMap["highestBidPrice"] as? ResultMap).flatMap { HighestBidPrice(unsafeResultMap: $0) }
                }
                set {
                  resultMap.updateValue(newValue?.resultMap, forKey: "highestBidPrice")
                }
              }

              public var fragments: Fragments {
                get {
                  return Fragments(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }

              public struct Fragments {
                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public var marketPropertiesFull: MarketPropertiesFull {
                  get {
                    return MarketPropertiesFull(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }

                public var v2AuctionMarketProperties: V2AuctionMarketProperties {
                  get {
                    return V2AuctionMarketProperties(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }

                public var v3AskProperties: V3AskProperties? {
                  get {
                    if !V3AskProperties.possibleTypes.contains(resultMap["__typename"]! as! String) { return nil }
                    return V3AskProperties(unsafeResultMap: resultMap)
                  }
                  set {
                    guard let newValue = newValue else { return }
                    resultMap += newValue.resultMap
                  }
                }

                public var v1OfferProperties: V1OfferProperties? {
                  get {
                    if !V1OfferProperties.possibleTypes.contains(resultMap["__typename"]! as! String) { return nil }
                    return V1OfferProperties(unsafeResultMap: resultMap)
                  }
                  set {
                    guard let newValue = newValue else { return }
                    resultMap += newValue.resultMap
                  }
                }

                public var v1AskProperties: V1AskProperties? {
                  get {
                    if !V1AskProperties.possibleTypes.contains(resultMap["__typename"]! as! String) { return nil }
                    return V1AskProperties(unsafeResultMap: resultMap)
                  }
                  set {
                    guard let newValue = newValue else { return }
                    resultMap += newValue.resultMap
                  }
                }
              }

              public struct ReservePrice: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["PriceAtTime"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                    GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
                    GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
                    GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
                  self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var blockNumber: Int {
                  get {
                    return resultMap["blockNumber"]! as! Int
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "blockNumber")
                  }
                }

                public var chainTokenPrice: ChainTokenPrice? {
                  get {
                    return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
                  }
                  set {
                    resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
                  }
                }

                public var nativePrice: NativePrice {
                  get {
                    return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
                  }
                  set {
                    resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
                  }
                }

                public var usdcPrice: UsdcPrice? {
                  get {
                    return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
                  }
                  set {
                    resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
                  }
                }

                public var fragments: Fragments {
                  get {
                    return Fragments(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }

                public struct Fragments {
                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public var priceSummary: PriceSummary {
                    get {
                      return PriceSummary(unsafeResultMap: resultMap)
                    }
                    set {
                      resultMap += newValue.resultMap
                    }
                  }
                }

                public struct ChainTokenPrice: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["CurrencyAmount"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                      GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(decimal: Double, raw: String) {
                    self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var decimal: Double {
                    get {
                      return resultMap["decimal"]! as! Double
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "decimal")
                    }
                  }

                  public var raw: String {
                    get {
                      return resultMap["raw"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "raw")
                    }
                  }
                }

                public struct NativePrice: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["CurrencyAmount"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                      GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                      GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(decimal: Double, raw: String, currency: Currency) {
                    self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var decimal: Double {
                    get {
                      return resultMap["decimal"]! as! Double
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "decimal")
                    }
                  }

                  public var raw: String {
                    get {
                      return resultMap["raw"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "raw")
                    }
                  }

                  public var currency: Currency {
                    get {
                      return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
                    }
                    set {
                      resultMap.updateValue(newValue.resultMap, forKey: "currency")
                    }
                  }

                  public struct Currency: GraphQLSelectionSet {
                    public static let possibleTypes: [String] = ["Currency"]

                    public static var selections: [GraphQLSelection] {
                      return [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("address", type: .nonNull(.scalar(String.self))),
                        GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                        GraphQLField("name", type: .nonNull(.scalar(String.self))),
                      ]
                    }

                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public init(address: String, decimals: Int, name: String) {
                      self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
                    }

                    public var __typename: String {
                      get {
                        return resultMap["__typename"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "__typename")
                      }
                    }

                    public var address: String {
                      get {
                        return resultMap["address"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "address")
                      }
                    }

                    public var decimals: Int {
                      get {
                        return resultMap["decimals"]! as! Int
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "decimals")
                      }
                    }

                    public var name: String {
                      get {
                        return resultMap["name"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "name")
                      }
                    }
                  }
                }

                public struct UsdcPrice: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["CurrencyAmount"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                      GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(decimal: Double, raw: String) {
                    self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var decimal: Double {
                    get {
                      return resultMap["decimal"]! as! Double
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "decimal")
                    }
                  }

                  public var raw: String {
                    get {
                      return resultMap["raw"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "raw")
                    }
                  }
                }
              }

              public struct HighestBidPrice: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["PriceAtTime"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                    GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
                    GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
                    GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
                  self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var blockNumber: Int {
                  get {
                    return resultMap["blockNumber"]! as! Int
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "blockNumber")
                  }
                }

                public var chainTokenPrice: ChainTokenPrice? {
                  get {
                    return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
                  }
                  set {
                    resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
                  }
                }

                public var nativePrice: NativePrice {
                  get {
                    return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
                  }
                  set {
                    resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
                  }
                }

                public var usdcPrice: UsdcPrice? {
                  get {
                    return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
                  }
                  set {
                    resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
                  }
                }

                public var fragments: Fragments {
                  get {
                    return Fragments(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }

                public struct Fragments {
                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public var priceSummary: PriceSummary {
                    get {
                      return PriceSummary(unsafeResultMap: resultMap)
                    }
                    set {
                      resultMap += newValue.resultMap
                    }
                  }
                }

                public struct ChainTokenPrice: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["CurrencyAmount"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                      GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(decimal: Double, raw: String) {
                    self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var decimal: Double {
                    get {
                      return resultMap["decimal"]! as! Double
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "decimal")
                    }
                  }

                  public var raw: String {
                    get {
                      return resultMap["raw"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "raw")
                    }
                  }
                }

                public struct NativePrice: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["CurrencyAmount"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                      GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                      GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(decimal: Double, raw: String, currency: Currency) {
                    self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var decimal: Double {
                    get {
                      return resultMap["decimal"]! as! Double
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "decimal")
                    }
                  }

                  public var raw: String {
                    get {
                      return resultMap["raw"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "raw")
                    }
                  }

                  public var currency: Currency {
                    get {
                      return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
                    }
                    set {
                      resultMap.updateValue(newValue.resultMap, forKey: "currency")
                    }
                  }

                  public struct Currency: GraphQLSelectionSet {
                    public static let possibleTypes: [String] = ["Currency"]

                    public static var selections: [GraphQLSelection] {
                      return [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("address", type: .nonNull(.scalar(String.self))),
                        GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                        GraphQLField("name", type: .nonNull(.scalar(String.self))),
                      ]
                    }

                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public init(address: String, decimals: Int, name: String) {
                      self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
                    }

                    public var __typename: String {
                      get {
                        return resultMap["__typename"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "__typename")
                      }
                    }

                    public var address: String {
                      get {
                        return resultMap["address"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "address")
                      }
                    }

                    public var decimals: Int {
                      get {
                        return resultMap["decimals"]! as! Int
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "decimals")
                      }
                    }

                    public var name: String {
                      get {
                        return resultMap["name"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "name")
                      }
                    }
                  }
                }

                public struct UsdcPrice: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["CurrencyAmount"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                      GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(decimal: Double, raw: String) {
                    self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var decimal: Double {
                    get {
                      return resultMap["decimal"]! as! Double
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "decimal")
                    }
                  }

                  public var raw: String {
                    get {
                      return resultMap["raw"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "raw")
                    }
                  }
                }
              }
            }

            public var asV3Ask: AsV3Ask? {
              get {
                if !AsV3Ask.possibleTypes.contains(__typename) { return nil }
                return AsV3Ask(unsafeResultMap: resultMap)
              }
              set {
                guard let newValue = newValue else { return }
                resultMap = newValue.resultMap
              }
            }

            public struct AsV3Ask: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["V3Ask"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("buyer", type: .scalar(String.self)),
                  GraphQLField("finder", type: .scalar(String.self)),
                  GraphQLField("findersFeeBps", type: .nonNull(.scalar(Int.self))),
                  GraphQLField("sellerFundsRecipient", type: .nonNull(.scalar(String.self))),
                  GraphQLField("v3AskStatus", type: .nonNull(.scalar(V3AskStatus.self))),
                  GraphQLField("seller", type: .nonNull(.scalar(String.self))),
                  GraphQLField("address", type: .nonNull(.scalar(String.self))),
                  GraphQLField("askCurrency", type: .nonNull(.scalar(String.self))),
                  GraphQLField("collectionAddress", type: .nonNull(.scalar(String.self))),
                  GraphQLField("askPrice", type: .nonNull(.object(AskPrice.selections))),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(buyer: String? = nil, finder: String? = nil, findersFeeBps: Int, sellerFundsRecipient: String, v3AskStatus: V3AskStatus, seller: String, address: String, askCurrency: String, collectionAddress: String, askPrice: AskPrice) {
                self.init(unsafeResultMap: ["__typename": "V3Ask", "buyer": buyer, "finder": finder, "findersFeeBps": findersFeeBps, "sellerFundsRecipient": sellerFundsRecipient, "v3AskStatus": v3AskStatus, "seller": seller, "address": address, "askCurrency": askCurrency, "collectionAddress": collectionAddress, "askPrice": askPrice.resultMap])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var buyer: String? {
                get {
                  return resultMap["buyer"] as? String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "buyer")
                }
              }

              public var finder: String? {
                get {
                  return resultMap["finder"] as? String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "finder")
                }
              }

              public var findersFeeBps: Int {
                get {
                  return resultMap["findersFeeBps"]! as! Int
                }
                set {
                  resultMap.updateValue(newValue, forKey: "findersFeeBps")
                }
              }

              public var sellerFundsRecipient: String {
                get {
                  return resultMap["sellerFundsRecipient"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "sellerFundsRecipient")
                }
              }

              public var v3AskStatus: V3AskStatus {
                get {
                  return resultMap["v3AskStatus"]! as! V3AskStatus
                }
                set {
                  resultMap.updateValue(newValue, forKey: "v3AskStatus")
                }
              }

              public var seller: String {
                get {
                  return resultMap["seller"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "seller")
                }
              }

              public var address: String {
                get {
                  return resultMap["address"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "address")
                }
              }

              public var askCurrency: String {
                get {
                  return resultMap["askCurrency"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "askCurrency")
                }
              }

              public var collectionAddress: String {
                get {
                  return resultMap["collectionAddress"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "collectionAddress")
                }
              }

              public var askPrice: AskPrice {
                get {
                  return AskPrice(unsafeResultMap: resultMap["askPrice"]! as! ResultMap)
                }
                set {
                  resultMap.updateValue(newValue.resultMap, forKey: "askPrice")
                }
              }

              public var fragments: Fragments {
                get {
                  return Fragments(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }

              public struct Fragments {
                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public var marketPropertiesFull: MarketPropertiesFull {
                  get {
                    return MarketPropertiesFull(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }

                public var v2AuctionMarketProperties: V2AuctionMarketProperties? {
                  get {
                    if !V2AuctionMarketProperties.possibleTypes.contains(resultMap["__typename"]! as! String) { return nil }
                    return V2AuctionMarketProperties(unsafeResultMap: resultMap)
                  }
                  set {
                    guard let newValue = newValue else { return }
                    resultMap += newValue.resultMap
                  }
                }

                public var v3AskProperties: V3AskProperties {
                  get {
                    return V3AskProperties(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }

                public var v1OfferProperties: V1OfferProperties? {
                  get {
                    if !V1OfferProperties.possibleTypes.contains(resultMap["__typename"]! as! String) { return nil }
                    return V1OfferProperties(unsafeResultMap: resultMap)
                  }
                  set {
                    guard let newValue = newValue else { return }
                    resultMap += newValue.resultMap
                  }
                }

                public var v1AskProperties: V1AskProperties? {
                  get {
                    if !V1AskProperties.possibleTypes.contains(resultMap["__typename"]! as! String) { return nil }
                    return V1AskProperties(unsafeResultMap: resultMap)
                  }
                  set {
                    guard let newValue = newValue else { return }
                    resultMap += newValue.resultMap
                  }
                }
              }

              public struct AskPrice: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["PriceAtTime"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                    GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
                    GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
                    GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
                  self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var blockNumber: Int {
                  get {
                    return resultMap["blockNumber"]! as! Int
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "blockNumber")
                  }
                }

                public var chainTokenPrice: ChainTokenPrice? {
                  get {
                    return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
                  }
                  set {
                    resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
                  }
                }

                public var nativePrice: NativePrice {
                  get {
                    return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
                  }
                  set {
                    resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
                  }
                }

                public var usdcPrice: UsdcPrice? {
                  get {
                    return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
                  }
                  set {
                    resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
                  }
                }

                public var fragments: Fragments {
                  get {
                    return Fragments(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }

                public struct Fragments {
                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public var priceSummary: PriceSummary {
                    get {
                      return PriceSummary(unsafeResultMap: resultMap)
                    }
                    set {
                      resultMap += newValue.resultMap
                    }
                  }
                }

                public struct ChainTokenPrice: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["CurrencyAmount"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                      GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(decimal: Double, raw: String) {
                    self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var decimal: Double {
                    get {
                      return resultMap["decimal"]! as! Double
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "decimal")
                    }
                  }

                  public var raw: String {
                    get {
                      return resultMap["raw"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "raw")
                    }
                  }
                }

                public struct NativePrice: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["CurrencyAmount"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                      GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                      GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(decimal: Double, raw: String, currency: Currency) {
                    self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var decimal: Double {
                    get {
                      return resultMap["decimal"]! as! Double
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "decimal")
                    }
                  }

                  public var raw: String {
                    get {
                      return resultMap["raw"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "raw")
                    }
                  }

                  public var currency: Currency {
                    get {
                      return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
                    }
                    set {
                      resultMap.updateValue(newValue.resultMap, forKey: "currency")
                    }
                  }

                  public struct Currency: GraphQLSelectionSet {
                    public static let possibleTypes: [String] = ["Currency"]

                    public static var selections: [GraphQLSelection] {
                      return [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("address", type: .nonNull(.scalar(String.self))),
                        GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                        GraphQLField("name", type: .nonNull(.scalar(String.self))),
                      ]
                    }

                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public init(address: String, decimals: Int, name: String) {
                      self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
                    }

                    public var __typename: String {
                      get {
                        return resultMap["__typename"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "__typename")
                      }
                    }

                    public var address: String {
                      get {
                        return resultMap["address"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "address")
                      }
                    }

                    public var decimals: Int {
                      get {
                        return resultMap["decimals"]! as! Int
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "decimals")
                      }
                    }

                    public var name: String {
                      get {
                        return resultMap["name"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "name")
                      }
                    }
                  }
                }

                public struct UsdcPrice: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["CurrencyAmount"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                      GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(decimal: Double, raw: String) {
                    self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var decimal: Double {
                    get {
                      return resultMap["decimal"]! as! Double
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "decimal")
                    }
                  }

                  public var raw: String {
                    get {
                      return resultMap["raw"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "raw")
                    }
                  }
                }
              }
            }

            public var asV1Offer: AsV1Offer? {
              get {
                if !AsV1Offer.possibleTypes.contains(__typename) { return nil }
                return AsV1Offer(unsafeResultMap: resultMap)
              }
              set {
                guard let newValue = newValue else { return }
                resultMap = newValue.resultMap
              }
            }

            public struct AsV1Offer: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["V1Offer"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("v1OfferStatus", type: .nonNull(.scalar(V1MarketEntityStatus.self))),
                  GraphQLField("sellOnShare", type: .nonNull(.scalar(String.self))),
                  GraphQLField("bidder", type: .nonNull(.scalar(String.self))),
                  GraphQLField("currency", type: .nonNull(.scalar(String.self))),
                  GraphQLField("amount", type: .nonNull(.object(Amount.selections))),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(v1OfferStatus: V1MarketEntityStatus, sellOnShare: String, bidder: String, currency: String, amount: Amount) {
                self.init(unsafeResultMap: ["__typename": "V1Offer", "v1OfferStatus": v1OfferStatus, "sellOnShare": sellOnShare, "bidder": bidder, "currency": currency, "amount": amount.resultMap])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var v1OfferStatus: V1MarketEntityStatus {
                get {
                  return resultMap["v1OfferStatus"]! as! V1MarketEntityStatus
                }
                set {
                  resultMap.updateValue(newValue, forKey: "v1OfferStatus")
                }
              }

              public var sellOnShare: String {
                get {
                  return resultMap["sellOnShare"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "sellOnShare")
                }
              }

              public var bidder: String {
                get {
                  return resultMap["bidder"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "bidder")
                }
              }

              public var currency: String {
                get {
                  return resultMap["currency"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "currency")
                }
              }

              public var amount: Amount {
                get {
                  return Amount(unsafeResultMap: resultMap["amount"]! as! ResultMap)
                }
                set {
                  resultMap.updateValue(newValue.resultMap, forKey: "amount")
                }
              }

              public var fragments: Fragments {
                get {
                  return Fragments(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }

              public struct Fragments {
                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public var marketPropertiesFull: MarketPropertiesFull {
                  get {
                    return MarketPropertiesFull(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }

                public var v2AuctionMarketProperties: V2AuctionMarketProperties? {
                  get {
                    if !V2AuctionMarketProperties.possibleTypes.contains(resultMap["__typename"]! as! String) { return nil }
                    return V2AuctionMarketProperties(unsafeResultMap: resultMap)
                  }
                  set {
                    guard let newValue = newValue else { return }
                    resultMap += newValue.resultMap
                  }
                }

                public var v3AskProperties: V3AskProperties? {
                  get {
                    if !V3AskProperties.possibleTypes.contains(resultMap["__typename"]! as! String) { return nil }
                    return V3AskProperties(unsafeResultMap: resultMap)
                  }
                  set {
                    guard let newValue = newValue else { return }
                    resultMap += newValue.resultMap
                  }
                }

                public var v1OfferProperties: V1OfferProperties {
                  get {
                    return V1OfferProperties(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }

                public var v1AskProperties: V1AskProperties? {
                  get {
                    if !V1AskProperties.possibleTypes.contains(resultMap["__typename"]! as! String) { return nil }
                    return V1AskProperties(unsafeResultMap: resultMap)
                  }
                  set {
                    guard let newValue = newValue else { return }
                    resultMap += newValue.resultMap
                  }
                }
              }

              public struct Amount: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["PriceAtTime"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                    GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
                    GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
                    GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
                  self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var blockNumber: Int {
                  get {
                    return resultMap["blockNumber"]! as! Int
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "blockNumber")
                  }
                }

                public var chainTokenPrice: ChainTokenPrice? {
                  get {
                    return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
                  }
                  set {
                    resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
                  }
                }

                public var nativePrice: NativePrice {
                  get {
                    return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
                  }
                  set {
                    resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
                  }
                }

                public var usdcPrice: UsdcPrice? {
                  get {
                    return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
                  }
                  set {
                    resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
                  }
                }

                public var fragments: Fragments {
                  get {
                    return Fragments(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }

                public struct Fragments {
                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public var priceSummary: PriceSummary {
                    get {
                      return PriceSummary(unsafeResultMap: resultMap)
                    }
                    set {
                      resultMap += newValue.resultMap
                    }
                  }
                }

                public struct ChainTokenPrice: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["CurrencyAmount"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                      GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(decimal: Double, raw: String) {
                    self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var decimal: Double {
                    get {
                      return resultMap["decimal"]! as! Double
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "decimal")
                    }
                  }

                  public var raw: String {
                    get {
                      return resultMap["raw"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "raw")
                    }
                  }
                }

                public struct NativePrice: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["CurrencyAmount"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                      GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                      GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(decimal: Double, raw: String, currency: Currency) {
                    self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var decimal: Double {
                    get {
                      return resultMap["decimal"]! as! Double
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "decimal")
                    }
                  }

                  public var raw: String {
                    get {
                      return resultMap["raw"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "raw")
                    }
                  }

                  public var currency: Currency {
                    get {
                      return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
                    }
                    set {
                      resultMap.updateValue(newValue.resultMap, forKey: "currency")
                    }
                  }

                  public struct Currency: GraphQLSelectionSet {
                    public static let possibleTypes: [String] = ["Currency"]

                    public static var selections: [GraphQLSelection] {
                      return [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("address", type: .nonNull(.scalar(String.self))),
                        GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                        GraphQLField("name", type: .nonNull(.scalar(String.self))),
                      ]
                    }

                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public init(address: String, decimals: Int, name: String) {
                      self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
                    }

                    public var __typename: String {
                      get {
                        return resultMap["__typename"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "__typename")
                      }
                    }

                    public var address: String {
                      get {
                        return resultMap["address"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "address")
                      }
                    }

                    public var decimals: Int {
                      get {
                        return resultMap["decimals"]! as! Int
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "decimals")
                      }
                    }

                    public var name: String {
                      get {
                        return resultMap["name"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "name")
                      }
                    }
                  }
                }

                public struct UsdcPrice: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["CurrencyAmount"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                      GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(decimal: Double, raw: String) {
                    self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var decimal: Double {
                    get {
                      return resultMap["decimal"]! as! Double
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "decimal")
                    }
                  }

                  public var raw: String {
                    get {
                      return resultMap["raw"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "raw")
                    }
                  }
                }
              }
            }

            public var asV1Ask: AsV1Ask? {
              get {
                if !AsV1Ask.possibleTypes.contains(__typename) { return nil }
                return AsV1Ask(unsafeResultMap: resultMap)
              }
              set {
                guard let newValue = newValue else { return }
                resultMap = newValue.resultMap
              }
            }

            public struct AsV1Ask: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["V1Ask"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("v1AskStatus", type: .nonNull(.scalar(V1MarketEntityStatus.self))),
                  GraphQLField("currency", type: .nonNull(.scalar(String.self))),
                  GraphQLField("amount", type: .nonNull(.object(Amount.selections))),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(v1AskStatus: V1MarketEntityStatus, currency: String, amount: Amount) {
                self.init(unsafeResultMap: ["__typename": "V1Ask", "v1AskStatus": v1AskStatus, "currency": currency, "amount": amount.resultMap])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var v1AskStatus: V1MarketEntityStatus {
                get {
                  return resultMap["v1AskStatus"]! as! V1MarketEntityStatus
                }
                set {
                  resultMap.updateValue(newValue, forKey: "v1AskStatus")
                }
              }

              public var currency: String {
                get {
                  return resultMap["currency"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "currency")
                }
              }

              public var amount: Amount {
                get {
                  return Amount(unsafeResultMap: resultMap["amount"]! as! ResultMap)
                }
                set {
                  resultMap.updateValue(newValue.resultMap, forKey: "amount")
                }
              }

              public var fragments: Fragments {
                get {
                  return Fragments(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }

              public struct Fragments {
                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public var marketPropertiesFull: MarketPropertiesFull {
                  get {
                    return MarketPropertiesFull(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }

                public var v2AuctionMarketProperties: V2AuctionMarketProperties? {
                  get {
                    if !V2AuctionMarketProperties.possibleTypes.contains(resultMap["__typename"]! as! String) { return nil }
                    return V2AuctionMarketProperties(unsafeResultMap: resultMap)
                  }
                  set {
                    guard let newValue = newValue else { return }
                    resultMap += newValue.resultMap
                  }
                }

                public var v3AskProperties: V3AskProperties? {
                  get {
                    if !V3AskProperties.possibleTypes.contains(resultMap["__typename"]! as! String) { return nil }
                    return V3AskProperties(unsafeResultMap: resultMap)
                  }
                  set {
                    guard let newValue = newValue else { return }
                    resultMap += newValue.resultMap
                  }
                }

                public var v1OfferProperties: V1OfferProperties? {
                  get {
                    if !V1OfferProperties.possibleTypes.contains(resultMap["__typename"]! as! String) { return nil }
                    return V1OfferProperties(unsafeResultMap: resultMap)
                  }
                  set {
                    guard let newValue = newValue else { return }
                    resultMap += newValue.resultMap
                  }
                }

                public var v1AskProperties: V1AskProperties {
                  get {
                    return V1AskProperties(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }
              }

              public struct Amount: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["PriceAtTime"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                    GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
                    GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
                    GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
                  self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var blockNumber: Int {
                  get {
                    return resultMap["blockNumber"]! as! Int
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "blockNumber")
                  }
                }

                public var chainTokenPrice: ChainTokenPrice? {
                  get {
                    return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
                  }
                  set {
                    resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
                  }
                }

                public var nativePrice: NativePrice {
                  get {
                    return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
                  }
                  set {
                    resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
                  }
                }

                public var usdcPrice: UsdcPrice? {
                  get {
                    return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
                  }
                  set {
                    resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
                  }
                }

                public var fragments: Fragments {
                  get {
                    return Fragments(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }

                public struct Fragments {
                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public var priceSummary: PriceSummary {
                    get {
                      return PriceSummary(unsafeResultMap: resultMap)
                    }
                    set {
                      resultMap += newValue.resultMap
                    }
                  }
                }

                public struct ChainTokenPrice: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["CurrencyAmount"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                      GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(decimal: Double, raw: String) {
                    self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var decimal: Double {
                    get {
                      return resultMap["decimal"]! as! Double
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "decimal")
                    }
                  }

                  public var raw: String {
                    get {
                      return resultMap["raw"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "raw")
                    }
                  }
                }

                public struct NativePrice: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["CurrencyAmount"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                      GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                      GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(decimal: Double, raw: String, currency: Currency) {
                    self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var decimal: Double {
                    get {
                      return resultMap["decimal"]! as! Double
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "decimal")
                    }
                  }

                  public var raw: String {
                    get {
                      return resultMap["raw"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "raw")
                    }
                  }

                  public var currency: Currency {
                    get {
                      return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
                    }
                    set {
                      resultMap.updateValue(newValue.resultMap, forKey: "currency")
                    }
                  }

                  public struct Currency: GraphQLSelectionSet {
                    public static let possibleTypes: [String] = ["Currency"]

                    public static var selections: [GraphQLSelection] {
                      return [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("address", type: .nonNull(.scalar(String.self))),
                        GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                        GraphQLField("name", type: .nonNull(.scalar(String.self))),
                      ]
                    }

                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public init(address: String, decimals: Int, name: String) {
                      self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
                    }

                    public var __typename: String {
                      get {
                        return resultMap["__typename"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "__typename")
                      }
                    }

                    public var address: String {
                      get {
                        return resultMap["address"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "address")
                      }
                    }

                    public var decimals: Int {
                      get {
                        return resultMap["decimals"]! as! Int
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "decimals")
                      }
                    }

                    public var name: String {
                      get {
                        return resultMap["name"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "name")
                      }
                    }
                  }
                }

                public struct UsdcPrice: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["CurrencyAmount"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                      GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(decimal: Double, raw: String) {
                    self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var decimal: Double {
                    get {
                      return resultMap["decimal"]! as! Double
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "decimal")
                    }
                  }

                  public var raw: String {
                    get {
                      return resultMap["raw"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "raw")
                    }
                  }
                }
              }
            }
          }
        }

        public struct Token: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["Token"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("tokenId", type: .nonNull(.scalar(String.self))),
              GraphQLField("tokenContract", type: .object(TokenContract.selections)),
              GraphQLField("mintInfo", type: .object(MintInfo.selections)),
              GraphQLField("collectionAddress", type: .nonNull(.scalar(String.self))),
              GraphQLField("lastRefreshTime", type: .scalar(String.self)),
              GraphQLField("owner", type: .scalar(String.self)),
              GraphQLField("name", type: .scalar(String.self)),
              GraphQLField("description", type: .scalar(String.self)),
              GraphQLField("image", type: .object(Image.selections)),
              GraphQLField("content", type: .object(Content.selections)),
              GraphQLBooleanCondition(variableName: "includeFullDetails", inverted: false, selections: [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("metadata", type: .scalar(String.self)),
                GraphQLField("tokenUrl", type: .scalar(String.self)),
                GraphQLField("tokenUrlMimeType", type: .scalar(String.self)),
                GraphQLField("attributes", type: .list(.nonNull(.object(Attribute.selections)))),
              ]),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(tokenId: String, tokenContract: TokenContract? = nil, mintInfo: MintInfo? = nil, collectionAddress: String, lastRefreshTime: String? = nil, owner: String? = nil, name: String? = nil, description: String? = nil, image: Image? = nil, content: Content? = nil, metadata: String? = nil, tokenUrl: String? = nil, tokenUrlMimeType: String? = nil, attributes: [Attribute]? = nil) {
            self.init(unsafeResultMap: ["__typename": "Token", "tokenId": tokenId, "tokenContract": tokenContract.flatMap { (value: TokenContract) -> ResultMap in value.resultMap }, "mintInfo": mintInfo.flatMap { (value: MintInfo) -> ResultMap in value.resultMap }, "collectionAddress": collectionAddress, "lastRefreshTime": lastRefreshTime, "owner": owner, "name": name, "description": description, "image": image.flatMap { (value: Image) -> ResultMap in value.resultMap }, "content": content.flatMap { (value: Content) -> ResultMap in value.resultMap }, "metadata": metadata, "tokenUrl": tokenUrl, "tokenUrlMimeType": tokenUrlMimeType, "attributes": attributes.flatMap { (value: [Attribute]) -> [ResultMap] in value.map { (value: Attribute) -> ResultMap in value.resultMap } }])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var tokenId: String {
            get {
              return resultMap["tokenId"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "tokenId")
            }
          }

          public var tokenContract: TokenContract? {
            get {
              return (resultMap["tokenContract"] as? ResultMap).flatMap { TokenContract(unsafeResultMap: $0) }
            }
            set {
              resultMap.updateValue(newValue?.resultMap, forKey: "tokenContract")
            }
          }

          public var mintInfo: MintInfo? {
            get {
              return (resultMap["mintInfo"] as? ResultMap).flatMap { MintInfo(unsafeResultMap: $0) }
            }
            set {
              resultMap.updateValue(newValue?.resultMap, forKey: "mintInfo")
            }
          }

          public var collectionAddress: String {
            get {
              return resultMap["collectionAddress"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "collectionAddress")
            }
          }

          public var lastRefreshTime: String? {
            get {
              return resultMap["lastRefreshTime"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "lastRefreshTime")
            }
          }

          public var owner: String? {
            get {
              return resultMap["owner"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "owner")
            }
          }

          public var name: String? {
            get {
              return resultMap["name"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "name")
            }
          }

          public var description: String? {
            get {
              return resultMap["description"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "description")
            }
          }

          public var image: Image? {
            get {
              return (resultMap["image"] as? ResultMap).flatMap { Image(unsafeResultMap: $0) }
            }
            set {
              resultMap.updateValue(newValue?.resultMap, forKey: "image")
            }
          }

          public var content: Content? {
            get {
              return (resultMap["content"] as? ResultMap).flatMap { Content(unsafeResultMap: $0) }
            }
            set {
              resultMap.updateValue(newValue?.resultMap, forKey: "content")
            }
          }

          public var metadata: String? {
            get {
              return resultMap["metadata"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "metadata")
            }
          }

          public var tokenUrl: String? {
            get {
              return resultMap["tokenUrl"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "tokenUrl")
            }
          }

          public var tokenUrlMimeType: String? {
            get {
              return resultMap["tokenUrlMimeType"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "tokenUrlMimeType")
            }
          }

          public var attributes: [Attribute]? {
            get {
              return (resultMap["attributes"] as? [ResultMap]).flatMap { (value: [ResultMap]) -> [Attribute] in value.map { (value: ResultMap) -> Attribute in Attribute(unsafeResultMap: value) } }
            }
            set {
              resultMap.updateValue(newValue.flatMap { (value: [Attribute]) -> [ResultMap] in value.map { (value: Attribute) -> ResultMap in value.resultMap } }, forKey: "attributes")
            }
          }

          public var fragments: Fragments {
            get {
              return Fragments(unsafeResultMap: resultMap)
            }
            set {
              resultMap += newValue.resultMap
            }
          }

          public struct Fragments {
            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public var tokenInfo: TokenInfo {
              get {
                return TokenInfo(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }

            public var tokenDetails: TokenDetails {
              get {
                return TokenDetails(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }
          }

          public struct TokenContract: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["TokenContract"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("name", type: .scalar(String.self)),
                GraphQLField("network", type: .nonNull(.scalar(String.self))),
                GraphQLField("description", type: .scalar(String.self)),
                GraphQLField("collectionAddress", type: .nonNull(.scalar(String.self))),
                GraphQLField("symbol", type: .scalar(String.self)),
                GraphQLField("chain", type: .nonNull(.scalar(Int.self))),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(name: String? = nil, network: String, description: String? = nil, collectionAddress: String, symbol: String? = nil, chain: Int) {
              self.init(unsafeResultMap: ["__typename": "TokenContract", "name": name, "network": network, "description": description, "collectionAddress": collectionAddress, "symbol": symbol, "chain": chain])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var name: String? {
              get {
                return resultMap["name"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "name")
              }
            }

            public var network: String {
              get {
                return resultMap["network"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "network")
              }
            }

            public var description: String? {
              get {
                return resultMap["description"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "description")
              }
            }

            public var collectionAddress: String {
              get {
                return resultMap["collectionAddress"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "collectionAddress")
              }
            }

            public var symbol: String? {
              get {
                return resultMap["symbol"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "symbol")
              }
            }

            public var chain: Int {
              get {
                return resultMap["chain"]! as! Int
              }
              set {
                resultMap.updateValue(newValue, forKey: "chain")
              }
            }

            public var fragments: Fragments {
              get {
                return Fragments(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }

            public struct Fragments {
              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public var tokenContractInfo: TokenContractInfo {
                get {
                  return TokenContractInfo(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }
            }
          }

          public struct MintInfo: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["MintInfo"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("price", type: .nonNull(.object(Price.selections))),
                GraphQLField("originatorAddress", type: .nonNull(.scalar(String.self))),
                GraphQLField("toAddress", type: .nonNull(.scalar(String.self))),
                GraphQLField("mintContext", type: .nonNull(.object(MintContext.selections))),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(price: Price, originatorAddress: String, toAddress: String, mintContext: MintContext) {
              self.init(unsafeResultMap: ["__typename": "MintInfo", "price": price.resultMap, "originatorAddress": originatorAddress, "toAddress": toAddress, "mintContext": mintContext.resultMap])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var price: Price {
              get {
                return Price(unsafeResultMap: resultMap["price"]! as! ResultMap)
              }
              set {
                resultMap.updateValue(newValue.resultMap, forKey: "price")
              }
            }

            public var originatorAddress: String {
              get {
                return resultMap["originatorAddress"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "originatorAddress")
              }
            }

            public var toAddress: String {
              get {
                return resultMap["toAddress"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "toAddress")
              }
            }

            public var mintContext: MintContext {
              get {
                return MintContext(unsafeResultMap: resultMap["mintContext"]! as! ResultMap)
              }
              set {
                resultMap.updateValue(newValue.resultMap, forKey: "mintContext")
              }
            }

            public var fragments: Fragments {
              get {
                return Fragments(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }

            public struct Fragments {
              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public var mintDetails: MintDetails {
                get {
                  return MintDetails(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }
            }

            public struct Price: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["PriceAtTime"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                  GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
                  GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
                  GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
                self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var blockNumber: Int {
                get {
                  return resultMap["blockNumber"]! as! Int
                }
                set {
                  resultMap.updateValue(newValue, forKey: "blockNumber")
                }
              }

              public var chainTokenPrice: ChainTokenPrice? {
                get {
                  return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
                }
                set {
                  resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
                }
              }

              public var nativePrice: NativePrice {
                get {
                  return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
                }
                set {
                  resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
                }
              }

              public var usdcPrice: UsdcPrice? {
                get {
                  return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
                }
                set {
                  resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
                }
              }

              public var fragments: Fragments {
                get {
                  return Fragments(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }

              public struct Fragments {
                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public var priceSummary: PriceSummary {
                  get {
                    return PriceSummary(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }
              }

              public struct ChainTokenPrice: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["CurrencyAmount"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                    GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(decimal: Double, raw: String) {
                  self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var decimal: Double {
                  get {
                    return resultMap["decimal"]! as! Double
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimal")
                  }
                }

                public var raw: String {
                  get {
                    return resultMap["raw"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "raw")
                  }
                }
              }

              public struct NativePrice: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["CurrencyAmount"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                    GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                    GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(decimal: Double, raw: String, currency: Currency) {
                  self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var decimal: Double {
                  get {
                    return resultMap["decimal"]! as! Double
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimal")
                  }
                }

                public var raw: String {
                  get {
                    return resultMap["raw"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "raw")
                  }
                }

                public var currency: Currency {
                  get {
                    return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
                  }
                  set {
                    resultMap.updateValue(newValue.resultMap, forKey: "currency")
                  }
                }

                public struct Currency: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["Currency"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("address", type: .nonNull(.scalar(String.self))),
                      GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                      GraphQLField("name", type: .nonNull(.scalar(String.self))),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(address: String, decimals: Int, name: String) {
                    self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var address: String {
                    get {
                      return resultMap["address"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "address")
                    }
                  }

                  public var decimals: Int {
                    get {
                      return resultMap["decimals"]! as! Int
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "decimals")
                    }
                  }

                  public var name: String {
                    get {
                      return resultMap["name"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "name")
                    }
                  }
                }
              }

              public struct UsdcPrice: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["CurrencyAmount"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                    GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(decimal: Double, raw: String) {
                  self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var decimal: Double {
                  get {
                    return resultMap["decimal"]! as! Double
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimal")
                  }
                }

                public var raw: String {
                  get {
                    return resultMap["raw"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "raw")
                  }
                }
              }
            }

            public struct MintContext: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["TransactionInfo"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                  GraphQLField("blockTimestamp", type: .nonNull(.scalar(String.self))),
                  GraphQLField("transactionHash", type: .scalar(String.self)),
                  GraphQLField("logIndex", type: .scalar(Int.self)),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(blockNumber: Int, blockTimestamp: String, transactionHash: String? = nil, logIndex: Int? = nil) {
                self.init(unsafeResultMap: ["__typename": "TransactionInfo", "blockNumber": blockNumber, "blockTimestamp": blockTimestamp, "transactionHash": transactionHash, "logIndex": logIndex])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var blockNumber: Int {
                get {
                  return resultMap["blockNumber"]! as! Int
                }
                set {
                  resultMap.updateValue(newValue, forKey: "blockNumber")
                }
              }

              public var blockTimestamp: String {
                get {
                  return resultMap["blockTimestamp"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "blockTimestamp")
                }
              }

              public var transactionHash: String? {
                get {
                  return resultMap["transactionHash"] as? String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "transactionHash")
                }
              }

              public var logIndex: Int? {
                get {
                  return resultMap["logIndex"] as? Int
                }
                set {
                  resultMap.updateValue(newValue, forKey: "logIndex")
                }
              }

              public var fragments: Fragments {
                get {
                  return Fragments(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }

              public struct Fragments {
                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public var transactionDetails: TransactionDetails {
                  get {
                    return TransactionDetails(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }
              }
            }
          }

          public struct Image: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["TokenContentMedia"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("size", type: .scalar(String.self)),
                GraphQLField("url", type: .scalar(String.self)),
                GraphQLField("size", type: .scalar(String.self)),
                GraphQLField("mimeType", type: .scalar(String.self)),
                GraphQLField("mediaEncoding", type: .object(MediaEncoding.selections)),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(size: String? = nil, url: String? = nil, mimeType: String? = nil, mediaEncoding: MediaEncoding? = nil) {
              self.init(unsafeResultMap: ["__typename": "TokenContentMedia", "size": size, "url": url, "mimeType": mimeType, "mediaEncoding": mediaEncoding.flatMap { (value: MediaEncoding) -> ResultMap in value.resultMap }])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var size: String? {
              get {
                return resultMap["size"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "size")
              }
            }

            public var url: String? {
              get {
                return resultMap["url"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "url")
              }
            }

            public var mimeType: String? {
              get {
                return resultMap["mimeType"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "mimeType")
              }
            }

            public var mediaEncoding: MediaEncoding? {
              get {
                return (resultMap["mediaEncoding"] as? ResultMap).flatMap { MediaEncoding(unsafeResultMap: $0) }
              }
              set {
                resultMap.updateValue(newValue?.resultMap, forKey: "mediaEncoding")
              }
            }

            public var fragments: Fragments {
              get {
                return Fragments(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }

            public struct Fragments {
              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public var fullMedia: FullMedia {
                get {
                  return FullMedia(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }
            }

            public struct MediaEncoding: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["ImageEncodingTypes", "VideoEncodingTypes", "AudioEncodingTypes", "UnsupportedEncodingTypes"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLTypeCase(
                    variants: ["ImageEncodingTypes": AsImageEncodingTypes.selections, "VideoEncodingTypes": AsVideoEncodingTypes.selections, "AudioEncodingTypes": AsAudioEncodingTypes.selections, "UnsupportedEncodingTypes": AsUnsupportedEncodingTypes.selections],
                    default: [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    ]
                  )
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public static func makeImageEncodingTypes(original: String, large: String? = nil, poster: String? = nil, thumbnail: String? = nil) -> MediaEncoding {
                return MediaEncoding(unsafeResultMap: ["__typename": "ImageEncodingTypes", "original": original, "large": large, "poster": poster, "thumbnail": thumbnail])
              }

              public static func makeVideoEncodingTypes(original: String, large: String? = nil, poster: String? = nil, preview: String? = nil, thumbnail: String? = nil) -> MediaEncoding {
                return MediaEncoding(unsafeResultMap: ["__typename": "VideoEncodingTypes", "original": original, "large": large, "poster": poster, "preview": preview, "thumbnail": thumbnail])
              }

              public static func makeAudioEncodingTypes(original: String, large: String? = nil) -> MediaEncoding {
                return MediaEncoding(unsafeResultMap: ["__typename": "AudioEncodingTypes", "original": original, "large": large])
              }

              public static func makeUnsupportedEncodingTypes(original: String) -> MediaEncoding {
                return MediaEncoding(unsafeResultMap: ["__typename": "UnsupportedEncodingTypes", "original": original])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var asImageEncodingTypes: AsImageEncodingTypes? {
                get {
                  if !AsImageEncodingTypes.possibleTypes.contains(__typename) { return nil }
                  return AsImageEncodingTypes(unsafeResultMap: resultMap)
                }
                set {
                  guard let newValue = newValue else { return }
                  resultMap = newValue.resultMap
                }
              }

              public struct AsImageEncodingTypes: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["ImageEncodingTypes"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("original", type: .nonNull(.scalar(String.self))),
                    GraphQLField("large", type: .scalar(String.self)),
                    GraphQLField("poster", type: .scalar(String.self)),
                    GraphQLField("thumbnail", type: .scalar(String.self)),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(original: String, large: String? = nil, poster: String? = nil, thumbnail: String? = nil) {
                  self.init(unsafeResultMap: ["__typename": "ImageEncodingTypes", "original": original, "large": large, "poster": poster, "thumbnail": thumbnail])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var original: String {
                  get {
                    return resultMap["original"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "original")
                  }
                }

                public var large: String? {
                  get {
                    return resultMap["large"] as? String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "large")
                  }
                }

                public var poster: String? {
                  get {
                    return resultMap["poster"] as? String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "poster")
                  }
                }

                public var thumbnail: String? {
                  get {
                    return resultMap["thumbnail"] as? String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "thumbnail")
                  }
                }
              }

              public var asVideoEncodingTypes: AsVideoEncodingTypes? {
                get {
                  if !AsVideoEncodingTypes.possibleTypes.contains(__typename) { return nil }
                  return AsVideoEncodingTypes(unsafeResultMap: resultMap)
                }
                set {
                  guard let newValue = newValue else { return }
                  resultMap = newValue.resultMap
                }
              }

              public struct AsVideoEncodingTypes: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["VideoEncodingTypes"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("original", type: .nonNull(.scalar(String.self))),
                    GraphQLField("large", type: .scalar(String.self)),
                    GraphQLField("poster", type: .scalar(String.self)),
                    GraphQLField("preview", type: .scalar(String.self)),
                    GraphQLField("thumbnail", type: .scalar(String.self)),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(original: String, large: String? = nil, poster: String? = nil, preview: String? = nil, thumbnail: String? = nil) {
                  self.init(unsafeResultMap: ["__typename": "VideoEncodingTypes", "original": original, "large": large, "poster": poster, "preview": preview, "thumbnail": thumbnail])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var original: String {
                  get {
                    return resultMap["original"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "original")
                  }
                }

                public var large: String? {
                  get {
                    return resultMap["large"] as? String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "large")
                  }
                }

                public var poster: String? {
                  get {
                    return resultMap["poster"] as? String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "poster")
                  }
                }

                public var preview: String? {
                  get {
                    return resultMap["preview"] as? String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "preview")
                  }
                }

                public var thumbnail: String? {
                  get {
                    return resultMap["thumbnail"] as? String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "thumbnail")
                  }
                }
              }

              public var asAudioEncodingTypes: AsAudioEncodingTypes? {
                get {
                  if !AsAudioEncodingTypes.possibleTypes.contains(__typename) { return nil }
                  return AsAudioEncodingTypes(unsafeResultMap: resultMap)
                }
                set {
                  guard let newValue = newValue else { return }
                  resultMap = newValue.resultMap
                }
              }

              public struct AsAudioEncodingTypes: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["AudioEncodingTypes"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("original", type: .nonNull(.scalar(String.self))),
                    GraphQLField("large", type: .scalar(String.self)),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(original: String, large: String? = nil) {
                  self.init(unsafeResultMap: ["__typename": "AudioEncodingTypes", "original": original, "large": large])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var original: String {
                  get {
                    return resultMap["original"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "original")
                  }
                }

                public var large: String? {
                  get {
                    return resultMap["large"] as? String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "large")
                  }
                }
              }

              public var asUnsupportedEncodingTypes: AsUnsupportedEncodingTypes? {
                get {
                  if !AsUnsupportedEncodingTypes.possibleTypes.contains(__typename) { return nil }
                  return AsUnsupportedEncodingTypes(unsafeResultMap: resultMap)
                }
                set {
                  guard let newValue = newValue else { return }
                  resultMap = newValue.resultMap
                }
              }

              public struct AsUnsupportedEncodingTypes: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["UnsupportedEncodingTypes"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("original", type: .nonNull(.scalar(String.self))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(original: String) {
                  self.init(unsafeResultMap: ["__typename": "UnsupportedEncodingTypes", "original": original])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var original: String {
                  get {
                    return resultMap["original"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "original")
                  }
                }
              }
            }
          }

          public struct Content: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["TokenContentMedia"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("size", type: .scalar(String.self)),
                GraphQLField("url", type: .scalar(String.self)),
                GraphQLField("size", type: .scalar(String.self)),
                GraphQLField("mimeType", type: .scalar(String.self)),
                GraphQLField("mediaEncoding", type: .object(MediaEncoding.selections)),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(size: String? = nil, url: String? = nil, mimeType: String? = nil, mediaEncoding: MediaEncoding? = nil) {
              self.init(unsafeResultMap: ["__typename": "TokenContentMedia", "size": size, "url": url, "mimeType": mimeType, "mediaEncoding": mediaEncoding.flatMap { (value: MediaEncoding) -> ResultMap in value.resultMap }])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var size: String? {
              get {
                return resultMap["size"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "size")
              }
            }

            public var url: String? {
              get {
                return resultMap["url"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "url")
              }
            }

            public var mimeType: String? {
              get {
                return resultMap["mimeType"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "mimeType")
              }
            }

            public var mediaEncoding: MediaEncoding? {
              get {
                return (resultMap["mediaEncoding"] as? ResultMap).flatMap { MediaEncoding(unsafeResultMap: $0) }
              }
              set {
                resultMap.updateValue(newValue?.resultMap, forKey: "mediaEncoding")
              }
            }

            public var fragments: Fragments {
              get {
                return Fragments(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }

            public struct Fragments {
              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public var fullMedia: FullMedia {
                get {
                  return FullMedia(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }
            }

            public struct MediaEncoding: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["ImageEncodingTypes", "VideoEncodingTypes", "AudioEncodingTypes", "UnsupportedEncodingTypes"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLTypeCase(
                    variants: ["ImageEncodingTypes": AsImageEncodingTypes.selections, "VideoEncodingTypes": AsVideoEncodingTypes.selections, "AudioEncodingTypes": AsAudioEncodingTypes.selections, "UnsupportedEncodingTypes": AsUnsupportedEncodingTypes.selections],
                    default: [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    ]
                  )
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public static func makeImageEncodingTypes(original: String, large: String? = nil, poster: String? = nil, thumbnail: String? = nil) -> MediaEncoding {
                return MediaEncoding(unsafeResultMap: ["__typename": "ImageEncodingTypes", "original": original, "large": large, "poster": poster, "thumbnail": thumbnail])
              }

              public static func makeVideoEncodingTypes(original: String, large: String? = nil, poster: String? = nil, preview: String? = nil, thumbnail: String? = nil) -> MediaEncoding {
                return MediaEncoding(unsafeResultMap: ["__typename": "VideoEncodingTypes", "original": original, "large": large, "poster": poster, "preview": preview, "thumbnail": thumbnail])
              }

              public static func makeAudioEncodingTypes(original: String, large: String? = nil) -> MediaEncoding {
                return MediaEncoding(unsafeResultMap: ["__typename": "AudioEncodingTypes", "original": original, "large": large])
              }

              public static func makeUnsupportedEncodingTypes(original: String) -> MediaEncoding {
                return MediaEncoding(unsafeResultMap: ["__typename": "UnsupportedEncodingTypes", "original": original])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var asImageEncodingTypes: AsImageEncodingTypes? {
                get {
                  if !AsImageEncodingTypes.possibleTypes.contains(__typename) { return nil }
                  return AsImageEncodingTypes(unsafeResultMap: resultMap)
                }
                set {
                  guard let newValue = newValue else { return }
                  resultMap = newValue.resultMap
                }
              }

              public struct AsImageEncodingTypes: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["ImageEncodingTypes"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("original", type: .nonNull(.scalar(String.self))),
                    GraphQLField("large", type: .scalar(String.self)),
                    GraphQLField("poster", type: .scalar(String.self)),
                    GraphQLField("thumbnail", type: .scalar(String.self)),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(original: String, large: String? = nil, poster: String? = nil, thumbnail: String? = nil) {
                  self.init(unsafeResultMap: ["__typename": "ImageEncodingTypes", "original": original, "large": large, "poster": poster, "thumbnail": thumbnail])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var original: String {
                  get {
                    return resultMap["original"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "original")
                  }
                }

                public var large: String? {
                  get {
                    return resultMap["large"] as? String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "large")
                  }
                }

                public var poster: String? {
                  get {
                    return resultMap["poster"] as? String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "poster")
                  }
                }

                public var thumbnail: String? {
                  get {
                    return resultMap["thumbnail"] as? String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "thumbnail")
                  }
                }
              }

              public var asVideoEncodingTypes: AsVideoEncodingTypes? {
                get {
                  if !AsVideoEncodingTypes.possibleTypes.contains(__typename) { return nil }
                  return AsVideoEncodingTypes(unsafeResultMap: resultMap)
                }
                set {
                  guard let newValue = newValue else { return }
                  resultMap = newValue.resultMap
                }
              }

              public struct AsVideoEncodingTypes: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["VideoEncodingTypes"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("original", type: .nonNull(.scalar(String.self))),
                    GraphQLField("large", type: .scalar(String.self)),
                    GraphQLField("poster", type: .scalar(String.self)),
                    GraphQLField("preview", type: .scalar(String.self)),
                    GraphQLField("thumbnail", type: .scalar(String.self)),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(original: String, large: String? = nil, poster: String? = nil, preview: String? = nil, thumbnail: String? = nil) {
                  self.init(unsafeResultMap: ["__typename": "VideoEncodingTypes", "original": original, "large": large, "poster": poster, "preview": preview, "thumbnail": thumbnail])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var original: String {
                  get {
                    return resultMap["original"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "original")
                  }
                }

                public var large: String? {
                  get {
                    return resultMap["large"] as? String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "large")
                  }
                }

                public var poster: String? {
                  get {
                    return resultMap["poster"] as? String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "poster")
                  }
                }

                public var preview: String? {
                  get {
                    return resultMap["preview"] as? String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "preview")
                  }
                }

                public var thumbnail: String? {
                  get {
                    return resultMap["thumbnail"] as? String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "thumbnail")
                  }
                }
              }

              public var asAudioEncodingTypes: AsAudioEncodingTypes? {
                get {
                  if !AsAudioEncodingTypes.possibleTypes.contains(__typename) { return nil }
                  return AsAudioEncodingTypes(unsafeResultMap: resultMap)
                }
                set {
                  guard let newValue = newValue else { return }
                  resultMap = newValue.resultMap
                }
              }

              public struct AsAudioEncodingTypes: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["AudioEncodingTypes"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("original", type: .nonNull(.scalar(String.self))),
                    GraphQLField("large", type: .scalar(String.self)),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(original: String, large: String? = nil) {
                  self.init(unsafeResultMap: ["__typename": "AudioEncodingTypes", "original": original, "large": large])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var original: String {
                  get {
                    return resultMap["original"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "original")
                  }
                }

                public var large: String? {
                  get {
                    return resultMap["large"] as? String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "large")
                  }
                }
              }

              public var asUnsupportedEncodingTypes: AsUnsupportedEncodingTypes? {
                get {
                  if !AsUnsupportedEncodingTypes.possibleTypes.contains(__typename) { return nil }
                  return AsUnsupportedEncodingTypes(unsafeResultMap: resultMap)
                }
                set {
                  guard let newValue = newValue else { return }
                  resultMap = newValue.resultMap
                }
              }

              public struct AsUnsupportedEncodingTypes: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["UnsupportedEncodingTypes"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("original", type: .nonNull(.scalar(String.self))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(original: String) {
                  self.init(unsafeResultMap: ["__typename": "UnsupportedEncodingTypes", "original": original])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var original: String {
                  get {
                    return resultMap["original"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "original")
                  }
                }
              }
            }
          }

          public struct Attribute: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["TokenAttribute"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("traitType", type: .scalar(String.self)),
                GraphQLField("value", type: .scalar(String.self)),
                GraphQLField("displayType", type: .scalar(String.self)),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(traitType: String? = nil, value: String? = nil, displayType: String? = nil) {
              self.init(unsafeResultMap: ["__typename": "TokenAttribute", "traitType": traitType, "value": value, "displayType": displayType])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var traitType: String? {
              get {
                return resultMap["traitType"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "traitType")
              }
            }

            public var value: String? {
              get {
                return resultMap["value"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "value")
              }
            }

            public var displayType: String? {
              get {
                return resultMap["displayType"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "displayType")
              }
            }
          }
        }

        public struct Sale: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["Sale"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("saleContractAddress", type: .scalar(String.self)),
              GraphQLField("transactionInfo", type: .nonNull(.object(TransactionInfo.selections))),
              GraphQLField("buyerAddress", type: .nonNull(.scalar(String.self))),
              GraphQLField("collectionAddress", type: .nonNull(.scalar(String.self))),
              GraphQLField("price", type: .nonNull(.object(Price.selections))),
              GraphQLField("sellerAddress", type: .nonNull(.scalar(String.self))),
              GraphQLField("tokenId", type: .nonNull(.scalar(String.self))),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(saleContractAddress: String? = nil, transactionInfo: TransactionInfo, buyerAddress: String, collectionAddress: String, price: Price, sellerAddress: String, tokenId: String) {
            self.init(unsafeResultMap: ["__typename": "Sale", "saleContractAddress": saleContractAddress, "transactionInfo": transactionInfo.resultMap, "buyerAddress": buyerAddress, "collectionAddress": collectionAddress, "price": price.resultMap, "sellerAddress": sellerAddress, "tokenId": tokenId])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var saleContractAddress: String? {
            get {
              return resultMap["saleContractAddress"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "saleContractAddress")
            }
          }

          public var transactionInfo: TransactionInfo {
            get {
              return TransactionInfo(unsafeResultMap: resultMap["transactionInfo"]! as! ResultMap)
            }
            set {
              resultMap.updateValue(newValue.resultMap, forKey: "transactionInfo")
            }
          }

          public var buyerAddress: String {
            get {
              return resultMap["buyerAddress"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "buyerAddress")
            }
          }

          public var collectionAddress: String {
            get {
              return resultMap["collectionAddress"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "collectionAddress")
            }
          }

          public var price: Price {
            get {
              return Price(unsafeResultMap: resultMap["price"]! as! ResultMap)
            }
            set {
              resultMap.updateValue(newValue.resultMap, forKey: "price")
            }
          }

          public var sellerAddress: String {
            get {
              return resultMap["sellerAddress"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "sellerAddress")
            }
          }

          public var tokenId: String {
            get {
              return resultMap["tokenId"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "tokenId")
            }
          }

          public var fragments: Fragments {
            get {
              return Fragments(unsafeResultMap: resultMap)
            }
            set {
              resultMap += newValue.resultMap
            }
          }

          public struct Fragments {
            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public var saleInfo: SaleInfo {
              get {
                return SaleInfo(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }
          }

          public struct TransactionInfo: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["TransactionInfo"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                GraphQLField("blockTimestamp", type: .nonNull(.scalar(String.self))),
                GraphQLField("transactionHash", type: .scalar(String.self)),
                GraphQLField("logIndex", type: .scalar(Int.self)),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(blockNumber: Int, blockTimestamp: String, transactionHash: String? = nil, logIndex: Int? = nil) {
              self.init(unsafeResultMap: ["__typename": "TransactionInfo", "blockNumber": blockNumber, "blockTimestamp": blockTimestamp, "transactionHash": transactionHash, "logIndex": logIndex])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var blockNumber: Int {
              get {
                return resultMap["blockNumber"]! as! Int
              }
              set {
                resultMap.updateValue(newValue, forKey: "blockNumber")
              }
            }

            public var blockTimestamp: String {
              get {
                return resultMap["blockTimestamp"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "blockTimestamp")
              }
            }

            public var transactionHash: String? {
              get {
                return resultMap["transactionHash"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "transactionHash")
              }
            }

            public var logIndex: Int? {
              get {
                return resultMap["logIndex"] as? Int
              }
              set {
                resultMap.updateValue(newValue, forKey: "logIndex")
              }
            }

            public var fragments: Fragments {
              get {
                return Fragments(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }

            public struct Fragments {
              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public var transactionDetails: TransactionDetails {
                get {
                  return TransactionDetails(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }
            }
          }

          public struct Price: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["PriceAtTime"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
                GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
                GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
              self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var blockNumber: Int {
              get {
                return resultMap["blockNumber"]! as! Int
              }
              set {
                resultMap.updateValue(newValue, forKey: "blockNumber")
              }
            }

            public var chainTokenPrice: ChainTokenPrice? {
              get {
                return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
              }
              set {
                resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
              }
            }

            public var nativePrice: NativePrice {
              get {
                return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
              }
              set {
                resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
              }
            }

            public var usdcPrice: UsdcPrice? {
              get {
                return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
              }
              set {
                resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
              }
            }

            public var fragments: Fragments {
              get {
                return Fragments(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }

            public struct Fragments {
              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public var priceSummary: PriceSummary {
                get {
                  return PriceSummary(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }
            }

            public struct ChainTokenPrice: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["CurrencyAmount"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                  GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(decimal: Double, raw: String) {
                self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var decimal: Double {
                get {
                  return resultMap["decimal"]! as! Double
                }
                set {
                  resultMap.updateValue(newValue, forKey: "decimal")
                }
              }

              public var raw: String {
                get {
                  return resultMap["raw"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "raw")
                }
              }
            }

            public struct NativePrice: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["CurrencyAmount"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                  GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                  GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(decimal: Double, raw: String, currency: Currency) {
                self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var decimal: Double {
                get {
                  return resultMap["decimal"]! as! Double
                }
                set {
                  resultMap.updateValue(newValue, forKey: "decimal")
                }
              }

              public var raw: String {
                get {
                  return resultMap["raw"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "raw")
                }
              }

              public var currency: Currency {
                get {
                  return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
                }
                set {
                  resultMap.updateValue(newValue.resultMap, forKey: "currency")
                }
              }

              public struct Currency: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["Currency"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("address", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                    GraphQLField("name", type: .nonNull(.scalar(String.self))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(address: String, decimals: Int, name: String) {
                  self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var address: String {
                  get {
                    return resultMap["address"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "address")
                  }
                }

                public var decimals: Int {
                  get {
                    return resultMap["decimals"]! as! Int
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimals")
                  }
                }

                public var name: String {
                  get {
                    return resultMap["name"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "name")
                  }
                }
              }
            }

            public struct UsdcPrice: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["CurrencyAmount"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                  GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(decimal: Double, raw: String) {
                self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var decimal: Double {
                get {
                  return resultMap["decimal"]! as! Double
                }
                set {
                  resultMap.updateValue(newValue, forKey: "decimal")
                }
              }

              public var raw: String {
                get {
                  return resultMap["raw"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "raw")
                }
              }
            }
          }
        }

        public struct Event: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["Event"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("transactionInfo", type: .nonNull(.object(TransactionInfo.selections))),
              GraphQLField("eventType", type: .nonNull(.scalar(EventType.self))),
              GraphQLField("collectionAddress", type: .nonNull(.scalar(String.self))),
              GraphQLField("tokenId", type: .scalar(String.self)),
              GraphQLField("properties", type: .nonNull(.object(Property.selections))),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(transactionInfo: TransactionInfo, eventType: EventType, collectionAddress: String, tokenId: String? = nil, properties: Property) {
            self.init(unsafeResultMap: ["__typename": "Event", "transactionInfo": transactionInfo.resultMap, "eventType": eventType, "collectionAddress": collectionAddress, "tokenId": tokenId, "properties": properties.resultMap])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var transactionInfo: TransactionInfo {
            get {
              return TransactionInfo(unsafeResultMap: resultMap["transactionInfo"]! as! ResultMap)
            }
            set {
              resultMap.updateValue(newValue.resultMap, forKey: "transactionInfo")
            }
          }

          public var eventType: EventType {
            get {
              return resultMap["eventType"]! as! EventType
            }
            set {
              resultMap.updateValue(newValue, forKey: "eventType")
            }
          }

          public var collectionAddress: String {
            get {
              return resultMap["collectionAddress"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "collectionAddress")
            }
          }

          public var tokenId: String? {
            get {
              return resultMap["tokenId"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "tokenId")
            }
          }

          public var properties: Property {
            get {
              return Property(unsafeResultMap: resultMap["properties"]! as! ResultMap)
            }
            set {
              resultMap.updateValue(newValue.resultMap, forKey: "properties")
            }
          }

          public var fragments: Fragments {
            get {
              return Fragments(unsafeResultMap: resultMap)
            }
            set {
              resultMap += newValue.resultMap
            }
          }

          public struct Fragments {
            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public var eventInfo: EventInfo {
              get {
                return EventInfo(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }
          }

          public struct TransactionInfo: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["TransactionInfo"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                GraphQLField("blockTimestamp", type: .nonNull(.scalar(String.self))),
                GraphQLField("transactionHash", type: .scalar(String.self)),
                GraphQLField("logIndex", type: .scalar(Int.self)),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(blockNumber: Int, blockTimestamp: String, transactionHash: String? = nil, logIndex: Int? = nil) {
              self.init(unsafeResultMap: ["__typename": "TransactionInfo", "blockNumber": blockNumber, "blockTimestamp": blockTimestamp, "transactionHash": transactionHash, "logIndex": logIndex])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var blockNumber: Int {
              get {
                return resultMap["blockNumber"]! as! Int
              }
              set {
                resultMap.updateValue(newValue, forKey: "blockNumber")
              }
            }

            public var blockTimestamp: String {
              get {
                return resultMap["blockTimestamp"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "blockTimestamp")
              }
            }

            public var transactionHash: String? {
              get {
                return resultMap["transactionHash"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "transactionHash")
              }
            }

            public var logIndex: Int? {
              get {
                return resultMap["logIndex"] as? Int
              }
              set {
                resultMap.updateValue(newValue, forKey: "logIndex")
              }
            }

            public var fragments: Fragments {
              get {
                return Fragments(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }

            public struct Fragments {
              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public var transactionDetails: TransactionDetails {
                get {
                  return TransactionDetails(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }
            }
          }

          public struct Property: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["ApprovalEvent", "MintEvent", "Sale", "TransferEvent", "V1MarketEvent", "V2AuctionEvent", "V3AskEvent"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLTypeCase(
                  variants: ["MintEvent": AsMintEvent.selections, "TransferEvent": AsTransferEvent.selections, "V1MarketEvent": AsV1MarketEvent.selections, "V2AuctionEvent": AsV2AuctionEvent.selections, "V3AskEvent": AsV3AskEvent.selections],
                  default: [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  ]
                )
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public static func makeApprovalEvent() -> Property {
              return Property(unsafeResultMap: ["__typename": "ApprovalEvent"])
            }

            public static func makeSale() -> Property {
              return Property(unsafeResultMap: ["__typename": "Sale"])
            }

            public static func makeMintEvent(tokenId: String, collectionAddress: String, originatorAddress: String, toAddress: String, price: AsMintEvent.Price) -> Property {
              return Property(unsafeResultMap: ["__typename": "MintEvent", "tokenId": tokenId, "collectionAddress": collectionAddress, "originatorAddress": originatorAddress, "toAddress": toAddress, "price": price.resultMap])
            }

            public static func makeTransferEvent(fromAddress: String, toAddress: String, collectionAddress: String, tokenId: String) -> Property {
              return Property(unsafeResultMap: ["__typename": "TransferEvent", "fromAddress": fromAddress, "toAddress": toAddress, "collectionAddress": collectionAddress, "tokenId": tokenId])
            }

            public static func makeV1MarketEvent(v1MarketEventType: V1MarketEventType, address: String, collectionAddress: String, tokenId: String, properties: AsV1MarketEvent.Property) -> Property {
              return Property(unsafeResultMap: ["__typename": "V1MarketEvent", "v1MarketEventType": v1MarketEventType, "address": address, "collectionAddress": collectionAddress, "tokenId": tokenId, "properties": properties.resultMap])
            }

            public static func makeV2AuctionEvent(v2AuctionEventType: V2AuctionEventType, address: String, auctionId: Int, collectionAddress: String, tokenId: String, properties: AsV2AuctionEvent.Property) -> Property {
              return Property(unsafeResultMap: ["__typename": "V2AuctionEvent", "v2AuctionEventType": v2AuctionEventType, "address": address, "auctionId": auctionId, "collectionAddress": collectionAddress, "tokenId": tokenId, "properties": properties.resultMap])
            }

            public static func makeV3AskEvent(v3AskEventType: V3AskEventType, address: String, collectionAddress: String, tokenId: String, properties: AsV3AskEvent.Property) -> Property {
              return Property(unsafeResultMap: ["__typename": "V3AskEvent", "v3AskEventType": v3AskEventType, "address": address, "collectionAddress": collectionAddress, "tokenId": tokenId, "properties": properties.resultMap])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var asMintEvent: AsMintEvent? {
              get {
                if !AsMintEvent.possibleTypes.contains(__typename) { return nil }
                return AsMintEvent(unsafeResultMap: resultMap)
              }
              set {
                guard let newValue = newValue else { return }
                resultMap = newValue.resultMap
              }
            }

            public struct AsMintEvent: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["MintEvent"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("tokenId", type: .nonNull(.scalar(String.self))),
                  GraphQLField("collectionAddress", type: .nonNull(.scalar(String.self))),
                  GraphQLField("originatorAddress", type: .nonNull(.scalar(String.self))),
                  GraphQLField("toAddress", type: .nonNull(.scalar(String.self))),
                  GraphQLField("price", type: .nonNull(.object(Price.selections))),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(tokenId: String, collectionAddress: String, originatorAddress: String, toAddress: String, price: Price) {
                self.init(unsafeResultMap: ["__typename": "MintEvent", "tokenId": tokenId, "collectionAddress": collectionAddress, "originatorAddress": originatorAddress, "toAddress": toAddress, "price": price.resultMap])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var tokenId: String {
                get {
                  return resultMap["tokenId"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "tokenId")
                }
              }

              public var collectionAddress: String {
                get {
                  return resultMap["collectionAddress"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "collectionAddress")
                }
              }

              public var originatorAddress: String {
                get {
                  return resultMap["originatorAddress"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "originatorAddress")
                }
              }

              public var toAddress: String {
                get {
                  return resultMap["toAddress"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "toAddress")
                }
              }

              public var price: Price {
                get {
                  return Price(unsafeResultMap: resultMap["price"]! as! ResultMap)
                }
                set {
                  resultMap.updateValue(newValue.resultMap, forKey: "price")
                }
              }

              public struct Price: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["PriceAtTime"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                    GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
                    GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
                    GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
                  self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var blockNumber: Int {
                  get {
                    return resultMap["blockNumber"]! as! Int
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "blockNumber")
                  }
                }

                public var chainTokenPrice: ChainTokenPrice? {
                  get {
                    return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
                  }
                  set {
                    resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
                  }
                }

                public var nativePrice: NativePrice {
                  get {
                    return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
                  }
                  set {
                    resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
                  }
                }

                public var usdcPrice: UsdcPrice? {
                  get {
                    return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
                  }
                  set {
                    resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
                  }
                }

                public var fragments: Fragments {
                  get {
                    return Fragments(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }

                public struct Fragments {
                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public var priceSummary: PriceSummary {
                    get {
                      return PriceSummary(unsafeResultMap: resultMap)
                    }
                    set {
                      resultMap += newValue.resultMap
                    }
                  }
                }

                public struct ChainTokenPrice: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["CurrencyAmount"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                      GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(decimal: Double, raw: String) {
                    self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var decimal: Double {
                    get {
                      return resultMap["decimal"]! as! Double
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "decimal")
                    }
                  }

                  public var raw: String {
                    get {
                      return resultMap["raw"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "raw")
                    }
                  }
                }

                public struct NativePrice: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["CurrencyAmount"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                      GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                      GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(decimal: Double, raw: String, currency: Currency) {
                    self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var decimal: Double {
                    get {
                      return resultMap["decimal"]! as! Double
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "decimal")
                    }
                  }

                  public var raw: String {
                    get {
                      return resultMap["raw"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "raw")
                    }
                  }

                  public var currency: Currency {
                    get {
                      return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
                    }
                    set {
                      resultMap.updateValue(newValue.resultMap, forKey: "currency")
                    }
                  }

                  public struct Currency: GraphQLSelectionSet {
                    public static let possibleTypes: [String] = ["Currency"]

                    public static var selections: [GraphQLSelection] {
                      return [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("address", type: .nonNull(.scalar(String.self))),
                        GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                        GraphQLField("name", type: .nonNull(.scalar(String.self))),
                      ]
                    }

                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public init(address: String, decimals: Int, name: String) {
                      self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
                    }

                    public var __typename: String {
                      get {
                        return resultMap["__typename"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "__typename")
                      }
                    }

                    public var address: String {
                      get {
                        return resultMap["address"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "address")
                      }
                    }

                    public var decimals: Int {
                      get {
                        return resultMap["decimals"]! as! Int
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "decimals")
                      }
                    }

                    public var name: String {
                      get {
                        return resultMap["name"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "name")
                      }
                    }
                  }
                }

                public struct UsdcPrice: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["CurrencyAmount"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                      GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(decimal: Double, raw: String) {
                    self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var decimal: Double {
                    get {
                      return resultMap["decimal"]! as! Double
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "decimal")
                    }
                  }

                  public var raw: String {
                    get {
                      return resultMap["raw"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "raw")
                    }
                  }
                }
              }
            }

            public var asTransferEvent: AsTransferEvent? {
              get {
                if !AsTransferEvent.possibleTypes.contains(__typename) { return nil }
                return AsTransferEvent(unsafeResultMap: resultMap)
              }
              set {
                guard let newValue = newValue else { return }
                resultMap = newValue.resultMap
              }
            }

            public struct AsTransferEvent: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["TransferEvent"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("fromAddress", type: .nonNull(.scalar(String.self))),
                  GraphQLField("toAddress", type: .nonNull(.scalar(String.self))),
                  GraphQLField("collectionAddress", type: .nonNull(.scalar(String.self))),
                  GraphQLField("tokenId", type: .nonNull(.scalar(String.self))),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(fromAddress: String, toAddress: String, collectionAddress: String, tokenId: String) {
                self.init(unsafeResultMap: ["__typename": "TransferEvent", "fromAddress": fromAddress, "toAddress": toAddress, "collectionAddress": collectionAddress, "tokenId": tokenId])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var fromAddress: String {
                get {
                  return resultMap["fromAddress"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "fromAddress")
                }
              }

              public var toAddress: String {
                get {
                  return resultMap["toAddress"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "toAddress")
                }
              }

              public var collectionAddress: String {
                get {
                  return resultMap["collectionAddress"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "collectionAddress")
                }
              }

              public var tokenId: String {
                get {
                  return resultMap["tokenId"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "tokenId")
                }
              }
            }

            public var asV1MarketEvent: AsV1MarketEvent? {
              get {
                if !AsV1MarketEvent.possibleTypes.contains(__typename) { return nil }
                return AsV1MarketEvent(unsafeResultMap: resultMap)
              }
              set {
                guard let newValue = newValue else { return }
                resultMap = newValue.resultMap
              }
            }

            public struct AsV1MarketEvent: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["V1MarketEvent"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("v1MarketEventType", type: .nonNull(.scalar(V1MarketEventType.self))),
                  GraphQLField("address", type: .nonNull(.scalar(String.self))),
                  GraphQLField("collectionAddress", type: .nonNull(.scalar(String.self))),
                  GraphQLField("tokenId", type: .nonNull(.scalar(String.self))),
                  GraphQLField("properties", type: .nonNull(.object(Property.selections))),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(v1MarketEventType: V1MarketEventType, address: String, collectionAddress: String, tokenId: String, properties: Property) {
                self.init(unsafeResultMap: ["__typename": "V1MarketEvent", "v1MarketEventType": v1MarketEventType, "address": address, "collectionAddress": collectionAddress, "tokenId": tokenId, "properties": properties.resultMap])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var v1MarketEventType: V1MarketEventType {
                get {
                  return resultMap["v1MarketEventType"]! as! V1MarketEventType
                }
                set {
                  resultMap.updateValue(newValue, forKey: "v1MarketEventType")
                }
              }

              public var address: String {
                get {
                  return resultMap["address"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "address")
                }
              }

              public var collectionAddress: String {
                get {
                  return resultMap["collectionAddress"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "collectionAddress")
                }
              }

              public var tokenId: String {
                get {
                  return resultMap["tokenId"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "tokenId")
                }
              }

              public var properties: Property {
                get {
                  return Property(unsafeResultMap: resultMap["properties"]! as! ResultMap)
                }
                set {
                  resultMap.updateValue(newValue.resultMap, forKey: "properties")
                }
              }

              public struct Property: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["V1MarketAskCreatedEventProperties", "V1MarketAskRemovedEventProperties", "V1MarketOfferCreatedEventProperties", "V1MarketOfferFinalizedEventProperties", "V1MarketOfferRemovedEventProperties", "V1MarketBidShareUpdatedEventProperties"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLTypeCase(
                      variants: ["V1MarketAskCreatedEventProperties": AsV1MarketAskCreatedEventProperties.selections, "V1MarketAskRemovedEventProperties": AsV1MarketAskRemovedEventProperties.selections, "V1MarketOfferCreatedEventProperties": AsV1MarketOfferCreatedEventProperties.selections, "V1MarketOfferFinalizedEventProperties": AsV1MarketOfferFinalizedEventProperties.selections, "V1MarketOfferRemovedEventProperties": AsV1MarketOfferRemovedEventProperties.selections],
                      default: [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      ]
                    )
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public static func makeV1MarketBidShareUpdatedEventProperties() -> Property {
                  return Property(unsafeResultMap: ["__typename": "V1MarketBidShareUpdatedEventProperties"])
                }

                public static func makeV1MarketAskCreatedEventProperties(amount: String, price: AsV1MarketAskCreatedEventProperties.Price, currency: String) -> Property {
                  return Property(unsafeResultMap: ["__typename": "V1MarketAskCreatedEventProperties", "amount": amount, "price": price.resultMap, "currency": currency])
                }

                public static func makeV1MarketAskRemovedEventProperties(amount: String, price: AsV1MarketAskRemovedEventProperties.Price, currency: String) -> Property {
                  return Property(unsafeResultMap: ["__typename": "V1MarketAskRemovedEventProperties", "amount": amount, "price": price.resultMap, "currency": currency])
                }

                public static func makeV1MarketOfferCreatedEventProperties(amount: String, price: AsV1MarketOfferCreatedEventProperties.Price, currency: String, bidder: String) -> Property {
                  return Property(unsafeResultMap: ["__typename": "V1MarketOfferCreatedEventProperties", "amount": amount, "price": price.resultMap, "currency": currency, "bidder": bidder])
                }

                public static func makeV1MarketOfferFinalizedEventProperties(amount: String, price: AsV1MarketOfferFinalizedEventProperties.Price, currency: String, bidder: String) -> Property {
                  return Property(unsafeResultMap: ["__typename": "V1MarketOfferFinalizedEventProperties", "amount": amount, "price": price.resultMap, "currency": currency, "bidder": bidder])
                }

                public static func makeV1MarketOfferRemovedEventProperties(amount: String, price: AsV1MarketOfferRemovedEventProperties.Price, currency: String, bidder: String) -> Property {
                  return Property(unsafeResultMap: ["__typename": "V1MarketOfferRemovedEventProperties", "amount": amount, "price": price.resultMap, "currency": currency, "bidder": bidder])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var fragments: Fragments {
                  get {
                    return Fragments(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }

                public struct Fragments {
                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public var v1MarketEventPropertiesInfo: V1MarketEventPropertiesInfo {
                    get {
                      return V1MarketEventPropertiesInfo(unsafeResultMap: resultMap)
                    }
                    set {
                      resultMap += newValue.resultMap
                    }
                  }
                }

                public var asV1MarketAskCreatedEventProperties: AsV1MarketAskCreatedEventProperties? {
                  get {
                    if !AsV1MarketAskCreatedEventProperties.possibleTypes.contains(__typename) { return nil }
                    return AsV1MarketAskCreatedEventProperties(unsafeResultMap: resultMap)
                  }
                  set {
                    guard let newValue = newValue else { return }
                    resultMap = newValue.resultMap
                  }
                }

                public struct AsV1MarketAskCreatedEventProperties: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["V1MarketAskCreatedEventProperties"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("amount", type: .nonNull(.scalar(String.self))),
                      GraphQLField("price", type: .nonNull(.object(Price.selections))),
                      GraphQLField("currency", type: .nonNull(.scalar(String.self))),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(amount: String, price: Price, currency: String) {
                    self.init(unsafeResultMap: ["__typename": "V1MarketAskCreatedEventProperties", "amount": amount, "price": price.resultMap, "currency": currency])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var amount: String {
                    get {
                      return resultMap["amount"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "amount")
                    }
                  }

                  public var price: Price {
                    get {
                      return Price(unsafeResultMap: resultMap["price"]! as! ResultMap)
                    }
                    set {
                      resultMap.updateValue(newValue.resultMap, forKey: "price")
                    }
                  }

                  public var currency: String {
                    get {
                      return resultMap["currency"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "currency")
                    }
                  }

                  public var fragments: Fragments {
                    get {
                      return Fragments(unsafeResultMap: resultMap)
                    }
                    set {
                      resultMap += newValue.resultMap
                    }
                  }

                  public struct Fragments {
                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public var v1MarketEventPropertiesInfo: V1MarketEventPropertiesInfo {
                      get {
                        return V1MarketEventPropertiesInfo(unsafeResultMap: resultMap)
                      }
                      set {
                        resultMap += newValue.resultMap
                      }
                    }
                  }

                  public struct Price: GraphQLSelectionSet {
                    public static let possibleTypes: [String] = ["PriceAtTime"]

                    public static var selections: [GraphQLSelection] {
                      return [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                        GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
                        GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
                        GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
                      ]
                    }

                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
                      self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
                    }

                    public var __typename: String {
                      get {
                        return resultMap["__typename"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "__typename")
                      }
                    }

                    public var blockNumber: Int {
                      get {
                        return resultMap["blockNumber"]! as! Int
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "blockNumber")
                      }
                    }

                    public var chainTokenPrice: ChainTokenPrice? {
                      get {
                        return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
                      }
                      set {
                        resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
                      }
                    }

                    public var nativePrice: NativePrice {
                      get {
                        return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
                      }
                      set {
                        resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
                      }
                    }

                    public var usdcPrice: UsdcPrice? {
                      get {
                        return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
                      }
                      set {
                        resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
                      }
                    }

                    public var fragments: Fragments {
                      get {
                        return Fragments(unsafeResultMap: resultMap)
                      }
                      set {
                        resultMap += newValue.resultMap
                      }
                    }

                    public struct Fragments {
                      public private(set) var resultMap: ResultMap

                      public init(unsafeResultMap: ResultMap) {
                        self.resultMap = unsafeResultMap
                      }

                      public var priceSummary: PriceSummary {
                        get {
                          return PriceSummary(unsafeResultMap: resultMap)
                        }
                        set {
                          resultMap += newValue.resultMap
                        }
                      }
                    }

                    public struct ChainTokenPrice: GraphQLSelectionSet {
                      public static let possibleTypes: [String] = ["CurrencyAmount"]

                      public static var selections: [GraphQLSelection] {
                        return [
                          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                          GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                          GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                        ]
                      }

                      public private(set) var resultMap: ResultMap

                      public init(unsafeResultMap: ResultMap) {
                        self.resultMap = unsafeResultMap
                      }

                      public init(decimal: Double, raw: String) {
                        self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                      }

                      public var __typename: String {
                        get {
                          return resultMap["__typename"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "__typename")
                        }
                      }

                      public var decimal: Double {
                        get {
                          return resultMap["decimal"]! as! Double
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "decimal")
                        }
                      }

                      public var raw: String {
                        get {
                          return resultMap["raw"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "raw")
                        }
                      }
                    }

                    public struct NativePrice: GraphQLSelectionSet {
                      public static let possibleTypes: [String] = ["CurrencyAmount"]

                      public static var selections: [GraphQLSelection] {
                        return [
                          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                          GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                          GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                          GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
                        ]
                      }

                      public private(set) var resultMap: ResultMap

                      public init(unsafeResultMap: ResultMap) {
                        self.resultMap = unsafeResultMap
                      }

                      public init(decimal: Double, raw: String, currency: Currency) {
                        self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
                      }

                      public var __typename: String {
                        get {
                          return resultMap["__typename"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "__typename")
                        }
                      }

                      public var decimal: Double {
                        get {
                          return resultMap["decimal"]! as! Double
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "decimal")
                        }
                      }

                      public var raw: String {
                        get {
                          return resultMap["raw"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "raw")
                        }
                      }

                      public var currency: Currency {
                        get {
                          return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
                        }
                        set {
                          resultMap.updateValue(newValue.resultMap, forKey: "currency")
                        }
                      }

                      public struct Currency: GraphQLSelectionSet {
                        public static let possibleTypes: [String] = ["Currency"]

                        public static var selections: [GraphQLSelection] {
                          return [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("address", type: .nonNull(.scalar(String.self))),
                            GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                            GraphQLField("name", type: .nonNull(.scalar(String.self))),
                          ]
                        }

                        public private(set) var resultMap: ResultMap

                        public init(unsafeResultMap: ResultMap) {
                          self.resultMap = unsafeResultMap
                        }

                        public init(address: String, decimals: Int, name: String) {
                          self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
                        }

                        public var __typename: String {
                          get {
                            return resultMap["__typename"]! as! String
                          }
                          set {
                            resultMap.updateValue(newValue, forKey: "__typename")
                          }
                        }

                        public var address: String {
                          get {
                            return resultMap["address"]! as! String
                          }
                          set {
                            resultMap.updateValue(newValue, forKey: "address")
                          }
                        }

                        public var decimals: Int {
                          get {
                            return resultMap["decimals"]! as! Int
                          }
                          set {
                            resultMap.updateValue(newValue, forKey: "decimals")
                          }
                        }

                        public var name: String {
                          get {
                            return resultMap["name"]! as! String
                          }
                          set {
                            resultMap.updateValue(newValue, forKey: "name")
                          }
                        }
                      }
                    }

                    public struct UsdcPrice: GraphQLSelectionSet {
                      public static let possibleTypes: [String] = ["CurrencyAmount"]

                      public static var selections: [GraphQLSelection] {
                        return [
                          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                          GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                          GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                        ]
                      }

                      public private(set) var resultMap: ResultMap

                      public init(unsafeResultMap: ResultMap) {
                        self.resultMap = unsafeResultMap
                      }

                      public init(decimal: Double, raw: String) {
                        self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                      }

                      public var __typename: String {
                        get {
                          return resultMap["__typename"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "__typename")
                        }
                      }

                      public var decimal: Double {
                        get {
                          return resultMap["decimal"]! as! Double
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "decimal")
                        }
                      }

                      public var raw: String {
                        get {
                          return resultMap["raw"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "raw")
                        }
                      }
                    }
                  }
                }

                public var asV1MarketAskRemovedEventProperties: AsV1MarketAskRemovedEventProperties? {
                  get {
                    if !AsV1MarketAskRemovedEventProperties.possibleTypes.contains(__typename) { return nil }
                    return AsV1MarketAskRemovedEventProperties(unsafeResultMap: resultMap)
                  }
                  set {
                    guard let newValue = newValue else { return }
                    resultMap = newValue.resultMap
                  }
                }

                public struct AsV1MarketAskRemovedEventProperties: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["V1MarketAskRemovedEventProperties"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("amount", type: .nonNull(.scalar(String.self))),
                      GraphQLField("price", type: .nonNull(.object(Price.selections))),
                      GraphQLField("currency", type: .nonNull(.scalar(String.self))),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(amount: String, price: Price, currency: String) {
                    self.init(unsafeResultMap: ["__typename": "V1MarketAskRemovedEventProperties", "amount": amount, "price": price.resultMap, "currency": currency])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var amount: String {
                    get {
                      return resultMap["amount"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "amount")
                    }
                  }

                  public var price: Price {
                    get {
                      return Price(unsafeResultMap: resultMap["price"]! as! ResultMap)
                    }
                    set {
                      resultMap.updateValue(newValue.resultMap, forKey: "price")
                    }
                  }

                  public var currency: String {
                    get {
                      return resultMap["currency"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "currency")
                    }
                  }

                  public var fragments: Fragments {
                    get {
                      return Fragments(unsafeResultMap: resultMap)
                    }
                    set {
                      resultMap += newValue.resultMap
                    }
                  }

                  public struct Fragments {
                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public var v1MarketEventPropertiesInfo: V1MarketEventPropertiesInfo {
                      get {
                        return V1MarketEventPropertiesInfo(unsafeResultMap: resultMap)
                      }
                      set {
                        resultMap += newValue.resultMap
                      }
                    }
                  }

                  public struct Price: GraphQLSelectionSet {
                    public static let possibleTypes: [String] = ["PriceAtTime"]

                    public static var selections: [GraphQLSelection] {
                      return [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                        GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
                        GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
                        GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
                      ]
                    }

                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
                      self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
                    }

                    public var __typename: String {
                      get {
                        return resultMap["__typename"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "__typename")
                      }
                    }

                    public var blockNumber: Int {
                      get {
                        return resultMap["blockNumber"]! as! Int
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "blockNumber")
                      }
                    }

                    public var chainTokenPrice: ChainTokenPrice? {
                      get {
                        return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
                      }
                      set {
                        resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
                      }
                    }

                    public var nativePrice: NativePrice {
                      get {
                        return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
                      }
                      set {
                        resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
                      }
                    }

                    public var usdcPrice: UsdcPrice? {
                      get {
                        return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
                      }
                      set {
                        resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
                      }
                    }

                    public var fragments: Fragments {
                      get {
                        return Fragments(unsafeResultMap: resultMap)
                      }
                      set {
                        resultMap += newValue.resultMap
                      }
                    }

                    public struct Fragments {
                      public private(set) var resultMap: ResultMap

                      public init(unsafeResultMap: ResultMap) {
                        self.resultMap = unsafeResultMap
                      }

                      public var priceSummary: PriceSummary {
                        get {
                          return PriceSummary(unsafeResultMap: resultMap)
                        }
                        set {
                          resultMap += newValue.resultMap
                        }
                      }
                    }

                    public struct ChainTokenPrice: GraphQLSelectionSet {
                      public static let possibleTypes: [String] = ["CurrencyAmount"]

                      public static var selections: [GraphQLSelection] {
                        return [
                          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                          GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                          GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                        ]
                      }

                      public private(set) var resultMap: ResultMap

                      public init(unsafeResultMap: ResultMap) {
                        self.resultMap = unsafeResultMap
                      }

                      public init(decimal: Double, raw: String) {
                        self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                      }

                      public var __typename: String {
                        get {
                          return resultMap["__typename"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "__typename")
                        }
                      }

                      public var decimal: Double {
                        get {
                          return resultMap["decimal"]! as! Double
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "decimal")
                        }
                      }

                      public var raw: String {
                        get {
                          return resultMap["raw"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "raw")
                        }
                      }
                    }

                    public struct NativePrice: GraphQLSelectionSet {
                      public static let possibleTypes: [String] = ["CurrencyAmount"]

                      public static var selections: [GraphQLSelection] {
                        return [
                          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                          GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                          GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                          GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
                        ]
                      }

                      public private(set) var resultMap: ResultMap

                      public init(unsafeResultMap: ResultMap) {
                        self.resultMap = unsafeResultMap
                      }

                      public init(decimal: Double, raw: String, currency: Currency) {
                        self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
                      }

                      public var __typename: String {
                        get {
                          return resultMap["__typename"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "__typename")
                        }
                      }

                      public var decimal: Double {
                        get {
                          return resultMap["decimal"]! as! Double
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "decimal")
                        }
                      }

                      public var raw: String {
                        get {
                          return resultMap["raw"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "raw")
                        }
                      }

                      public var currency: Currency {
                        get {
                          return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
                        }
                        set {
                          resultMap.updateValue(newValue.resultMap, forKey: "currency")
                        }
                      }

                      public struct Currency: GraphQLSelectionSet {
                        public static let possibleTypes: [String] = ["Currency"]

                        public static var selections: [GraphQLSelection] {
                          return [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("address", type: .nonNull(.scalar(String.self))),
                            GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                            GraphQLField("name", type: .nonNull(.scalar(String.self))),
                          ]
                        }

                        public private(set) var resultMap: ResultMap

                        public init(unsafeResultMap: ResultMap) {
                          self.resultMap = unsafeResultMap
                        }

                        public init(address: String, decimals: Int, name: String) {
                          self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
                        }

                        public var __typename: String {
                          get {
                            return resultMap["__typename"]! as! String
                          }
                          set {
                            resultMap.updateValue(newValue, forKey: "__typename")
                          }
                        }

                        public var address: String {
                          get {
                            return resultMap["address"]! as! String
                          }
                          set {
                            resultMap.updateValue(newValue, forKey: "address")
                          }
                        }

                        public var decimals: Int {
                          get {
                            return resultMap["decimals"]! as! Int
                          }
                          set {
                            resultMap.updateValue(newValue, forKey: "decimals")
                          }
                        }

                        public var name: String {
                          get {
                            return resultMap["name"]! as! String
                          }
                          set {
                            resultMap.updateValue(newValue, forKey: "name")
                          }
                        }
                      }
                    }

                    public struct UsdcPrice: GraphQLSelectionSet {
                      public static let possibleTypes: [String] = ["CurrencyAmount"]

                      public static var selections: [GraphQLSelection] {
                        return [
                          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                          GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                          GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                        ]
                      }

                      public private(set) var resultMap: ResultMap

                      public init(unsafeResultMap: ResultMap) {
                        self.resultMap = unsafeResultMap
                      }

                      public init(decimal: Double, raw: String) {
                        self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                      }

                      public var __typename: String {
                        get {
                          return resultMap["__typename"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "__typename")
                        }
                      }

                      public var decimal: Double {
                        get {
                          return resultMap["decimal"]! as! Double
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "decimal")
                        }
                      }

                      public var raw: String {
                        get {
                          return resultMap["raw"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "raw")
                        }
                      }
                    }
                  }
                }

                public var asV1MarketOfferCreatedEventProperties: AsV1MarketOfferCreatedEventProperties? {
                  get {
                    if !AsV1MarketOfferCreatedEventProperties.possibleTypes.contains(__typename) { return nil }
                    return AsV1MarketOfferCreatedEventProperties(unsafeResultMap: resultMap)
                  }
                  set {
                    guard let newValue = newValue else { return }
                    resultMap = newValue.resultMap
                  }
                }

                public struct AsV1MarketOfferCreatedEventProperties: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["V1MarketOfferCreatedEventProperties"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("amount", type: .nonNull(.scalar(String.self))),
                      GraphQLField("price", type: .nonNull(.object(Price.selections))),
                      GraphQLField("currency", type: .nonNull(.scalar(String.self))),
                      GraphQLField("bidder", type: .nonNull(.scalar(String.self))),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(amount: String, price: Price, currency: String, bidder: String) {
                    self.init(unsafeResultMap: ["__typename": "V1MarketOfferCreatedEventProperties", "amount": amount, "price": price.resultMap, "currency": currency, "bidder": bidder])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var amount: String {
                    get {
                      return resultMap["amount"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "amount")
                    }
                  }

                  public var price: Price {
                    get {
                      return Price(unsafeResultMap: resultMap["price"]! as! ResultMap)
                    }
                    set {
                      resultMap.updateValue(newValue.resultMap, forKey: "price")
                    }
                  }

                  public var currency: String {
                    get {
                      return resultMap["currency"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "currency")
                    }
                  }

                  public var bidder: String {
                    get {
                      return resultMap["bidder"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "bidder")
                    }
                  }

                  public var fragments: Fragments {
                    get {
                      return Fragments(unsafeResultMap: resultMap)
                    }
                    set {
                      resultMap += newValue.resultMap
                    }
                  }

                  public struct Fragments {
                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public var v1MarketEventPropertiesInfo: V1MarketEventPropertiesInfo {
                      get {
                        return V1MarketEventPropertiesInfo(unsafeResultMap: resultMap)
                      }
                      set {
                        resultMap += newValue.resultMap
                      }
                    }
                  }

                  public struct Price: GraphQLSelectionSet {
                    public static let possibleTypes: [String] = ["PriceAtTime"]

                    public static var selections: [GraphQLSelection] {
                      return [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                        GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
                        GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
                        GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
                      ]
                    }

                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
                      self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
                    }

                    public var __typename: String {
                      get {
                        return resultMap["__typename"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "__typename")
                      }
                    }

                    public var blockNumber: Int {
                      get {
                        return resultMap["blockNumber"]! as! Int
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "blockNumber")
                      }
                    }

                    public var chainTokenPrice: ChainTokenPrice? {
                      get {
                        return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
                      }
                      set {
                        resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
                      }
                    }

                    public var nativePrice: NativePrice {
                      get {
                        return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
                      }
                      set {
                        resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
                      }
                    }

                    public var usdcPrice: UsdcPrice? {
                      get {
                        return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
                      }
                      set {
                        resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
                      }
                    }

                    public var fragments: Fragments {
                      get {
                        return Fragments(unsafeResultMap: resultMap)
                      }
                      set {
                        resultMap += newValue.resultMap
                      }
                    }

                    public struct Fragments {
                      public private(set) var resultMap: ResultMap

                      public init(unsafeResultMap: ResultMap) {
                        self.resultMap = unsafeResultMap
                      }

                      public var priceSummary: PriceSummary {
                        get {
                          return PriceSummary(unsafeResultMap: resultMap)
                        }
                        set {
                          resultMap += newValue.resultMap
                        }
                      }
                    }

                    public struct ChainTokenPrice: GraphQLSelectionSet {
                      public static let possibleTypes: [String] = ["CurrencyAmount"]

                      public static var selections: [GraphQLSelection] {
                        return [
                          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                          GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                          GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                        ]
                      }

                      public private(set) var resultMap: ResultMap

                      public init(unsafeResultMap: ResultMap) {
                        self.resultMap = unsafeResultMap
                      }

                      public init(decimal: Double, raw: String) {
                        self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                      }

                      public var __typename: String {
                        get {
                          return resultMap["__typename"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "__typename")
                        }
                      }

                      public var decimal: Double {
                        get {
                          return resultMap["decimal"]! as! Double
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "decimal")
                        }
                      }

                      public var raw: String {
                        get {
                          return resultMap["raw"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "raw")
                        }
                      }
                    }

                    public struct NativePrice: GraphQLSelectionSet {
                      public static let possibleTypes: [String] = ["CurrencyAmount"]

                      public static var selections: [GraphQLSelection] {
                        return [
                          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                          GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                          GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                          GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
                        ]
                      }

                      public private(set) var resultMap: ResultMap

                      public init(unsafeResultMap: ResultMap) {
                        self.resultMap = unsafeResultMap
                      }

                      public init(decimal: Double, raw: String, currency: Currency) {
                        self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
                      }

                      public var __typename: String {
                        get {
                          return resultMap["__typename"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "__typename")
                        }
                      }

                      public var decimal: Double {
                        get {
                          return resultMap["decimal"]! as! Double
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "decimal")
                        }
                      }

                      public var raw: String {
                        get {
                          return resultMap["raw"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "raw")
                        }
                      }

                      public var currency: Currency {
                        get {
                          return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
                        }
                        set {
                          resultMap.updateValue(newValue.resultMap, forKey: "currency")
                        }
                      }

                      public struct Currency: GraphQLSelectionSet {
                        public static let possibleTypes: [String] = ["Currency"]

                        public static var selections: [GraphQLSelection] {
                          return [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("address", type: .nonNull(.scalar(String.self))),
                            GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                            GraphQLField("name", type: .nonNull(.scalar(String.self))),
                          ]
                        }

                        public private(set) var resultMap: ResultMap

                        public init(unsafeResultMap: ResultMap) {
                          self.resultMap = unsafeResultMap
                        }

                        public init(address: String, decimals: Int, name: String) {
                          self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
                        }

                        public var __typename: String {
                          get {
                            return resultMap["__typename"]! as! String
                          }
                          set {
                            resultMap.updateValue(newValue, forKey: "__typename")
                          }
                        }

                        public var address: String {
                          get {
                            return resultMap["address"]! as! String
                          }
                          set {
                            resultMap.updateValue(newValue, forKey: "address")
                          }
                        }

                        public var decimals: Int {
                          get {
                            return resultMap["decimals"]! as! Int
                          }
                          set {
                            resultMap.updateValue(newValue, forKey: "decimals")
                          }
                        }

                        public var name: String {
                          get {
                            return resultMap["name"]! as! String
                          }
                          set {
                            resultMap.updateValue(newValue, forKey: "name")
                          }
                        }
                      }
                    }

                    public struct UsdcPrice: GraphQLSelectionSet {
                      public static let possibleTypes: [String] = ["CurrencyAmount"]

                      public static var selections: [GraphQLSelection] {
                        return [
                          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                          GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                          GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                        ]
                      }

                      public private(set) var resultMap: ResultMap

                      public init(unsafeResultMap: ResultMap) {
                        self.resultMap = unsafeResultMap
                      }

                      public init(decimal: Double, raw: String) {
                        self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                      }

                      public var __typename: String {
                        get {
                          return resultMap["__typename"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "__typename")
                        }
                      }

                      public var decimal: Double {
                        get {
                          return resultMap["decimal"]! as! Double
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "decimal")
                        }
                      }

                      public var raw: String {
                        get {
                          return resultMap["raw"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "raw")
                        }
                      }
                    }
                  }
                }

                public var asV1MarketOfferFinalizedEventProperties: AsV1MarketOfferFinalizedEventProperties? {
                  get {
                    if !AsV1MarketOfferFinalizedEventProperties.possibleTypes.contains(__typename) { return nil }
                    return AsV1MarketOfferFinalizedEventProperties(unsafeResultMap: resultMap)
                  }
                  set {
                    guard let newValue = newValue else { return }
                    resultMap = newValue.resultMap
                  }
                }

                public struct AsV1MarketOfferFinalizedEventProperties: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["V1MarketOfferFinalizedEventProperties"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("amount", type: .nonNull(.scalar(String.self))),
                      GraphQLField("price", type: .nonNull(.object(Price.selections))),
                      GraphQLField("currency", type: .nonNull(.scalar(String.self))),
                      GraphQLField("bidder", type: .nonNull(.scalar(String.self))),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(amount: String, price: Price, currency: String, bidder: String) {
                    self.init(unsafeResultMap: ["__typename": "V1MarketOfferFinalizedEventProperties", "amount": amount, "price": price.resultMap, "currency": currency, "bidder": bidder])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var amount: String {
                    get {
                      return resultMap["amount"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "amount")
                    }
                  }

                  public var price: Price {
                    get {
                      return Price(unsafeResultMap: resultMap["price"]! as! ResultMap)
                    }
                    set {
                      resultMap.updateValue(newValue.resultMap, forKey: "price")
                    }
                  }

                  public var currency: String {
                    get {
                      return resultMap["currency"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "currency")
                    }
                  }

                  public var bidder: String {
                    get {
                      return resultMap["bidder"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "bidder")
                    }
                  }

                  public var fragments: Fragments {
                    get {
                      return Fragments(unsafeResultMap: resultMap)
                    }
                    set {
                      resultMap += newValue.resultMap
                    }
                  }

                  public struct Fragments {
                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public var v1MarketEventPropertiesInfo: V1MarketEventPropertiesInfo {
                      get {
                        return V1MarketEventPropertiesInfo(unsafeResultMap: resultMap)
                      }
                      set {
                        resultMap += newValue.resultMap
                      }
                    }
                  }

                  public struct Price: GraphQLSelectionSet {
                    public static let possibleTypes: [String] = ["PriceAtTime"]

                    public static var selections: [GraphQLSelection] {
                      return [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                        GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
                        GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
                        GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
                      ]
                    }

                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
                      self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
                    }

                    public var __typename: String {
                      get {
                        return resultMap["__typename"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "__typename")
                      }
                    }

                    public var blockNumber: Int {
                      get {
                        return resultMap["blockNumber"]! as! Int
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "blockNumber")
                      }
                    }

                    public var chainTokenPrice: ChainTokenPrice? {
                      get {
                        return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
                      }
                      set {
                        resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
                      }
                    }

                    public var nativePrice: NativePrice {
                      get {
                        return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
                      }
                      set {
                        resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
                      }
                    }

                    public var usdcPrice: UsdcPrice? {
                      get {
                        return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
                      }
                      set {
                        resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
                      }
                    }

                    public var fragments: Fragments {
                      get {
                        return Fragments(unsafeResultMap: resultMap)
                      }
                      set {
                        resultMap += newValue.resultMap
                      }
                    }

                    public struct Fragments {
                      public private(set) var resultMap: ResultMap

                      public init(unsafeResultMap: ResultMap) {
                        self.resultMap = unsafeResultMap
                      }

                      public var priceSummary: PriceSummary {
                        get {
                          return PriceSummary(unsafeResultMap: resultMap)
                        }
                        set {
                          resultMap += newValue.resultMap
                        }
                      }
                    }

                    public struct ChainTokenPrice: GraphQLSelectionSet {
                      public static let possibleTypes: [String] = ["CurrencyAmount"]

                      public static var selections: [GraphQLSelection] {
                        return [
                          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                          GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                          GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                        ]
                      }

                      public private(set) var resultMap: ResultMap

                      public init(unsafeResultMap: ResultMap) {
                        self.resultMap = unsafeResultMap
                      }

                      public init(decimal: Double, raw: String) {
                        self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                      }

                      public var __typename: String {
                        get {
                          return resultMap["__typename"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "__typename")
                        }
                      }

                      public var decimal: Double {
                        get {
                          return resultMap["decimal"]! as! Double
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "decimal")
                        }
                      }

                      public var raw: String {
                        get {
                          return resultMap["raw"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "raw")
                        }
                      }
                    }

                    public struct NativePrice: GraphQLSelectionSet {
                      public static let possibleTypes: [String] = ["CurrencyAmount"]

                      public static var selections: [GraphQLSelection] {
                        return [
                          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                          GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                          GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                          GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
                        ]
                      }

                      public private(set) var resultMap: ResultMap

                      public init(unsafeResultMap: ResultMap) {
                        self.resultMap = unsafeResultMap
                      }

                      public init(decimal: Double, raw: String, currency: Currency) {
                        self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
                      }

                      public var __typename: String {
                        get {
                          return resultMap["__typename"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "__typename")
                        }
                      }

                      public var decimal: Double {
                        get {
                          return resultMap["decimal"]! as! Double
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "decimal")
                        }
                      }

                      public var raw: String {
                        get {
                          return resultMap["raw"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "raw")
                        }
                      }

                      public var currency: Currency {
                        get {
                          return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
                        }
                        set {
                          resultMap.updateValue(newValue.resultMap, forKey: "currency")
                        }
                      }

                      public struct Currency: GraphQLSelectionSet {
                        public static let possibleTypes: [String] = ["Currency"]

                        public static var selections: [GraphQLSelection] {
                          return [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("address", type: .nonNull(.scalar(String.self))),
                            GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                            GraphQLField("name", type: .nonNull(.scalar(String.self))),
                          ]
                        }

                        public private(set) var resultMap: ResultMap

                        public init(unsafeResultMap: ResultMap) {
                          self.resultMap = unsafeResultMap
                        }

                        public init(address: String, decimals: Int, name: String) {
                          self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
                        }

                        public var __typename: String {
                          get {
                            return resultMap["__typename"]! as! String
                          }
                          set {
                            resultMap.updateValue(newValue, forKey: "__typename")
                          }
                        }

                        public var address: String {
                          get {
                            return resultMap["address"]! as! String
                          }
                          set {
                            resultMap.updateValue(newValue, forKey: "address")
                          }
                        }

                        public var decimals: Int {
                          get {
                            return resultMap["decimals"]! as! Int
                          }
                          set {
                            resultMap.updateValue(newValue, forKey: "decimals")
                          }
                        }

                        public var name: String {
                          get {
                            return resultMap["name"]! as! String
                          }
                          set {
                            resultMap.updateValue(newValue, forKey: "name")
                          }
                        }
                      }
                    }

                    public struct UsdcPrice: GraphQLSelectionSet {
                      public static let possibleTypes: [String] = ["CurrencyAmount"]

                      public static var selections: [GraphQLSelection] {
                        return [
                          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                          GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                          GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                        ]
                      }

                      public private(set) var resultMap: ResultMap

                      public init(unsafeResultMap: ResultMap) {
                        self.resultMap = unsafeResultMap
                      }

                      public init(decimal: Double, raw: String) {
                        self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                      }

                      public var __typename: String {
                        get {
                          return resultMap["__typename"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "__typename")
                        }
                      }

                      public var decimal: Double {
                        get {
                          return resultMap["decimal"]! as! Double
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "decimal")
                        }
                      }

                      public var raw: String {
                        get {
                          return resultMap["raw"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "raw")
                        }
                      }
                    }
                  }
                }

                public var asV1MarketOfferRemovedEventProperties: AsV1MarketOfferRemovedEventProperties? {
                  get {
                    if !AsV1MarketOfferRemovedEventProperties.possibleTypes.contains(__typename) { return nil }
                    return AsV1MarketOfferRemovedEventProperties(unsafeResultMap: resultMap)
                  }
                  set {
                    guard let newValue = newValue else { return }
                    resultMap = newValue.resultMap
                  }
                }

                public struct AsV1MarketOfferRemovedEventProperties: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["V1MarketOfferRemovedEventProperties"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("amount", type: .nonNull(.scalar(String.self))),
                      GraphQLField("price", type: .nonNull(.object(Price.selections))),
                      GraphQLField("currency", type: .nonNull(.scalar(String.self))),
                      GraphQLField("bidder", type: .nonNull(.scalar(String.self))),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(amount: String, price: Price, currency: String, bidder: String) {
                    self.init(unsafeResultMap: ["__typename": "V1MarketOfferRemovedEventProperties", "amount": amount, "price": price.resultMap, "currency": currency, "bidder": bidder])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var amount: String {
                    get {
                      return resultMap["amount"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "amount")
                    }
                  }

                  public var price: Price {
                    get {
                      return Price(unsafeResultMap: resultMap["price"]! as! ResultMap)
                    }
                    set {
                      resultMap.updateValue(newValue.resultMap, forKey: "price")
                    }
                  }

                  public var currency: String {
                    get {
                      return resultMap["currency"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "currency")
                    }
                  }

                  public var bidder: String {
                    get {
                      return resultMap["bidder"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "bidder")
                    }
                  }

                  public var fragments: Fragments {
                    get {
                      return Fragments(unsafeResultMap: resultMap)
                    }
                    set {
                      resultMap += newValue.resultMap
                    }
                  }

                  public struct Fragments {
                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public var v1MarketEventPropertiesInfo: V1MarketEventPropertiesInfo {
                      get {
                        return V1MarketEventPropertiesInfo(unsafeResultMap: resultMap)
                      }
                      set {
                        resultMap += newValue.resultMap
                      }
                    }
                  }

                  public struct Price: GraphQLSelectionSet {
                    public static let possibleTypes: [String] = ["PriceAtTime"]

                    public static var selections: [GraphQLSelection] {
                      return [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                        GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
                        GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
                        GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
                      ]
                    }

                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
                      self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
                    }

                    public var __typename: String {
                      get {
                        return resultMap["__typename"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "__typename")
                      }
                    }

                    public var blockNumber: Int {
                      get {
                        return resultMap["blockNumber"]! as! Int
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "blockNumber")
                      }
                    }

                    public var chainTokenPrice: ChainTokenPrice? {
                      get {
                        return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
                      }
                      set {
                        resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
                      }
                    }

                    public var nativePrice: NativePrice {
                      get {
                        return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
                      }
                      set {
                        resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
                      }
                    }

                    public var usdcPrice: UsdcPrice? {
                      get {
                        return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
                      }
                      set {
                        resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
                      }
                    }

                    public var fragments: Fragments {
                      get {
                        return Fragments(unsafeResultMap: resultMap)
                      }
                      set {
                        resultMap += newValue.resultMap
                      }
                    }

                    public struct Fragments {
                      public private(set) var resultMap: ResultMap

                      public init(unsafeResultMap: ResultMap) {
                        self.resultMap = unsafeResultMap
                      }

                      public var priceSummary: PriceSummary {
                        get {
                          return PriceSummary(unsafeResultMap: resultMap)
                        }
                        set {
                          resultMap += newValue.resultMap
                        }
                      }
                    }

                    public struct ChainTokenPrice: GraphQLSelectionSet {
                      public static let possibleTypes: [String] = ["CurrencyAmount"]

                      public static var selections: [GraphQLSelection] {
                        return [
                          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                          GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                          GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                        ]
                      }

                      public private(set) var resultMap: ResultMap

                      public init(unsafeResultMap: ResultMap) {
                        self.resultMap = unsafeResultMap
                      }

                      public init(decimal: Double, raw: String) {
                        self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                      }

                      public var __typename: String {
                        get {
                          return resultMap["__typename"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "__typename")
                        }
                      }

                      public var decimal: Double {
                        get {
                          return resultMap["decimal"]! as! Double
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "decimal")
                        }
                      }

                      public var raw: String {
                        get {
                          return resultMap["raw"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "raw")
                        }
                      }
                    }

                    public struct NativePrice: GraphQLSelectionSet {
                      public static let possibleTypes: [String] = ["CurrencyAmount"]

                      public static var selections: [GraphQLSelection] {
                        return [
                          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                          GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                          GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                          GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
                        ]
                      }

                      public private(set) var resultMap: ResultMap

                      public init(unsafeResultMap: ResultMap) {
                        self.resultMap = unsafeResultMap
                      }

                      public init(decimal: Double, raw: String, currency: Currency) {
                        self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
                      }

                      public var __typename: String {
                        get {
                          return resultMap["__typename"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "__typename")
                        }
                      }

                      public var decimal: Double {
                        get {
                          return resultMap["decimal"]! as! Double
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "decimal")
                        }
                      }

                      public var raw: String {
                        get {
                          return resultMap["raw"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "raw")
                        }
                      }

                      public var currency: Currency {
                        get {
                          return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
                        }
                        set {
                          resultMap.updateValue(newValue.resultMap, forKey: "currency")
                        }
                      }

                      public struct Currency: GraphQLSelectionSet {
                        public static let possibleTypes: [String] = ["Currency"]

                        public static var selections: [GraphQLSelection] {
                          return [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("address", type: .nonNull(.scalar(String.self))),
                            GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                            GraphQLField("name", type: .nonNull(.scalar(String.self))),
                          ]
                        }

                        public private(set) var resultMap: ResultMap

                        public init(unsafeResultMap: ResultMap) {
                          self.resultMap = unsafeResultMap
                        }

                        public init(address: String, decimals: Int, name: String) {
                          self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
                        }

                        public var __typename: String {
                          get {
                            return resultMap["__typename"]! as! String
                          }
                          set {
                            resultMap.updateValue(newValue, forKey: "__typename")
                          }
                        }

                        public var address: String {
                          get {
                            return resultMap["address"]! as! String
                          }
                          set {
                            resultMap.updateValue(newValue, forKey: "address")
                          }
                        }

                        public var decimals: Int {
                          get {
                            return resultMap["decimals"]! as! Int
                          }
                          set {
                            resultMap.updateValue(newValue, forKey: "decimals")
                          }
                        }

                        public var name: String {
                          get {
                            return resultMap["name"]! as! String
                          }
                          set {
                            resultMap.updateValue(newValue, forKey: "name")
                          }
                        }
                      }
                    }

                    public struct UsdcPrice: GraphQLSelectionSet {
                      public static let possibleTypes: [String] = ["CurrencyAmount"]

                      public static var selections: [GraphQLSelection] {
                        return [
                          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                          GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                          GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                        ]
                      }

                      public private(set) var resultMap: ResultMap

                      public init(unsafeResultMap: ResultMap) {
                        self.resultMap = unsafeResultMap
                      }

                      public init(decimal: Double, raw: String) {
                        self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                      }

                      public var __typename: String {
                        get {
                          return resultMap["__typename"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "__typename")
                        }
                      }

                      public var decimal: Double {
                        get {
                          return resultMap["decimal"]! as! Double
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "decimal")
                        }
                      }

                      public var raw: String {
                        get {
                          return resultMap["raw"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "raw")
                        }
                      }
                    }
                  }
                }
              }
            }

            public var asV2AuctionEvent: AsV2AuctionEvent? {
              get {
                if !AsV2AuctionEvent.possibleTypes.contains(__typename) { return nil }
                return AsV2AuctionEvent(unsafeResultMap: resultMap)
              }
              set {
                guard let newValue = newValue else { return }
                resultMap = newValue.resultMap
              }
            }

            public struct AsV2AuctionEvent: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["V2AuctionEvent"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("v2AuctionEventType", type: .nonNull(.scalar(V2AuctionEventType.self))),
                  GraphQLField("address", type: .nonNull(.scalar(String.self))),
                  GraphQLField("auctionId", type: .nonNull(.scalar(Int.self))),
                  GraphQLField("collectionAddress", type: .nonNull(.scalar(String.self))),
                  GraphQLField("tokenId", type: .nonNull(.scalar(String.self))),
                  GraphQLField("properties", type: .nonNull(.object(Property.selections))),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(v2AuctionEventType: V2AuctionEventType, address: String, auctionId: Int, collectionAddress: String, tokenId: String, properties: Property) {
                self.init(unsafeResultMap: ["__typename": "V2AuctionEvent", "v2AuctionEventType": v2AuctionEventType, "address": address, "auctionId": auctionId, "collectionAddress": collectionAddress, "tokenId": tokenId, "properties": properties.resultMap])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var v2AuctionEventType: V2AuctionEventType {
                get {
                  return resultMap["v2AuctionEventType"]! as! V2AuctionEventType
                }
                set {
                  resultMap.updateValue(newValue, forKey: "v2AuctionEventType")
                }
              }

              public var address: String {
                get {
                  return resultMap["address"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "address")
                }
              }

              public var auctionId: Int {
                get {
                  return resultMap["auctionId"]! as! Int
                }
                set {
                  resultMap.updateValue(newValue, forKey: "auctionId")
                }
              }

              public var collectionAddress: String {
                get {
                  return resultMap["collectionAddress"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "collectionAddress")
                }
              }

              public var tokenId: String {
                get {
                  return resultMap["tokenId"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "tokenId")
                }
              }

              public var properties: Property {
                get {
                  return Property(unsafeResultMap: resultMap["properties"]! as! ResultMap)
                }
                set {
                  resultMap.updateValue(newValue.resultMap, forKey: "properties")
                }
              }

              public struct Property: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["V2AuctionBidEventProperties", "V2AuctionCreatedEventProperties", "V2AuctionCanceledEventProperties", "V2AuctionDurationExtendedEventProperties", "V2AuctionEndedEventProperties", "V2AuctionReservePriceUpdatedEventProperties", "V2AuctionApprovalUpdatedEventProperties"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLTypeCase(
                      variants: ["V2AuctionBidEventProperties": AsV2AuctionBidEventProperties.selections, "V2AuctionCreatedEventProperties": AsV2AuctionCreatedEventProperties.selections, "V2AuctionCanceledEventProperties": AsV2AuctionCanceledEventProperties.selections, "V2AuctionDurationExtendedEventProperties": AsV2AuctionDurationExtendedEventProperties.selections, "V2AuctionEndedEventProperties": AsV2AuctionEndedEventProperties.selections, "V2AuctionReservePriceUpdatedEventProperties": AsV2AuctionReservePriceUpdatedEventProperties.selections, "V2AuctionApprovalUpdatedEventProperties": AsV2AuctionApprovalUpdatedEventProperties.selections],
                      default: [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      ]
                    )
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public static func makeV2AuctionBidEventProperties(sender: String, firstBid: Bool, extended: Bool, value: String, price: AsV2AuctionBidEventProperties.Price) -> Property {
                  return Property(unsafeResultMap: ["__typename": "V2AuctionBidEventProperties", "sender": sender, "firstBid": firstBid, "extended": extended, "value": value, "price": price.resultMap])
                }

                public static func makeV2AuctionCreatedEventProperties(auctionCurrency: String, tokenOwner: String, curator: String, curatorFeePercentage: Int, duration: String, reservePrice: String, price: AsV2AuctionCreatedEventProperties.Price) -> Property {
                  return Property(unsafeResultMap: ["__typename": "V2AuctionCreatedEventProperties", "auctionCurrency": auctionCurrency, "tokenOwner": tokenOwner, "curator": curator, "curatorFeePercentage": curatorFeePercentage, "duration": duration, "reservePrice": reservePrice, "price": price.resultMap])
                }

                public static func makeV2AuctionCanceledEventProperties(tokenOwner: String) -> Property {
                  return Property(unsafeResultMap: ["__typename": "V2AuctionCanceledEventProperties", "tokenOwner": tokenOwner])
                }

                public static func makeV2AuctionDurationExtendedEventProperties(duration: String) -> Property {
                  return Property(unsafeResultMap: ["__typename": "V2AuctionDurationExtendedEventProperties", "duration": duration])
                }

                public static func makeV2AuctionEndedEventProperties(tokenOwner: String, curator: String, winner: String, auctionCurrency: String, amount: String, curatorFee: String) -> Property {
                  return Property(unsafeResultMap: ["__typename": "V2AuctionEndedEventProperties", "tokenOwner": tokenOwner, "curator": curator, "winner": winner, "auctionCurrency": auctionCurrency, "amount": amount, "curatorFee": curatorFee])
                }

                public static func makeV2AuctionReservePriceUpdatedEventProperties(reservePrice: String, price: AsV2AuctionReservePriceUpdatedEventProperties.Price) -> Property {
                  return Property(unsafeResultMap: ["__typename": "V2AuctionReservePriceUpdatedEventProperties", "reservePrice": reservePrice, "price": price.resultMap])
                }

                public static func makeV2AuctionApprovalUpdatedEventProperties(approved: Bool) -> Property {
                  return Property(unsafeResultMap: ["__typename": "V2AuctionApprovalUpdatedEventProperties", "approved": approved])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var fragments: Fragments {
                  get {
                    return Fragments(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }

                public struct Fragments {
                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public var v2AuctionEventPropertiesInfo: V2AuctionEventPropertiesInfo {
                    get {
                      return V2AuctionEventPropertiesInfo(unsafeResultMap: resultMap)
                    }
                    set {
                      resultMap += newValue.resultMap
                    }
                  }
                }

                public var asV2AuctionBidEventProperties: AsV2AuctionBidEventProperties? {
                  get {
                    if !AsV2AuctionBidEventProperties.possibleTypes.contains(__typename) { return nil }
                    return AsV2AuctionBidEventProperties(unsafeResultMap: resultMap)
                  }
                  set {
                    guard let newValue = newValue else { return }
                    resultMap = newValue.resultMap
                  }
                }

                public struct AsV2AuctionBidEventProperties: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["V2AuctionBidEventProperties"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("sender", type: .nonNull(.scalar(String.self))),
                      GraphQLField("firstBid", type: .nonNull(.scalar(Bool.self))),
                      GraphQLField("extended", type: .nonNull(.scalar(Bool.self))),
                      GraphQLField("value", type: .nonNull(.scalar(String.self))),
                      GraphQLField("price", type: .nonNull(.object(Price.selections))),
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("sender", type: .nonNull(.scalar(String.self))),
                      GraphQLField("firstBid", type: .nonNull(.scalar(Bool.self))),
                      GraphQLField("extended", type: .nonNull(.scalar(Bool.self))),
                      GraphQLField("value", type: .nonNull(.scalar(String.self))),
                      GraphQLField("price", type: .nonNull(.object(Price.selections))),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(sender: String, firstBid: Bool, extended: Bool, value: String, price: Price) {
                    self.init(unsafeResultMap: ["__typename": "V2AuctionBidEventProperties", "sender": sender, "firstBid": firstBid, "extended": extended, "value": value, "price": price.resultMap])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var sender: String {
                    get {
                      return resultMap["sender"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "sender")
                    }
                  }

                  public var firstBid: Bool {
                    get {
                      return resultMap["firstBid"]! as! Bool
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "firstBid")
                    }
                  }

                  public var extended: Bool {
                    get {
                      return resultMap["extended"]! as! Bool
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "extended")
                    }
                  }

                  public var value: String {
                    get {
                      return resultMap["value"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "value")
                    }
                  }

                  public var price: Price {
                    get {
                      return Price(unsafeResultMap: resultMap["price"]! as! ResultMap)
                    }
                    set {
                      resultMap.updateValue(newValue.resultMap, forKey: "price")
                    }
                  }

                  public var fragments: Fragments {
                    get {
                      return Fragments(unsafeResultMap: resultMap)
                    }
                    set {
                      resultMap += newValue.resultMap
                    }
                  }

                  public struct Fragments {
                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public var v2AuctionEventPropertiesInfo: V2AuctionEventPropertiesInfo {
                      get {
                        return V2AuctionEventPropertiesInfo(unsafeResultMap: resultMap)
                      }
                      set {
                        resultMap += newValue.resultMap
                      }
                    }
                  }

                  public struct Price: GraphQLSelectionSet {
                    public static let possibleTypes: [String] = ["PriceAtTime"]

                    public static var selections: [GraphQLSelection] {
                      return [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                        GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
                        GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
                        GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      ]
                    }

                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
                      self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
                    }

                    public var __typename: String {
                      get {
                        return resultMap["__typename"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "__typename")
                      }
                    }

                    public var blockNumber: Int {
                      get {
                        return resultMap["blockNumber"]! as! Int
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "blockNumber")
                      }
                    }

                    public var chainTokenPrice: ChainTokenPrice? {
                      get {
                        return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
                      }
                      set {
                        resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
                      }
                    }

                    public var nativePrice: NativePrice {
                      get {
                        return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
                      }
                      set {
                        resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
                      }
                    }

                    public var usdcPrice: UsdcPrice? {
                      get {
                        return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
                      }
                      set {
                        resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
                      }
                    }

                    public var fragments: Fragments {
                      get {
                        return Fragments(unsafeResultMap: resultMap)
                      }
                      set {
                        resultMap += newValue.resultMap
                      }
                    }

                    public struct Fragments {
                      public private(set) var resultMap: ResultMap

                      public init(unsafeResultMap: ResultMap) {
                        self.resultMap = unsafeResultMap
                      }

                      public var priceSummary: PriceSummary {
                        get {
                          return PriceSummary(unsafeResultMap: resultMap)
                        }
                        set {
                          resultMap += newValue.resultMap
                        }
                      }
                    }

                    public struct ChainTokenPrice: GraphQLSelectionSet {
                      public static let possibleTypes: [String] = ["CurrencyAmount"]

                      public static var selections: [GraphQLSelection] {
                        return [
                          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                          GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                          GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                        ]
                      }

                      public private(set) var resultMap: ResultMap

                      public init(unsafeResultMap: ResultMap) {
                        self.resultMap = unsafeResultMap
                      }

                      public init(decimal: Double, raw: String) {
                        self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                      }

                      public var __typename: String {
                        get {
                          return resultMap["__typename"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "__typename")
                        }
                      }

                      public var decimal: Double {
                        get {
                          return resultMap["decimal"]! as! Double
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "decimal")
                        }
                      }

                      public var raw: String {
                        get {
                          return resultMap["raw"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "raw")
                        }
                      }
                    }

                    public struct NativePrice: GraphQLSelectionSet {
                      public static let possibleTypes: [String] = ["CurrencyAmount"]

                      public static var selections: [GraphQLSelection] {
                        return [
                          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                          GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                          GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                          GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
                        ]
                      }

                      public private(set) var resultMap: ResultMap

                      public init(unsafeResultMap: ResultMap) {
                        self.resultMap = unsafeResultMap
                      }

                      public init(decimal: Double, raw: String, currency: Currency) {
                        self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
                      }

                      public var __typename: String {
                        get {
                          return resultMap["__typename"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "__typename")
                        }
                      }

                      public var decimal: Double {
                        get {
                          return resultMap["decimal"]! as! Double
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "decimal")
                        }
                      }

                      public var raw: String {
                        get {
                          return resultMap["raw"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "raw")
                        }
                      }

                      public var currency: Currency {
                        get {
                          return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
                        }
                        set {
                          resultMap.updateValue(newValue.resultMap, forKey: "currency")
                        }
                      }

                      public struct Currency: GraphQLSelectionSet {
                        public static let possibleTypes: [String] = ["Currency"]

                        public static var selections: [GraphQLSelection] {
                          return [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("address", type: .nonNull(.scalar(String.self))),
                            GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                            GraphQLField("name", type: .nonNull(.scalar(String.self))),
                          ]
                        }

                        public private(set) var resultMap: ResultMap

                        public init(unsafeResultMap: ResultMap) {
                          self.resultMap = unsafeResultMap
                        }

                        public init(address: String, decimals: Int, name: String) {
                          self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
                        }

                        public var __typename: String {
                          get {
                            return resultMap["__typename"]! as! String
                          }
                          set {
                            resultMap.updateValue(newValue, forKey: "__typename")
                          }
                        }

                        public var address: String {
                          get {
                            return resultMap["address"]! as! String
                          }
                          set {
                            resultMap.updateValue(newValue, forKey: "address")
                          }
                        }

                        public var decimals: Int {
                          get {
                            return resultMap["decimals"]! as! Int
                          }
                          set {
                            resultMap.updateValue(newValue, forKey: "decimals")
                          }
                        }

                        public var name: String {
                          get {
                            return resultMap["name"]! as! String
                          }
                          set {
                            resultMap.updateValue(newValue, forKey: "name")
                          }
                        }
                      }
                    }

                    public struct UsdcPrice: GraphQLSelectionSet {
                      public static let possibleTypes: [String] = ["CurrencyAmount"]

                      public static var selections: [GraphQLSelection] {
                        return [
                          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                          GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                          GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                        ]
                      }

                      public private(set) var resultMap: ResultMap

                      public init(unsafeResultMap: ResultMap) {
                        self.resultMap = unsafeResultMap
                      }

                      public init(decimal: Double, raw: String) {
                        self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                      }

                      public var __typename: String {
                        get {
                          return resultMap["__typename"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "__typename")
                        }
                      }

                      public var decimal: Double {
                        get {
                          return resultMap["decimal"]! as! Double
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "decimal")
                        }
                      }

                      public var raw: String {
                        get {
                          return resultMap["raw"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "raw")
                        }
                      }
                    }
                  }
                }

                public var asV2AuctionCreatedEventProperties: AsV2AuctionCreatedEventProperties? {
                  get {
                    if !AsV2AuctionCreatedEventProperties.possibleTypes.contains(__typename) { return nil }
                    return AsV2AuctionCreatedEventProperties(unsafeResultMap: resultMap)
                  }
                  set {
                    guard let newValue = newValue else { return }
                    resultMap = newValue.resultMap
                  }
                }

                public struct AsV2AuctionCreatedEventProperties: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["V2AuctionCreatedEventProperties"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("auctionCurrency", type: .nonNull(.scalar(String.self))),
                      GraphQLField("tokenOwner", type: .nonNull(.scalar(String.self))),
                      GraphQLField("curator", type: .nonNull(.scalar(String.self))),
                      GraphQLField("curatorFeePercentage", type: .nonNull(.scalar(Int.self))),
                      GraphQLField("duration", type: .nonNull(.scalar(String.self))),
                      GraphQLField("reservePrice", type: .nonNull(.scalar(String.self))),
                      GraphQLField("price", type: .nonNull(.object(Price.selections))),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(auctionCurrency: String, tokenOwner: String, curator: String, curatorFeePercentage: Int, duration: String, reservePrice: String, price: Price) {
                    self.init(unsafeResultMap: ["__typename": "V2AuctionCreatedEventProperties", "auctionCurrency": auctionCurrency, "tokenOwner": tokenOwner, "curator": curator, "curatorFeePercentage": curatorFeePercentage, "duration": duration, "reservePrice": reservePrice, "price": price.resultMap])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var auctionCurrency: String {
                    get {
                      return resultMap["auctionCurrency"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "auctionCurrency")
                    }
                  }

                  public var tokenOwner: String {
                    get {
                      return resultMap["tokenOwner"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "tokenOwner")
                    }
                  }

                  public var curator: String {
                    get {
                      return resultMap["curator"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "curator")
                    }
                  }

                  public var curatorFeePercentage: Int {
                    get {
                      return resultMap["curatorFeePercentage"]! as! Int
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "curatorFeePercentage")
                    }
                  }

                  public var duration: String {
                    get {
                      return resultMap["duration"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "duration")
                    }
                  }

                  public var reservePrice: String {
                    get {
                      return resultMap["reservePrice"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "reservePrice")
                    }
                  }

                  public var price: Price {
                    get {
                      return Price(unsafeResultMap: resultMap["price"]! as! ResultMap)
                    }
                    set {
                      resultMap.updateValue(newValue.resultMap, forKey: "price")
                    }
                  }

                  public var fragments: Fragments {
                    get {
                      return Fragments(unsafeResultMap: resultMap)
                    }
                    set {
                      resultMap += newValue.resultMap
                    }
                  }

                  public struct Fragments {
                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public var v2AuctionEventPropertiesInfo: V2AuctionEventPropertiesInfo {
                      get {
                        return V2AuctionEventPropertiesInfo(unsafeResultMap: resultMap)
                      }
                      set {
                        resultMap += newValue.resultMap
                      }
                    }
                  }

                  public struct Price: GraphQLSelectionSet {
                    public static let possibleTypes: [String] = ["PriceAtTime"]

                    public static var selections: [GraphQLSelection] {
                      return [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                        GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
                        GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
                        GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
                      ]
                    }

                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
                      self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
                    }

                    public var __typename: String {
                      get {
                        return resultMap["__typename"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "__typename")
                      }
                    }

                    public var blockNumber: Int {
                      get {
                        return resultMap["blockNumber"]! as! Int
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "blockNumber")
                      }
                    }

                    public var chainTokenPrice: ChainTokenPrice? {
                      get {
                        return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
                      }
                      set {
                        resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
                      }
                    }

                    public var nativePrice: NativePrice {
                      get {
                        return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
                      }
                      set {
                        resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
                      }
                    }

                    public var usdcPrice: UsdcPrice? {
                      get {
                        return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
                      }
                      set {
                        resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
                      }
                    }

                    public var fragments: Fragments {
                      get {
                        return Fragments(unsafeResultMap: resultMap)
                      }
                      set {
                        resultMap += newValue.resultMap
                      }
                    }

                    public struct Fragments {
                      public private(set) var resultMap: ResultMap

                      public init(unsafeResultMap: ResultMap) {
                        self.resultMap = unsafeResultMap
                      }

                      public var priceSummary: PriceSummary {
                        get {
                          return PriceSummary(unsafeResultMap: resultMap)
                        }
                        set {
                          resultMap += newValue.resultMap
                        }
                      }
                    }

                    public struct ChainTokenPrice: GraphQLSelectionSet {
                      public static let possibleTypes: [String] = ["CurrencyAmount"]

                      public static var selections: [GraphQLSelection] {
                        return [
                          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                          GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                          GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                        ]
                      }

                      public private(set) var resultMap: ResultMap

                      public init(unsafeResultMap: ResultMap) {
                        self.resultMap = unsafeResultMap
                      }

                      public init(decimal: Double, raw: String) {
                        self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                      }

                      public var __typename: String {
                        get {
                          return resultMap["__typename"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "__typename")
                        }
                      }

                      public var decimal: Double {
                        get {
                          return resultMap["decimal"]! as! Double
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "decimal")
                        }
                      }

                      public var raw: String {
                        get {
                          return resultMap["raw"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "raw")
                        }
                      }
                    }

                    public struct NativePrice: GraphQLSelectionSet {
                      public static let possibleTypes: [String] = ["CurrencyAmount"]

                      public static var selections: [GraphQLSelection] {
                        return [
                          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                          GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                          GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                          GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
                        ]
                      }

                      public private(set) var resultMap: ResultMap

                      public init(unsafeResultMap: ResultMap) {
                        self.resultMap = unsafeResultMap
                      }

                      public init(decimal: Double, raw: String, currency: Currency) {
                        self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
                      }

                      public var __typename: String {
                        get {
                          return resultMap["__typename"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "__typename")
                        }
                      }

                      public var decimal: Double {
                        get {
                          return resultMap["decimal"]! as! Double
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "decimal")
                        }
                      }

                      public var raw: String {
                        get {
                          return resultMap["raw"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "raw")
                        }
                      }

                      public var currency: Currency {
                        get {
                          return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
                        }
                        set {
                          resultMap.updateValue(newValue.resultMap, forKey: "currency")
                        }
                      }

                      public struct Currency: GraphQLSelectionSet {
                        public static let possibleTypes: [String] = ["Currency"]

                        public static var selections: [GraphQLSelection] {
                          return [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("address", type: .nonNull(.scalar(String.self))),
                            GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                            GraphQLField("name", type: .nonNull(.scalar(String.self))),
                          ]
                        }

                        public private(set) var resultMap: ResultMap

                        public init(unsafeResultMap: ResultMap) {
                          self.resultMap = unsafeResultMap
                        }

                        public init(address: String, decimals: Int, name: String) {
                          self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
                        }

                        public var __typename: String {
                          get {
                            return resultMap["__typename"]! as! String
                          }
                          set {
                            resultMap.updateValue(newValue, forKey: "__typename")
                          }
                        }

                        public var address: String {
                          get {
                            return resultMap["address"]! as! String
                          }
                          set {
                            resultMap.updateValue(newValue, forKey: "address")
                          }
                        }

                        public var decimals: Int {
                          get {
                            return resultMap["decimals"]! as! Int
                          }
                          set {
                            resultMap.updateValue(newValue, forKey: "decimals")
                          }
                        }

                        public var name: String {
                          get {
                            return resultMap["name"]! as! String
                          }
                          set {
                            resultMap.updateValue(newValue, forKey: "name")
                          }
                        }
                      }
                    }

                    public struct UsdcPrice: GraphQLSelectionSet {
                      public static let possibleTypes: [String] = ["CurrencyAmount"]

                      public static var selections: [GraphQLSelection] {
                        return [
                          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                          GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                          GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                        ]
                      }

                      public private(set) var resultMap: ResultMap

                      public init(unsafeResultMap: ResultMap) {
                        self.resultMap = unsafeResultMap
                      }

                      public init(decimal: Double, raw: String) {
                        self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                      }

                      public var __typename: String {
                        get {
                          return resultMap["__typename"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "__typename")
                        }
                      }

                      public var decimal: Double {
                        get {
                          return resultMap["decimal"]! as! Double
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "decimal")
                        }
                      }

                      public var raw: String {
                        get {
                          return resultMap["raw"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "raw")
                        }
                      }
                    }
                  }
                }

                public var asV2AuctionCanceledEventProperties: AsV2AuctionCanceledEventProperties? {
                  get {
                    if !AsV2AuctionCanceledEventProperties.possibleTypes.contains(__typename) { return nil }
                    return AsV2AuctionCanceledEventProperties(unsafeResultMap: resultMap)
                  }
                  set {
                    guard let newValue = newValue else { return }
                    resultMap = newValue.resultMap
                  }
                }

                public struct AsV2AuctionCanceledEventProperties: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["V2AuctionCanceledEventProperties"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("tokenOwner", type: .nonNull(.scalar(String.self))),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(tokenOwner: String) {
                    self.init(unsafeResultMap: ["__typename": "V2AuctionCanceledEventProperties", "tokenOwner": tokenOwner])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var tokenOwner: String {
                    get {
                      return resultMap["tokenOwner"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "tokenOwner")
                    }
                  }

                  public var fragments: Fragments {
                    get {
                      return Fragments(unsafeResultMap: resultMap)
                    }
                    set {
                      resultMap += newValue.resultMap
                    }
                  }

                  public struct Fragments {
                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public var v2AuctionEventPropertiesInfo: V2AuctionEventPropertiesInfo {
                      get {
                        return V2AuctionEventPropertiesInfo(unsafeResultMap: resultMap)
                      }
                      set {
                        resultMap += newValue.resultMap
                      }
                    }
                  }
                }

                public var asV2AuctionDurationExtendedEventProperties: AsV2AuctionDurationExtendedEventProperties? {
                  get {
                    if !AsV2AuctionDurationExtendedEventProperties.possibleTypes.contains(__typename) { return nil }
                    return AsV2AuctionDurationExtendedEventProperties(unsafeResultMap: resultMap)
                  }
                  set {
                    guard let newValue = newValue else { return }
                    resultMap = newValue.resultMap
                  }
                }

                public struct AsV2AuctionDurationExtendedEventProperties: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["V2AuctionDurationExtendedEventProperties"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("duration", type: .nonNull(.scalar(String.self))),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(duration: String) {
                    self.init(unsafeResultMap: ["__typename": "V2AuctionDurationExtendedEventProperties", "duration": duration])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var duration: String {
                    get {
                      return resultMap["duration"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "duration")
                    }
                  }

                  public var fragments: Fragments {
                    get {
                      return Fragments(unsafeResultMap: resultMap)
                    }
                    set {
                      resultMap += newValue.resultMap
                    }
                  }

                  public struct Fragments {
                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public var v2AuctionEventPropertiesInfo: V2AuctionEventPropertiesInfo {
                      get {
                        return V2AuctionEventPropertiesInfo(unsafeResultMap: resultMap)
                      }
                      set {
                        resultMap += newValue.resultMap
                      }
                    }
                  }
                }

                public var asV2AuctionEndedEventProperties: AsV2AuctionEndedEventProperties? {
                  get {
                    if !AsV2AuctionEndedEventProperties.possibleTypes.contains(__typename) { return nil }
                    return AsV2AuctionEndedEventProperties(unsafeResultMap: resultMap)
                  }
                  set {
                    guard let newValue = newValue else { return }
                    resultMap = newValue.resultMap
                  }
                }

                public struct AsV2AuctionEndedEventProperties: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["V2AuctionEndedEventProperties"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("tokenOwner", type: .nonNull(.scalar(String.self))),
                      GraphQLField("curator", type: .nonNull(.scalar(String.self))),
                      GraphQLField("winner", type: .nonNull(.scalar(String.self))),
                      GraphQLField("auctionCurrency", type: .nonNull(.scalar(String.self))),
                      GraphQLField("amount", type: .nonNull(.scalar(String.self))),
                      GraphQLField("curatorFee", type: .nonNull(.scalar(String.self))),
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("tokenOwner", type: .nonNull(.scalar(String.self))),
                      GraphQLField("curator", type: .nonNull(.scalar(String.self))),
                      GraphQLField("winner", type: .nonNull(.scalar(String.self))),
                      GraphQLField("auctionCurrency", type: .nonNull(.scalar(String.self))),
                      GraphQLField("amount", type: .nonNull(.scalar(String.self))),
                      GraphQLField("curatorFee", type: .nonNull(.scalar(String.self))),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(tokenOwner: String, curator: String, winner: String, auctionCurrency: String, amount: String, curatorFee: String) {
                    self.init(unsafeResultMap: ["__typename": "V2AuctionEndedEventProperties", "tokenOwner": tokenOwner, "curator": curator, "winner": winner, "auctionCurrency": auctionCurrency, "amount": amount, "curatorFee": curatorFee])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var tokenOwner: String {
                    get {
                      return resultMap["tokenOwner"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "tokenOwner")
                    }
                  }

                  public var curator: String {
                    get {
                      return resultMap["curator"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "curator")
                    }
                  }

                  public var winner: String {
                    get {
                      return resultMap["winner"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "winner")
                    }
                  }

                  public var auctionCurrency: String {
                    get {
                      return resultMap["auctionCurrency"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "auctionCurrency")
                    }
                  }

                  public var amount: String {
                    get {
                      return resultMap["amount"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "amount")
                    }
                  }

                  public var curatorFee: String {
                    get {
                      return resultMap["curatorFee"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "curatorFee")
                    }
                  }

                  public var fragments: Fragments {
                    get {
                      return Fragments(unsafeResultMap: resultMap)
                    }
                    set {
                      resultMap += newValue.resultMap
                    }
                  }

                  public struct Fragments {
                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public var v2AuctionEventPropertiesInfo: V2AuctionEventPropertiesInfo {
                      get {
                        return V2AuctionEventPropertiesInfo(unsafeResultMap: resultMap)
                      }
                      set {
                        resultMap += newValue.resultMap
                      }
                    }
                  }
                }

                public var asV2AuctionReservePriceUpdatedEventProperties: AsV2AuctionReservePriceUpdatedEventProperties? {
                  get {
                    if !AsV2AuctionReservePriceUpdatedEventProperties.possibleTypes.contains(__typename) { return nil }
                    return AsV2AuctionReservePriceUpdatedEventProperties(unsafeResultMap: resultMap)
                  }
                  set {
                    guard let newValue = newValue else { return }
                    resultMap = newValue.resultMap
                  }
                }

                public struct AsV2AuctionReservePriceUpdatedEventProperties: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["V2AuctionReservePriceUpdatedEventProperties"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("reservePrice", type: .nonNull(.scalar(String.self))),
                      GraphQLField("price", type: .nonNull(.object(Price.selections))),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(reservePrice: String, price: Price) {
                    self.init(unsafeResultMap: ["__typename": "V2AuctionReservePriceUpdatedEventProperties", "reservePrice": reservePrice, "price": price.resultMap])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var reservePrice: String {
                    get {
                      return resultMap["reservePrice"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "reservePrice")
                    }
                  }

                  public var price: Price {
                    get {
                      return Price(unsafeResultMap: resultMap["price"]! as! ResultMap)
                    }
                    set {
                      resultMap.updateValue(newValue.resultMap, forKey: "price")
                    }
                  }

                  public var fragments: Fragments {
                    get {
                      return Fragments(unsafeResultMap: resultMap)
                    }
                    set {
                      resultMap += newValue.resultMap
                    }
                  }

                  public struct Fragments {
                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public var v2AuctionEventPropertiesInfo: V2AuctionEventPropertiesInfo {
                      get {
                        return V2AuctionEventPropertiesInfo(unsafeResultMap: resultMap)
                      }
                      set {
                        resultMap += newValue.resultMap
                      }
                    }
                  }

                  public struct Price: GraphQLSelectionSet {
                    public static let possibleTypes: [String] = ["PriceAtTime"]

                    public static var selections: [GraphQLSelection] {
                      return [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                        GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
                        GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
                        GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
                      ]
                    }

                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
                      self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
                    }

                    public var __typename: String {
                      get {
                        return resultMap["__typename"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "__typename")
                      }
                    }

                    public var blockNumber: Int {
                      get {
                        return resultMap["blockNumber"]! as! Int
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "blockNumber")
                      }
                    }

                    public var chainTokenPrice: ChainTokenPrice? {
                      get {
                        return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
                      }
                      set {
                        resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
                      }
                    }

                    public var nativePrice: NativePrice {
                      get {
                        return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
                      }
                      set {
                        resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
                      }
                    }

                    public var usdcPrice: UsdcPrice? {
                      get {
                        return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
                      }
                      set {
                        resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
                      }
                    }

                    public var fragments: Fragments {
                      get {
                        return Fragments(unsafeResultMap: resultMap)
                      }
                      set {
                        resultMap += newValue.resultMap
                      }
                    }

                    public struct Fragments {
                      public private(set) var resultMap: ResultMap

                      public init(unsafeResultMap: ResultMap) {
                        self.resultMap = unsafeResultMap
                      }

                      public var priceSummary: PriceSummary {
                        get {
                          return PriceSummary(unsafeResultMap: resultMap)
                        }
                        set {
                          resultMap += newValue.resultMap
                        }
                      }
                    }

                    public struct ChainTokenPrice: GraphQLSelectionSet {
                      public static let possibleTypes: [String] = ["CurrencyAmount"]

                      public static var selections: [GraphQLSelection] {
                        return [
                          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                          GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                          GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                        ]
                      }

                      public private(set) var resultMap: ResultMap

                      public init(unsafeResultMap: ResultMap) {
                        self.resultMap = unsafeResultMap
                      }

                      public init(decimal: Double, raw: String) {
                        self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                      }

                      public var __typename: String {
                        get {
                          return resultMap["__typename"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "__typename")
                        }
                      }

                      public var decimal: Double {
                        get {
                          return resultMap["decimal"]! as! Double
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "decimal")
                        }
                      }

                      public var raw: String {
                        get {
                          return resultMap["raw"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "raw")
                        }
                      }
                    }

                    public struct NativePrice: GraphQLSelectionSet {
                      public static let possibleTypes: [String] = ["CurrencyAmount"]

                      public static var selections: [GraphQLSelection] {
                        return [
                          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                          GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                          GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                          GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
                        ]
                      }

                      public private(set) var resultMap: ResultMap

                      public init(unsafeResultMap: ResultMap) {
                        self.resultMap = unsafeResultMap
                      }

                      public init(decimal: Double, raw: String, currency: Currency) {
                        self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
                      }

                      public var __typename: String {
                        get {
                          return resultMap["__typename"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "__typename")
                        }
                      }

                      public var decimal: Double {
                        get {
                          return resultMap["decimal"]! as! Double
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "decimal")
                        }
                      }

                      public var raw: String {
                        get {
                          return resultMap["raw"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "raw")
                        }
                      }

                      public var currency: Currency {
                        get {
                          return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
                        }
                        set {
                          resultMap.updateValue(newValue.resultMap, forKey: "currency")
                        }
                      }

                      public struct Currency: GraphQLSelectionSet {
                        public static let possibleTypes: [String] = ["Currency"]

                        public static var selections: [GraphQLSelection] {
                          return [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("address", type: .nonNull(.scalar(String.self))),
                            GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                            GraphQLField("name", type: .nonNull(.scalar(String.self))),
                          ]
                        }

                        public private(set) var resultMap: ResultMap

                        public init(unsafeResultMap: ResultMap) {
                          self.resultMap = unsafeResultMap
                        }

                        public init(address: String, decimals: Int, name: String) {
                          self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
                        }

                        public var __typename: String {
                          get {
                            return resultMap["__typename"]! as! String
                          }
                          set {
                            resultMap.updateValue(newValue, forKey: "__typename")
                          }
                        }

                        public var address: String {
                          get {
                            return resultMap["address"]! as! String
                          }
                          set {
                            resultMap.updateValue(newValue, forKey: "address")
                          }
                        }

                        public var decimals: Int {
                          get {
                            return resultMap["decimals"]! as! Int
                          }
                          set {
                            resultMap.updateValue(newValue, forKey: "decimals")
                          }
                        }

                        public var name: String {
                          get {
                            return resultMap["name"]! as! String
                          }
                          set {
                            resultMap.updateValue(newValue, forKey: "name")
                          }
                        }
                      }
                    }

                    public struct UsdcPrice: GraphQLSelectionSet {
                      public static let possibleTypes: [String] = ["CurrencyAmount"]

                      public static var selections: [GraphQLSelection] {
                        return [
                          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                          GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                          GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                        ]
                      }

                      public private(set) var resultMap: ResultMap

                      public init(unsafeResultMap: ResultMap) {
                        self.resultMap = unsafeResultMap
                      }

                      public init(decimal: Double, raw: String) {
                        self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                      }

                      public var __typename: String {
                        get {
                          return resultMap["__typename"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "__typename")
                        }
                      }

                      public var decimal: Double {
                        get {
                          return resultMap["decimal"]! as! Double
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "decimal")
                        }
                      }

                      public var raw: String {
                        get {
                          return resultMap["raw"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "raw")
                        }
                      }
                    }
                  }
                }

                public var asV2AuctionApprovalUpdatedEventProperties: AsV2AuctionApprovalUpdatedEventProperties? {
                  get {
                    if !AsV2AuctionApprovalUpdatedEventProperties.possibleTypes.contains(__typename) { return nil }
                    return AsV2AuctionApprovalUpdatedEventProperties(unsafeResultMap: resultMap)
                  }
                  set {
                    guard let newValue = newValue else { return }
                    resultMap = newValue.resultMap
                  }
                }

                public struct AsV2AuctionApprovalUpdatedEventProperties: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["V2AuctionApprovalUpdatedEventProperties"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("approved", type: .nonNull(.scalar(Bool.self))),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(approved: Bool) {
                    self.init(unsafeResultMap: ["__typename": "V2AuctionApprovalUpdatedEventProperties", "approved": approved])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var approved: Bool {
                    get {
                      return resultMap["approved"]! as! Bool
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "approved")
                    }
                  }

                  public var fragments: Fragments {
                    get {
                      return Fragments(unsafeResultMap: resultMap)
                    }
                    set {
                      resultMap += newValue.resultMap
                    }
                  }

                  public struct Fragments {
                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public var v2AuctionEventPropertiesInfo: V2AuctionEventPropertiesInfo {
                      get {
                        return V2AuctionEventPropertiesInfo(unsafeResultMap: resultMap)
                      }
                      set {
                        resultMap += newValue.resultMap
                      }
                    }
                  }
                }
              }
            }

            public var asV3AskEvent: AsV3AskEvent? {
              get {
                if !AsV3AskEvent.possibleTypes.contains(__typename) { return nil }
                return AsV3AskEvent(unsafeResultMap: resultMap)
              }
              set {
                guard let newValue = newValue else { return }
                resultMap = newValue.resultMap
              }
            }

            public struct AsV3AskEvent: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["V3AskEvent"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("v3AskEventType", type: .nonNull(.scalar(V3AskEventType.self))),
                  GraphQLField("address", type: .nonNull(.scalar(String.self))),
                  GraphQLField("collectionAddress", type: .nonNull(.scalar(String.self))),
                  GraphQLField("tokenId", type: .nonNull(.scalar(String.self))),
                  GraphQLField("properties", type: .nonNull(.object(Property.selections))),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(v3AskEventType: V3AskEventType, address: String, collectionAddress: String, tokenId: String, properties: Property) {
                self.init(unsafeResultMap: ["__typename": "V3AskEvent", "v3AskEventType": v3AskEventType, "address": address, "collectionAddress": collectionAddress, "tokenId": tokenId, "properties": properties.resultMap])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var v3AskEventType: V3AskEventType {
                get {
                  return resultMap["v3AskEventType"]! as! V3AskEventType
                }
                set {
                  resultMap.updateValue(newValue, forKey: "v3AskEventType")
                }
              }

              public var address: String {
                get {
                  return resultMap["address"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "address")
                }
              }

              public var collectionAddress: String {
                get {
                  return resultMap["collectionAddress"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "collectionAddress")
                }
              }

              public var tokenId: String {
                get {
                  return resultMap["tokenId"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "tokenId")
                }
              }

              public var properties: Property {
                get {
                  return Property(unsafeResultMap: resultMap["properties"]! as! ResultMap)
                }
                set {
                  resultMap.updateValue(newValue.resultMap, forKey: "properties")
                }
              }

              public struct Property: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["V3AskCreatedEventProperties", "V3AskCanceledEventProperties", "V3AskPriceUpdatedEventProperties", "V3AskFilledEventProperties"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLTypeCase(
                      variants: ["V3AskCreatedEventProperties": AsV3AskCreatedEventProperties.selections, "V3AskCanceledEventProperties": AsV3AskCanceledEventProperties.selections, "V3AskPriceUpdatedEventProperties": AsV3AskPriceUpdatedEventProperties.selections, "V3AskFilledEventProperties": AsV3AskFilledEventProperties.selections],
                      default: [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      ]
                    )
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public static func makeV3AskCreatedEventProperties(seller: String, sellerFundsRecipient: String, askCurrency: String, askPrice: String, findersFeeBps: Int, price: AsV3AskCreatedEventProperties.Price) -> Property {
                  return Property(unsafeResultMap: ["__typename": "V3AskCreatedEventProperties", "seller": seller, "sellerFundsRecipient": sellerFundsRecipient, "askCurrency": askCurrency, "askPrice": askPrice, "findersFeeBps": findersFeeBps, "price": price.resultMap])
                }

                public static func makeV3AskCanceledEventProperties(seller: String, sellerFundsRecipient: String, askCurrency: String, askPrice: String, findersFeeBps: Int, price: AsV3AskCanceledEventProperties.Price) -> Property {
                  return Property(unsafeResultMap: ["__typename": "V3AskCanceledEventProperties", "seller": seller, "sellerFundsRecipient": sellerFundsRecipient, "askCurrency": askCurrency, "askPrice": askPrice, "findersFeeBps": findersFeeBps, "price": price.resultMap])
                }

                public static func makeV3AskPriceUpdatedEventProperties(seller: String, sellerFundsRecipient: String, askCurrency: String, askPrice: String, findersFeeBps: Int, price: AsV3AskPriceUpdatedEventProperties.Price) -> Property {
                  return Property(unsafeResultMap: ["__typename": "V3AskPriceUpdatedEventProperties", "seller": seller, "sellerFundsRecipient": sellerFundsRecipient, "askCurrency": askCurrency, "askPrice": askPrice, "findersFeeBps": findersFeeBps, "price": price.resultMap])
                }

                public static func makeV3AskFilledEventProperties(seller: String, sellerFundsRecipient: String, askCurrency: String, askPrice: String, findersFeeBps: Int, price: AsV3AskFilledEventProperties.Price, finder: String, buyer: String) -> Property {
                  return Property(unsafeResultMap: ["__typename": "V3AskFilledEventProperties", "seller": seller, "sellerFundsRecipient": sellerFundsRecipient, "askCurrency": askCurrency, "askPrice": askPrice, "findersFeeBps": findersFeeBps, "price": price.resultMap, "finder": finder, "buyer": buyer])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var fragments: Fragments {
                  get {
                    return Fragments(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }

                public struct Fragments {
                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public var v3AskEventPropertiesInfo: V3AskEventPropertiesInfo {
                    get {
                      return V3AskEventPropertiesInfo(unsafeResultMap: resultMap)
                    }
                    set {
                      resultMap += newValue.resultMap
                    }
                  }
                }

                public var asV3AskCreatedEventProperties: AsV3AskCreatedEventProperties? {
                  get {
                    if !AsV3AskCreatedEventProperties.possibleTypes.contains(__typename) { return nil }
                    return AsV3AskCreatedEventProperties(unsafeResultMap: resultMap)
                  }
                  set {
                    guard let newValue = newValue else { return }
                    resultMap = newValue.resultMap
                  }
                }

                public struct AsV3AskCreatedEventProperties: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["V3AskCreatedEventProperties"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("seller", type: .nonNull(.scalar(String.self))),
                      GraphQLField("sellerFundsRecipient", type: .nonNull(.scalar(String.self))),
                      GraphQLField("askCurrency", type: .nonNull(.scalar(String.self))),
                      GraphQLField("askPrice", type: .nonNull(.scalar(String.self))),
                      GraphQLField("findersFeeBps", type: .nonNull(.scalar(Int.self))),
                      GraphQLField("price", type: .nonNull(.object(Price.selections))),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(seller: String, sellerFundsRecipient: String, askCurrency: String, askPrice: String, findersFeeBps: Int, price: Price) {
                    self.init(unsafeResultMap: ["__typename": "V3AskCreatedEventProperties", "seller": seller, "sellerFundsRecipient": sellerFundsRecipient, "askCurrency": askCurrency, "askPrice": askPrice, "findersFeeBps": findersFeeBps, "price": price.resultMap])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var seller: String {
                    get {
                      return resultMap["seller"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "seller")
                    }
                  }

                  public var sellerFundsRecipient: String {
                    get {
                      return resultMap["sellerFundsRecipient"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "sellerFundsRecipient")
                    }
                  }

                  public var askCurrency: String {
                    get {
                      return resultMap["askCurrency"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "askCurrency")
                    }
                  }

                  public var askPrice: String {
                    get {
                      return resultMap["askPrice"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "askPrice")
                    }
                  }

                  public var findersFeeBps: Int {
                    get {
                      return resultMap["findersFeeBps"]! as! Int
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "findersFeeBps")
                    }
                  }

                  public var price: Price {
                    get {
                      return Price(unsafeResultMap: resultMap["price"]! as! ResultMap)
                    }
                    set {
                      resultMap.updateValue(newValue.resultMap, forKey: "price")
                    }
                  }

                  public var fragments: Fragments {
                    get {
                      return Fragments(unsafeResultMap: resultMap)
                    }
                    set {
                      resultMap += newValue.resultMap
                    }
                  }

                  public struct Fragments {
                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public var v3AskEventPropertiesInfo: V3AskEventPropertiesInfo {
                      get {
                        return V3AskEventPropertiesInfo(unsafeResultMap: resultMap)
                      }
                      set {
                        resultMap += newValue.resultMap
                      }
                    }
                  }

                  public struct Price: GraphQLSelectionSet {
                    public static let possibleTypes: [String] = ["PriceAtTime"]

                    public static var selections: [GraphQLSelection] {
                      return [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                        GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
                        GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
                        GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
                      ]
                    }

                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
                      self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
                    }

                    public var __typename: String {
                      get {
                        return resultMap["__typename"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "__typename")
                      }
                    }

                    public var blockNumber: Int {
                      get {
                        return resultMap["blockNumber"]! as! Int
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "blockNumber")
                      }
                    }

                    public var chainTokenPrice: ChainTokenPrice? {
                      get {
                        return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
                      }
                      set {
                        resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
                      }
                    }

                    public var nativePrice: NativePrice {
                      get {
                        return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
                      }
                      set {
                        resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
                      }
                    }

                    public var usdcPrice: UsdcPrice? {
                      get {
                        return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
                      }
                      set {
                        resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
                      }
                    }

                    public var fragments: Fragments {
                      get {
                        return Fragments(unsafeResultMap: resultMap)
                      }
                      set {
                        resultMap += newValue.resultMap
                      }
                    }

                    public struct Fragments {
                      public private(set) var resultMap: ResultMap

                      public init(unsafeResultMap: ResultMap) {
                        self.resultMap = unsafeResultMap
                      }

                      public var priceSummary: PriceSummary {
                        get {
                          return PriceSummary(unsafeResultMap: resultMap)
                        }
                        set {
                          resultMap += newValue.resultMap
                        }
                      }
                    }

                    public struct ChainTokenPrice: GraphQLSelectionSet {
                      public static let possibleTypes: [String] = ["CurrencyAmount"]

                      public static var selections: [GraphQLSelection] {
                        return [
                          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                          GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                          GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                        ]
                      }

                      public private(set) var resultMap: ResultMap

                      public init(unsafeResultMap: ResultMap) {
                        self.resultMap = unsafeResultMap
                      }

                      public init(decimal: Double, raw: String) {
                        self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                      }

                      public var __typename: String {
                        get {
                          return resultMap["__typename"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "__typename")
                        }
                      }

                      public var decimal: Double {
                        get {
                          return resultMap["decimal"]! as! Double
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "decimal")
                        }
                      }

                      public var raw: String {
                        get {
                          return resultMap["raw"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "raw")
                        }
                      }
                    }

                    public struct NativePrice: GraphQLSelectionSet {
                      public static let possibleTypes: [String] = ["CurrencyAmount"]

                      public static var selections: [GraphQLSelection] {
                        return [
                          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                          GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                          GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                          GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
                        ]
                      }

                      public private(set) var resultMap: ResultMap

                      public init(unsafeResultMap: ResultMap) {
                        self.resultMap = unsafeResultMap
                      }

                      public init(decimal: Double, raw: String, currency: Currency) {
                        self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
                      }

                      public var __typename: String {
                        get {
                          return resultMap["__typename"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "__typename")
                        }
                      }

                      public var decimal: Double {
                        get {
                          return resultMap["decimal"]! as! Double
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "decimal")
                        }
                      }

                      public var raw: String {
                        get {
                          return resultMap["raw"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "raw")
                        }
                      }

                      public var currency: Currency {
                        get {
                          return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
                        }
                        set {
                          resultMap.updateValue(newValue.resultMap, forKey: "currency")
                        }
                      }

                      public struct Currency: GraphQLSelectionSet {
                        public static let possibleTypes: [String] = ["Currency"]

                        public static var selections: [GraphQLSelection] {
                          return [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("address", type: .nonNull(.scalar(String.self))),
                            GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                            GraphQLField("name", type: .nonNull(.scalar(String.self))),
                          ]
                        }

                        public private(set) var resultMap: ResultMap

                        public init(unsafeResultMap: ResultMap) {
                          self.resultMap = unsafeResultMap
                        }

                        public init(address: String, decimals: Int, name: String) {
                          self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
                        }

                        public var __typename: String {
                          get {
                            return resultMap["__typename"]! as! String
                          }
                          set {
                            resultMap.updateValue(newValue, forKey: "__typename")
                          }
                        }

                        public var address: String {
                          get {
                            return resultMap["address"]! as! String
                          }
                          set {
                            resultMap.updateValue(newValue, forKey: "address")
                          }
                        }

                        public var decimals: Int {
                          get {
                            return resultMap["decimals"]! as! Int
                          }
                          set {
                            resultMap.updateValue(newValue, forKey: "decimals")
                          }
                        }

                        public var name: String {
                          get {
                            return resultMap["name"]! as! String
                          }
                          set {
                            resultMap.updateValue(newValue, forKey: "name")
                          }
                        }
                      }
                    }

                    public struct UsdcPrice: GraphQLSelectionSet {
                      public static let possibleTypes: [String] = ["CurrencyAmount"]

                      public static var selections: [GraphQLSelection] {
                        return [
                          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                          GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                          GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                        ]
                      }

                      public private(set) var resultMap: ResultMap

                      public init(unsafeResultMap: ResultMap) {
                        self.resultMap = unsafeResultMap
                      }

                      public init(decimal: Double, raw: String) {
                        self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                      }

                      public var __typename: String {
                        get {
                          return resultMap["__typename"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "__typename")
                        }
                      }

                      public var decimal: Double {
                        get {
                          return resultMap["decimal"]! as! Double
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "decimal")
                        }
                      }

                      public var raw: String {
                        get {
                          return resultMap["raw"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "raw")
                        }
                      }
                    }
                  }
                }

                public var asV3AskCanceledEventProperties: AsV3AskCanceledEventProperties? {
                  get {
                    if !AsV3AskCanceledEventProperties.possibleTypes.contains(__typename) { return nil }
                    return AsV3AskCanceledEventProperties(unsafeResultMap: resultMap)
                  }
                  set {
                    guard let newValue = newValue else { return }
                    resultMap = newValue.resultMap
                  }
                }

                public struct AsV3AskCanceledEventProperties: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["V3AskCanceledEventProperties"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("seller", type: .nonNull(.scalar(String.self))),
                      GraphQLField("sellerFundsRecipient", type: .nonNull(.scalar(String.self))),
                      GraphQLField("askCurrency", type: .nonNull(.scalar(String.self))),
                      GraphQLField("askPrice", type: .nonNull(.scalar(String.self))),
                      GraphQLField("findersFeeBps", type: .nonNull(.scalar(Int.self))),
                      GraphQLField("price", type: .nonNull(.object(Price.selections))),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(seller: String, sellerFundsRecipient: String, askCurrency: String, askPrice: String, findersFeeBps: Int, price: Price) {
                    self.init(unsafeResultMap: ["__typename": "V3AskCanceledEventProperties", "seller": seller, "sellerFundsRecipient": sellerFundsRecipient, "askCurrency": askCurrency, "askPrice": askPrice, "findersFeeBps": findersFeeBps, "price": price.resultMap])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var seller: String {
                    get {
                      return resultMap["seller"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "seller")
                    }
                  }

                  public var sellerFundsRecipient: String {
                    get {
                      return resultMap["sellerFundsRecipient"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "sellerFundsRecipient")
                    }
                  }

                  public var askCurrency: String {
                    get {
                      return resultMap["askCurrency"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "askCurrency")
                    }
                  }

                  public var askPrice: String {
                    get {
                      return resultMap["askPrice"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "askPrice")
                    }
                  }

                  public var findersFeeBps: Int {
                    get {
                      return resultMap["findersFeeBps"]! as! Int
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "findersFeeBps")
                    }
                  }

                  public var price: Price {
                    get {
                      return Price(unsafeResultMap: resultMap["price"]! as! ResultMap)
                    }
                    set {
                      resultMap.updateValue(newValue.resultMap, forKey: "price")
                    }
                  }

                  public var fragments: Fragments {
                    get {
                      return Fragments(unsafeResultMap: resultMap)
                    }
                    set {
                      resultMap += newValue.resultMap
                    }
                  }

                  public struct Fragments {
                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public var v3AskEventPropertiesInfo: V3AskEventPropertiesInfo {
                      get {
                        return V3AskEventPropertiesInfo(unsafeResultMap: resultMap)
                      }
                      set {
                        resultMap += newValue.resultMap
                      }
                    }
                  }

                  public struct Price: GraphQLSelectionSet {
                    public static let possibleTypes: [String] = ["PriceAtTime"]

                    public static var selections: [GraphQLSelection] {
                      return [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                        GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
                        GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
                        GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
                      ]
                    }

                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
                      self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
                    }

                    public var __typename: String {
                      get {
                        return resultMap["__typename"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "__typename")
                      }
                    }

                    public var blockNumber: Int {
                      get {
                        return resultMap["blockNumber"]! as! Int
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "blockNumber")
                      }
                    }

                    public var chainTokenPrice: ChainTokenPrice? {
                      get {
                        return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
                      }
                      set {
                        resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
                      }
                    }

                    public var nativePrice: NativePrice {
                      get {
                        return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
                      }
                      set {
                        resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
                      }
                    }

                    public var usdcPrice: UsdcPrice? {
                      get {
                        return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
                      }
                      set {
                        resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
                      }
                    }

                    public var fragments: Fragments {
                      get {
                        return Fragments(unsafeResultMap: resultMap)
                      }
                      set {
                        resultMap += newValue.resultMap
                      }
                    }

                    public struct Fragments {
                      public private(set) var resultMap: ResultMap

                      public init(unsafeResultMap: ResultMap) {
                        self.resultMap = unsafeResultMap
                      }

                      public var priceSummary: PriceSummary {
                        get {
                          return PriceSummary(unsafeResultMap: resultMap)
                        }
                        set {
                          resultMap += newValue.resultMap
                        }
                      }
                    }

                    public struct ChainTokenPrice: GraphQLSelectionSet {
                      public static let possibleTypes: [String] = ["CurrencyAmount"]

                      public static var selections: [GraphQLSelection] {
                        return [
                          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                          GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                          GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                        ]
                      }

                      public private(set) var resultMap: ResultMap

                      public init(unsafeResultMap: ResultMap) {
                        self.resultMap = unsafeResultMap
                      }

                      public init(decimal: Double, raw: String) {
                        self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                      }

                      public var __typename: String {
                        get {
                          return resultMap["__typename"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "__typename")
                        }
                      }

                      public var decimal: Double {
                        get {
                          return resultMap["decimal"]! as! Double
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "decimal")
                        }
                      }

                      public var raw: String {
                        get {
                          return resultMap["raw"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "raw")
                        }
                      }
                    }

                    public struct NativePrice: GraphQLSelectionSet {
                      public static let possibleTypes: [String] = ["CurrencyAmount"]

                      public static var selections: [GraphQLSelection] {
                        return [
                          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                          GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                          GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                          GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
                        ]
                      }

                      public private(set) var resultMap: ResultMap

                      public init(unsafeResultMap: ResultMap) {
                        self.resultMap = unsafeResultMap
                      }

                      public init(decimal: Double, raw: String, currency: Currency) {
                        self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
                      }

                      public var __typename: String {
                        get {
                          return resultMap["__typename"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "__typename")
                        }
                      }

                      public var decimal: Double {
                        get {
                          return resultMap["decimal"]! as! Double
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "decimal")
                        }
                      }

                      public var raw: String {
                        get {
                          return resultMap["raw"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "raw")
                        }
                      }

                      public var currency: Currency {
                        get {
                          return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
                        }
                        set {
                          resultMap.updateValue(newValue.resultMap, forKey: "currency")
                        }
                      }

                      public struct Currency: GraphQLSelectionSet {
                        public static let possibleTypes: [String] = ["Currency"]

                        public static var selections: [GraphQLSelection] {
                          return [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("address", type: .nonNull(.scalar(String.self))),
                            GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                            GraphQLField("name", type: .nonNull(.scalar(String.self))),
                          ]
                        }

                        public private(set) var resultMap: ResultMap

                        public init(unsafeResultMap: ResultMap) {
                          self.resultMap = unsafeResultMap
                        }

                        public init(address: String, decimals: Int, name: String) {
                          self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
                        }

                        public var __typename: String {
                          get {
                            return resultMap["__typename"]! as! String
                          }
                          set {
                            resultMap.updateValue(newValue, forKey: "__typename")
                          }
                        }

                        public var address: String {
                          get {
                            return resultMap["address"]! as! String
                          }
                          set {
                            resultMap.updateValue(newValue, forKey: "address")
                          }
                        }

                        public var decimals: Int {
                          get {
                            return resultMap["decimals"]! as! Int
                          }
                          set {
                            resultMap.updateValue(newValue, forKey: "decimals")
                          }
                        }

                        public var name: String {
                          get {
                            return resultMap["name"]! as! String
                          }
                          set {
                            resultMap.updateValue(newValue, forKey: "name")
                          }
                        }
                      }
                    }

                    public struct UsdcPrice: GraphQLSelectionSet {
                      public static let possibleTypes: [String] = ["CurrencyAmount"]

                      public static var selections: [GraphQLSelection] {
                        return [
                          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                          GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                          GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                        ]
                      }

                      public private(set) var resultMap: ResultMap

                      public init(unsafeResultMap: ResultMap) {
                        self.resultMap = unsafeResultMap
                      }

                      public init(decimal: Double, raw: String) {
                        self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                      }

                      public var __typename: String {
                        get {
                          return resultMap["__typename"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "__typename")
                        }
                      }

                      public var decimal: Double {
                        get {
                          return resultMap["decimal"]! as! Double
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "decimal")
                        }
                      }

                      public var raw: String {
                        get {
                          return resultMap["raw"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "raw")
                        }
                      }
                    }
                  }
                }

                public var asV3AskPriceUpdatedEventProperties: AsV3AskPriceUpdatedEventProperties? {
                  get {
                    if !AsV3AskPriceUpdatedEventProperties.possibleTypes.contains(__typename) { return nil }
                    return AsV3AskPriceUpdatedEventProperties(unsafeResultMap: resultMap)
                  }
                  set {
                    guard let newValue = newValue else { return }
                    resultMap = newValue.resultMap
                  }
                }

                public struct AsV3AskPriceUpdatedEventProperties: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["V3AskPriceUpdatedEventProperties"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("seller", type: .nonNull(.scalar(String.self))),
                      GraphQLField("sellerFundsRecipient", type: .nonNull(.scalar(String.self))),
                      GraphQLField("askCurrency", type: .nonNull(.scalar(String.self))),
                      GraphQLField("askPrice", type: .nonNull(.scalar(String.self))),
                      GraphQLField("findersFeeBps", type: .nonNull(.scalar(Int.self))),
                      GraphQLField("price", type: .nonNull(.object(Price.selections))),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(seller: String, sellerFundsRecipient: String, askCurrency: String, askPrice: String, findersFeeBps: Int, price: Price) {
                    self.init(unsafeResultMap: ["__typename": "V3AskPriceUpdatedEventProperties", "seller": seller, "sellerFundsRecipient": sellerFundsRecipient, "askCurrency": askCurrency, "askPrice": askPrice, "findersFeeBps": findersFeeBps, "price": price.resultMap])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var seller: String {
                    get {
                      return resultMap["seller"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "seller")
                    }
                  }

                  public var sellerFundsRecipient: String {
                    get {
                      return resultMap["sellerFundsRecipient"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "sellerFundsRecipient")
                    }
                  }

                  public var askCurrency: String {
                    get {
                      return resultMap["askCurrency"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "askCurrency")
                    }
                  }

                  public var askPrice: String {
                    get {
                      return resultMap["askPrice"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "askPrice")
                    }
                  }

                  public var findersFeeBps: Int {
                    get {
                      return resultMap["findersFeeBps"]! as! Int
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "findersFeeBps")
                    }
                  }

                  public var price: Price {
                    get {
                      return Price(unsafeResultMap: resultMap["price"]! as! ResultMap)
                    }
                    set {
                      resultMap.updateValue(newValue.resultMap, forKey: "price")
                    }
                  }

                  public var fragments: Fragments {
                    get {
                      return Fragments(unsafeResultMap: resultMap)
                    }
                    set {
                      resultMap += newValue.resultMap
                    }
                  }

                  public struct Fragments {
                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public var v3AskEventPropertiesInfo: V3AskEventPropertiesInfo {
                      get {
                        return V3AskEventPropertiesInfo(unsafeResultMap: resultMap)
                      }
                      set {
                        resultMap += newValue.resultMap
                      }
                    }
                  }

                  public struct Price: GraphQLSelectionSet {
                    public static let possibleTypes: [String] = ["PriceAtTime"]

                    public static var selections: [GraphQLSelection] {
                      return [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                        GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
                        GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
                        GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
                      ]
                    }

                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
                      self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
                    }

                    public var __typename: String {
                      get {
                        return resultMap["__typename"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "__typename")
                      }
                    }

                    public var blockNumber: Int {
                      get {
                        return resultMap["blockNumber"]! as! Int
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "blockNumber")
                      }
                    }

                    public var chainTokenPrice: ChainTokenPrice? {
                      get {
                        return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
                      }
                      set {
                        resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
                      }
                    }

                    public var nativePrice: NativePrice {
                      get {
                        return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
                      }
                      set {
                        resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
                      }
                    }

                    public var usdcPrice: UsdcPrice? {
                      get {
                        return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
                      }
                      set {
                        resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
                      }
                    }

                    public var fragments: Fragments {
                      get {
                        return Fragments(unsafeResultMap: resultMap)
                      }
                      set {
                        resultMap += newValue.resultMap
                      }
                    }

                    public struct Fragments {
                      public private(set) var resultMap: ResultMap

                      public init(unsafeResultMap: ResultMap) {
                        self.resultMap = unsafeResultMap
                      }

                      public var priceSummary: PriceSummary {
                        get {
                          return PriceSummary(unsafeResultMap: resultMap)
                        }
                        set {
                          resultMap += newValue.resultMap
                        }
                      }
                    }

                    public struct ChainTokenPrice: GraphQLSelectionSet {
                      public static let possibleTypes: [String] = ["CurrencyAmount"]

                      public static var selections: [GraphQLSelection] {
                        return [
                          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                          GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                          GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                        ]
                      }

                      public private(set) var resultMap: ResultMap

                      public init(unsafeResultMap: ResultMap) {
                        self.resultMap = unsafeResultMap
                      }

                      public init(decimal: Double, raw: String) {
                        self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                      }

                      public var __typename: String {
                        get {
                          return resultMap["__typename"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "__typename")
                        }
                      }

                      public var decimal: Double {
                        get {
                          return resultMap["decimal"]! as! Double
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "decimal")
                        }
                      }

                      public var raw: String {
                        get {
                          return resultMap["raw"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "raw")
                        }
                      }
                    }

                    public struct NativePrice: GraphQLSelectionSet {
                      public static let possibleTypes: [String] = ["CurrencyAmount"]

                      public static var selections: [GraphQLSelection] {
                        return [
                          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                          GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                          GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                          GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
                        ]
                      }

                      public private(set) var resultMap: ResultMap

                      public init(unsafeResultMap: ResultMap) {
                        self.resultMap = unsafeResultMap
                      }

                      public init(decimal: Double, raw: String, currency: Currency) {
                        self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
                      }

                      public var __typename: String {
                        get {
                          return resultMap["__typename"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "__typename")
                        }
                      }

                      public var decimal: Double {
                        get {
                          return resultMap["decimal"]! as! Double
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "decimal")
                        }
                      }

                      public var raw: String {
                        get {
                          return resultMap["raw"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "raw")
                        }
                      }

                      public var currency: Currency {
                        get {
                          return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
                        }
                        set {
                          resultMap.updateValue(newValue.resultMap, forKey: "currency")
                        }
                      }

                      public struct Currency: GraphQLSelectionSet {
                        public static let possibleTypes: [String] = ["Currency"]

                        public static var selections: [GraphQLSelection] {
                          return [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("address", type: .nonNull(.scalar(String.self))),
                            GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                            GraphQLField("name", type: .nonNull(.scalar(String.self))),
                          ]
                        }

                        public private(set) var resultMap: ResultMap

                        public init(unsafeResultMap: ResultMap) {
                          self.resultMap = unsafeResultMap
                        }

                        public init(address: String, decimals: Int, name: String) {
                          self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
                        }

                        public var __typename: String {
                          get {
                            return resultMap["__typename"]! as! String
                          }
                          set {
                            resultMap.updateValue(newValue, forKey: "__typename")
                          }
                        }

                        public var address: String {
                          get {
                            return resultMap["address"]! as! String
                          }
                          set {
                            resultMap.updateValue(newValue, forKey: "address")
                          }
                        }

                        public var decimals: Int {
                          get {
                            return resultMap["decimals"]! as! Int
                          }
                          set {
                            resultMap.updateValue(newValue, forKey: "decimals")
                          }
                        }

                        public var name: String {
                          get {
                            return resultMap["name"]! as! String
                          }
                          set {
                            resultMap.updateValue(newValue, forKey: "name")
                          }
                        }
                      }
                    }

                    public struct UsdcPrice: GraphQLSelectionSet {
                      public static let possibleTypes: [String] = ["CurrencyAmount"]

                      public static var selections: [GraphQLSelection] {
                        return [
                          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                          GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                          GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                        ]
                      }

                      public private(set) var resultMap: ResultMap

                      public init(unsafeResultMap: ResultMap) {
                        self.resultMap = unsafeResultMap
                      }

                      public init(decimal: Double, raw: String) {
                        self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                      }

                      public var __typename: String {
                        get {
                          return resultMap["__typename"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "__typename")
                        }
                      }

                      public var decimal: Double {
                        get {
                          return resultMap["decimal"]! as! Double
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "decimal")
                        }
                      }

                      public var raw: String {
                        get {
                          return resultMap["raw"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "raw")
                        }
                      }
                    }
                  }
                }

                public var asV3AskFilledEventProperties: AsV3AskFilledEventProperties? {
                  get {
                    if !AsV3AskFilledEventProperties.possibleTypes.contains(__typename) { return nil }
                    return AsV3AskFilledEventProperties(unsafeResultMap: resultMap)
                  }
                  set {
                    guard let newValue = newValue else { return }
                    resultMap = newValue.resultMap
                  }
                }

                public struct AsV3AskFilledEventProperties: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["V3AskFilledEventProperties"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("seller", type: .nonNull(.scalar(String.self))),
                      GraphQLField("sellerFundsRecipient", type: .nonNull(.scalar(String.self))),
                      GraphQLField("askCurrency", type: .nonNull(.scalar(String.self))),
                      GraphQLField("askPrice", type: .nonNull(.scalar(String.self))),
                      GraphQLField("findersFeeBps", type: .nonNull(.scalar(Int.self))),
                      GraphQLField("price", type: .nonNull(.object(Price.selections))),
                      GraphQLField("finder", type: .nonNull(.scalar(String.self))),
                      GraphQLField("buyer", type: .nonNull(.scalar(String.self))),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(seller: String, sellerFundsRecipient: String, askCurrency: String, askPrice: String, findersFeeBps: Int, price: Price, finder: String, buyer: String) {
                    self.init(unsafeResultMap: ["__typename": "V3AskFilledEventProperties", "seller": seller, "sellerFundsRecipient": sellerFundsRecipient, "askCurrency": askCurrency, "askPrice": askPrice, "findersFeeBps": findersFeeBps, "price": price.resultMap, "finder": finder, "buyer": buyer])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var seller: String {
                    get {
                      return resultMap["seller"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "seller")
                    }
                  }

                  public var sellerFundsRecipient: String {
                    get {
                      return resultMap["sellerFundsRecipient"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "sellerFundsRecipient")
                    }
                  }

                  public var askCurrency: String {
                    get {
                      return resultMap["askCurrency"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "askCurrency")
                    }
                  }

                  public var askPrice: String {
                    get {
                      return resultMap["askPrice"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "askPrice")
                    }
                  }

                  public var findersFeeBps: Int {
                    get {
                      return resultMap["findersFeeBps"]! as! Int
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "findersFeeBps")
                    }
                  }

                  public var price: Price {
                    get {
                      return Price(unsafeResultMap: resultMap["price"]! as! ResultMap)
                    }
                    set {
                      resultMap.updateValue(newValue.resultMap, forKey: "price")
                    }
                  }

                  public var finder: String {
                    get {
                      return resultMap["finder"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "finder")
                    }
                  }

                  public var buyer: String {
                    get {
                      return resultMap["buyer"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "buyer")
                    }
                  }

                  public var fragments: Fragments {
                    get {
                      return Fragments(unsafeResultMap: resultMap)
                    }
                    set {
                      resultMap += newValue.resultMap
                    }
                  }

                  public struct Fragments {
                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public var v3AskEventPropertiesInfo: V3AskEventPropertiesInfo {
                      get {
                        return V3AskEventPropertiesInfo(unsafeResultMap: resultMap)
                      }
                      set {
                        resultMap += newValue.resultMap
                      }
                    }
                  }

                  public struct Price: GraphQLSelectionSet {
                    public static let possibleTypes: [String] = ["PriceAtTime"]

                    public static var selections: [GraphQLSelection] {
                      return [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                        GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
                        GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
                        GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
                      ]
                    }

                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
                      self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
                    }

                    public var __typename: String {
                      get {
                        return resultMap["__typename"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "__typename")
                      }
                    }

                    public var blockNumber: Int {
                      get {
                        return resultMap["blockNumber"]! as! Int
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "blockNumber")
                      }
                    }

                    public var chainTokenPrice: ChainTokenPrice? {
                      get {
                        return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
                      }
                      set {
                        resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
                      }
                    }

                    public var nativePrice: NativePrice {
                      get {
                        return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
                      }
                      set {
                        resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
                      }
                    }

                    public var usdcPrice: UsdcPrice? {
                      get {
                        return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
                      }
                      set {
                        resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
                      }
                    }

                    public var fragments: Fragments {
                      get {
                        return Fragments(unsafeResultMap: resultMap)
                      }
                      set {
                        resultMap += newValue.resultMap
                      }
                    }

                    public struct Fragments {
                      public private(set) var resultMap: ResultMap

                      public init(unsafeResultMap: ResultMap) {
                        self.resultMap = unsafeResultMap
                      }

                      public var priceSummary: PriceSummary {
                        get {
                          return PriceSummary(unsafeResultMap: resultMap)
                        }
                        set {
                          resultMap += newValue.resultMap
                        }
                      }
                    }

                    public struct ChainTokenPrice: GraphQLSelectionSet {
                      public static let possibleTypes: [String] = ["CurrencyAmount"]

                      public static var selections: [GraphQLSelection] {
                        return [
                          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                          GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                          GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                        ]
                      }

                      public private(set) var resultMap: ResultMap

                      public init(unsafeResultMap: ResultMap) {
                        self.resultMap = unsafeResultMap
                      }

                      public init(decimal: Double, raw: String) {
                        self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                      }

                      public var __typename: String {
                        get {
                          return resultMap["__typename"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "__typename")
                        }
                      }

                      public var decimal: Double {
                        get {
                          return resultMap["decimal"]! as! Double
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "decimal")
                        }
                      }

                      public var raw: String {
                        get {
                          return resultMap["raw"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "raw")
                        }
                      }
                    }

                    public struct NativePrice: GraphQLSelectionSet {
                      public static let possibleTypes: [String] = ["CurrencyAmount"]

                      public static var selections: [GraphQLSelection] {
                        return [
                          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                          GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                          GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                          GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
                        ]
                      }

                      public private(set) var resultMap: ResultMap

                      public init(unsafeResultMap: ResultMap) {
                        self.resultMap = unsafeResultMap
                      }

                      public init(decimal: Double, raw: String, currency: Currency) {
                        self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
                      }

                      public var __typename: String {
                        get {
                          return resultMap["__typename"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "__typename")
                        }
                      }

                      public var decimal: Double {
                        get {
                          return resultMap["decimal"]! as! Double
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "decimal")
                        }
                      }

                      public var raw: String {
                        get {
                          return resultMap["raw"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "raw")
                        }
                      }

                      public var currency: Currency {
                        get {
                          return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
                        }
                        set {
                          resultMap.updateValue(newValue.resultMap, forKey: "currency")
                        }
                      }

                      public struct Currency: GraphQLSelectionSet {
                        public static let possibleTypes: [String] = ["Currency"]

                        public static var selections: [GraphQLSelection] {
                          return [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("address", type: .nonNull(.scalar(String.self))),
                            GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                            GraphQLField("name", type: .nonNull(.scalar(String.self))),
                          ]
                        }

                        public private(set) var resultMap: ResultMap

                        public init(unsafeResultMap: ResultMap) {
                          self.resultMap = unsafeResultMap
                        }

                        public init(address: String, decimals: Int, name: String) {
                          self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
                        }

                        public var __typename: String {
                          get {
                            return resultMap["__typename"]! as! String
                          }
                          set {
                            resultMap.updateValue(newValue, forKey: "__typename")
                          }
                        }

                        public var address: String {
                          get {
                            return resultMap["address"]! as! String
                          }
                          set {
                            resultMap.updateValue(newValue, forKey: "address")
                          }
                        }

                        public var decimals: Int {
                          get {
                            return resultMap["decimals"]! as! Int
                          }
                          set {
                            resultMap.updateValue(newValue, forKey: "decimals")
                          }
                        }

                        public var name: String {
                          get {
                            return resultMap["name"]! as! String
                          }
                          set {
                            resultMap.updateValue(newValue, forKey: "name")
                          }
                        }
                      }
                    }

                    public struct UsdcPrice: GraphQLSelectionSet {
                      public static let possibleTypes: [String] = ["CurrencyAmount"]

                      public static var selections: [GraphQLSelection] {
                        return [
                          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                          GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                          GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                        ]
                      }

                      public private(set) var resultMap: ResultMap

                      public init(unsafeResultMap: ResultMap) {
                        self.resultMap = unsafeResultMap
                      }

                      public init(decimal: Double, raw: String) {
                        self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                      }

                      public var __typename: String {
                        get {
                          return resultMap["__typename"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "__typename")
                        }
                      }

                      public var decimal: Double {
                        get {
                          return resultMap["decimal"]! as! Double
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "decimal")
                        }
                      }

                      public var raw: String {
                        get {
                          return resultMap["raw"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "raw")
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

public final class TokenQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    query token($network: NetworkInput!, $token: TokenInput!, $includeFullDetails: Boolean!) {
      token(network: $network, token: $token) {
        __typename
        token {
          __typename
          ...TokenInfo
          ...TokenDetails @include(if: $includeFullDetails)
        }
        ...TokenFullDetails @include(if: $includeFullDetails)
        markets(
          pagination: {limit: 10, after: null}
          sort: {sortKey: NONE, sortDirection: DESC}
        ) {
          __typename
          ...MarketInfo
          ...MarketDetails @include(if: $includeFullDetails)
        }
      }
    }
    """

  public let operationName: String = "token"

  public let operationIdentifier: String? = "604f5f9523a15478d7e1f793770336cb20aa0867a4271e5bade02529f0d00479"

  public var queryDocument: String {
    var document: String = operationDefinition
    document.append("\n" + TokenInfo.fragmentDefinition)
    document.append("\n" + TokenContractInfo.fragmentDefinition)
    document.append("\n" + MintDetails.fragmentDefinition)
    document.append("\n" + PriceSummary.fragmentDefinition)
    document.append("\n" + TransactionDetails.fragmentDefinition)
    document.append("\n" + FullMedia.fragmentDefinition)
    document.append("\n" + TokenDetails.fragmentDefinition)
    document.append("\n" + TokenFullDetails.fragmentDefinition)
    document.append("\n" + SaleInfo.fragmentDefinition)
    document.append("\n" + EventInfo.fragmentDefinition)
    document.append("\n" + V1MarketEventPropertiesInfo.fragmentDefinition)
    document.append("\n" + V2AuctionEventPropertiesInfo.fragmentDefinition)
    document.append("\n" + V3AskEventPropertiesInfo.fragmentDefinition)
    document.append("\n" + MarketInfo.fragmentDefinition)
    document.append("\n" + NetworkInfoDetails.fragmentDefinition)
    document.append("\n" + MarketDetails.fragmentDefinition)
    document.append("\n" + MarketPropertiesFull.fragmentDefinition)
    document.append("\n" + V2AuctionMarketProperties.fragmentDefinition)
    document.append("\n" + V3AskProperties.fragmentDefinition)
    document.append("\n" + V1OfferProperties.fragmentDefinition)
    document.append("\n" + V1AskProperties.fragmentDefinition)
    return document
  }

  public var network: NetworkInput
  public var token: TokenInput
  public var includeFullDetails: Bool

  public init(network: NetworkInput, token: TokenInput, includeFullDetails: Bool) {
    self.network = network
    self.token = token
    self.includeFullDetails = includeFullDetails
  }

  public var variables: GraphQLMap? {
    return ["network": network, "token": token, "includeFullDetails": includeFullDetails]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["RootQuery"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("token", arguments: ["network": GraphQLVariable("network"), "token": GraphQLVariable("token")], type: .object(Token.selections)),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(token: Token? = nil) {
      self.init(unsafeResultMap: ["__typename": "RootQuery", "token": token.flatMap { (value: Token) -> ResultMap in value.resultMap }])
    }

    /// Gets data on a single token
    public var token: Token? {
      get {
        return (resultMap["token"] as? ResultMap).flatMap { Token(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "token")
      }
    }

    public struct Token: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["TokenWithFullMarketHistory"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("token", type: .nonNull(.object(Token.selections))),
          GraphQLBooleanCondition(variableName: "includeFullDetails", inverted: false, selections: [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("sales", arguments: ["pagination": ["limit": 10], "sort": ["sortKey": "TIME", "sortDirection": "DESC"]], type: .nonNull(.list(.nonNull(.object(Sale.selections))))),
            GraphQLField("events", arguments: ["pagination": ["limit": 10], "sort": ["sortKey": "CREATED", "sortDirection": "DESC"]], type: .nonNull(.list(.nonNull(.object(Event.selections))))),
          ]),
          GraphQLField("markets", arguments: ["pagination": ["limit": 10, "after": nil], "sort": ["sortKey": "NONE", "sortDirection": "DESC"]], type: .nonNull(.list(.nonNull(.object(Market.selections))))),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(token: Token, sales: [Sale]? = nil, events: [Event]? = nil, markets: [Market]) {
        self.init(unsafeResultMap: ["__typename": "TokenWithFullMarketHistory", "token": token.resultMap, "sales": sales.flatMap { (value: [Sale]) -> [ResultMap] in value.map { (value: Sale) -> ResultMap in value.resultMap } }, "events": events.flatMap { (value: [Event]) -> [ResultMap] in value.map { (value: Event) -> ResultMap in value.resultMap } }, "markets": markets.map { (value: Market) -> ResultMap in value.resultMap }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var token: Token {
        get {
          return Token(unsafeResultMap: resultMap["token"]! as! ResultMap)
        }
        set {
          resultMap.updateValue(newValue.resultMap, forKey: "token")
        }
      }

      public var sales: [Sale]? {
        get {
          return (resultMap["sales"] as? [ResultMap]).flatMap { (value: [ResultMap]) -> [Sale] in value.map { (value: ResultMap) -> Sale in Sale(unsafeResultMap: value) } }
        }
        set {
          resultMap.updateValue(newValue.flatMap { (value: [Sale]) -> [ResultMap] in value.map { (value: Sale) -> ResultMap in value.resultMap } }, forKey: "sales")
        }
      }

      public var events: [Event]? {
        get {
          return (resultMap["events"] as? [ResultMap]).flatMap { (value: [ResultMap]) -> [Event] in value.map { (value: ResultMap) -> Event in Event(unsafeResultMap: value) } }
        }
        set {
          resultMap.updateValue(newValue.flatMap { (value: [Event]) -> [ResultMap] in value.map { (value: Event) -> ResultMap in value.resultMap } }, forKey: "events")
        }
      }

      public var markets: [Market] {
        get {
          return (resultMap["markets"] as! [ResultMap]).map { (value: ResultMap) -> Market in Market(unsafeResultMap: value) }
        }
        set {
          resultMap.updateValue(newValue.map { (value: Market) -> ResultMap in value.resultMap }, forKey: "markets")
        }
      }

      public var fragments: Fragments {
        get {
          return Fragments(unsafeResultMap: resultMap)
        }
        set {
          resultMap += newValue.resultMap
        }
      }

      public struct Fragments {
        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public var tokenFullDetails: TokenFullDetails {
          get {
            return TokenFullDetails(unsafeResultMap: resultMap)
          }
          set {
            resultMap += newValue.resultMap
          }
        }
      }

      public struct Token: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["Token"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("tokenId", type: .nonNull(.scalar(String.self))),
            GraphQLField("tokenContract", type: .object(TokenContract.selections)),
            GraphQLField("mintInfo", type: .object(MintInfo.selections)),
            GraphQLField("collectionAddress", type: .nonNull(.scalar(String.self))),
            GraphQLField("lastRefreshTime", type: .scalar(String.self)),
            GraphQLField("owner", type: .scalar(String.self)),
            GraphQLField("name", type: .scalar(String.self)),
            GraphQLField("description", type: .scalar(String.self)),
            GraphQLField("image", type: .object(Image.selections)),
            GraphQLField("content", type: .object(Content.selections)),
            GraphQLBooleanCondition(variableName: "includeFullDetails", inverted: false, selections: [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("metadata", type: .scalar(String.self)),
              GraphQLField("tokenUrl", type: .scalar(String.self)),
              GraphQLField("tokenUrlMimeType", type: .scalar(String.self)),
              GraphQLField("attributes", type: .list(.nonNull(.object(Attribute.selections)))),
            ]),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(tokenId: String, tokenContract: TokenContract? = nil, mintInfo: MintInfo? = nil, collectionAddress: String, lastRefreshTime: String? = nil, owner: String? = nil, name: String? = nil, description: String? = nil, image: Image? = nil, content: Content? = nil, metadata: String? = nil, tokenUrl: String? = nil, tokenUrlMimeType: String? = nil, attributes: [Attribute]? = nil) {
          self.init(unsafeResultMap: ["__typename": "Token", "tokenId": tokenId, "tokenContract": tokenContract.flatMap { (value: TokenContract) -> ResultMap in value.resultMap }, "mintInfo": mintInfo.flatMap { (value: MintInfo) -> ResultMap in value.resultMap }, "collectionAddress": collectionAddress, "lastRefreshTime": lastRefreshTime, "owner": owner, "name": name, "description": description, "image": image.flatMap { (value: Image) -> ResultMap in value.resultMap }, "content": content.flatMap { (value: Content) -> ResultMap in value.resultMap }, "metadata": metadata, "tokenUrl": tokenUrl, "tokenUrlMimeType": tokenUrlMimeType, "attributes": attributes.flatMap { (value: [Attribute]) -> [ResultMap] in value.map { (value: Attribute) -> ResultMap in value.resultMap } }])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var tokenId: String {
          get {
            return resultMap["tokenId"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "tokenId")
          }
        }

        public var tokenContract: TokenContract? {
          get {
            return (resultMap["tokenContract"] as? ResultMap).flatMap { TokenContract(unsafeResultMap: $0) }
          }
          set {
            resultMap.updateValue(newValue?.resultMap, forKey: "tokenContract")
          }
        }

        public var mintInfo: MintInfo? {
          get {
            return (resultMap["mintInfo"] as? ResultMap).flatMap { MintInfo(unsafeResultMap: $0) }
          }
          set {
            resultMap.updateValue(newValue?.resultMap, forKey: "mintInfo")
          }
        }

        public var collectionAddress: String {
          get {
            return resultMap["collectionAddress"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "collectionAddress")
          }
        }

        public var lastRefreshTime: String? {
          get {
            return resultMap["lastRefreshTime"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "lastRefreshTime")
          }
        }

        public var owner: String? {
          get {
            return resultMap["owner"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "owner")
          }
        }

        public var name: String? {
          get {
            return resultMap["name"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "name")
          }
        }

        public var description: String? {
          get {
            return resultMap["description"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "description")
          }
        }

        public var image: Image? {
          get {
            return (resultMap["image"] as? ResultMap).flatMap { Image(unsafeResultMap: $0) }
          }
          set {
            resultMap.updateValue(newValue?.resultMap, forKey: "image")
          }
        }

        public var content: Content? {
          get {
            return (resultMap["content"] as? ResultMap).flatMap { Content(unsafeResultMap: $0) }
          }
          set {
            resultMap.updateValue(newValue?.resultMap, forKey: "content")
          }
        }

        public var metadata: String? {
          get {
            return resultMap["metadata"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "metadata")
          }
        }

        public var tokenUrl: String? {
          get {
            return resultMap["tokenUrl"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "tokenUrl")
          }
        }

        public var tokenUrlMimeType: String? {
          get {
            return resultMap["tokenUrlMimeType"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "tokenUrlMimeType")
          }
        }

        public var attributes: [Attribute]? {
          get {
            return (resultMap["attributes"] as? [ResultMap]).flatMap { (value: [ResultMap]) -> [Attribute] in value.map { (value: ResultMap) -> Attribute in Attribute(unsafeResultMap: value) } }
          }
          set {
            resultMap.updateValue(newValue.flatMap { (value: [Attribute]) -> [ResultMap] in value.map { (value: Attribute) -> ResultMap in value.resultMap } }, forKey: "attributes")
          }
        }

        public var fragments: Fragments {
          get {
            return Fragments(unsafeResultMap: resultMap)
          }
          set {
            resultMap += newValue.resultMap
          }
        }

        public struct Fragments {
          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public var tokenInfo: TokenInfo {
            get {
              return TokenInfo(unsafeResultMap: resultMap)
            }
            set {
              resultMap += newValue.resultMap
            }
          }

          public var tokenDetails: TokenDetails {
            get {
              return TokenDetails(unsafeResultMap: resultMap)
            }
            set {
              resultMap += newValue.resultMap
            }
          }
        }

        public struct TokenContract: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["TokenContract"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("name", type: .scalar(String.self)),
              GraphQLField("network", type: .nonNull(.scalar(String.self))),
              GraphQLField("description", type: .scalar(String.self)),
              GraphQLField("collectionAddress", type: .nonNull(.scalar(String.self))),
              GraphQLField("symbol", type: .scalar(String.self)),
              GraphQLField("chain", type: .nonNull(.scalar(Int.self))),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(name: String? = nil, network: String, description: String? = nil, collectionAddress: String, symbol: String? = nil, chain: Int) {
            self.init(unsafeResultMap: ["__typename": "TokenContract", "name": name, "network": network, "description": description, "collectionAddress": collectionAddress, "symbol": symbol, "chain": chain])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var name: String? {
            get {
              return resultMap["name"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "name")
            }
          }

          public var network: String {
            get {
              return resultMap["network"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "network")
            }
          }

          public var description: String? {
            get {
              return resultMap["description"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "description")
            }
          }

          public var collectionAddress: String {
            get {
              return resultMap["collectionAddress"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "collectionAddress")
            }
          }

          public var symbol: String? {
            get {
              return resultMap["symbol"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "symbol")
            }
          }

          public var chain: Int {
            get {
              return resultMap["chain"]! as! Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "chain")
            }
          }

          public var fragments: Fragments {
            get {
              return Fragments(unsafeResultMap: resultMap)
            }
            set {
              resultMap += newValue.resultMap
            }
          }

          public struct Fragments {
            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public var tokenContractInfo: TokenContractInfo {
              get {
                return TokenContractInfo(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }
          }
        }

        public struct MintInfo: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["MintInfo"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("price", type: .nonNull(.object(Price.selections))),
              GraphQLField("originatorAddress", type: .nonNull(.scalar(String.self))),
              GraphQLField("toAddress", type: .nonNull(.scalar(String.self))),
              GraphQLField("mintContext", type: .nonNull(.object(MintContext.selections))),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(price: Price, originatorAddress: String, toAddress: String, mintContext: MintContext) {
            self.init(unsafeResultMap: ["__typename": "MintInfo", "price": price.resultMap, "originatorAddress": originatorAddress, "toAddress": toAddress, "mintContext": mintContext.resultMap])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var price: Price {
            get {
              return Price(unsafeResultMap: resultMap["price"]! as! ResultMap)
            }
            set {
              resultMap.updateValue(newValue.resultMap, forKey: "price")
            }
          }

          public var originatorAddress: String {
            get {
              return resultMap["originatorAddress"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "originatorAddress")
            }
          }

          public var toAddress: String {
            get {
              return resultMap["toAddress"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "toAddress")
            }
          }

          public var mintContext: MintContext {
            get {
              return MintContext(unsafeResultMap: resultMap["mintContext"]! as! ResultMap)
            }
            set {
              resultMap.updateValue(newValue.resultMap, forKey: "mintContext")
            }
          }

          public var fragments: Fragments {
            get {
              return Fragments(unsafeResultMap: resultMap)
            }
            set {
              resultMap += newValue.resultMap
            }
          }

          public struct Fragments {
            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public var mintDetails: MintDetails {
              get {
                return MintDetails(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }
          }

          public struct Price: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["PriceAtTime"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
                GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
                GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
              self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var blockNumber: Int {
              get {
                return resultMap["blockNumber"]! as! Int
              }
              set {
                resultMap.updateValue(newValue, forKey: "blockNumber")
              }
            }

            public var chainTokenPrice: ChainTokenPrice? {
              get {
                return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
              }
              set {
                resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
              }
            }

            public var nativePrice: NativePrice {
              get {
                return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
              }
              set {
                resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
              }
            }

            public var usdcPrice: UsdcPrice? {
              get {
                return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
              }
              set {
                resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
              }
            }

            public var fragments: Fragments {
              get {
                return Fragments(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }

            public struct Fragments {
              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public var priceSummary: PriceSummary {
                get {
                  return PriceSummary(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }
            }

            public struct ChainTokenPrice: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["CurrencyAmount"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                  GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(decimal: Double, raw: String) {
                self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var decimal: Double {
                get {
                  return resultMap["decimal"]! as! Double
                }
                set {
                  resultMap.updateValue(newValue, forKey: "decimal")
                }
              }

              public var raw: String {
                get {
                  return resultMap["raw"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "raw")
                }
              }
            }

            public struct NativePrice: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["CurrencyAmount"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                  GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                  GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(decimal: Double, raw: String, currency: Currency) {
                self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var decimal: Double {
                get {
                  return resultMap["decimal"]! as! Double
                }
                set {
                  resultMap.updateValue(newValue, forKey: "decimal")
                }
              }

              public var raw: String {
                get {
                  return resultMap["raw"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "raw")
                }
              }

              public var currency: Currency {
                get {
                  return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
                }
                set {
                  resultMap.updateValue(newValue.resultMap, forKey: "currency")
                }
              }

              public struct Currency: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["Currency"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("address", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                    GraphQLField("name", type: .nonNull(.scalar(String.self))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(address: String, decimals: Int, name: String) {
                  self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var address: String {
                  get {
                    return resultMap["address"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "address")
                  }
                }

                public var decimals: Int {
                  get {
                    return resultMap["decimals"]! as! Int
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimals")
                  }
                }

                public var name: String {
                  get {
                    return resultMap["name"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "name")
                  }
                }
              }
            }

            public struct UsdcPrice: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["CurrencyAmount"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                  GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(decimal: Double, raw: String) {
                self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var decimal: Double {
                get {
                  return resultMap["decimal"]! as! Double
                }
                set {
                  resultMap.updateValue(newValue, forKey: "decimal")
                }
              }

              public var raw: String {
                get {
                  return resultMap["raw"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "raw")
                }
              }
            }
          }

          public struct MintContext: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["TransactionInfo"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                GraphQLField("blockTimestamp", type: .nonNull(.scalar(String.self))),
                GraphQLField("transactionHash", type: .scalar(String.self)),
                GraphQLField("logIndex", type: .scalar(Int.self)),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(blockNumber: Int, blockTimestamp: String, transactionHash: String? = nil, logIndex: Int? = nil) {
              self.init(unsafeResultMap: ["__typename": "TransactionInfo", "blockNumber": blockNumber, "blockTimestamp": blockTimestamp, "transactionHash": transactionHash, "logIndex": logIndex])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var blockNumber: Int {
              get {
                return resultMap["blockNumber"]! as! Int
              }
              set {
                resultMap.updateValue(newValue, forKey: "blockNumber")
              }
            }

            public var blockTimestamp: String {
              get {
                return resultMap["blockTimestamp"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "blockTimestamp")
              }
            }

            public var transactionHash: String? {
              get {
                return resultMap["transactionHash"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "transactionHash")
              }
            }

            public var logIndex: Int? {
              get {
                return resultMap["logIndex"] as? Int
              }
              set {
                resultMap.updateValue(newValue, forKey: "logIndex")
              }
            }

            public var fragments: Fragments {
              get {
                return Fragments(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }

            public struct Fragments {
              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public var transactionDetails: TransactionDetails {
                get {
                  return TransactionDetails(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }
            }
          }
        }

        public struct Image: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["TokenContentMedia"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("size", type: .scalar(String.self)),
              GraphQLField("url", type: .scalar(String.self)),
              GraphQLField("size", type: .scalar(String.self)),
              GraphQLField("mimeType", type: .scalar(String.self)),
              GraphQLField("mediaEncoding", type: .object(MediaEncoding.selections)),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(size: String? = nil, url: String? = nil, mimeType: String? = nil, mediaEncoding: MediaEncoding? = nil) {
            self.init(unsafeResultMap: ["__typename": "TokenContentMedia", "size": size, "url": url, "mimeType": mimeType, "mediaEncoding": mediaEncoding.flatMap { (value: MediaEncoding) -> ResultMap in value.resultMap }])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var size: String? {
            get {
              return resultMap["size"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "size")
            }
          }

          public var url: String? {
            get {
              return resultMap["url"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "url")
            }
          }

          public var mimeType: String? {
            get {
              return resultMap["mimeType"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "mimeType")
            }
          }

          public var mediaEncoding: MediaEncoding? {
            get {
              return (resultMap["mediaEncoding"] as? ResultMap).flatMap { MediaEncoding(unsafeResultMap: $0) }
            }
            set {
              resultMap.updateValue(newValue?.resultMap, forKey: "mediaEncoding")
            }
          }

          public var fragments: Fragments {
            get {
              return Fragments(unsafeResultMap: resultMap)
            }
            set {
              resultMap += newValue.resultMap
            }
          }

          public struct Fragments {
            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public var fullMedia: FullMedia {
              get {
                return FullMedia(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }
          }

          public struct MediaEncoding: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["ImageEncodingTypes", "VideoEncodingTypes", "AudioEncodingTypes", "UnsupportedEncodingTypes"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLTypeCase(
                  variants: ["ImageEncodingTypes": AsImageEncodingTypes.selections, "VideoEncodingTypes": AsVideoEncodingTypes.selections, "AudioEncodingTypes": AsAudioEncodingTypes.selections, "UnsupportedEncodingTypes": AsUnsupportedEncodingTypes.selections],
                  default: [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  ]
                )
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public static func makeImageEncodingTypes(original: String, large: String? = nil, poster: String? = nil, thumbnail: String? = nil) -> MediaEncoding {
              return MediaEncoding(unsafeResultMap: ["__typename": "ImageEncodingTypes", "original": original, "large": large, "poster": poster, "thumbnail": thumbnail])
            }

            public static func makeVideoEncodingTypes(original: String, large: String? = nil, poster: String? = nil, preview: String? = nil, thumbnail: String? = nil) -> MediaEncoding {
              return MediaEncoding(unsafeResultMap: ["__typename": "VideoEncodingTypes", "original": original, "large": large, "poster": poster, "preview": preview, "thumbnail": thumbnail])
            }

            public static func makeAudioEncodingTypes(original: String, large: String? = nil) -> MediaEncoding {
              return MediaEncoding(unsafeResultMap: ["__typename": "AudioEncodingTypes", "original": original, "large": large])
            }

            public static func makeUnsupportedEncodingTypes(original: String) -> MediaEncoding {
              return MediaEncoding(unsafeResultMap: ["__typename": "UnsupportedEncodingTypes", "original": original])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var asImageEncodingTypes: AsImageEncodingTypes? {
              get {
                if !AsImageEncodingTypes.possibleTypes.contains(__typename) { return nil }
                return AsImageEncodingTypes(unsafeResultMap: resultMap)
              }
              set {
                guard let newValue = newValue else { return }
                resultMap = newValue.resultMap
              }
            }

            public struct AsImageEncodingTypes: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["ImageEncodingTypes"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("original", type: .nonNull(.scalar(String.self))),
                  GraphQLField("large", type: .scalar(String.self)),
                  GraphQLField("poster", type: .scalar(String.self)),
                  GraphQLField("thumbnail", type: .scalar(String.self)),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(original: String, large: String? = nil, poster: String? = nil, thumbnail: String? = nil) {
                self.init(unsafeResultMap: ["__typename": "ImageEncodingTypes", "original": original, "large": large, "poster": poster, "thumbnail": thumbnail])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var original: String {
                get {
                  return resultMap["original"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "original")
                }
              }

              public var large: String? {
                get {
                  return resultMap["large"] as? String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "large")
                }
              }

              public var poster: String? {
                get {
                  return resultMap["poster"] as? String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "poster")
                }
              }

              public var thumbnail: String? {
                get {
                  return resultMap["thumbnail"] as? String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "thumbnail")
                }
              }
            }

            public var asVideoEncodingTypes: AsVideoEncodingTypes? {
              get {
                if !AsVideoEncodingTypes.possibleTypes.contains(__typename) { return nil }
                return AsVideoEncodingTypes(unsafeResultMap: resultMap)
              }
              set {
                guard let newValue = newValue else { return }
                resultMap = newValue.resultMap
              }
            }

            public struct AsVideoEncodingTypes: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["VideoEncodingTypes"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("original", type: .nonNull(.scalar(String.self))),
                  GraphQLField("large", type: .scalar(String.self)),
                  GraphQLField("poster", type: .scalar(String.self)),
                  GraphQLField("preview", type: .scalar(String.self)),
                  GraphQLField("thumbnail", type: .scalar(String.self)),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(original: String, large: String? = nil, poster: String? = nil, preview: String? = nil, thumbnail: String? = nil) {
                self.init(unsafeResultMap: ["__typename": "VideoEncodingTypes", "original": original, "large": large, "poster": poster, "preview": preview, "thumbnail": thumbnail])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var original: String {
                get {
                  return resultMap["original"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "original")
                }
              }

              public var large: String? {
                get {
                  return resultMap["large"] as? String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "large")
                }
              }

              public var poster: String? {
                get {
                  return resultMap["poster"] as? String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "poster")
                }
              }

              public var preview: String? {
                get {
                  return resultMap["preview"] as? String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "preview")
                }
              }

              public var thumbnail: String? {
                get {
                  return resultMap["thumbnail"] as? String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "thumbnail")
                }
              }
            }

            public var asAudioEncodingTypes: AsAudioEncodingTypes? {
              get {
                if !AsAudioEncodingTypes.possibleTypes.contains(__typename) { return nil }
                return AsAudioEncodingTypes(unsafeResultMap: resultMap)
              }
              set {
                guard let newValue = newValue else { return }
                resultMap = newValue.resultMap
              }
            }

            public struct AsAudioEncodingTypes: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["AudioEncodingTypes"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("original", type: .nonNull(.scalar(String.self))),
                  GraphQLField("large", type: .scalar(String.self)),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(original: String, large: String? = nil) {
                self.init(unsafeResultMap: ["__typename": "AudioEncodingTypes", "original": original, "large": large])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var original: String {
                get {
                  return resultMap["original"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "original")
                }
              }

              public var large: String? {
                get {
                  return resultMap["large"] as? String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "large")
                }
              }
            }

            public var asUnsupportedEncodingTypes: AsUnsupportedEncodingTypes? {
              get {
                if !AsUnsupportedEncodingTypes.possibleTypes.contains(__typename) { return nil }
                return AsUnsupportedEncodingTypes(unsafeResultMap: resultMap)
              }
              set {
                guard let newValue = newValue else { return }
                resultMap = newValue.resultMap
              }
            }

            public struct AsUnsupportedEncodingTypes: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["UnsupportedEncodingTypes"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("original", type: .nonNull(.scalar(String.self))),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(original: String) {
                self.init(unsafeResultMap: ["__typename": "UnsupportedEncodingTypes", "original": original])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var original: String {
                get {
                  return resultMap["original"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "original")
                }
              }
            }
          }
        }

        public struct Content: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["TokenContentMedia"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("size", type: .scalar(String.self)),
              GraphQLField("url", type: .scalar(String.self)),
              GraphQLField("size", type: .scalar(String.self)),
              GraphQLField("mimeType", type: .scalar(String.self)),
              GraphQLField("mediaEncoding", type: .object(MediaEncoding.selections)),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(size: String? = nil, url: String? = nil, mimeType: String? = nil, mediaEncoding: MediaEncoding? = nil) {
            self.init(unsafeResultMap: ["__typename": "TokenContentMedia", "size": size, "url": url, "mimeType": mimeType, "mediaEncoding": mediaEncoding.flatMap { (value: MediaEncoding) -> ResultMap in value.resultMap }])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var size: String? {
            get {
              return resultMap["size"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "size")
            }
          }

          public var url: String? {
            get {
              return resultMap["url"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "url")
            }
          }

          public var mimeType: String? {
            get {
              return resultMap["mimeType"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "mimeType")
            }
          }

          public var mediaEncoding: MediaEncoding? {
            get {
              return (resultMap["mediaEncoding"] as? ResultMap).flatMap { MediaEncoding(unsafeResultMap: $0) }
            }
            set {
              resultMap.updateValue(newValue?.resultMap, forKey: "mediaEncoding")
            }
          }

          public var fragments: Fragments {
            get {
              return Fragments(unsafeResultMap: resultMap)
            }
            set {
              resultMap += newValue.resultMap
            }
          }

          public struct Fragments {
            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public var fullMedia: FullMedia {
              get {
                return FullMedia(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }
          }

          public struct MediaEncoding: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["ImageEncodingTypes", "VideoEncodingTypes", "AudioEncodingTypes", "UnsupportedEncodingTypes"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLTypeCase(
                  variants: ["ImageEncodingTypes": AsImageEncodingTypes.selections, "VideoEncodingTypes": AsVideoEncodingTypes.selections, "AudioEncodingTypes": AsAudioEncodingTypes.selections, "UnsupportedEncodingTypes": AsUnsupportedEncodingTypes.selections],
                  default: [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  ]
                )
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public static func makeImageEncodingTypes(original: String, large: String? = nil, poster: String? = nil, thumbnail: String? = nil) -> MediaEncoding {
              return MediaEncoding(unsafeResultMap: ["__typename": "ImageEncodingTypes", "original": original, "large": large, "poster": poster, "thumbnail": thumbnail])
            }

            public static func makeVideoEncodingTypes(original: String, large: String? = nil, poster: String? = nil, preview: String? = nil, thumbnail: String? = nil) -> MediaEncoding {
              return MediaEncoding(unsafeResultMap: ["__typename": "VideoEncodingTypes", "original": original, "large": large, "poster": poster, "preview": preview, "thumbnail": thumbnail])
            }

            public static func makeAudioEncodingTypes(original: String, large: String? = nil) -> MediaEncoding {
              return MediaEncoding(unsafeResultMap: ["__typename": "AudioEncodingTypes", "original": original, "large": large])
            }

            public static func makeUnsupportedEncodingTypes(original: String) -> MediaEncoding {
              return MediaEncoding(unsafeResultMap: ["__typename": "UnsupportedEncodingTypes", "original": original])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var asImageEncodingTypes: AsImageEncodingTypes? {
              get {
                if !AsImageEncodingTypes.possibleTypes.contains(__typename) { return nil }
                return AsImageEncodingTypes(unsafeResultMap: resultMap)
              }
              set {
                guard let newValue = newValue else { return }
                resultMap = newValue.resultMap
              }
            }

            public struct AsImageEncodingTypes: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["ImageEncodingTypes"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("original", type: .nonNull(.scalar(String.self))),
                  GraphQLField("large", type: .scalar(String.self)),
                  GraphQLField("poster", type: .scalar(String.self)),
                  GraphQLField("thumbnail", type: .scalar(String.self)),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(original: String, large: String? = nil, poster: String? = nil, thumbnail: String? = nil) {
                self.init(unsafeResultMap: ["__typename": "ImageEncodingTypes", "original": original, "large": large, "poster": poster, "thumbnail": thumbnail])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var original: String {
                get {
                  return resultMap["original"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "original")
                }
              }

              public var large: String? {
                get {
                  return resultMap["large"] as? String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "large")
                }
              }

              public var poster: String? {
                get {
                  return resultMap["poster"] as? String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "poster")
                }
              }

              public var thumbnail: String? {
                get {
                  return resultMap["thumbnail"] as? String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "thumbnail")
                }
              }
            }

            public var asVideoEncodingTypes: AsVideoEncodingTypes? {
              get {
                if !AsVideoEncodingTypes.possibleTypes.contains(__typename) { return nil }
                return AsVideoEncodingTypes(unsafeResultMap: resultMap)
              }
              set {
                guard let newValue = newValue else { return }
                resultMap = newValue.resultMap
              }
            }

            public struct AsVideoEncodingTypes: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["VideoEncodingTypes"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("original", type: .nonNull(.scalar(String.self))),
                  GraphQLField("large", type: .scalar(String.self)),
                  GraphQLField("poster", type: .scalar(String.self)),
                  GraphQLField("preview", type: .scalar(String.self)),
                  GraphQLField("thumbnail", type: .scalar(String.self)),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(original: String, large: String? = nil, poster: String? = nil, preview: String? = nil, thumbnail: String? = nil) {
                self.init(unsafeResultMap: ["__typename": "VideoEncodingTypes", "original": original, "large": large, "poster": poster, "preview": preview, "thumbnail": thumbnail])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var original: String {
                get {
                  return resultMap["original"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "original")
                }
              }

              public var large: String? {
                get {
                  return resultMap["large"] as? String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "large")
                }
              }

              public var poster: String? {
                get {
                  return resultMap["poster"] as? String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "poster")
                }
              }

              public var preview: String? {
                get {
                  return resultMap["preview"] as? String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "preview")
                }
              }

              public var thumbnail: String? {
                get {
                  return resultMap["thumbnail"] as? String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "thumbnail")
                }
              }
            }

            public var asAudioEncodingTypes: AsAudioEncodingTypes? {
              get {
                if !AsAudioEncodingTypes.possibleTypes.contains(__typename) { return nil }
                return AsAudioEncodingTypes(unsafeResultMap: resultMap)
              }
              set {
                guard let newValue = newValue else { return }
                resultMap = newValue.resultMap
              }
            }

            public struct AsAudioEncodingTypes: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["AudioEncodingTypes"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("original", type: .nonNull(.scalar(String.self))),
                  GraphQLField("large", type: .scalar(String.self)),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(original: String, large: String? = nil) {
                self.init(unsafeResultMap: ["__typename": "AudioEncodingTypes", "original": original, "large": large])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var original: String {
                get {
                  return resultMap["original"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "original")
                }
              }

              public var large: String? {
                get {
                  return resultMap["large"] as? String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "large")
                }
              }
            }

            public var asUnsupportedEncodingTypes: AsUnsupportedEncodingTypes? {
              get {
                if !AsUnsupportedEncodingTypes.possibleTypes.contains(__typename) { return nil }
                return AsUnsupportedEncodingTypes(unsafeResultMap: resultMap)
              }
              set {
                guard let newValue = newValue else { return }
                resultMap = newValue.resultMap
              }
            }

            public struct AsUnsupportedEncodingTypes: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["UnsupportedEncodingTypes"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("original", type: .nonNull(.scalar(String.self))),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(original: String) {
                self.init(unsafeResultMap: ["__typename": "UnsupportedEncodingTypes", "original": original])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var original: String {
                get {
                  return resultMap["original"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "original")
                }
              }
            }
          }
        }

        public struct Attribute: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["TokenAttribute"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("traitType", type: .scalar(String.self)),
              GraphQLField("value", type: .scalar(String.self)),
              GraphQLField("displayType", type: .scalar(String.self)),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(traitType: String? = nil, value: String? = nil, displayType: String? = nil) {
            self.init(unsafeResultMap: ["__typename": "TokenAttribute", "traitType": traitType, "value": value, "displayType": displayType])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var traitType: String? {
            get {
              return resultMap["traitType"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "traitType")
            }
          }

          public var value: String? {
            get {
              return resultMap["value"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "value")
            }
          }

          public var displayType: String? {
            get {
              return resultMap["displayType"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "displayType")
            }
          }
        }
      }

      public struct Sale: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["Sale"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLBooleanCondition(variableName: "includeFullDetails", inverted: false, selections: [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("saleContractAddress", type: .scalar(String.self)),
              GraphQLField("transactionInfo", type: .nonNull(.object(TransactionInfo.selections))),
              GraphQLField("buyerAddress", type: .nonNull(.scalar(String.self))),
              GraphQLField("collectionAddress", type: .nonNull(.scalar(String.self))),
              GraphQLField("price", type: .nonNull(.object(Price.selections))),
              GraphQLField("sellerAddress", type: .nonNull(.scalar(String.self))),
              GraphQLField("tokenId", type: .nonNull(.scalar(String.self))),
            ]),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(saleContractAddress: String? = nil, transactionInfo: TransactionInfo? = nil, buyerAddress: String? = nil, collectionAddress: String? = nil, price: Price? = nil, sellerAddress: String? = nil, tokenId: String? = nil) {
          self.init(unsafeResultMap: ["__typename": "Sale", "saleContractAddress": saleContractAddress, "transactionInfo": transactionInfo.flatMap { (value: TransactionInfo) -> ResultMap in value.resultMap }, "buyerAddress": buyerAddress, "collectionAddress": collectionAddress, "price": price.flatMap { (value: Price) -> ResultMap in value.resultMap }, "sellerAddress": sellerAddress, "tokenId": tokenId])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var saleContractAddress: String? {
          get {
            return resultMap["saleContractAddress"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "saleContractAddress")
          }
        }

        public var transactionInfo: TransactionInfo? {
          get {
            return (resultMap["transactionInfo"] as? ResultMap).flatMap { TransactionInfo(unsafeResultMap: $0) }
          }
          set {
            resultMap.updateValue(newValue?.resultMap, forKey: "transactionInfo")
          }
        }

        public var buyerAddress: String? {
          get {
            return resultMap["buyerAddress"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "buyerAddress")
          }
        }

        public var collectionAddress: String? {
          get {
            return resultMap["collectionAddress"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "collectionAddress")
          }
        }

        public var price: Price? {
          get {
            return (resultMap["price"] as? ResultMap).flatMap { Price(unsafeResultMap: $0) }
          }
          set {
            resultMap.updateValue(newValue?.resultMap, forKey: "price")
          }
        }

        public var sellerAddress: String? {
          get {
            return resultMap["sellerAddress"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "sellerAddress")
          }
        }

        public var tokenId: String? {
          get {
            return resultMap["tokenId"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "tokenId")
          }
        }

        public var fragments: Fragments {
          get {
            return Fragments(unsafeResultMap: resultMap)
          }
          set {
            resultMap += newValue.resultMap
          }
        }

        public struct Fragments {
          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public var saleInfo: SaleInfo {
            get {
              return SaleInfo(unsafeResultMap: resultMap)
            }
            set {
              resultMap += newValue.resultMap
            }
          }
        }

        public struct TransactionInfo: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["TransactionInfo"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
              GraphQLField("blockTimestamp", type: .nonNull(.scalar(String.self))),
              GraphQLField("transactionHash", type: .scalar(String.self)),
              GraphQLField("logIndex", type: .scalar(Int.self)),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(blockNumber: Int, blockTimestamp: String, transactionHash: String? = nil, logIndex: Int? = nil) {
            self.init(unsafeResultMap: ["__typename": "TransactionInfo", "blockNumber": blockNumber, "blockTimestamp": blockTimestamp, "transactionHash": transactionHash, "logIndex": logIndex])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var blockNumber: Int {
            get {
              return resultMap["blockNumber"]! as! Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "blockNumber")
            }
          }

          public var blockTimestamp: String {
            get {
              return resultMap["blockTimestamp"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "blockTimestamp")
            }
          }

          public var transactionHash: String? {
            get {
              return resultMap["transactionHash"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "transactionHash")
            }
          }

          public var logIndex: Int? {
            get {
              return resultMap["logIndex"] as? Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "logIndex")
            }
          }

          public var fragments: Fragments {
            get {
              return Fragments(unsafeResultMap: resultMap)
            }
            set {
              resultMap += newValue.resultMap
            }
          }

          public struct Fragments {
            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public var transactionDetails: TransactionDetails {
              get {
                return TransactionDetails(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }
          }
        }

        public struct Price: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["PriceAtTime"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
              GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
              GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
              GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
            self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var blockNumber: Int {
            get {
              return resultMap["blockNumber"]! as! Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "blockNumber")
            }
          }

          public var chainTokenPrice: ChainTokenPrice? {
            get {
              return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
            }
            set {
              resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
            }
          }

          public var nativePrice: NativePrice {
            get {
              return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
            }
            set {
              resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
            }
          }

          public var usdcPrice: UsdcPrice? {
            get {
              return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
            }
            set {
              resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
            }
          }

          public var fragments: Fragments {
            get {
              return Fragments(unsafeResultMap: resultMap)
            }
            set {
              resultMap += newValue.resultMap
            }
          }

          public struct Fragments {
            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public var priceSummary: PriceSummary {
              get {
                return PriceSummary(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }
          }

          public struct ChainTokenPrice: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["CurrencyAmount"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                GraphQLField("raw", type: .nonNull(.scalar(String.self))),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(decimal: Double, raw: String) {
              self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var decimal: Double {
              get {
                return resultMap["decimal"]! as! Double
              }
              set {
                resultMap.updateValue(newValue, forKey: "decimal")
              }
            }

            public var raw: String {
              get {
                return resultMap["raw"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "raw")
              }
            }
          }

          public struct NativePrice: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["CurrencyAmount"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(decimal: Double, raw: String, currency: Currency) {
              self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var decimal: Double {
              get {
                return resultMap["decimal"]! as! Double
              }
              set {
                resultMap.updateValue(newValue, forKey: "decimal")
              }
            }

            public var raw: String {
              get {
                return resultMap["raw"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "raw")
              }
            }

            public var currency: Currency {
              get {
                return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
              }
              set {
                resultMap.updateValue(newValue.resultMap, forKey: "currency")
              }
            }

            public struct Currency: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["Currency"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("address", type: .nonNull(.scalar(String.self))),
                  GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                  GraphQLField("name", type: .nonNull(.scalar(String.self))),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(address: String, decimals: Int, name: String) {
                self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var address: String {
                get {
                  return resultMap["address"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "address")
                }
              }

              public var decimals: Int {
                get {
                  return resultMap["decimals"]! as! Int
                }
                set {
                  resultMap.updateValue(newValue, forKey: "decimals")
                }
              }

              public var name: String {
                get {
                  return resultMap["name"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "name")
                }
              }
            }
          }

          public struct UsdcPrice: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["CurrencyAmount"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                GraphQLField("raw", type: .nonNull(.scalar(String.self))),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(decimal: Double, raw: String) {
              self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var decimal: Double {
              get {
                return resultMap["decimal"]! as! Double
              }
              set {
                resultMap.updateValue(newValue, forKey: "decimal")
              }
            }

            public var raw: String {
              get {
                return resultMap["raw"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "raw")
              }
            }
          }
        }
      }

      public struct Event: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["Event"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("transactionInfo", type: .nonNull(.object(TransactionInfo.selections))),
            GraphQLField("eventType", type: .nonNull(.scalar(EventType.self))),
            GraphQLField("collectionAddress", type: .nonNull(.scalar(String.self))),
            GraphQLField("tokenId", type: .scalar(String.self)),
            GraphQLField("properties", type: .nonNull(.object(Property.selections))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(transactionInfo: TransactionInfo, eventType: EventType, collectionAddress: String, tokenId: String? = nil, properties: Property) {
          self.init(unsafeResultMap: ["__typename": "Event", "transactionInfo": transactionInfo.resultMap, "eventType": eventType, "collectionAddress": collectionAddress, "tokenId": tokenId, "properties": properties.resultMap])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var transactionInfo: TransactionInfo {
          get {
            return TransactionInfo(unsafeResultMap: resultMap["transactionInfo"]! as! ResultMap)
          }
          set {
            resultMap.updateValue(newValue.resultMap, forKey: "transactionInfo")
          }
        }

        public var eventType: EventType {
          get {
            return resultMap["eventType"]! as! EventType
          }
          set {
            resultMap.updateValue(newValue, forKey: "eventType")
          }
        }

        public var collectionAddress: String {
          get {
            return resultMap["collectionAddress"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "collectionAddress")
          }
        }

        public var tokenId: String? {
          get {
            return resultMap["tokenId"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "tokenId")
          }
        }

        public var properties: Property {
          get {
            return Property(unsafeResultMap: resultMap["properties"]! as! ResultMap)
          }
          set {
            resultMap.updateValue(newValue.resultMap, forKey: "properties")
          }
        }

        public var fragments: Fragments {
          get {
            return Fragments(unsafeResultMap: resultMap)
          }
          set {
            resultMap += newValue.resultMap
          }
        }

        public struct Fragments {
          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public var eventInfo: EventInfo {
            get {
              return EventInfo(unsafeResultMap: resultMap)
            }
            set {
              resultMap += newValue.resultMap
            }
          }
        }

        public struct TransactionInfo: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["TransactionInfo"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
              GraphQLField("blockTimestamp", type: .nonNull(.scalar(String.self))),
              GraphQLField("transactionHash", type: .scalar(String.self)),
              GraphQLField("logIndex", type: .scalar(Int.self)),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(blockNumber: Int, blockTimestamp: String, transactionHash: String? = nil, logIndex: Int? = nil) {
            self.init(unsafeResultMap: ["__typename": "TransactionInfo", "blockNumber": blockNumber, "blockTimestamp": blockTimestamp, "transactionHash": transactionHash, "logIndex": logIndex])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var blockNumber: Int {
            get {
              return resultMap["blockNumber"]! as! Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "blockNumber")
            }
          }

          public var blockTimestamp: String {
            get {
              return resultMap["blockTimestamp"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "blockTimestamp")
            }
          }

          public var transactionHash: String? {
            get {
              return resultMap["transactionHash"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "transactionHash")
            }
          }

          public var logIndex: Int? {
            get {
              return resultMap["logIndex"] as? Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "logIndex")
            }
          }

          public var fragments: Fragments {
            get {
              return Fragments(unsafeResultMap: resultMap)
            }
            set {
              resultMap += newValue.resultMap
            }
          }

          public struct Fragments {
            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public var transactionDetails: TransactionDetails {
              get {
                return TransactionDetails(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }
          }
        }

        public struct Property: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["ApprovalEvent", "MintEvent", "Sale", "TransferEvent", "V1MarketEvent", "V2AuctionEvent", "V3AskEvent"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLTypeCase(
                variants: ["MintEvent": AsMintEvent.selections, "TransferEvent": AsTransferEvent.selections, "V1MarketEvent": AsV1MarketEvent.selections, "V2AuctionEvent": AsV2AuctionEvent.selections, "V3AskEvent": AsV3AskEvent.selections],
                default: [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                ]
              )
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public static func makeApprovalEvent() -> Property {
            return Property(unsafeResultMap: ["__typename": "ApprovalEvent"])
          }

          public static func makeSale() -> Property {
            return Property(unsafeResultMap: ["__typename": "Sale"])
          }

          public static func makeMintEvent(tokenId: String, collectionAddress: String, originatorAddress: String, toAddress: String, price: AsMintEvent.Price) -> Property {
            return Property(unsafeResultMap: ["__typename": "MintEvent", "tokenId": tokenId, "collectionAddress": collectionAddress, "originatorAddress": originatorAddress, "toAddress": toAddress, "price": price.resultMap])
          }

          public static func makeTransferEvent(fromAddress: String, toAddress: String, collectionAddress: String, tokenId: String) -> Property {
            return Property(unsafeResultMap: ["__typename": "TransferEvent", "fromAddress": fromAddress, "toAddress": toAddress, "collectionAddress": collectionAddress, "tokenId": tokenId])
          }

          public static func makeV1MarketEvent(v1MarketEventType: V1MarketEventType, address: String, collectionAddress: String, tokenId: String, properties: AsV1MarketEvent.Property) -> Property {
            return Property(unsafeResultMap: ["__typename": "V1MarketEvent", "v1MarketEventType": v1MarketEventType, "address": address, "collectionAddress": collectionAddress, "tokenId": tokenId, "properties": properties.resultMap])
          }

          public static func makeV2AuctionEvent(v2AuctionEventType: V2AuctionEventType, address: String, auctionId: Int, collectionAddress: String, tokenId: String, properties: AsV2AuctionEvent.Property) -> Property {
            return Property(unsafeResultMap: ["__typename": "V2AuctionEvent", "v2AuctionEventType": v2AuctionEventType, "address": address, "auctionId": auctionId, "collectionAddress": collectionAddress, "tokenId": tokenId, "properties": properties.resultMap])
          }

          public static func makeV3AskEvent(v3AskEventType: V3AskEventType, address: String, collectionAddress: String, tokenId: String, properties: AsV3AskEvent.Property) -> Property {
            return Property(unsafeResultMap: ["__typename": "V3AskEvent", "v3AskEventType": v3AskEventType, "address": address, "collectionAddress": collectionAddress, "tokenId": tokenId, "properties": properties.resultMap])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var asMintEvent: AsMintEvent? {
            get {
              if !AsMintEvent.possibleTypes.contains(__typename) { return nil }
              return AsMintEvent(unsafeResultMap: resultMap)
            }
            set {
              guard let newValue = newValue else { return }
              resultMap = newValue.resultMap
            }
          }

          public struct AsMintEvent: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["MintEvent"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("tokenId", type: .nonNull(.scalar(String.self))),
                GraphQLField("collectionAddress", type: .nonNull(.scalar(String.self))),
                GraphQLField("originatorAddress", type: .nonNull(.scalar(String.self))),
                GraphQLField("toAddress", type: .nonNull(.scalar(String.self))),
                GraphQLField("price", type: .nonNull(.object(Price.selections))),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(tokenId: String, collectionAddress: String, originatorAddress: String, toAddress: String, price: Price) {
              self.init(unsafeResultMap: ["__typename": "MintEvent", "tokenId": tokenId, "collectionAddress": collectionAddress, "originatorAddress": originatorAddress, "toAddress": toAddress, "price": price.resultMap])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var tokenId: String {
              get {
                return resultMap["tokenId"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "tokenId")
              }
            }

            public var collectionAddress: String {
              get {
                return resultMap["collectionAddress"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "collectionAddress")
              }
            }

            public var originatorAddress: String {
              get {
                return resultMap["originatorAddress"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "originatorAddress")
              }
            }

            public var toAddress: String {
              get {
                return resultMap["toAddress"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "toAddress")
              }
            }

            public var price: Price {
              get {
                return Price(unsafeResultMap: resultMap["price"]! as! ResultMap)
              }
              set {
                resultMap.updateValue(newValue.resultMap, forKey: "price")
              }
            }

            public struct Price: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["PriceAtTime"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                  GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
                  GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
                  GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
                self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var blockNumber: Int {
                get {
                  return resultMap["blockNumber"]! as! Int
                }
                set {
                  resultMap.updateValue(newValue, forKey: "blockNumber")
                }
              }

              public var chainTokenPrice: ChainTokenPrice? {
                get {
                  return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
                }
                set {
                  resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
                }
              }

              public var nativePrice: NativePrice {
                get {
                  return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
                }
                set {
                  resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
                }
              }

              public var usdcPrice: UsdcPrice? {
                get {
                  return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
                }
                set {
                  resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
                }
              }

              public var fragments: Fragments {
                get {
                  return Fragments(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }

              public struct Fragments {
                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public var priceSummary: PriceSummary {
                  get {
                    return PriceSummary(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }
              }

              public struct ChainTokenPrice: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["CurrencyAmount"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                    GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(decimal: Double, raw: String) {
                  self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var decimal: Double {
                  get {
                    return resultMap["decimal"]! as! Double
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimal")
                  }
                }

                public var raw: String {
                  get {
                    return resultMap["raw"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "raw")
                  }
                }
              }

              public struct NativePrice: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["CurrencyAmount"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                    GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                    GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(decimal: Double, raw: String, currency: Currency) {
                  self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var decimal: Double {
                  get {
                    return resultMap["decimal"]! as! Double
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimal")
                  }
                }

                public var raw: String {
                  get {
                    return resultMap["raw"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "raw")
                  }
                }

                public var currency: Currency {
                  get {
                    return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
                  }
                  set {
                    resultMap.updateValue(newValue.resultMap, forKey: "currency")
                  }
                }

                public struct Currency: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["Currency"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("address", type: .nonNull(.scalar(String.self))),
                      GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                      GraphQLField("name", type: .nonNull(.scalar(String.self))),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(address: String, decimals: Int, name: String) {
                    self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var address: String {
                    get {
                      return resultMap["address"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "address")
                    }
                  }

                  public var decimals: Int {
                    get {
                      return resultMap["decimals"]! as! Int
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "decimals")
                    }
                  }

                  public var name: String {
                    get {
                      return resultMap["name"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "name")
                    }
                  }
                }
              }

              public struct UsdcPrice: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["CurrencyAmount"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                    GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(decimal: Double, raw: String) {
                  self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var decimal: Double {
                  get {
                    return resultMap["decimal"]! as! Double
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimal")
                  }
                }

                public var raw: String {
                  get {
                    return resultMap["raw"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "raw")
                  }
                }
              }
            }
          }

          public var asTransferEvent: AsTransferEvent? {
            get {
              if !AsTransferEvent.possibleTypes.contains(__typename) { return nil }
              return AsTransferEvent(unsafeResultMap: resultMap)
            }
            set {
              guard let newValue = newValue else { return }
              resultMap = newValue.resultMap
            }
          }

          public struct AsTransferEvent: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["TransferEvent"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("fromAddress", type: .nonNull(.scalar(String.self))),
                GraphQLField("toAddress", type: .nonNull(.scalar(String.self))),
                GraphQLField("collectionAddress", type: .nonNull(.scalar(String.self))),
                GraphQLField("tokenId", type: .nonNull(.scalar(String.self))),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(fromAddress: String, toAddress: String, collectionAddress: String, tokenId: String) {
              self.init(unsafeResultMap: ["__typename": "TransferEvent", "fromAddress": fromAddress, "toAddress": toAddress, "collectionAddress": collectionAddress, "tokenId": tokenId])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var fromAddress: String {
              get {
                return resultMap["fromAddress"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "fromAddress")
              }
            }

            public var toAddress: String {
              get {
                return resultMap["toAddress"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "toAddress")
              }
            }

            public var collectionAddress: String {
              get {
                return resultMap["collectionAddress"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "collectionAddress")
              }
            }

            public var tokenId: String {
              get {
                return resultMap["tokenId"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "tokenId")
              }
            }
          }

          public var asV1MarketEvent: AsV1MarketEvent? {
            get {
              if !AsV1MarketEvent.possibleTypes.contains(__typename) { return nil }
              return AsV1MarketEvent(unsafeResultMap: resultMap)
            }
            set {
              guard let newValue = newValue else { return }
              resultMap = newValue.resultMap
            }
          }

          public struct AsV1MarketEvent: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["V1MarketEvent"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("v1MarketEventType", type: .nonNull(.scalar(V1MarketEventType.self))),
                GraphQLField("address", type: .nonNull(.scalar(String.self))),
                GraphQLField("collectionAddress", type: .nonNull(.scalar(String.self))),
                GraphQLField("tokenId", type: .nonNull(.scalar(String.self))),
                GraphQLField("properties", type: .nonNull(.object(Property.selections))),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(v1MarketEventType: V1MarketEventType, address: String, collectionAddress: String, tokenId: String, properties: Property) {
              self.init(unsafeResultMap: ["__typename": "V1MarketEvent", "v1MarketEventType": v1MarketEventType, "address": address, "collectionAddress": collectionAddress, "tokenId": tokenId, "properties": properties.resultMap])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var v1MarketEventType: V1MarketEventType {
              get {
                return resultMap["v1MarketEventType"]! as! V1MarketEventType
              }
              set {
                resultMap.updateValue(newValue, forKey: "v1MarketEventType")
              }
            }

            public var address: String {
              get {
                return resultMap["address"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "address")
              }
            }

            public var collectionAddress: String {
              get {
                return resultMap["collectionAddress"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "collectionAddress")
              }
            }

            public var tokenId: String {
              get {
                return resultMap["tokenId"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "tokenId")
              }
            }

            public var properties: Property {
              get {
                return Property(unsafeResultMap: resultMap["properties"]! as! ResultMap)
              }
              set {
                resultMap.updateValue(newValue.resultMap, forKey: "properties")
              }
            }

            public struct Property: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["V1MarketAskCreatedEventProperties", "V1MarketAskRemovedEventProperties", "V1MarketOfferCreatedEventProperties", "V1MarketOfferFinalizedEventProperties", "V1MarketOfferRemovedEventProperties", "V1MarketBidShareUpdatedEventProperties"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLTypeCase(
                    variants: ["V1MarketAskCreatedEventProperties": AsV1MarketAskCreatedEventProperties.selections, "V1MarketAskRemovedEventProperties": AsV1MarketAskRemovedEventProperties.selections, "V1MarketOfferCreatedEventProperties": AsV1MarketOfferCreatedEventProperties.selections, "V1MarketOfferFinalizedEventProperties": AsV1MarketOfferFinalizedEventProperties.selections, "V1MarketOfferRemovedEventProperties": AsV1MarketOfferRemovedEventProperties.selections],
                    default: [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    ]
                  )
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public static func makeV1MarketBidShareUpdatedEventProperties() -> Property {
                return Property(unsafeResultMap: ["__typename": "V1MarketBidShareUpdatedEventProperties"])
              }

              public static func makeV1MarketAskCreatedEventProperties(amount: String, price: AsV1MarketAskCreatedEventProperties.Price, currency: String) -> Property {
                return Property(unsafeResultMap: ["__typename": "V1MarketAskCreatedEventProperties", "amount": amount, "price": price.resultMap, "currency": currency])
              }

              public static func makeV1MarketAskRemovedEventProperties(amount: String, price: AsV1MarketAskRemovedEventProperties.Price, currency: String) -> Property {
                return Property(unsafeResultMap: ["__typename": "V1MarketAskRemovedEventProperties", "amount": amount, "price": price.resultMap, "currency": currency])
              }

              public static func makeV1MarketOfferCreatedEventProperties(amount: String, price: AsV1MarketOfferCreatedEventProperties.Price, currency: String, bidder: String) -> Property {
                return Property(unsafeResultMap: ["__typename": "V1MarketOfferCreatedEventProperties", "amount": amount, "price": price.resultMap, "currency": currency, "bidder": bidder])
              }

              public static func makeV1MarketOfferFinalizedEventProperties(amount: String, price: AsV1MarketOfferFinalizedEventProperties.Price, currency: String, bidder: String) -> Property {
                return Property(unsafeResultMap: ["__typename": "V1MarketOfferFinalizedEventProperties", "amount": amount, "price": price.resultMap, "currency": currency, "bidder": bidder])
              }

              public static func makeV1MarketOfferRemovedEventProperties(amount: String, price: AsV1MarketOfferRemovedEventProperties.Price, currency: String, bidder: String) -> Property {
                return Property(unsafeResultMap: ["__typename": "V1MarketOfferRemovedEventProperties", "amount": amount, "price": price.resultMap, "currency": currency, "bidder": bidder])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var fragments: Fragments {
                get {
                  return Fragments(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }

              public struct Fragments {
                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public var v1MarketEventPropertiesInfo: V1MarketEventPropertiesInfo {
                  get {
                    return V1MarketEventPropertiesInfo(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }
              }

              public var asV1MarketAskCreatedEventProperties: AsV1MarketAskCreatedEventProperties? {
                get {
                  if !AsV1MarketAskCreatedEventProperties.possibleTypes.contains(__typename) { return nil }
                  return AsV1MarketAskCreatedEventProperties(unsafeResultMap: resultMap)
                }
                set {
                  guard let newValue = newValue else { return }
                  resultMap = newValue.resultMap
                }
              }

              public struct AsV1MarketAskCreatedEventProperties: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["V1MarketAskCreatedEventProperties"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("amount", type: .nonNull(.scalar(String.self))),
                    GraphQLField("price", type: .nonNull(.object(Price.selections))),
                    GraphQLField("currency", type: .nonNull(.scalar(String.self))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(amount: String, price: Price, currency: String) {
                  self.init(unsafeResultMap: ["__typename": "V1MarketAskCreatedEventProperties", "amount": amount, "price": price.resultMap, "currency": currency])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var amount: String {
                  get {
                    return resultMap["amount"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "amount")
                  }
                }

                public var price: Price {
                  get {
                    return Price(unsafeResultMap: resultMap["price"]! as! ResultMap)
                  }
                  set {
                    resultMap.updateValue(newValue.resultMap, forKey: "price")
                  }
                }

                public var currency: String {
                  get {
                    return resultMap["currency"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "currency")
                  }
                }

                public var fragments: Fragments {
                  get {
                    return Fragments(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }

                public struct Fragments {
                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public var v1MarketEventPropertiesInfo: V1MarketEventPropertiesInfo {
                    get {
                      return V1MarketEventPropertiesInfo(unsafeResultMap: resultMap)
                    }
                    set {
                      resultMap += newValue.resultMap
                    }
                  }
                }

                public struct Price: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["PriceAtTime"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                      GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
                      GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
                      GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
                    self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var blockNumber: Int {
                    get {
                      return resultMap["blockNumber"]! as! Int
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "blockNumber")
                    }
                  }

                  public var chainTokenPrice: ChainTokenPrice? {
                    get {
                      return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
                    }
                    set {
                      resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
                    }
                  }

                  public var nativePrice: NativePrice {
                    get {
                      return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
                    }
                    set {
                      resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
                    }
                  }

                  public var usdcPrice: UsdcPrice? {
                    get {
                      return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
                    }
                    set {
                      resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
                    }
                  }

                  public var fragments: Fragments {
                    get {
                      return Fragments(unsafeResultMap: resultMap)
                    }
                    set {
                      resultMap += newValue.resultMap
                    }
                  }

                  public struct Fragments {
                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public var priceSummary: PriceSummary {
                      get {
                        return PriceSummary(unsafeResultMap: resultMap)
                      }
                      set {
                        resultMap += newValue.resultMap
                      }
                    }
                  }

                  public struct ChainTokenPrice: GraphQLSelectionSet {
                    public static let possibleTypes: [String] = ["CurrencyAmount"]

                    public static var selections: [GraphQLSelection] {
                      return [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                        GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                      ]
                    }

                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public init(decimal: Double, raw: String) {
                      self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                    }

                    public var __typename: String {
                      get {
                        return resultMap["__typename"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "__typename")
                      }
                    }

                    public var decimal: Double {
                      get {
                        return resultMap["decimal"]! as! Double
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "decimal")
                      }
                    }

                    public var raw: String {
                      get {
                        return resultMap["raw"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "raw")
                      }
                    }
                  }

                  public struct NativePrice: GraphQLSelectionSet {
                    public static let possibleTypes: [String] = ["CurrencyAmount"]

                    public static var selections: [GraphQLSelection] {
                      return [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                        GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                        GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
                      ]
                    }

                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public init(decimal: Double, raw: String, currency: Currency) {
                      self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
                    }

                    public var __typename: String {
                      get {
                        return resultMap["__typename"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "__typename")
                      }
                    }

                    public var decimal: Double {
                      get {
                        return resultMap["decimal"]! as! Double
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "decimal")
                      }
                    }

                    public var raw: String {
                      get {
                        return resultMap["raw"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "raw")
                      }
                    }

                    public var currency: Currency {
                      get {
                        return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
                      }
                      set {
                        resultMap.updateValue(newValue.resultMap, forKey: "currency")
                      }
                    }

                    public struct Currency: GraphQLSelectionSet {
                      public static let possibleTypes: [String] = ["Currency"]

                      public static var selections: [GraphQLSelection] {
                        return [
                          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                          GraphQLField("address", type: .nonNull(.scalar(String.self))),
                          GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                          GraphQLField("name", type: .nonNull(.scalar(String.self))),
                        ]
                      }

                      public private(set) var resultMap: ResultMap

                      public init(unsafeResultMap: ResultMap) {
                        self.resultMap = unsafeResultMap
                      }

                      public init(address: String, decimals: Int, name: String) {
                        self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
                      }

                      public var __typename: String {
                        get {
                          return resultMap["__typename"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "__typename")
                        }
                      }

                      public var address: String {
                        get {
                          return resultMap["address"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "address")
                        }
                      }

                      public var decimals: Int {
                        get {
                          return resultMap["decimals"]! as! Int
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "decimals")
                        }
                      }

                      public var name: String {
                        get {
                          return resultMap["name"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "name")
                        }
                      }
                    }
                  }

                  public struct UsdcPrice: GraphQLSelectionSet {
                    public static let possibleTypes: [String] = ["CurrencyAmount"]

                    public static var selections: [GraphQLSelection] {
                      return [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                        GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                      ]
                    }

                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public init(decimal: Double, raw: String) {
                      self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                    }

                    public var __typename: String {
                      get {
                        return resultMap["__typename"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "__typename")
                      }
                    }

                    public var decimal: Double {
                      get {
                        return resultMap["decimal"]! as! Double
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "decimal")
                      }
                    }

                    public var raw: String {
                      get {
                        return resultMap["raw"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "raw")
                      }
                    }
                  }
                }
              }

              public var asV1MarketAskRemovedEventProperties: AsV1MarketAskRemovedEventProperties? {
                get {
                  if !AsV1MarketAskRemovedEventProperties.possibleTypes.contains(__typename) { return nil }
                  return AsV1MarketAskRemovedEventProperties(unsafeResultMap: resultMap)
                }
                set {
                  guard let newValue = newValue else { return }
                  resultMap = newValue.resultMap
                }
              }

              public struct AsV1MarketAskRemovedEventProperties: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["V1MarketAskRemovedEventProperties"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("amount", type: .nonNull(.scalar(String.self))),
                    GraphQLField("price", type: .nonNull(.object(Price.selections))),
                    GraphQLField("currency", type: .nonNull(.scalar(String.self))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(amount: String, price: Price, currency: String) {
                  self.init(unsafeResultMap: ["__typename": "V1MarketAskRemovedEventProperties", "amount": amount, "price": price.resultMap, "currency": currency])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var amount: String {
                  get {
                    return resultMap["amount"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "amount")
                  }
                }

                public var price: Price {
                  get {
                    return Price(unsafeResultMap: resultMap["price"]! as! ResultMap)
                  }
                  set {
                    resultMap.updateValue(newValue.resultMap, forKey: "price")
                  }
                }

                public var currency: String {
                  get {
                    return resultMap["currency"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "currency")
                  }
                }

                public var fragments: Fragments {
                  get {
                    return Fragments(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }

                public struct Fragments {
                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public var v1MarketEventPropertiesInfo: V1MarketEventPropertiesInfo {
                    get {
                      return V1MarketEventPropertiesInfo(unsafeResultMap: resultMap)
                    }
                    set {
                      resultMap += newValue.resultMap
                    }
                  }
                }

                public struct Price: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["PriceAtTime"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                      GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
                      GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
                      GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
                    self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var blockNumber: Int {
                    get {
                      return resultMap["blockNumber"]! as! Int
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "blockNumber")
                    }
                  }

                  public var chainTokenPrice: ChainTokenPrice? {
                    get {
                      return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
                    }
                    set {
                      resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
                    }
                  }

                  public var nativePrice: NativePrice {
                    get {
                      return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
                    }
                    set {
                      resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
                    }
                  }

                  public var usdcPrice: UsdcPrice? {
                    get {
                      return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
                    }
                    set {
                      resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
                    }
                  }

                  public var fragments: Fragments {
                    get {
                      return Fragments(unsafeResultMap: resultMap)
                    }
                    set {
                      resultMap += newValue.resultMap
                    }
                  }

                  public struct Fragments {
                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public var priceSummary: PriceSummary {
                      get {
                        return PriceSummary(unsafeResultMap: resultMap)
                      }
                      set {
                        resultMap += newValue.resultMap
                      }
                    }
                  }

                  public struct ChainTokenPrice: GraphQLSelectionSet {
                    public static let possibleTypes: [String] = ["CurrencyAmount"]

                    public static var selections: [GraphQLSelection] {
                      return [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                        GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                      ]
                    }

                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public init(decimal: Double, raw: String) {
                      self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                    }

                    public var __typename: String {
                      get {
                        return resultMap["__typename"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "__typename")
                      }
                    }

                    public var decimal: Double {
                      get {
                        return resultMap["decimal"]! as! Double
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "decimal")
                      }
                    }

                    public var raw: String {
                      get {
                        return resultMap["raw"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "raw")
                      }
                    }
                  }

                  public struct NativePrice: GraphQLSelectionSet {
                    public static let possibleTypes: [String] = ["CurrencyAmount"]

                    public static var selections: [GraphQLSelection] {
                      return [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                        GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                        GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
                      ]
                    }

                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public init(decimal: Double, raw: String, currency: Currency) {
                      self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
                    }

                    public var __typename: String {
                      get {
                        return resultMap["__typename"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "__typename")
                      }
                    }

                    public var decimal: Double {
                      get {
                        return resultMap["decimal"]! as! Double
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "decimal")
                      }
                    }

                    public var raw: String {
                      get {
                        return resultMap["raw"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "raw")
                      }
                    }

                    public var currency: Currency {
                      get {
                        return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
                      }
                      set {
                        resultMap.updateValue(newValue.resultMap, forKey: "currency")
                      }
                    }

                    public struct Currency: GraphQLSelectionSet {
                      public static let possibleTypes: [String] = ["Currency"]

                      public static var selections: [GraphQLSelection] {
                        return [
                          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                          GraphQLField("address", type: .nonNull(.scalar(String.self))),
                          GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                          GraphQLField("name", type: .nonNull(.scalar(String.self))),
                        ]
                      }

                      public private(set) var resultMap: ResultMap

                      public init(unsafeResultMap: ResultMap) {
                        self.resultMap = unsafeResultMap
                      }

                      public init(address: String, decimals: Int, name: String) {
                        self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
                      }

                      public var __typename: String {
                        get {
                          return resultMap["__typename"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "__typename")
                        }
                      }

                      public var address: String {
                        get {
                          return resultMap["address"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "address")
                        }
                      }

                      public var decimals: Int {
                        get {
                          return resultMap["decimals"]! as! Int
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "decimals")
                        }
                      }

                      public var name: String {
                        get {
                          return resultMap["name"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "name")
                        }
                      }
                    }
                  }

                  public struct UsdcPrice: GraphQLSelectionSet {
                    public static let possibleTypes: [String] = ["CurrencyAmount"]

                    public static var selections: [GraphQLSelection] {
                      return [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                        GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                      ]
                    }

                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public init(decimal: Double, raw: String) {
                      self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                    }

                    public var __typename: String {
                      get {
                        return resultMap["__typename"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "__typename")
                      }
                    }

                    public var decimal: Double {
                      get {
                        return resultMap["decimal"]! as! Double
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "decimal")
                      }
                    }

                    public var raw: String {
                      get {
                        return resultMap["raw"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "raw")
                      }
                    }
                  }
                }
              }

              public var asV1MarketOfferCreatedEventProperties: AsV1MarketOfferCreatedEventProperties? {
                get {
                  if !AsV1MarketOfferCreatedEventProperties.possibleTypes.contains(__typename) { return nil }
                  return AsV1MarketOfferCreatedEventProperties(unsafeResultMap: resultMap)
                }
                set {
                  guard let newValue = newValue else { return }
                  resultMap = newValue.resultMap
                }
              }

              public struct AsV1MarketOfferCreatedEventProperties: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["V1MarketOfferCreatedEventProperties"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("amount", type: .nonNull(.scalar(String.self))),
                    GraphQLField("price", type: .nonNull(.object(Price.selections))),
                    GraphQLField("currency", type: .nonNull(.scalar(String.self))),
                    GraphQLField("bidder", type: .nonNull(.scalar(String.self))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(amount: String, price: Price, currency: String, bidder: String) {
                  self.init(unsafeResultMap: ["__typename": "V1MarketOfferCreatedEventProperties", "amount": amount, "price": price.resultMap, "currency": currency, "bidder": bidder])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var amount: String {
                  get {
                    return resultMap["amount"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "amount")
                  }
                }

                public var price: Price {
                  get {
                    return Price(unsafeResultMap: resultMap["price"]! as! ResultMap)
                  }
                  set {
                    resultMap.updateValue(newValue.resultMap, forKey: "price")
                  }
                }

                public var currency: String {
                  get {
                    return resultMap["currency"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "currency")
                  }
                }

                public var bidder: String {
                  get {
                    return resultMap["bidder"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "bidder")
                  }
                }

                public var fragments: Fragments {
                  get {
                    return Fragments(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }

                public struct Fragments {
                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public var v1MarketEventPropertiesInfo: V1MarketEventPropertiesInfo {
                    get {
                      return V1MarketEventPropertiesInfo(unsafeResultMap: resultMap)
                    }
                    set {
                      resultMap += newValue.resultMap
                    }
                  }
                }

                public struct Price: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["PriceAtTime"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                      GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
                      GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
                      GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
                    self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var blockNumber: Int {
                    get {
                      return resultMap["blockNumber"]! as! Int
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "blockNumber")
                    }
                  }

                  public var chainTokenPrice: ChainTokenPrice? {
                    get {
                      return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
                    }
                    set {
                      resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
                    }
                  }

                  public var nativePrice: NativePrice {
                    get {
                      return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
                    }
                    set {
                      resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
                    }
                  }

                  public var usdcPrice: UsdcPrice? {
                    get {
                      return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
                    }
                    set {
                      resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
                    }
                  }

                  public var fragments: Fragments {
                    get {
                      return Fragments(unsafeResultMap: resultMap)
                    }
                    set {
                      resultMap += newValue.resultMap
                    }
                  }

                  public struct Fragments {
                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public var priceSummary: PriceSummary {
                      get {
                        return PriceSummary(unsafeResultMap: resultMap)
                      }
                      set {
                        resultMap += newValue.resultMap
                      }
                    }
                  }

                  public struct ChainTokenPrice: GraphQLSelectionSet {
                    public static let possibleTypes: [String] = ["CurrencyAmount"]

                    public static var selections: [GraphQLSelection] {
                      return [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                        GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                      ]
                    }

                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public init(decimal: Double, raw: String) {
                      self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                    }

                    public var __typename: String {
                      get {
                        return resultMap["__typename"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "__typename")
                      }
                    }

                    public var decimal: Double {
                      get {
                        return resultMap["decimal"]! as! Double
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "decimal")
                      }
                    }

                    public var raw: String {
                      get {
                        return resultMap["raw"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "raw")
                      }
                    }
                  }

                  public struct NativePrice: GraphQLSelectionSet {
                    public static let possibleTypes: [String] = ["CurrencyAmount"]

                    public static var selections: [GraphQLSelection] {
                      return [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                        GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                        GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
                      ]
                    }

                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public init(decimal: Double, raw: String, currency: Currency) {
                      self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
                    }

                    public var __typename: String {
                      get {
                        return resultMap["__typename"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "__typename")
                      }
                    }

                    public var decimal: Double {
                      get {
                        return resultMap["decimal"]! as! Double
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "decimal")
                      }
                    }

                    public var raw: String {
                      get {
                        return resultMap["raw"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "raw")
                      }
                    }

                    public var currency: Currency {
                      get {
                        return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
                      }
                      set {
                        resultMap.updateValue(newValue.resultMap, forKey: "currency")
                      }
                    }

                    public struct Currency: GraphQLSelectionSet {
                      public static let possibleTypes: [String] = ["Currency"]

                      public static var selections: [GraphQLSelection] {
                        return [
                          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                          GraphQLField("address", type: .nonNull(.scalar(String.self))),
                          GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                          GraphQLField("name", type: .nonNull(.scalar(String.self))),
                        ]
                      }

                      public private(set) var resultMap: ResultMap

                      public init(unsafeResultMap: ResultMap) {
                        self.resultMap = unsafeResultMap
                      }

                      public init(address: String, decimals: Int, name: String) {
                        self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
                      }

                      public var __typename: String {
                        get {
                          return resultMap["__typename"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "__typename")
                        }
                      }

                      public var address: String {
                        get {
                          return resultMap["address"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "address")
                        }
                      }

                      public var decimals: Int {
                        get {
                          return resultMap["decimals"]! as! Int
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "decimals")
                        }
                      }

                      public var name: String {
                        get {
                          return resultMap["name"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "name")
                        }
                      }
                    }
                  }

                  public struct UsdcPrice: GraphQLSelectionSet {
                    public static let possibleTypes: [String] = ["CurrencyAmount"]

                    public static var selections: [GraphQLSelection] {
                      return [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                        GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                      ]
                    }

                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public init(decimal: Double, raw: String) {
                      self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                    }

                    public var __typename: String {
                      get {
                        return resultMap["__typename"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "__typename")
                      }
                    }

                    public var decimal: Double {
                      get {
                        return resultMap["decimal"]! as! Double
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "decimal")
                      }
                    }

                    public var raw: String {
                      get {
                        return resultMap["raw"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "raw")
                      }
                    }
                  }
                }
              }

              public var asV1MarketOfferFinalizedEventProperties: AsV1MarketOfferFinalizedEventProperties? {
                get {
                  if !AsV1MarketOfferFinalizedEventProperties.possibleTypes.contains(__typename) { return nil }
                  return AsV1MarketOfferFinalizedEventProperties(unsafeResultMap: resultMap)
                }
                set {
                  guard let newValue = newValue else { return }
                  resultMap = newValue.resultMap
                }
              }

              public struct AsV1MarketOfferFinalizedEventProperties: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["V1MarketOfferFinalizedEventProperties"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("amount", type: .nonNull(.scalar(String.self))),
                    GraphQLField("price", type: .nonNull(.object(Price.selections))),
                    GraphQLField("currency", type: .nonNull(.scalar(String.self))),
                    GraphQLField("bidder", type: .nonNull(.scalar(String.self))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(amount: String, price: Price, currency: String, bidder: String) {
                  self.init(unsafeResultMap: ["__typename": "V1MarketOfferFinalizedEventProperties", "amount": amount, "price": price.resultMap, "currency": currency, "bidder": bidder])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var amount: String {
                  get {
                    return resultMap["amount"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "amount")
                  }
                }

                public var price: Price {
                  get {
                    return Price(unsafeResultMap: resultMap["price"]! as! ResultMap)
                  }
                  set {
                    resultMap.updateValue(newValue.resultMap, forKey: "price")
                  }
                }

                public var currency: String {
                  get {
                    return resultMap["currency"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "currency")
                  }
                }

                public var bidder: String {
                  get {
                    return resultMap["bidder"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "bidder")
                  }
                }

                public var fragments: Fragments {
                  get {
                    return Fragments(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }

                public struct Fragments {
                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public var v1MarketEventPropertiesInfo: V1MarketEventPropertiesInfo {
                    get {
                      return V1MarketEventPropertiesInfo(unsafeResultMap: resultMap)
                    }
                    set {
                      resultMap += newValue.resultMap
                    }
                  }
                }

                public struct Price: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["PriceAtTime"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                      GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
                      GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
                      GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
                    self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var blockNumber: Int {
                    get {
                      return resultMap["blockNumber"]! as! Int
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "blockNumber")
                    }
                  }

                  public var chainTokenPrice: ChainTokenPrice? {
                    get {
                      return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
                    }
                    set {
                      resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
                    }
                  }

                  public var nativePrice: NativePrice {
                    get {
                      return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
                    }
                    set {
                      resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
                    }
                  }

                  public var usdcPrice: UsdcPrice? {
                    get {
                      return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
                    }
                    set {
                      resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
                    }
                  }

                  public var fragments: Fragments {
                    get {
                      return Fragments(unsafeResultMap: resultMap)
                    }
                    set {
                      resultMap += newValue.resultMap
                    }
                  }

                  public struct Fragments {
                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public var priceSummary: PriceSummary {
                      get {
                        return PriceSummary(unsafeResultMap: resultMap)
                      }
                      set {
                        resultMap += newValue.resultMap
                      }
                    }
                  }

                  public struct ChainTokenPrice: GraphQLSelectionSet {
                    public static let possibleTypes: [String] = ["CurrencyAmount"]

                    public static var selections: [GraphQLSelection] {
                      return [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                        GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                      ]
                    }

                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public init(decimal: Double, raw: String) {
                      self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                    }

                    public var __typename: String {
                      get {
                        return resultMap["__typename"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "__typename")
                      }
                    }

                    public var decimal: Double {
                      get {
                        return resultMap["decimal"]! as! Double
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "decimal")
                      }
                    }

                    public var raw: String {
                      get {
                        return resultMap["raw"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "raw")
                      }
                    }
                  }

                  public struct NativePrice: GraphQLSelectionSet {
                    public static let possibleTypes: [String] = ["CurrencyAmount"]

                    public static var selections: [GraphQLSelection] {
                      return [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                        GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                        GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
                      ]
                    }

                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public init(decimal: Double, raw: String, currency: Currency) {
                      self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
                    }

                    public var __typename: String {
                      get {
                        return resultMap["__typename"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "__typename")
                      }
                    }

                    public var decimal: Double {
                      get {
                        return resultMap["decimal"]! as! Double
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "decimal")
                      }
                    }

                    public var raw: String {
                      get {
                        return resultMap["raw"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "raw")
                      }
                    }

                    public var currency: Currency {
                      get {
                        return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
                      }
                      set {
                        resultMap.updateValue(newValue.resultMap, forKey: "currency")
                      }
                    }

                    public struct Currency: GraphQLSelectionSet {
                      public static let possibleTypes: [String] = ["Currency"]

                      public static var selections: [GraphQLSelection] {
                        return [
                          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                          GraphQLField("address", type: .nonNull(.scalar(String.self))),
                          GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                          GraphQLField("name", type: .nonNull(.scalar(String.self))),
                        ]
                      }

                      public private(set) var resultMap: ResultMap

                      public init(unsafeResultMap: ResultMap) {
                        self.resultMap = unsafeResultMap
                      }

                      public init(address: String, decimals: Int, name: String) {
                        self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
                      }

                      public var __typename: String {
                        get {
                          return resultMap["__typename"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "__typename")
                        }
                      }

                      public var address: String {
                        get {
                          return resultMap["address"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "address")
                        }
                      }

                      public var decimals: Int {
                        get {
                          return resultMap["decimals"]! as! Int
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "decimals")
                        }
                      }

                      public var name: String {
                        get {
                          return resultMap["name"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "name")
                        }
                      }
                    }
                  }

                  public struct UsdcPrice: GraphQLSelectionSet {
                    public static let possibleTypes: [String] = ["CurrencyAmount"]

                    public static var selections: [GraphQLSelection] {
                      return [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                        GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                      ]
                    }

                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public init(decimal: Double, raw: String) {
                      self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                    }

                    public var __typename: String {
                      get {
                        return resultMap["__typename"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "__typename")
                      }
                    }

                    public var decimal: Double {
                      get {
                        return resultMap["decimal"]! as! Double
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "decimal")
                      }
                    }

                    public var raw: String {
                      get {
                        return resultMap["raw"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "raw")
                      }
                    }
                  }
                }
              }

              public var asV1MarketOfferRemovedEventProperties: AsV1MarketOfferRemovedEventProperties? {
                get {
                  if !AsV1MarketOfferRemovedEventProperties.possibleTypes.contains(__typename) { return nil }
                  return AsV1MarketOfferRemovedEventProperties(unsafeResultMap: resultMap)
                }
                set {
                  guard let newValue = newValue else { return }
                  resultMap = newValue.resultMap
                }
              }

              public struct AsV1MarketOfferRemovedEventProperties: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["V1MarketOfferRemovedEventProperties"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("amount", type: .nonNull(.scalar(String.self))),
                    GraphQLField("price", type: .nonNull(.object(Price.selections))),
                    GraphQLField("currency", type: .nonNull(.scalar(String.self))),
                    GraphQLField("bidder", type: .nonNull(.scalar(String.self))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(amount: String, price: Price, currency: String, bidder: String) {
                  self.init(unsafeResultMap: ["__typename": "V1MarketOfferRemovedEventProperties", "amount": amount, "price": price.resultMap, "currency": currency, "bidder": bidder])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var amount: String {
                  get {
                    return resultMap["amount"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "amount")
                  }
                }

                public var price: Price {
                  get {
                    return Price(unsafeResultMap: resultMap["price"]! as! ResultMap)
                  }
                  set {
                    resultMap.updateValue(newValue.resultMap, forKey: "price")
                  }
                }

                public var currency: String {
                  get {
                    return resultMap["currency"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "currency")
                  }
                }

                public var bidder: String {
                  get {
                    return resultMap["bidder"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "bidder")
                  }
                }

                public var fragments: Fragments {
                  get {
                    return Fragments(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }

                public struct Fragments {
                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public var v1MarketEventPropertiesInfo: V1MarketEventPropertiesInfo {
                    get {
                      return V1MarketEventPropertiesInfo(unsafeResultMap: resultMap)
                    }
                    set {
                      resultMap += newValue.resultMap
                    }
                  }
                }

                public struct Price: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["PriceAtTime"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                      GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
                      GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
                      GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
                    self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var blockNumber: Int {
                    get {
                      return resultMap["blockNumber"]! as! Int
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "blockNumber")
                    }
                  }

                  public var chainTokenPrice: ChainTokenPrice? {
                    get {
                      return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
                    }
                    set {
                      resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
                    }
                  }

                  public var nativePrice: NativePrice {
                    get {
                      return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
                    }
                    set {
                      resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
                    }
                  }

                  public var usdcPrice: UsdcPrice? {
                    get {
                      return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
                    }
                    set {
                      resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
                    }
                  }

                  public var fragments: Fragments {
                    get {
                      return Fragments(unsafeResultMap: resultMap)
                    }
                    set {
                      resultMap += newValue.resultMap
                    }
                  }

                  public struct Fragments {
                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public var priceSummary: PriceSummary {
                      get {
                        return PriceSummary(unsafeResultMap: resultMap)
                      }
                      set {
                        resultMap += newValue.resultMap
                      }
                    }
                  }

                  public struct ChainTokenPrice: GraphQLSelectionSet {
                    public static let possibleTypes: [String] = ["CurrencyAmount"]

                    public static var selections: [GraphQLSelection] {
                      return [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                        GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                      ]
                    }

                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public init(decimal: Double, raw: String) {
                      self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                    }

                    public var __typename: String {
                      get {
                        return resultMap["__typename"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "__typename")
                      }
                    }

                    public var decimal: Double {
                      get {
                        return resultMap["decimal"]! as! Double
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "decimal")
                      }
                    }

                    public var raw: String {
                      get {
                        return resultMap["raw"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "raw")
                      }
                    }
                  }

                  public struct NativePrice: GraphQLSelectionSet {
                    public static let possibleTypes: [String] = ["CurrencyAmount"]

                    public static var selections: [GraphQLSelection] {
                      return [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                        GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                        GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
                      ]
                    }

                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public init(decimal: Double, raw: String, currency: Currency) {
                      self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
                    }

                    public var __typename: String {
                      get {
                        return resultMap["__typename"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "__typename")
                      }
                    }

                    public var decimal: Double {
                      get {
                        return resultMap["decimal"]! as! Double
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "decimal")
                      }
                    }

                    public var raw: String {
                      get {
                        return resultMap["raw"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "raw")
                      }
                    }

                    public var currency: Currency {
                      get {
                        return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
                      }
                      set {
                        resultMap.updateValue(newValue.resultMap, forKey: "currency")
                      }
                    }

                    public struct Currency: GraphQLSelectionSet {
                      public static let possibleTypes: [String] = ["Currency"]

                      public static var selections: [GraphQLSelection] {
                        return [
                          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                          GraphQLField("address", type: .nonNull(.scalar(String.self))),
                          GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                          GraphQLField("name", type: .nonNull(.scalar(String.self))),
                        ]
                      }

                      public private(set) var resultMap: ResultMap

                      public init(unsafeResultMap: ResultMap) {
                        self.resultMap = unsafeResultMap
                      }

                      public init(address: String, decimals: Int, name: String) {
                        self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
                      }

                      public var __typename: String {
                        get {
                          return resultMap["__typename"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "__typename")
                        }
                      }

                      public var address: String {
                        get {
                          return resultMap["address"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "address")
                        }
                      }

                      public var decimals: Int {
                        get {
                          return resultMap["decimals"]! as! Int
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "decimals")
                        }
                      }

                      public var name: String {
                        get {
                          return resultMap["name"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "name")
                        }
                      }
                    }
                  }

                  public struct UsdcPrice: GraphQLSelectionSet {
                    public static let possibleTypes: [String] = ["CurrencyAmount"]

                    public static var selections: [GraphQLSelection] {
                      return [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                        GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                      ]
                    }

                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public init(decimal: Double, raw: String) {
                      self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                    }

                    public var __typename: String {
                      get {
                        return resultMap["__typename"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "__typename")
                      }
                    }

                    public var decimal: Double {
                      get {
                        return resultMap["decimal"]! as! Double
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "decimal")
                      }
                    }

                    public var raw: String {
                      get {
                        return resultMap["raw"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "raw")
                      }
                    }
                  }
                }
              }
            }
          }

          public var asV2AuctionEvent: AsV2AuctionEvent? {
            get {
              if !AsV2AuctionEvent.possibleTypes.contains(__typename) { return nil }
              return AsV2AuctionEvent(unsafeResultMap: resultMap)
            }
            set {
              guard let newValue = newValue else { return }
              resultMap = newValue.resultMap
            }
          }

          public struct AsV2AuctionEvent: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["V2AuctionEvent"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("v2AuctionEventType", type: .nonNull(.scalar(V2AuctionEventType.self))),
                GraphQLField("address", type: .nonNull(.scalar(String.self))),
                GraphQLField("auctionId", type: .nonNull(.scalar(Int.self))),
                GraphQLField("collectionAddress", type: .nonNull(.scalar(String.self))),
                GraphQLField("tokenId", type: .nonNull(.scalar(String.self))),
                GraphQLField("properties", type: .nonNull(.object(Property.selections))),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(v2AuctionEventType: V2AuctionEventType, address: String, auctionId: Int, collectionAddress: String, tokenId: String, properties: Property) {
              self.init(unsafeResultMap: ["__typename": "V2AuctionEvent", "v2AuctionEventType": v2AuctionEventType, "address": address, "auctionId": auctionId, "collectionAddress": collectionAddress, "tokenId": tokenId, "properties": properties.resultMap])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var v2AuctionEventType: V2AuctionEventType {
              get {
                return resultMap["v2AuctionEventType"]! as! V2AuctionEventType
              }
              set {
                resultMap.updateValue(newValue, forKey: "v2AuctionEventType")
              }
            }

            public var address: String {
              get {
                return resultMap["address"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "address")
              }
            }

            public var auctionId: Int {
              get {
                return resultMap["auctionId"]! as! Int
              }
              set {
                resultMap.updateValue(newValue, forKey: "auctionId")
              }
            }

            public var collectionAddress: String {
              get {
                return resultMap["collectionAddress"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "collectionAddress")
              }
            }

            public var tokenId: String {
              get {
                return resultMap["tokenId"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "tokenId")
              }
            }

            public var properties: Property {
              get {
                return Property(unsafeResultMap: resultMap["properties"]! as! ResultMap)
              }
              set {
                resultMap.updateValue(newValue.resultMap, forKey: "properties")
              }
            }

            public struct Property: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["V2AuctionBidEventProperties", "V2AuctionCreatedEventProperties", "V2AuctionCanceledEventProperties", "V2AuctionDurationExtendedEventProperties", "V2AuctionEndedEventProperties", "V2AuctionReservePriceUpdatedEventProperties", "V2AuctionApprovalUpdatedEventProperties"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLTypeCase(
                    variants: ["V2AuctionBidEventProperties": AsV2AuctionBidEventProperties.selections, "V2AuctionCreatedEventProperties": AsV2AuctionCreatedEventProperties.selections, "V2AuctionCanceledEventProperties": AsV2AuctionCanceledEventProperties.selections, "V2AuctionDurationExtendedEventProperties": AsV2AuctionDurationExtendedEventProperties.selections, "V2AuctionEndedEventProperties": AsV2AuctionEndedEventProperties.selections, "V2AuctionReservePriceUpdatedEventProperties": AsV2AuctionReservePriceUpdatedEventProperties.selections, "V2AuctionApprovalUpdatedEventProperties": AsV2AuctionApprovalUpdatedEventProperties.selections],
                    default: [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    ]
                  )
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public static func makeV2AuctionBidEventProperties(sender: String, firstBid: Bool, extended: Bool, value: String, price: AsV2AuctionBidEventProperties.Price) -> Property {
                return Property(unsafeResultMap: ["__typename": "V2AuctionBidEventProperties", "sender": sender, "firstBid": firstBid, "extended": extended, "value": value, "price": price.resultMap])
              }

              public static func makeV2AuctionCreatedEventProperties(auctionCurrency: String, tokenOwner: String, curator: String, curatorFeePercentage: Int, duration: String, reservePrice: String, price: AsV2AuctionCreatedEventProperties.Price) -> Property {
                return Property(unsafeResultMap: ["__typename": "V2AuctionCreatedEventProperties", "auctionCurrency": auctionCurrency, "tokenOwner": tokenOwner, "curator": curator, "curatorFeePercentage": curatorFeePercentage, "duration": duration, "reservePrice": reservePrice, "price": price.resultMap])
              }

              public static func makeV2AuctionCanceledEventProperties(tokenOwner: String) -> Property {
                return Property(unsafeResultMap: ["__typename": "V2AuctionCanceledEventProperties", "tokenOwner": tokenOwner])
              }

              public static func makeV2AuctionDurationExtendedEventProperties(duration: String) -> Property {
                return Property(unsafeResultMap: ["__typename": "V2AuctionDurationExtendedEventProperties", "duration": duration])
              }

              public static func makeV2AuctionEndedEventProperties(tokenOwner: String, curator: String, winner: String, auctionCurrency: String, amount: String, curatorFee: String) -> Property {
                return Property(unsafeResultMap: ["__typename": "V2AuctionEndedEventProperties", "tokenOwner": tokenOwner, "curator": curator, "winner": winner, "auctionCurrency": auctionCurrency, "amount": amount, "curatorFee": curatorFee])
              }

              public static func makeV2AuctionReservePriceUpdatedEventProperties(reservePrice: String, price: AsV2AuctionReservePriceUpdatedEventProperties.Price) -> Property {
                return Property(unsafeResultMap: ["__typename": "V2AuctionReservePriceUpdatedEventProperties", "reservePrice": reservePrice, "price": price.resultMap])
              }

              public static func makeV2AuctionApprovalUpdatedEventProperties(approved: Bool) -> Property {
                return Property(unsafeResultMap: ["__typename": "V2AuctionApprovalUpdatedEventProperties", "approved": approved])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var fragments: Fragments {
                get {
                  return Fragments(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }

              public struct Fragments {
                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public var v2AuctionEventPropertiesInfo: V2AuctionEventPropertiesInfo {
                  get {
                    return V2AuctionEventPropertiesInfo(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }
              }

              public var asV2AuctionBidEventProperties: AsV2AuctionBidEventProperties? {
                get {
                  if !AsV2AuctionBidEventProperties.possibleTypes.contains(__typename) { return nil }
                  return AsV2AuctionBidEventProperties(unsafeResultMap: resultMap)
                }
                set {
                  guard let newValue = newValue else { return }
                  resultMap = newValue.resultMap
                }
              }

              public struct AsV2AuctionBidEventProperties: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["V2AuctionBidEventProperties"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("sender", type: .nonNull(.scalar(String.self))),
                    GraphQLField("firstBid", type: .nonNull(.scalar(Bool.self))),
                    GraphQLField("extended", type: .nonNull(.scalar(Bool.self))),
                    GraphQLField("value", type: .nonNull(.scalar(String.self))),
                    GraphQLField("price", type: .nonNull(.object(Price.selections))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("sender", type: .nonNull(.scalar(String.self))),
                    GraphQLField("firstBid", type: .nonNull(.scalar(Bool.self))),
                    GraphQLField("extended", type: .nonNull(.scalar(Bool.self))),
                    GraphQLField("value", type: .nonNull(.scalar(String.self))),
                    GraphQLField("price", type: .nonNull(.object(Price.selections))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(sender: String, firstBid: Bool, extended: Bool, value: String, price: Price) {
                  self.init(unsafeResultMap: ["__typename": "V2AuctionBidEventProperties", "sender": sender, "firstBid": firstBid, "extended": extended, "value": value, "price": price.resultMap])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var sender: String {
                  get {
                    return resultMap["sender"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "sender")
                  }
                }

                public var firstBid: Bool {
                  get {
                    return resultMap["firstBid"]! as! Bool
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "firstBid")
                  }
                }

                public var extended: Bool {
                  get {
                    return resultMap["extended"]! as! Bool
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "extended")
                  }
                }

                public var value: String {
                  get {
                    return resultMap["value"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "value")
                  }
                }

                public var price: Price {
                  get {
                    return Price(unsafeResultMap: resultMap["price"]! as! ResultMap)
                  }
                  set {
                    resultMap.updateValue(newValue.resultMap, forKey: "price")
                  }
                }

                public var fragments: Fragments {
                  get {
                    return Fragments(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }

                public struct Fragments {
                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public var v2AuctionEventPropertiesInfo: V2AuctionEventPropertiesInfo {
                    get {
                      return V2AuctionEventPropertiesInfo(unsafeResultMap: resultMap)
                    }
                    set {
                      resultMap += newValue.resultMap
                    }
                  }
                }

                public struct Price: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["PriceAtTime"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                      GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
                      GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
                      GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
                    self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var blockNumber: Int {
                    get {
                      return resultMap["blockNumber"]! as! Int
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "blockNumber")
                    }
                  }

                  public var chainTokenPrice: ChainTokenPrice? {
                    get {
                      return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
                    }
                    set {
                      resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
                    }
                  }

                  public var nativePrice: NativePrice {
                    get {
                      return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
                    }
                    set {
                      resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
                    }
                  }

                  public var usdcPrice: UsdcPrice? {
                    get {
                      return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
                    }
                    set {
                      resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
                    }
                  }

                  public var fragments: Fragments {
                    get {
                      return Fragments(unsafeResultMap: resultMap)
                    }
                    set {
                      resultMap += newValue.resultMap
                    }
                  }

                  public struct Fragments {
                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public var priceSummary: PriceSummary {
                      get {
                        return PriceSummary(unsafeResultMap: resultMap)
                      }
                      set {
                        resultMap += newValue.resultMap
                      }
                    }
                  }

                  public struct ChainTokenPrice: GraphQLSelectionSet {
                    public static let possibleTypes: [String] = ["CurrencyAmount"]

                    public static var selections: [GraphQLSelection] {
                      return [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                        GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                      ]
                    }

                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public init(decimal: Double, raw: String) {
                      self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                    }

                    public var __typename: String {
                      get {
                        return resultMap["__typename"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "__typename")
                      }
                    }

                    public var decimal: Double {
                      get {
                        return resultMap["decimal"]! as! Double
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "decimal")
                      }
                    }

                    public var raw: String {
                      get {
                        return resultMap["raw"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "raw")
                      }
                    }
                  }

                  public struct NativePrice: GraphQLSelectionSet {
                    public static let possibleTypes: [String] = ["CurrencyAmount"]

                    public static var selections: [GraphQLSelection] {
                      return [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                        GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                        GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
                      ]
                    }

                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public init(decimal: Double, raw: String, currency: Currency) {
                      self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
                    }

                    public var __typename: String {
                      get {
                        return resultMap["__typename"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "__typename")
                      }
                    }

                    public var decimal: Double {
                      get {
                        return resultMap["decimal"]! as! Double
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "decimal")
                      }
                    }

                    public var raw: String {
                      get {
                        return resultMap["raw"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "raw")
                      }
                    }

                    public var currency: Currency {
                      get {
                        return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
                      }
                      set {
                        resultMap.updateValue(newValue.resultMap, forKey: "currency")
                      }
                    }

                    public struct Currency: GraphQLSelectionSet {
                      public static let possibleTypes: [String] = ["Currency"]

                      public static var selections: [GraphQLSelection] {
                        return [
                          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                          GraphQLField("address", type: .nonNull(.scalar(String.self))),
                          GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                          GraphQLField("name", type: .nonNull(.scalar(String.self))),
                        ]
                      }

                      public private(set) var resultMap: ResultMap

                      public init(unsafeResultMap: ResultMap) {
                        self.resultMap = unsafeResultMap
                      }

                      public init(address: String, decimals: Int, name: String) {
                        self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
                      }

                      public var __typename: String {
                        get {
                          return resultMap["__typename"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "__typename")
                        }
                      }

                      public var address: String {
                        get {
                          return resultMap["address"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "address")
                        }
                      }

                      public var decimals: Int {
                        get {
                          return resultMap["decimals"]! as! Int
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "decimals")
                        }
                      }

                      public var name: String {
                        get {
                          return resultMap["name"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "name")
                        }
                      }
                    }
                  }

                  public struct UsdcPrice: GraphQLSelectionSet {
                    public static let possibleTypes: [String] = ["CurrencyAmount"]

                    public static var selections: [GraphQLSelection] {
                      return [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                        GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                      ]
                    }

                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public init(decimal: Double, raw: String) {
                      self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                    }

                    public var __typename: String {
                      get {
                        return resultMap["__typename"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "__typename")
                      }
                    }

                    public var decimal: Double {
                      get {
                        return resultMap["decimal"]! as! Double
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "decimal")
                      }
                    }

                    public var raw: String {
                      get {
                        return resultMap["raw"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "raw")
                      }
                    }
                  }
                }
              }

              public var asV2AuctionCreatedEventProperties: AsV2AuctionCreatedEventProperties? {
                get {
                  if !AsV2AuctionCreatedEventProperties.possibleTypes.contains(__typename) { return nil }
                  return AsV2AuctionCreatedEventProperties(unsafeResultMap: resultMap)
                }
                set {
                  guard let newValue = newValue else { return }
                  resultMap = newValue.resultMap
                }
              }

              public struct AsV2AuctionCreatedEventProperties: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["V2AuctionCreatedEventProperties"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("auctionCurrency", type: .nonNull(.scalar(String.self))),
                    GraphQLField("tokenOwner", type: .nonNull(.scalar(String.self))),
                    GraphQLField("curator", type: .nonNull(.scalar(String.self))),
                    GraphQLField("curatorFeePercentage", type: .nonNull(.scalar(Int.self))),
                    GraphQLField("duration", type: .nonNull(.scalar(String.self))),
                    GraphQLField("reservePrice", type: .nonNull(.scalar(String.self))),
                    GraphQLField("price", type: .nonNull(.object(Price.selections))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(auctionCurrency: String, tokenOwner: String, curator: String, curatorFeePercentage: Int, duration: String, reservePrice: String, price: Price) {
                  self.init(unsafeResultMap: ["__typename": "V2AuctionCreatedEventProperties", "auctionCurrency": auctionCurrency, "tokenOwner": tokenOwner, "curator": curator, "curatorFeePercentage": curatorFeePercentage, "duration": duration, "reservePrice": reservePrice, "price": price.resultMap])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var auctionCurrency: String {
                  get {
                    return resultMap["auctionCurrency"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "auctionCurrency")
                  }
                }

                public var tokenOwner: String {
                  get {
                    return resultMap["tokenOwner"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "tokenOwner")
                  }
                }

                public var curator: String {
                  get {
                    return resultMap["curator"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "curator")
                  }
                }

                public var curatorFeePercentage: Int {
                  get {
                    return resultMap["curatorFeePercentage"]! as! Int
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "curatorFeePercentage")
                  }
                }

                public var duration: String {
                  get {
                    return resultMap["duration"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "duration")
                  }
                }

                public var reservePrice: String {
                  get {
                    return resultMap["reservePrice"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "reservePrice")
                  }
                }

                public var price: Price {
                  get {
                    return Price(unsafeResultMap: resultMap["price"]! as! ResultMap)
                  }
                  set {
                    resultMap.updateValue(newValue.resultMap, forKey: "price")
                  }
                }

                public var fragments: Fragments {
                  get {
                    return Fragments(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }

                public struct Fragments {
                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public var v2AuctionEventPropertiesInfo: V2AuctionEventPropertiesInfo {
                    get {
                      return V2AuctionEventPropertiesInfo(unsafeResultMap: resultMap)
                    }
                    set {
                      resultMap += newValue.resultMap
                    }
                  }
                }

                public struct Price: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["PriceAtTime"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                      GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
                      GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
                      GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
                    self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var blockNumber: Int {
                    get {
                      return resultMap["blockNumber"]! as! Int
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "blockNumber")
                    }
                  }

                  public var chainTokenPrice: ChainTokenPrice? {
                    get {
                      return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
                    }
                    set {
                      resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
                    }
                  }

                  public var nativePrice: NativePrice {
                    get {
                      return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
                    }
                    set {
                      resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
                    }
                  }

                  public var usdcPrice: UsdcPrice? {
                    get {
                      return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
                    }
                    set {
                      resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
                    }
                  }

                  public var fragments: Fragments {
                    get {
                      return Fragments(unsafeResultMap: resultMap)
                    }
                    set {
                      resultMap += newValue.resultMap
                    }
                  }

                  public struct Fragments {
                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public var priceSummary: PriceSummary {
                      get {
                        return PriceSummary(unsafeResultMap: resultMap)
                      }
                      set {
                        resultMap += newValue.resultMap
                      }
                    }
                  }

                  public struct ChainTokenPrice: GraphQLSelectionSet {
                    public static let possibleTypes: [String] = ["CurrencyAmount"]

                    public static var selections: [GraphQLSelection] {
                      return [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                        GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                      ]
                    }

                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public init(decimal: Double, raw: String) {
                      self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                    }

                    public var __typename: String {
                      get {
                        return resultMap["__typename"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "__typename")
                      }
                    }

                    public var decimal: Double {
                      get {
                        return resultMap["decimal"]! as! Double
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "decimal")
                      }
                    }

                    public var raw: String {
                      get {
                        return resultMap["raw"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "raw")
                      }
                    }
                  }

                  public struct NativePrice: GraphQLSelectionSet {
                    public static let possibleTypes: [String] = ["CurrencyAmount"]

                    public static var selections: [GraphQLSelection] {
                      return [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                        GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                        GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
                      ]
                    }

                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public init(decimal: Double, raw: String, currency: Currency) {
                      self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
                    }

                    public var __typename: String {
                      get {
                        return resultMap["__typename"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "__typename")
                      }
                    }

                    public var decimal: Double {
                      get {
                        return resultMap["decimal"]! as! Double
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "decimal")
                      }
                    }

                    public var raw: String {
                      get {
                        return resultMap["raw"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "raw")
                      }
                    }

                    public var currency: Currency {
                      get {
                        return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
                      }
                      set {
                        resultMap.updateValue(newValue.resultMap, forKey: "currency")
                      }
                    }

                    public struct Currency: GraphQLSelectionSet {
                      public static let possibleTypes: [String] = ["Currency"]

                      public static var selections: [GraphQLSelection] {
                        return [
                          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                          GraphQLField("address", type: .nonNull(.scalar(String.self))),
                          GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                          GraphQLField("name", type: .nonNull(.scalar(String.self))),
                        ]
                      }

                      public private(set) var resultMap: ResultMap

                      public init(unsafeResultMap: ResultMap) {
                        self.resultMap = unsafeResultMap
                      }

                      public init(address: String, decimals: Int, name: String) {
                        self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
                      }

                      public var __typename: String {
                        get {
                          return resultMap["__typename"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "__typename")
                        }
                      }

                      public var address: String {
                        get {
                          return resultMap["address"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "address")
                        }
                      }

                      public var decimals: Int {
                        get {
                          return resultMap["decimals"]! as! Int
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "decimals")
                        }
                      }

                      public var name: String {
                        get {
                          return resultMap["name"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "name")
                        }
                      }
                    }
                  }

                  public struct UsdcPrice: GraphQLSelectionSet {
                    public static let possibleTypes: [String] = ["CurrencyAmount"]

                    public static var selections: [GraphQLSelection] {
                      return [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                        GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                      ]
                    }

                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public init(decimal: Double, raw: String) {
                      self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                    }

                    public var __typename: String {
                      get {
                        return resultMap["__typename"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "__typename")
                      }
                    }

                    public var decimal: Double {
                      get {
                        return resultMap["decimal"]! as! Double
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "decimal")
                      }
                    }

                    public var raw: String {
                      get {
                        return resultMap["raw"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "raw")
                      }
                    }
                  }
                }
              }

              public var asV2AuctionCanceledEventProperties: AsV2AuctionCanceledEventProperties? {
                get {
                  if !AsV2AuctionCanceledEventProperties.possibleTypes.contains(__typename) { return nil }
                  return AsV2AuctionCanceledEventProperties(unsafeResultMap: resultMap)
                }
                set {
                  guard let newValue = newValue else { return }
                  resultMap = newValue.resultMap
                }
              }

              public struct AsV2AuctionCanceledEventProperties: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["V2AuctionCanceledEventProperties"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("tokenOwner", type: .nonNull(.scalar(String.self))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(tokenOwner: String) {
                  self.init(unsafeResultMap: ["__typename": "V2AuctionCanceledEventProperties", "tokenOwner": tokenOwner])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var tokenOwner: String {
                  get {
                    return resultMap["tokenOwner"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "tokenOwner")
                  }
                }

                public var fragments: Fragments {
                  get {
                    return Fragments(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }

                public struct Fragments {
                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public var v2AuctionEventPropertiesInfo: V2AuctionEventPropertiesInfo {
                    get {
                      return V2AuctionEventPropertiesInfo(unsafeResultMap: resultMap)
                    }
                    set {
                      resultMap += newValue.resultMap
                    }
                  }
                }
              }

              public var asV2AuctionDurationExtendedEventProperties: AsV2AuctionDurationExtendedEventProperties? {
                get {
                  if !AsV2AuctionDurationExtendedEventProperties.possibleTypes.contains(__typename) { return nil }
                  return AsV2AuctionDurationExtendedEventProperties(unsafeResultMap: resultMap)
                }
                set {
                  guard let newValue = newValue else { return }
                  resultMap = newValue.resultMap
                }
              }

              public struct AsV2AuctionDurationExtendedEventProperties: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["V2AuctionDurationExtendedEventProperties"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("duration", type: .nonNull(.scalar(String.self))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(duration: String) {
                  self.init(unsafeResultMap: ["__typename": "V2AuctionDurationExtendedEventProperties", "duration": duration])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var duration: String {
                  get {
                    return resultMap["duration"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "duration")
                  }
                }

                public var fragments: Fragments {
                  get {
                    return Fragments(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }

                public struct Fragments {
                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public var v2AuctionEventPropertiesInfo: V2AuctionEventPropertiesInfo {
                    get {
                      return V2AuctionEventPropertiesInfo(unsafeResultMap: resultMap)
                    }
                    set {
                      resultMap += newValue.resultMap
                    }
                  }
                }
              }

              public var asV2AuctionEndedEventProperties: AsV2AuctionEndedEventProperties? {
                get {
                  if !AsV2AuctionEndedEventProperties.possibleTypes.contains(__typename) { return nil }
                  return AsV2AuctionEndedEventProperties(unsafeResultMap: resultMap)
                }
                set {
                  guard let newValue = newValue else { return }
                  resultMap = newValue.resultMap
                }
              }

              public struct AsV2AuctionEndedEventProperties: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["V2AuctionEndedEventProperties"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("tokenOwner", type: .nonNull(.scalar(String.self))),
                    GraphQLField("curator", type: .nonNull(.scalar(String.self))),
                    GraphQLField("winner", type: .nonNull(.scalar(String.self))),
                    GraphQLField("auctionCurrency", type: .nonNull(.scalar(String.self))),
                    GraphQLField("amount", type: .nonNull(.scalar(String.self))),
                    GraphQLField("curatorFee", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("tokenOwner", type: .nonNull(.scalar(String.self))),
                    GraphQLField("curator", type: .nonNull(.scalar(String.self))),
                    GraphQLField("winner", type: .nonNull(.scalar(String.self))),
                    GraphQLField("auctionCurrency", type: .nonNull(.scalar(String.self))),
                    GraphQLField("amount", type: .nonNull(.scalar(String.self))),
                    GraphQLField("curatorFee", type: .nonNull(.scalar(String.self))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(tokenOwner: String, curator: String, winner: String, auctionCurrency: String, amount: String, curatorFee: String) {
                  self.init(unsafeResultMap: ["__typename": "V2AuctionEndedEventProperties", "tokenOwner": tokenOwner, "curator": curator, "winner": winner, "auctionCurrency": auctionCurrency, "amount": amount, "curatorFee": curatorFee])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var tokenOwner: String {
                  get {
                    return resultMap["tokenOwner"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "tokenOwner")
                  }
                }

                public var curator: String {
                  get {
                    return resultMap["curator"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "curator")
                  }
                }

                public var winner: String {
                  get {
                    return resultMap["winner"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "winner")
                  }
                }

                public var auctionCurrency: String {
                  get {
                    return resultMap["auctionCurrency"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "auctionCurrency")
                  }
                }

                public var amount: String {
                  get {
                    return resultMap["amount"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "amount")
                  }
                }

                public var curatorFee: String {
                  get {
                    return resultMap["curatorFee"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "curatorFee")
                  }
                }

                public var fragments: Fragments {
                  get {
                    return Fragments(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }

                public struct Fragments {
                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public var v2AuctionEventPropertiesInfo: V2AuctionEventPropertiesInfo {
                    get {
                      return V2AuctionEventPropertiesInfo(unsafeResultMap: resultMap)
                    }
                    set {
                      resultMap += newValue.resultMap
                    }
                  }
                }
              }

              public var asV2AuctionReservePriceUpdatedEventProperties: AsV2AuctionReservePriceUpdatedEventProperties? {
                get {
                  if !AsV2AuctionReservePriceUpdatedEventProperties.possibleTypes.contains(__typename) { return nil }
                  return AsV2AuctionReservePriceUpdatedEventProperties(unsafeResultMap: resultMap)
                }
                set {
                  guard let newValue = newValue else { return }
                  resultMap = newValue.resultMap
                }
              }

              public struct AsV2AuctionReservePriceUpdatedEventProperties: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["V2AuctionReservePriceUpdatedEventProperties"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("reservePrice", type: .nonNull(.scalar(String.self))),
                    GraphQLField("price", type: .nonNull(.object(Price.selections))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(reservePrice: String, price: Price) {
                  self.init(unsafeResultMap: ["__typename": "V2AuctionReservePriceUpdatedEventProperties", "reservePrice": reservePrice, "price": price.resultMap])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var reservePrice: String {
                  get {
                    return resultMap["reservePrice"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "reservePrice")
                  }
                }

                public var price: Price {
                  get {
                    return Price(unsafeResultMap: resultMap["price"]! as! ResultMap)
                  }
                  set {
                    resultMap.updateValue(newValue.resultMap, forKey: "price")
                  }
                }

                public var fragments: Fragments {
                  get {
                    return Fragments(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }

                public struct Fragments {
                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public var v2AuctionEventPropertiesInfo: V2AuctionEventPropertiesInfo {
                    get {
                      return V2AuctionEventPropertiesInfo(unsafeResultMap: resultMap)
                    }
                    set {
                      resultMap += newValue.resultMap
                    }
                  }
                }

                public struct Price: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["PriceAtTime"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                      GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
                      GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
                      GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
                    self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var blockNumber: Int {
                    get {
                      return resultMap["blockNumber"]! as! Int
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "blockNumber")
                    }
                  }

                  public var chainTokenPrice: ChainTokenPrice? {
                    get {
                      return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
                    }
                    set {
                      resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
                    }
                  }

                  public var nativePrice: NativePrice {
                    get {
                      return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
                    }
                    set {
                      resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
                    }
                  }

                  public var usdcPrice: UsdcPrice? {
                    get {
                      return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
                    }
                    set {
                      resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
                    }
                  }

                  public var fragments: Fragments {
                    get {
                      return Fragments(unsafeResultMap: resultMap)
                    }
                    set {
                      resultMap += newValue.resultMap
                    }
                  }

                  public struct Fragments {
                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public var priceSummary: PriceSummary {
                      get {
                        return PriceSummary(unsafeResultMap: resultMap)
                      }
                      set {
                        resultMap += newValue.resultMap
                      }
                    }
                  }

                  public struct ChainTokenPrice: GraphQLSelectionSet {
                    public static let possibleTypes: [String] = ["CurrencyAmount"]

                    public static var selections: [GraphQLSelection] {
                      return [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                        GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                      ]
                    }

                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public init(decimal: Double, raw: String) {
                      self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                    }

                    public var __typename: String {
                      get {
                        return resultMap["__typename"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "__typename")
                      }
                    }

                    public var decimal: Double {
                      get {
                        return resultMap["decimal"]! as! Double
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "decimal")
                      }
                    }

                    public var raw: String {
                      get {
                        return resultMap["raw"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "raw")
                      }
                    }
                  }

                  public struct NativePrice: GraphQLSelectionSet {
                    public static let possibleTypes: [String] = ["CurrencyAmount"]

                    public static var selections: [GraphQLSelection] {
                      return [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                        GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                        GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
                      ]
                    }

                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public init(decimal: Double, raw: String, currency: Currency) {
                      self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
                    }

                    public var __typename: String {
                      get {
                        return resultMap["__typename"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "__typename")
                      }
                    }

                    public var decimal: Double {
                      get {
                        return resultMap["decimal"]! as! Double
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "decimal")
                      }
                    }

                    public var raw: String {
                      get {
                        return resultMap["raw"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "raw")
                      }
                    }

                    public var currency: Currency {
                      get {
                        return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
                      }
                      set {
                        resultMap.updateValue(newValue.resultMap, forKey: "currency")
                      }
                    }

                    public struct Currency: GraphQLSelectionSet {
                      public static let possibleTypes: [String] = ["Currency"]

                      public static var selections: [GraphQLSelection] {
                        return [
                          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                          GraphQLField("address", type: .nonNull(.scalar(String.self))),
                          GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                          GraphQLField("name", type: .nonNull(.scalar(String.self))),
                        ]
                      }

                      public private(set) var resultMap: ResultMap

                      public init(unsafeResultMap: ResultMap) {
                        self.resultMap = unsafeResultMap
                      }

                      public init(address: String, decimals: Int, name: String) {
                        self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
                      }

                      public var __typename: String {
                        get {
                          return resultMap["__typename"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "__typename")
                        }
                      }

                      public var address: String {
                        get {
                          return resultMap["address"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "address")
                        }
                      }

                      public var decimals: Int {
                        get {
                          return resultMap["decimals"]! as! Int
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "decimals")
                        }
                      }

                      public var name: String {
                        get {
                          return resultMap["name"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "name")
                        }
                      }
                    }
                  }

                  public struct UsdcPrice: GraphQLSelectionSet {
                    public static let possibleTypes: [String] = ["CurrencyAmount"]

                    public static var selections: [GraphQLSelection] {
                      return [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                        GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                      ]
                    }

                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public init(decimal: Double, raw: String) {
                      self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                    }

                    public var __typename: String {
                      get {
                        return resultMap["__typename"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "__typename")
                      }
                    }

                    public var decimal: Double {
                      get {
                        return resultMap["decimal"]! as! Double
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "decimal")
                      }
                    }

                    public var raw: String {
                      get {
                        return resultMap["raw"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "raw")
                      }
                    }
                  }
                }
              }

              public var asV2AuctionApprovalUpdatedEventProperties: AsV2AuctionApprovalUpdatedEventProperties? {
                get {
                  if !AsV2AuctionApprovalUpdatedEventProperties.possibleTypes.contains(__typename) { return nil }
                  return AsV2AuctionApprovalUpdatedEventProperties(unsafeResultMap: resultMap)
                }
                set {
                  guard let newValue = newValue else { return }
                  resultMap = newValue.resultMap
                }
              }

              public struct AsV2AuctionApprovalUpdatedEventProperties: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["V2AuctionApprovalUpdatedEventProperties"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("approved", type: .nonNull(.scalar(Bool.self))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(approved: Bool) {
                  self.init(unsafeResultMap: ["__typename": "V2AuctionApprovalUpdatedEventProperties", "approved": approved])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var approved: Bool {
                  get {
                    return resultMap["approved"]! as! Bool
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "approved")
                  }
                }

                public var fragments: Fragments {
                  get {
                    return Fragments(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }

                public struct Fragments {
                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public var v2AuctionEventPropertiesInfo: V2AuctionEventPropertiesInfo {
                    get {
                      return V2AuctionEventPropertiesInfo(unsafeResultMap: resultMap)
                    }
                    set {
                      resultMap += newValue.resultMap
                    }
                  }
                }
              }
            }
          }

          public var asV3AskEvent: AsV3AskEvent? {
            get {
              if !AsV3AskEvent.possibleTypes.contains(__typename) { return nil }
              return AsV3AskEvent(unsafeResultMap: resultMap)
            }
            set {
              guard let newValue = newValue else { return }
              resultMap = newValue.resultMap
            }
          }

          public struct AsV3AskEvent: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["V3AskEvent"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("v3AskEventType", type: .nonNull(.scalar(V3AskEventType.self))),
                GraphQLField("address", type: .nonNull(.scalar(String.self))),
                GraphQLField("collectionAddress", type: .nonNull(.scalar(String.self))),
                GraphQLField("tokenId", type: .nonNull(.scalar(String.self))),
                GraphQLField("properties", type: .nonNull(.object(Property.selections))),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(v3AskEventType: V3AskEventType, address: String, collectionAddress: String, tokenId: String, properties: Property) {
              self.init(unsafeResultMap: ["__typename": "V3AskEvent", "v3AskEventType": v3AskEventType, "address": address, "collectionAddress": collectionAddress, "tokenId": tokenId, "properties": properties.resultMap])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var v3AskEventType: V3AskEventType {
              get {
                return resultMap["v3AskEventType"]! as! V3AskEventType
              }
              set {
                resultMap.updateValue(newValue, forKey: "v3AskEventType")
              }
            }

            public var address: String {
              get {
                return resultMap["address"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "address")
              }
            }

            public var collectionAddress: String {
              get {
                return resultMap["collectionAddress"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "collectionAddress")
              }
            }

            public var tokenId: String {
              get {
                return resultMap["tokenId"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "tokenId")
              }
            }

            public var properties: Property {
              get {
                return Property(unsafeResultMap: resultMap["properties"]! as! ResultMap)
              }
              set {
                resultMap.updateValue(newValue.resultMap, forKey: "properties")
              }
            }

            public struct Property: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["V3AskCreatedEventProperties", "V3AskCanceledEventProperties", "V3AskPriceUpdatedEventProperties", "V3AskFilledEventProperties"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLTypeCase(
                    variants: ["V3AskCreatedEventProperties": AsV3AskCreatedEventProperties.selections, "V3AskCanceledEventProperties": AsV3AskCanceledEventProperties.selections, "V3AskPriceUpdatedEventProperties": AsV3AskPriceUpdatedEventProperties.selections, "V3AskFilledEventProperties": AsV3AskFilledEventProperties.selections],
                    default: [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    ]
                  )
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public static func makeV3AskCreatedEventProperties(seller: String, sellerFundsRecipient: String, askCurrency: String, askPrice: String, findersFeeBps: Int, price: AsV3AskCreatedEventProperties.Price) -> Property {
                return Property(unsafeResultMap: ["__typename": "V3AskCreatedEventProperties", "seller": seller, "sellerFundsRecipient": sellerFundsRecipient, "askCurrency": askCurrency, "askPrice": askPrice, "findersFeeBps": findersFeeBps, "price": price.resultMap])
              }

              public static func makeV3AskCanceledEventProperties(seller: String, sellerFundsRecipient: String, askCurrency: String, askPrice: String, findersFeeBps: Int, price: AsV3AskCanceledEventProperties.Price) -> Property {
                return Property(unsafeResultMap: ["__typename": "V3AskCanceledEventProperties", "seller": seller, "sellerFundsRecipient": sellerFundsRecipient, "askCurrency": askCurrency, "askPrice": askPrice, "findersFeeBps": findersFeeBps, "price": price.resultMap])
              }

              public static func makeV3AskPriceUpdatedEventProperties(seller: String, sellerFundsRecipient: String, askCurrency: String, askPrice: String, findersFeeBps: Int, price: AsV3AskPriceUpdatedEventProperties.Price) -> Property {
                return Property(unsafeResultMap: ["__typename": "V3AskPriceUpdatedEventProperties", "seller": seller, "sellerFundsRecipient": sellerFundsRecipient, "askCurrency": askCurrency, "askPrice": askPrice, "findersFeeBps": findersFeeBps, "price": price.resultMap])
              }

              public static func makeV3AskFilledEventProperties(seller: String, sellerFundsRecipient: String, askCurrency: String, askPrice: String, findersFeeBps: Int, price: AsV3AskFilledEventProperties.Price, finder: String, buyer: String) -> Property {
                return Property(unsafeResultMap: ["__typename": "V3AskFilledEventProperties", "seller": seller, "sellerFundsRecipient": sellerFundsRecipient, "askCurrency": askCurrency, "askPrice": askPrice, "findersFeeBps": findersFeeBps, "price": price.resultMap, "finder": finder, "buyer": buyer])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var fragments: Fragments {
                get {
                  return Fragments(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }

              public struct Fragments {
                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public var v3AskEventPropertiesInfo: V3AskEventPropertiesInfo {
                  get {
                    return V3AskEventPropertiesInfo(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }
              }

              public var asV3AskCreatedEventProperties: AsV3AskCreatedEventProperties? {
                get {
                  if !AsV3AskCreatedEventProperties.possibleTypes.contains(__typename) { return nil }
                  return AsV3AskCreatedEventProperties(unsafeResultMap: resultMap)
                }
                set {
                  guard let newValue = newValue else { return }
                  resultMap = newValue.resultMap
                }
              }

              public struct AsV3AskCreatedEventProperties: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["V3AskCreatedEventProperties"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("seller", type: .nonNull(.scalar(String.self))),
                    GraphQLField("sellerFundsRecipient", type: .nonNull(.scalar(String.self))),
                    GraphQLField("askCurrency", type: .nonNull(.scalar(String.self))),
                    GraphQLField("askPrice", type: .nonNull(.scalar(String.self))),
                    GraphQLField("findersFeeBps", type: .nonNull(.scalar(Int.self))),
                    GraphQLField("price", type: .nonNull(.object(Price.selections))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(seller: String, sellerFundsRecipient: String, askCurrency: String, askPrice: String, findersFeeBps: Int, price: Price) {
                  self.init(unsafeResultMap: ["__typename": "V3AskCreatedEventProperties", "seller": seller, "sellerFundsRecipient": sellerFundsRecipient, "askCurrency": askCurrency, "askPrice": askPrice, "findersFeeBps": findersFeeBps, "price": price.resultMap])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var seller: String {
                  get {
                    return resultMap["seller"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "seller")
                  }
                }

                public var sellerFundsRecipient: String {
                  get {
                    return resultMap["sellerFundsRecipient"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "sellerFundsRecipient")
                  }
                }

                public var askCurrency: String {
                  get {
                    return resultMap["askCurrency"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "askCurrency")
                  }
                }

                public var askPrice: String {
                  get {
                    return resultMap["askPrice"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "askPrice")
                  }
                }

                public var findersFeeBps: Int {
                  get {
                    return resultMap["findersFeeBps"]! as! Int
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "findersFeeBps")
                  }
                }

                public var price: Price {
                  get {
                    return Price(unsafeResultMap: resultMap["price"]! as! ResultMap)
                  }
                  set {
                    resultMap.updateValue(newValue.resultMap, forKey: "price")
                  }
                }

                public var fragments: Fragments {
                  get {
                    return Fragments(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }

                public struct Fragments {
                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public var v3AskEventPropertiesInfo: V3AskEventPropertiesInfo {
                    get {
                      return V3AskEventPropertiesInfo(unsafeResultMap: resultMap)
                    }
                    set {
                      resultMap += newValue.resultMap
                    }
                  }
                }

                public struct Price: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["PriceAtTime"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                      GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
                      GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
                      GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
                    self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var blockNumber: Int {
                    get {
                      return resultMap["blockNumber"]! as! Int
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "blockNumber")
                    }
                  }

                  public var chainTokenPrice: ChainTokenPrice? {
                    get {
                      return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
                    }
                    set {
                      resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
                    }
                  }

                  public var nativePrice: NativePrice {
                    get {
                      return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
                    }
                    set {
                      resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
                    }
                  }

                  public var usdcPrice: UsdcPrice? {
                    get {
                      return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
                    }
                    set {
                      resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
                    }
                  }

                  public var fragments: Fragments {
                    get {
                      return Fragments(unsafeResultMap: resultMap)
                    }
                    set {
                      resultMap += newValue.resultMap
                    }
                  }

                  public struct Fragments {
                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public var priceSummary: PriceSummary {
                      get {
                        return PriceSummary(unsafeResultMap: resultMap)
                      }
                      set {
                        resultMap += newValue.resultMap
                      }
                    }
                  }

                  public struct ChainTokenPrice: GraphQLSelectionSet {
                    public static let possibleTypes: [String] = ["CurrencyAmount"]

                    public static var selections: [GraphQLSelection] {
                      return [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                        GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                      ]
                    }

                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public init(decimal: Double, raw: String) {
                      self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                    }

                    public var __typename: String {
                      get {
                        return resultMap["__typename"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "__typename")
                      }
                    }

                    public var decimal: Double {
                      get {
                        return resultMap["decimal"]! as! Double
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "decimal")
                      }
                    }

                    public var raw: String {
                      get {
                        return resultMap["raw"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "raw")
                      }
                    }
                  }

                  public struct NativePrice: GraphQLSelectionSet {
                    public static let possibleTypes: [String] = ["CurrencyAmount"]

                    public static var selections: [GraphQLSelection] {
                      return [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                        GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                        GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
                      ]
                    }

                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public init(decimal: Double, raw: String, currency: Currency) {
                      self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
                    }

                    public var __typename: String {
                      get {
                        return resultMap["__typename"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "__typename")
                      }
                    }

                    public var decimal: Double {
                      get {
                        return resultMap["decimal"]! as! Double
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "decimal")
                      }
                    }

                    public var raw: String {
                      get {
                        return resultMap["raw"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "raw")
                      }
                    }

                    public var currency: Currency {
                      get {
                        return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
                      }
                      set {
                        resultMap.updateValue(newValue.resultMap, forKey: "currency")
                      }
                    }

                    public struct Currency: GraphQLSelectionSet {
                      public static let possibleTypes: [String] = ["Currency"]

                      public static var selections: [GraphQLSelection] {
                        return [
                          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                          GraphQLField("address", type: .nonNull(.scalar(String.self))),
                          GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                          GraphQLField("name", type: .nonNull(.scalar(String.self))),
                        ]
                      }

                      public private(set) var resultMap: ResultMap

                      public init(unsafeResultMap: ResultMap) {
                        self.resultMap = unsafeResultMap
                      }

                      public init(address: String, decimals: Int, name: String) {
                        self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
                      }

                      public var __typename: String {
                        get {
                          return resultMap["__typename"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "__typename")
                        }
                      }

                      public var address: String {
                        get {
                          return resultMap["address"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "address")
                        }
                      }

                      public var decimals: Int {
                        get {
                          return resultMap["decimals"]! as! Int
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "decimals")
                        }
                      }

                      public var name: String {
                        get {
                          return resultMap["name"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "name")
                        }
                      }
                    }
                  }

                  public struct UsdcPrice: GraphQLSelectionSet {
                    public static let possibleTypes: [String] = ["CurrencyAmount"]

                    public static var selections: [GraphQLSelection] {
                      return [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                        GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                      ]
                    }

                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public init(decimal: Double, raw: String) {
                      self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                    }

                    public var __typename: String {
                      get {
                        return resultMap["__typename"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "__typename")
                      }
                    }

                    public var decimal: Double {
                      get {
                        return resultMap["decimal"]! as! Double
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "decimal")
                      }
                    }

                    public var raw: String {
                      get {
                        return resultMap["raw"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "raw")
                      }
                    }
                  }
                }
              }

              public var asV3AskCanceledEventProperties: AsV3AskCanceledEventProperties? {
                get {
                  if !AsV3AskCanceledEventProperties.possibleTypes.contains(__typename) { return nil }
                  return AsV3AskCanceledEventProperties(unsafeResultMap: resultMap)
                }
                set {
                  guard let newValue = newValue else { return }
                  resultMap = newValue.resultMap
                }
              }

              public struct AsV3AskCanceledEventProperties: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["V3AskCanceledEventProperties"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("seller", type: .nonNull(.scalar(String.self))),
                    GraphQLField("sellerFundsRecipient", type: .nonNull(.scalar(String.self))),
                    GraphQLField("askCurrency", type: .nonNull(.scalar(String.self))),
                    GraphQLField("askPrice", type: .nonNull(.scalar(String.self))),
                    GraphQLField("findersFeeBps", type: .nonNull(.scalar(Int.self))),
                    GraphQLField("price", type: .nonNull(.object(Price.selections))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(seller: String, sellerFundsRecipient: String, askCurrency: String, askPrice: String, findersFeeBps: Int, price: Price) {
                  self.init(unsafeResultMap: ["__typename": "V3AskCanceledEventProperties", "seller": seller, "sellerFundsRecipient": sellerFundsRecipient, "askCurrency": askCurrency, "askPrice": askPrice, "findersFeeBps": findersFeeBps, "price": price.resultMap])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var seller: String {
                  get {
                    return resultMap["seller"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "seller")
                  }
                }

                public var sellerFundsRecipient: String {
                  get {
                    return resultMap["sellerFundsRecipient"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "sellerFundsRecipient")
                  }
                }

                public var askCurrency: String {
                  get {
                    return resultMap["askCurrency"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "askCurrency")
                  }
                }

                public var askPrice: String {
                  get {
                    return resultMap["askPrice"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "askPrice")
                  }
                }

                public var findersFeeBps: Int {
                  get {
                    return resultMap["findersFeeBps"]! as! Int
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "findersFeeBps")
                  }
                }

                public var price: Price {
                  get {
                    return Price(unsafeResultMap: resultMap["price"]! as! ResultMap)
                  }
                  set {
                    resultMap.updateValue(newValue.resultMap, forKey: "price")
                  }
                }

                public var fragments: Fragments {
                  get {
                    return Fragments(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }

                public struct Fragments {
                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public var v3AskEventPropertiesInfo: V3AskEventPropertiesInfo {
                    get {
                      return V3AskEventPropertiesInfo(unsafeResultMap: resultMap)
                    }
                    set {
                      resultMap += newValue.resultMap
                    }
                  }
                }

                public struct Price: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["PriceAtTime"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                      GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
                      GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
                      GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
                    self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var blockNumber: Int {
                    get {
                      return resultMap["blockNumber"]! as! Int
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "blockNumber")
                    }
                  }

                  public var chainTokenPrice: ChainTokenPrice? {
                    get {
                      return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
                    }
                    set {
                      resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
                    }
                  }

                  public var nativePrice: NativePrice {
                    get {
                      return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
                    }
                    set {
                      resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
                    }
                  }

                  public var usdcPrice: UsdcPrice? {
                    get {
                      return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
                    }
                    set {
                      resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
                    }
                  }

                  public var fragments: Fragments {
                    get {
                      return Fragments(unsafeResultMap: resultMap)
                    }
                    set {
                      resultMap += newValue.resultMap
                    }
                  }

                  public struct Fragments {
                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public var priceSummary: PriceSummary {
                      get {
                        return PriceSummary(unsafeResultMap: resultMap)
                      }
                      set {
                        resultMap += newValue.resultMap
                      }
                    }
                  }

                  public struct ChainTokenPrice: GraphQLSelectionSet {
                    public static let possibleTypes: [String] = ["CurrencyAmount"]

                    public static var selections: [GraphQLSelection] {
                      return [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                        GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                      ]
                    }

                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public init(decimal: Double, raw: String) {
                      self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                    }

                    public var __typename: String {
                      get {
                        return resultMap["__typename"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "__typename")
                      }
                    }

                    public var decimal: Double {
                      get {
                        return resultMap["decimal"]! as! Double
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "decimal")
                      }
                    }

                    public var raw: String {
                      get {
                        return resultMap["raw"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "raw")
                      }
                    }
                  }

                  public struct NativePrice: GraphQLSelectionSet {
                    public static let possibleTypes: [String] = ["CurrencyAmount"]

                    public static var selections: [GraphQLSelection] {
                      return [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                        GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                        GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
                      ]
                    }

                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public init(decimal: Double, raw: String, currency: Currency) {
                      self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
                    }

                    public var __typename: String {
                      get {
                        return resultMap["__typename"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "__typename")
                      }
                    }

                    public var decimal: Double {
                      get {
                        return resultMap["decimal"]! as! Double
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "decimal")
                      }
                    }

                    public var raw: String {
                      get {
                        return resultMap["raw"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "raw")
                      }
                    }

                    public var currency: Currency {
                      get {
                        return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
                      }
                      set {
                        resultMap.updateValue(newValue.resultMap, forKey: "currency")
                      }
                    }

                    public struct Currency: GraphQLSelectionSet {
                      public static let possibleTypes: [String] = ["Currency"]

                      public static var selections: [GraphQLSelection] {
                        return [
                          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                          GraphQLField("address", type: .nonNull(.scalar(String.self))),
                          GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                          GraphQLField("name", type: .nonNull(.scalar(String.self))),
                        ]
                      }

                      public private(set) var resultMap: ResultMap

                      public init(unsafeResultMap: ResultMap) {
                        self.resultMap = unsafeResultMap
                      }

                      public init(address: String, decimals: Int, name: String) {
                        self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
                      }

                      public var __typename: String {
                        get {
                          return resultMap["__typename"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "__typename")
                        }
                      }

                      public var address: String {
                        get {
                          return resultMap["address"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "address")
                        }
                      }

                      public var decimals: Int {
                        get {
                          return resultMap["decimals"]! as! Int
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "decimals")
                        }
                      }

                      public var name: String {
                        get {
                          return resultMap["name"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "name")
                        }
                      }
                    }
                  }

                  public struct UsdcPrice: GraphQLSelectionSet {
                    public static let possibleTypes: [String] = ["CurrencyAmount"]

                    public static var selections: [GraphQLSelection] {
                      return [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                        GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                      ]
                    }

                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public init(decimal: Double, raw: String) {
                      self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                    }

                    public var __typename: String {
                      get {
                        return resultMap["__typename"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "__typename")
                      }
                    }

                    public var decimal: Double {
                      get {
                        return resultMap["decimal"]! as! Double
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "decimal")
                      }
                    }

                    public var raw: String {
                      get {
                        return resultMap["raw"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "raw")
                      }
                    }
                  }
                }
              }

              public var asV3AskPriceUpdatedEventProperties: AsV3AskPriceUpdatedEventProperties? {
                get {
                  if !AsV3AskPriceUpdatedEventProperties.possibleTypes.contains(__typename) { return nil }
                  return AsV3AskPriceUpdatedEventProperties(unsafeResultMap: resultMap)
                }
                set {
                  guard let newValue = newValue else { return }
                  resultMap = newValue.resultMap
                }
              }

              public struct AsV3AskPriceUpdatedEventProperties: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["V3AskPriceUpdatedEventProperties"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("seller", type: .nonNull(.scalar(String.self))),
                    GraphQLField("sellerFundsRecipient", type: .nonNull(.scalar(String.self))),
                    GraphQLField("askCurrency", type: .nonNull(.scalar(String.self))),
                    GraphQLField("askPrice", type: .nonNull(.scalar(String.self))),
                    GraphQLField("findersFeeBps", type: .nonNull(.scalar(Int.self))),
                    GraphQLField("price", type: .nonNull(.object(Price.selections))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(seller: String, sellerFundsRecipient: String, askCurrency: String, askPrice: String, findersFeeBps: Int, price: Price) {
                  self.init(unsafeResultMap: ["__typename": "V3AskPriceUpdatedEventProperties", "seller": seller, "sellerFundsRecipient": sellerFundsRecipient, "askCurrency": askCurrency, "askPrice": askPrice, "findersFeeBps": findersFeeBps, "price": price.resultMap])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var seller: String {
                  get {
                    return resultMap["seller"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "seller")
                  }
                }

                public var sellerFundsRecipient: String {
                  get {
                    return resultMap["sellerFundsRecipient"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "sellerFundsRecipient")
                  }
                }

                public var askCurrency: String {
                  get {
                    return resultMap["askCurrency"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "askCurrency")
                  }
                }

                public var askPrice: String {
                  get {
                    return resultMap["askPrice"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "askPrice")
                  }
                }

                public var findersFeeBps: Int {
                  get {
                    return resultMap["findersFeeBps"]! as! Int
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "findersFeeBps")
                  }
                }

                public var price: Price {
                  get {
                    return Price(unsafeResultMap: resultMap["price"]! as! ResultMap)
                  }
                  set {
                    resultMap.updateValue(newValue.resultMap, forKey: "price")
                  }
                }

                public var fragments: Fragments {
                  get {
                    return Fragments(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }

                public struct Fragments {
                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public var v3AskEventPropertiesInfo: V3AskEventPropertiesInfo {
                    get {
                      return V3AskEventPropertiesInfo(unsafeResultMap: resultMap)
                    }
                    set {
                      resultMap += newValue.resultMap
                    }
                  }
                }

                public struct Price: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["PriceAtTime"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                      GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
                      GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
                      GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
                    self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var blockNumber: Int {
                    get {
                      return resultMap["blockNumber"]! as! Int
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "blockNumber")
                    }
                  }

                  public var chainTokenPrice: ChainTokenPrice? {
                    get {
                      return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
                    }
                    set {
                      resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
                    }
                  }

                  public var nativePrice: NativePrice {
                    get {
                      return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
                    }
                    set {
                      resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
                    }
                  }

                  public var usdcPrice: UsdcPrice? {
                    get {
                      return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
                    }
                    set {
                      resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
                    }
                  }

                  public var fragments: Fragments {
                    get {
                      return Fragments(unsafeResultMap: resultMap)
                    }
                    set {
                      resultMap += newValue.resultMap
                    }
                  }

                  public struct Fragments {
                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public var priceSummary: PriceSummary {
                      get {
                        return PriceSummary(unsafeResultMap: resultMap)
                      }
                      set {
                        resultMap += newValue.resultMap
                      }
                    }
                  }

                  public struct ChainTokenPrice: GraphQLSelectionSet {
                    public static let possibleTypes: [String] = ["CurrencyAmount"]

                    public static var selections: [GraphQLSelection] {
                      return [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                        GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                      ]
                    }

                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public init(decimal: Double, raw: String) {
                      self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                    }

                    public var __typename: String {
                      get {
                        return resultMap["__typename"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "__typename")
                      }
                    }

                    public var decimal: Double {
                      get {
                        return resultMap["decimal"]! as! Double
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "decimal")
                      }
                    }

                    public var raw: String {
                      get {
                        return resultMap["raw"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "raw")
                      }
                    }
                  }

                  public struct NativePrice: GraphQLSelectionSet {
                    public static let possibleTypes: [String] = ["CurrencyAmount"]

                    public static var selections: [GraphQLSelection] {
                      return [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                        GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                        GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
                      ]
                    }

                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public init(decimal: Double, raw: String, currency: Currency) {
                      self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
                    }

                    public var __typename: String {
                      get {
                        return resultMap["__typename"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "__typename")
                      }
                    }

                    public var decimal: Double {
                      get {
                        return resultMap["decimal"]! as! Double
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "decimal")
                      }
                    }

                    public var raw: String {
                      get {
                        return resultMap["raw"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "raw")
                      }
                    }

                    public var currency: Currency {
                      get {
                        return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
                      }
                      set {
                        resultMap.updateValue(newValue.resultMap, forKey: "currency")
                      }
                    }

                    public struct Currency: GraphQLSelectionSet {
                      public static let possibleTypes: [String] = ["Currency"]

                      public static var selections: [GraphQLSelection] {
                        return [
                          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                          GraphQLField("address", type: .nonNull(.scalar(String.self))),
                          GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                          GraphQLField("name", type: .nonNull(.scalar(String.self))),
                        ]
                      }

                      public private(set) var resultMap: ResultMap

                      public init(unsafeResultMap: ResultMap) {
                        self.resultMap = unsafeResultMap
                      }

                      public init(address: String, decimals: Int, name: String) {
                        self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
                      }

                      public var __typename: String {
                        get {
                          return resultMap["__typename"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "__typename")
                        }
                      }

                      public var address: String {
                        get {
                          return resultMap["address"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "address")
                        }
                      }

                      public var decimals: Int {
                        get {
                          return resultMap["decimals"]! as! Int
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "decimals")
                        }
                      }

                      public var name: String {
                        get {
                          return resultMap["name"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "name")
                        }
                      }
                    }
                  }

                  public struct UsdcPrice: GraphQLSelectionSet {
                    public static let possibleTypes: [String] = ["CurrencyAmount"]

                    public static var selections: [GraphQLSelection] {
                      return [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                        GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                      ]
                    }

                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public init(decimal: Double, raw: String) {
                      self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                    }

                    public var __typename: String {
                      get {
                        return resultMap["__typename"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "__typename")
                      }
                    }

                    public var decimal: Double {
                      get {
                        return resultMap["decimal"]! as! Double
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "decimal")
                      }
                    }

                    public var raw: String {
                      get {
                        return resultMap["raw"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "raw")
                      }
                    }
                  }
                }
              }

              public var asV3AskFilledEventProperties: AsV3AskFilledEventProperties? {
                get {
                  if !AsV3AskFilledEventProperties.possibleTypes.contains(__typename) { return nil }
                  return AsV3AskFilledEventProperties(unsafeResultMap: resultMap)
                }
                set {
                  guard let newValue = newValue else { return }
                  resultMap = newValue.resultMap
                }
              }

              public struct AsV3AskFilledEventProperties: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["V3AskFilledEventProperties"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("seller", type: .nonNull(.scalar(String.self))),
                    GraphQLField("sellerFundsRecipient", type: .nonNull(.scalar(String.self))),
                    GraphQLField("askCurrency", type: .nonNull(.scalar(String.self))),
                    GraphQLField("askPrice", type: .nonNull(.scalar(String.self))),
                    GraphQLField("findersFeeBps", type: .nonNull(.scalar(Int.self))),
                    GraphQLField("price", type: .nonNull(.object(Price.selections))),
                    GraphQLField("finder", type: .nonNull(.scalar(String.self))),
                    GraphQLField("buyer", type: .nonNull(.scalar(String.self))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(seller: String, sellerFundsRecipient: String, askCurrency: String, askPrice: String, findersFeeBps: Int, price: Price, finder: String, buyer: String) {
                  self.init(unsafeResultMap: ["__typename": "V3AskFilledEventProperties", "seller": seller, "sellerFundsRecipient": sellerFundsRecipient, "askCurrency": askCurrency, "askPrice": askPrice, "findersFeeBps": findersFeeBps, "price": price.resultMap, "finder": finder, "buyer": buyer])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var seller: String {
                  get {
                    return resultMap["seller"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "seller")
                  }
                }

                public var sellerFundsRecipient: String {
                  get {
                    return resultMap["sellerFundsRecipient"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "sellerFundsRecipient")
                  }
                }

                public var askCurrency: String {
                  get {
                    return resultMap["askCurrency"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "askCurrency")
                  }
                }

                public var askPrice: String {
                  get {
                    return resultMap["askPrice"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "askPrice")
                  }
                }

                public var findersFeeBps: Int {
                  get {
                    return resultMap["findersFeeBps"]! as! Int
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "findersFeeBps")
                  }
                }

                public var price: Price {
                  get {
                    return Price(unsafeResultMap: resultMap["price"]! as! ResultMap)
                  }
                  set {
                    resultMap.updateValue(newValue.resultMap, forKey: "price")
                  }
                }

                public var finder: String {
                  get {
                    return resultMap["finder"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "finder")
                  }
                }

                public var buyer: String {
                  get {
                    return resultMap["buyer"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "buyer")
                  }
                }

                public var fragments: Fragments {
                  get {
                    return Fragments(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }

                public struct Fragments {
                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public var v3AskEventPropertiesInfo: V3AskEventPropertiesInfo {
                    get {
                      return V3AskEventPropertiesInfo(unsafeResultMap: resultMap)
                    }
                    set {
                      resultMap += newValue.resultMap
                    }
                  }
                }

                public struct Price: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["PriceAtTime"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                      GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
                      GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
                      GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
                    self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var blockNumber: Int {
                    get {
                      return resultMap["blockNumber"]! as! Int
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "blockNumber")
                    }
                  }

                  public var chainTokenPrice: ChainTokenPrice? {
                    get {
                      return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
                    }
                    set {
                      resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
                    }
                  }

                  public var nativePrice: NativePrice {
                    get {
                      return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
                    }
                    set {
                      resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
                    }
                  }

                  public var usdcPrice: UsdcPrice? {
                    get {
                      return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
                    }
                    set {
                      resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
                    }
                  }

                  public var fragments: Fragments {
                    get {
                      return Fragments(unsafeResultMap: resultMap)
                    }
                    set {
                      resultMap += newValue.resultMap
                    }
                  }

                  public struct Fragments {
                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public var priceSummary: PriceSummary {
                      get {
                        return PriceSummary(unsafeResultMap: resultMap)
                      }
                      set {
                        resultMap += newValue.resultMap
                      }
                    }
                  }

                  public struct ChainTokenPrice: GraphQLSelectionSet {
                    public static let possibleTypes: [String] = ["CurrencyAmount"]

                    public static var selections: [GraphQLSelection] {
                      return [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                        GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                      ]
                    }

                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public init(decimal: Double, raw: String) {
                      self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                    }

                    public var __typename: String {
                      get {
                        return resultMap["__typename"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "__typename")
                      }
                    }

                    public var decimal: Double {
                      get {
                        return resultMap["decimal"]! as! Double
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "decimal")
                      }
                    }

                    public var raw: String {
                      get {
                        return resultMap["raw"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "raw")
                      }
                    }
                  }

                  public struct NativePrice: GraphQLSelectionSet {
                    public static let possibleTypes: [String] = ["CurrencyAmount"]

                    public static var selections: [GraphQLSelection] {
                      return [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                        GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                        GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
                      ]
                    }

                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public init(decimal: Double, raw: String, currency: Currency) {
                      self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
                    }

                    public var __typename: String {
                      get {
                        return resultMap["__typename"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "__typename")
                      }
                    }

                    public var decimal: Double {
                      get {
                        return resultMap["decimal"]! as! Double
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "decimal")
                      }
                    }

                    public var raw: String {
                      get {
                        return resultMap["raw"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "raw")
                      }
                    }

                    public var currency: Currency {
                      get {
                        return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
                      }
                      set {
                        resultMap.updateValue(newValue.resultMap, forKey: "currency")
                      }
                    }

                    public struct Currency: GraphQLSelectionSet {
                      public static let possibleTypes: [String] = ["Currency"]

                      public static var selections: [GraphQLSelection] {
                        return [
                          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                          GraphQLField("address", type: .nonNull(.scalar(String.self))),
                          GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                          GraphQLField("name", type: .nonNull(.scalar(String.self))),
                        ]
                      }

                      public private(set) var resultMap: ResultMap

                      public init(unsafeResultMap: ResultMap) {
                        self.resultMap = unsafeResultMap
                      }

                      public init(address: String, decimals: Int, name: String) {
                        self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
                      }

                      public var __typename: String {
                        get {
                          return resultMap["__typename"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "__typename")
                        }
                      }

                      public var address: String {
                        get {
                          return resultMap["address"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "address")
                        }
                      }

                      public var decimals: Int {
                        get {
                          return resultMap["decimals"]! as! Int
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "decimals")
                        }
                      }

                      public var name: String {
                        get {
                          return resultMap["name"]! as! String
                        }
                        set {
                          resultMap.updateValue(newValue, forKey: "name")
                        }
                      }
                    }
                  }

                  public struct UsdcPrice: GraphQLSelectionSet {
                    public static let possibleTypes: [String] = ["CurrencyAmount"]

                    public static var selections: [GraphQLSelection] {
                      return [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                        GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                      ]
                    }

                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public init(decimal: Double, raw: String) {
                      self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                    }

                    public var __typename: String {
                      get {
                        return resultMap["__typename"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "__typename")
                      }
                    }

                    public var decimal: Double {
                      get {
                        return resultMap["decimal"]! as! Double
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "decimal")
                      }
                    }

                    public var raw: String {
                      get {
                        return resultMap["raw"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "raw")
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      public struct Market: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["Market"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("collectionAddress", type: .nonNull(.scalar(String.self))),
            GraphQLField("marketAddress", type: .nonNull(.scalar(String.self))),
            GraphQLField("marketType", type: .nonNull(.scalar(MarketType.self))),
            GraphQLField("transactionInfo", type: .nonNull(.object(TransactionInfo.selections))),
            GraphQLField("price", type: .object(Price.selections)),
            GraphQLField("status", type: .nonNull(.scalar(String.self))),
            GraphQLField("networkInfo", type: .nonNull(.object(NetworkInfo.selections))),
            GraphQLBooleanCondition(variableName: "includeFullDetails", inverted: false, selections: [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("properties", type: .nonNull(.object(Property.selections))),
            ]),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(collectionAddress: String, marketAddress: String, marketType: MarketType, transactionInfo: TransactionInfo, price: Price? = nil, status: String, networkInfo: NetworkInfo, properties: Property? = nil) {
          self.init(unsafeResultMap: ["__typename": "Market", "collectionAddress": collectionAddress, "marketAddress": marketAddress, "marketType": marketType, "transactionInfo": transactionInfo.resultMap, "price": price.flatMap { (value: Price) -> ResultMap in value.resultMap }, "status": status, "networkInfo": networkInfo.resultMap, "properties": properties.flatMap { (value: Property) -> ResultMap in value.resultMap }])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var collectionAddress: String {
          get {
            return resultMap["collectionAddress"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "collectionAddress")
          }
        }

        public var marketAddress: String {
          get {
            return resultMap["marketAddress"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "marketAddress")
          }
        }

        public var marketType: MarketType {
          get {
            return resultMap["marketType"]! as! MarketType
          }
          set {
            resultMap.updateValue(newValue, forKey: "marketType")
          }
        }

        public var transactionInfo: TransactionInfo {
          get {
            return TransactionInfo(unsafeResultMap: resultMap["transactionInfo"]! as! ResultMap)
          }
          set {
            resultMap.updateValue(newValue.resultMap, forKey: "transactionInfo")
          }
        }

        public var price: Price? {
          get {
            return (resultMap["price"] as? ResultMap).flatMap { Price(unsafeResultMap: $0) }
          }
          set {
            resultMap.updateValue(newValue?.resultMap, forKey: "price")
          }
        }

        public var status: String {
          get {
            return resultMap["status"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "status")
          }
        }

        public var networkInfo: NetworkInfo {
          get {
            return NetworkInfo(unsafeResultMap: resultMap["networkInfo"]! as! ResultMap)
          }
          set {
            resultMap.updateValue(newValue.resultMap, forKey: "networkInfo")
          }
        }

        public var properties: Property? {
          get {
            return (resultMap["properties"] as? ResultMap).flatMap { Property(unsafeResultMap: $0) }
          }
          set {
            resultMap.updateValue(newValue?.resultMap, forKey: "properties")
          }
        }

        public var fragments: Fragments {
          get {
            return Fragments(unsafeResultMap: resultMap)
          }
          set {
            resultMap += newValue.resultMap
          }
        }

        public struct Fragments {
          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public var marketInfo: MarketInfo {
            get {
              return MarketInfo(unsafeResultMap: resultMap)
            }
            set {
              resultMap += newValue.resultMap
            }
          }

          public var marketDetails: MarketDetails {
            get {
              return MarketDetails(unsafeResultMap: resultMap)
            }
            set {
              resultMap += newValue.resultMap
            }
          }
        }

        public struct TransactionInfo: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["TransactionInfo"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
              GraphQLField("blockTimestamp", type: .nonNull(.scalar(String.self))),
              GraphQLField("transactionHash", type: .scalar(String.self)),
              GraphQLField("logIndex", type: .scalar(Int.self)),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(blockNumber: Int, blockTimestamp: String, transactionHash: String? = nil, logIndex: Int? = nil) {
            self.init(unsafeResultMap: ["__typename": "TransactionInfo", "blockNumber": blockNumber, "blockTimestamp": blockTimestamp, "transactionHash": transactionHash, "logIndex": logIndex])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var blockNumber: Int {
            get {
              return resultMap["blockNumber"]! as! Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "blockNumber")
            }
          }

          public var blockTimestamp: String {
            get {
              return resultMap["blockTimestamp"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "blockTimestamp")
            }
          }

          public var transactionHash: String? {
            get {
              return resultMap["transactionHash"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "transactionHash")
            }
          }

          public var logIndex: Int? {
            get {
              return resultMap["logIndex"] as? Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "logIndex")
            }
          }

          public var fragments: Fragments {
            get {
              return Fragments(unsafeResultMap: resultMap)
            }
            set {
              resultMap += newValue.resultMap
            }
          }

          public struct Fragments {
            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public var transactionDetails: TransactionDetails {
              get {
                return TransactionDetails(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }
          }
        }

        public struct Price: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["PriceAtTime"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
              GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
              GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
              GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
            self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var blockNumber: Int {
            get {
              return resultMap["blockNumber"]! as! Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "blockNumber")
            }
          }

          public var chainTokenPrice: ChainTokenPrice? {
            get {
              return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
            }
            set {
              resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
            }
          }

          public var nativePrice: NativePrice {
            get {
              return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
            }
            set {
              resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
            }
          }

          public var usdcPrice: UsdcPrice? {
            get {
              return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
            }
            set {
              resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
            }
          }

          public var fragments: Fragments {
            get {
              return Fragments(unsafeResultMap: resultMap)
            }
            set {
              resultMap += newValue.resultMap
            }
          }

          public struct Fragments {
            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public var priceSummary: PriceSummary {
              get {
                return PriceSummary(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }
          }

          public struct ChainTokenPrice: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["CurrencyAmount"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                GraphQLField("raw", type: .nonNull(.scalar(String.self))),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(decimal: Double, raw: String) {
              self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var decimal: Double {
              get {
                return resultMap["decimal"]! as! Double
              }
              set {
                resultMap.updateValue(newValue, forKey: "decimal")
              }
            }

            public var raw: String {
              get {
                return resultMap["raw"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "raw")
              }
            }
          }

          public struct NativePrice: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["CurrencyAmount"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(decimal: Double, raw: String, currency: Currency) {
              self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var decimal: Double {
              get {
                return resultMap["decimal"]! as! Double
              }
              set {
                resultMap.updateValue(newValue, forKey: "decimal")
              }
            }

            public var raw: String {
              get {
                return resultMap["raw"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "raw")
              }
            }

            public var currency: Currency {
              get {
                return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
              }
              set {
                resultMap.updateValue(newValue.resultMap, forKey: "currency")
              }
            }

            public struct Currency: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["Currency"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("address", type: .nonNull(.scalar(String.self))),
                  GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                  GraphQLField("name", type: .nonNull(.scalar(String.self))),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(address: String, decimals: Int, name: String) {
                self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var address: String {
                get {
                  return resultMap["address"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "address")
                }
              }

              public var decimals: Int {
                get {
                  return resultMap["decimals"]! as! Int
                }
                set {
                  resultMap.updateValue(newValue, forKey: "decimals")
                }
              }

              public var name: String {
                get {
                  return resultMap["name"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "name")
                }
              }
            }
          }

          public struct UsdcPrice: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["CurrencyAmount"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                GraphQLField("raw", type: .nonNull(.scalar(String.self))),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(decimal: Double, raw: String) {
              self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var decimal: Double {
              get {
                return resultMap["decimal"]! as! Double
              }
              set {
                resultMap.updateValue(newValue, forKey: "decimal")
              }
            }

            public var raw: String {
              get {
                return resultMap["raw"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "raw")
              }
            }
          }
        }

        public struct NetworkInfo: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["NetworkInfo"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("chain", type: .nonNull(.scalar(Chain.self))),
              GraphQLField("network", type: .nonNull(.scalar(Network.self))),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(chain: Chain, network: Network) {
            self.init(unsafeResultMap: ["__typename": "NetworkInfo", "chain": chain, "network": network])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var chain: Chain {
            get {
              return resultMap["chain"]! as! Chain
            }
            set {
              resultMap.updateValue(newValue, forKey: "chain")
            }
          }

          public var network: Network {
            get {
              return resultMap["network"]! as! Network
            }
            set {
              resultMap.updateValue(newValue, forKey: "network")
            }
          }

          public var fragments: Fragments {
            get {
              return Fragments(unsafeResultMap: resultMap)
            }
            set {
              resultMap += newValue.resultMap
            }
          }

          public struct Fragments {
            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public var networkInfoDetails: NetworkInfoDetails {
              get {
                return NetworkInfoDetails(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }
          }
        }

        public struct Property: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["V1Ask", "V1Offer", "V1BidShare", "V2Auction", "V3Ask"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLTypeCase(
                variants: ["V2Auction": AsV2Auction.selections, "V3Ask": AsV3Ask.selections, "V1Offer": AsV1Offer.selections, "V1Ask": AsV1Ask.selections],
                default: [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                ]
              )
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public static func makeV1BidShare() -> Property {
            return Property(unsafeResultMap: ["__typename": "V1BidShare"])
          }

          public static func makeV2Auction(firstBidTime: String? = nil, highestBidder: String? = nil, curator: String, collectionAddress: String, curatorFeePercentage: Int, tokenId: String, auctionCurrency: String, duration: String, estimatedExpirationTime: String? = nil, v2AuctionStatus: V2AuctionStatus, tokenOwner: String, address: String, auctionId: String, approved: Bool, reservePrice: AsV2Auction.ReservePrice, highestBidPrice: AsV2Auction.HighestBidPrice? = nil) -> Property {
            return Property(unsafeResultMap: ["__typename": "V2Auction", "firstBidTime": firstBidTime, "highestBidder": highestBidder, "curator": curator, "collectionAddress": collectionAddress, "curatorFeePercentage": curatorFeePercentage, "tokenId": tokenId, "auctionCurrency": auctionCurrency, "duration": duration, "estimatedExpirationTime": estimatedExpirationTime, "v2AuctionStatus": v2AuctionStatus, "tokenOwner": tokenOwner, "address": address, "auctionId": auctionId, "approved": approved, "reservePrice": reservePrice.resultMap, "highestBidPrice": highestBidPrice.flatMap { (value: AsV2Auction.HighestBidPrice) -> ResultMap in value.resultMap }])
          }

          public static func makeV3Ask(buyer: String? = nil, finder: String? = nil, findersFeeBps: Int, sellerFundsRecipient: String, v3AskStatus: V3AskStatus, seller: String, address: String, askCurrency: String, collectionAddress: String, askPrice: AsV3Ask.AskPrice) -> Property {
            return Property(unsafeResultMap: ["__typename": "V3Ask", "buyer": buyer, "finder": finder, "findersFeeBps": findersFeeBps, "sellerFundsRecipient": sellerFundsRecipient, "v3AskStatus": v3AskStatus, "seller": seller, "address": address, "askCurrency": askCurrency, "collectionAddress": collectionAddress, "askPrice": askPrice.resultMap])
          }

          public static func makeV1Offer(v1OfferStatus: V1MarketEntityStatus, sellOnShare: String, bidder: String, currency: String, amount: AsV1Offer.Amount) -> Property {
            return Property(unsafeResultMap: ["__typename": "V1Offer", "v1OfferStatus": v1OfferStatus, "sellOnShare": sellOnShare, "bidder": bidder, "currency": currency, "amount": amount.resultMap])
          }

          public static func makeV1Ask(v1AskStatus: V1MarketEntityStatus, currency: String, amount: AsV1Ask.Amount) -> Property {
            return Property(unsafeResultMap: ["__typename": "V1Ask", "v1AskStatus": v1AskStatus, "currency": currency, "amount": amount.resultMap])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var fragments: Fragments {
            get {
              return Fragments(unsafeResultMap: resultMap)
            }
            set {
              resultMap += newValue.resultMap
            }
          }

          public struct Fragments {
            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public var marketPropertiesFull: MarketPropertiesFull {
              get {
                return MarketPropertiesFull(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }

            public var v2AuctionMarketProperties: V2AuctionMarketProperties? {
              get {
                if !V2AuctionMarketProperties.possibleTypes.contains(resultMap["__typename"]! as! String) { return nil }
                return V2AuctionMarketProperties(unsafeResultMap: resultMap)
              }
              set {
                guard let newValue = newValue else { return }
                resultMap += newValue.resultMap
              }
            }

            public var v3AskProperties: V3AskProperties? {
              get {
                if !V3AskProperties.possibleTypes.contains(resultMap["__typename"]! as! String) { return nil }
                return V3AskProperties(unsafeResultMap: resultMap)
              }
              set {
                guard let newValue = newValue else { return }
                resultMap += newValue.resultMap
              }
            }

            public var v1OfferProperties: V1OfferProperties? {
              get {
                if !V1OfferProperties.possibleTypes.contains(resultMap["__typename"]! as! String) { return nil }
                return V1OfferProperties(unsafeResultMap: resultMap)
              }
              set {
                guard let newValue = newValue else { return }
                resultMap += newValue.resultMap
              }
            }

            public var v1AskProperties: V1AskProperties? {
              get {
                if !V1AskProperties.possibleTypes.contains(resultMap["__typename"]! as! String) { return nil }
                return V1AskProperties(unsafeResultMap: resultMap)
              }
              set {
                guard let newValue = newValue else { return }
                resultMap += newValue.resultMap
              }
            }
          }

          public var asV2Auction: AsV2Auction? {
            get {
              if !AsV2Auction.possibleTypes.contains(__typename) { return nil }
              return AsV2Auction(unsafeResultMap: resultMap)
            }
            set {
              guard let newValue = newValue else { return }
              resultMap = newValue.resultMap
            }
          }

          public struct AsV2Auction: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["V2Auction"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("firstBidTime", type: .scalar(String.self)),
                GraphQLField("highestBidder", type: .scalar(String.self)),
                GraphQLField("curator", type: .nonNull(.scalar(String.self))),
                GraphQLField("collectionAddress", type: .nonNull(.scalar(String.self))),
                GraphQLField("curatorFeePercentage", type: .nonNull(.scalar(Int.self))),
                GraphQLField("tokenId", type: .nonNull(.scalar(String.self))),
                GraphQLField("auctionCurrency", type: .nonNull(.scalar(String.self))),
                GraphQLField("duration", type: .nonNull(.scalar(String.self))),
                GraphQLField("estimatedExpirationTime", type: .scalar(String.self)),
                GraphQLField("v2AuctionStatus", type: .nonNull(.scalar(V2AuctionStatus.self))),
                GraphQLField("tokenOwner", type: .nonNull(.scalar(String.self))),
                GraphQLField("address", type: .nonNull(.scalar(String.self))),
                GraphQLField("auctionId", type: .nonNull(.scalar(String.self))),
                GraphQLField("approved", type: .nonNull(.scalar(Bool.self))),
                GraphQLField("reservePrice", type: .nonNull(.object(ReservePrice.selections))),
                GraphQLField("highestBidPrice", type: .object(HighestBidPrice.selections)),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(firstBidTime: String? = nil, highestBidder: String? = nil, curator: String, collectionAddress: String, curatorFeePercentage: Int, tokenId: String, auctionCurrency: String, duration: String, estimatedExpirationTime: String? = nil, v2AuctionStatus: V2AuctionStatus, tokenOwner: String, address: String, auctionId: String, approved: Bool, reservePrice: ReservePrice, highestBidPrice: HighestBidPrice? = nil) {
              self.init(unsafeResultMap: ["__typename": "V2Auction", "firstBidTime": firstBidTime, "highestBidder": highestBidder, "curator": curator, "collectionAddress": collectionAddress, "curatorFeePercentage": curatorFeePercentage, "tokenId": tokenId, "auctionCurrency": auctionCurrency, "duration": duration, "estimatedExpirationTime": estimatedExpirationTime, "v2AuctionStatus": v2AuctionStatus, "tokenOwner": tokenOwner, "address": address, "auctionId": auctionId, "approved": approved, "reservePrice": reservePrice.resultMap, "highestBidPrice": highestBidPrice.flatMap { (value: HighestBidPrice) -> ResultMap in value.resultMap }])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var firstBidTime: String? {
              get {
                return resultMap["firstBidTime"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "firstBidTime")
              }
            }

            public var highestBidder: String? {
              get {
                return resultMap["highestBidder"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "highestBidder")
              }
            }

            public var curator: String {
              get {
                return resultMap["curator"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "curator")
              }
            }

            public var collectionAddress: String {
              get {
                return resultMap["collectionAddress"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "collectionAddress")
              }
            }

            public var curatorFeePercentage: Int {
              get {
                return resultMap["curatorFeePercentage"]! as! Int
              }
              set {
                resultMap.updateValue(newValue, forKey: "curatorFeePercentage")
              }
            }

            public var tokenId: String {
              get {
                return resultMap["tokenId"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "tokenId")
              }
            }

            public var auctionCurrency: String {
              get {
                return resultMap["auctionCurrency"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "auctionCurrency")
              }
            }

            public var duration: String {
              get {
                return resultMap["duration"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "duration")
              }
            }

            public var estimatedExpirationTime: String? {
              get {
                return resultMap["estimatedExpirationTime"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "estimatedExpirationTime")
              }
            }

            public var v2AuctionStatus: V2AuctionStatus {
              get {
                return resultMap["v2AuctionStatus"]! as! V2AuctionStatus
              }
              set {
                resultMap.updateValue(newValue, forKey: "v2AuctionStatus")
              }
            }

            public var tokenOwner: String {
              get {
                return resultMap["tokenOwner"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "tokenOwner")
              }
            }

            public var address: String {
              get {
                return resultMap["address"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "address")
              }
            }

            public var auctionId: String {
              get {
                return resultMap["auctionId"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "auctionId")
              }
            }

            public var approved: Bool {
              get {
                return resultMap["approved"]! as! Bool
              }
              set {
                resultMap.updateValue(newValue, forKey: "approved")
              }
            }

            public var reservePrice: ReservePrice {
              get {
                return ReservePrice(unsafeResultMap: resultMap["reservePrice"]! as! ResultMap)
              }
              set {
                resultMap.updateValue(newValue.resultMap, forKey: "reservePrice")
              }
            }

            public var highestBidPrice: HighestBidPrice? {
              get {
                return (resultMap["highestBidPrice"] as? ResultMap).flatMap { HighestBidPrice(unsafeResultMap: $0) }
              }
              set {
                resultMap.updateValue(newValue?.resultMap, forKey: "highestBidPrice")
              }
            }

            public var fragments: Fragments {
              get {
                return Fragments(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }

            public struct Fragments {
              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public var marketPropertiesFull: MarketPropertiesFull {
                get {
                  return MarketPropertiesFull(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }

              public var v2AuctionMarketProperties: V2AuctionMarketProperties {
                get {
                  return V2AuctionMarketProperties(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }

              public var v3AskProperties: V3AskProperties? {
                get {
                  if !V3AskProperties.possibleTypes.contains(resultMap["__typename"]! as! String) { return nil }
                  return V3AskProperties(unsafeResultMap: resultMap)
                }
                set {
                  guard let newValue = newValue else { return }
                  resultMap += newValue.resultMap
                }
              }

              public var v1OfferProperties: V1OfferProperties? {
                get {
                  if !V1OfferProperties.possibleTypes.contains(resultMap["__typename"]! as! String) { return nil }
                  return V1OfferProperties(unsafeResultMap: resultMap)
                }
                set {
                  guard let newValue = newValue else { return }
                  resultMap += newValue.resultMap
                }
              }

              public var v1AskProperties: V1AskProperties? {
                get {
                  if !V1AskProperties.possibleTypes.contains(resultMap["__typename"]! as! String) { return nil }
                  return V1AskProperties(unsafeResultMap: resultMap)
                }
                set {
                  guard let newValue = newValue else { return }
                  resultMap += newValue.resultMap
                }
              }
            }

            public struct ReservePrice: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["PriceAtTime"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                  GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
                  GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
                  GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
                self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var blockNumber: Int {
                get {
                  return resultMap["blockNumber"]! as! Int
                }
                set {
                  resultMap.updateValue(newValue, forKey: "blockNumber")
                }
              }

              public var chainTokenPrice: ChainTokenPrice? {
                get {
                  return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
                }
                set {
                  resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
                }
              }

              public var nativePrice: NativePrice {
                get {
                  return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
                }
                set {
                  resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
                }
              }

              public var usdcPrice: UsdcPrice? {
                get {
                  return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
                }
                set {
                  resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
                }
              }

              public var fragments: Fragments {
                get {
                  return Fragments(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }

              public struct Fragments {
                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public var priceSummary: PriceSummary {
                  get {
                    return PriceSummary(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }
              }

              public struct ChainTokenPrice: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["CurrencyAmount"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                    GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(decimal: Double, raw: String) {
                  self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var decimal: Double {
                  get {
                    return resultMap["decimal"]! as! Double
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimal")
                  }
                }

                public var raw: String {
                  get {
                    return resultMap["raw"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "raw")
                  }
                }
              }

              public struct NativePrice: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["CurrencyAmount"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                    GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                    GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(decimal: Double, raw: String, currency: Currency) {
                  self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var decimal: Double {
                  get {
                    return resultMap["decimal"]! as! Double
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimal")
                  }
                }

                public var raw: String {
                  get {
                    return resultMap["raw"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "raw")
                  }
                }

                public var currency: Currency {
                  get {
                    return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
                  }
                  set {
                    resultMap.updateValue(newValue.resultMap, forKey: "currency")
                  }
                }

                public struct Currency: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["Currency"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("address", type: .nonNull(.scalar(String.self))),
                      GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                      GraphQLField("name", type: .nonNull(.scalar(String.self))),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(address: String, decimals: Int, name: String) {
                    self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var address: String {
                    get {
                      return resultMap["address"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "address")
                    }
                  }

                  public var decimals: Int {
                    get {
                      return resultMap["decimals"]! as! Int
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "decimals")
                    }
                  }

                  public var name: String {
                    get {
                      return resultMap["name"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "name")
                    }
                  }
                }
              }

              public struct UsdcPrice: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["CurrencyAmount"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                    GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(decimal: Double, raw: String) {
                  self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var decimal: Double {
                  get {
                    return resultMap["decimal"]! as! Double
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimal")
                  }
                }

                public var raw: String {
                  get {
                    return resultMap["raw"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "raw")
                  }
                }
              }
            }

            public struct HighestBidPrice: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["PriceAtTime"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                  GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
                  GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
                  GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
                self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var blockNumber: Int {
                get {
                  return resultMap["blockNumber"]! as! Int
                }
                set {
                  resultMap.updateValue(newValue, forKey: "blockNumber")
                }
              }

              public var chainTokenPrice: ChainTokenPrice? {
                get {
                  return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
                }
                set {
                  resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
                }
              }

              public var nativePrice: NativePrice {
                get {
                  return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
                }
                set {
                  resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
                }
              }

              public var usdcPrice: UsdcPrice? {
                get {
                  return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
                }
                set {
                  resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
                }
              }

              public var fragments: Fragments {
                get {
                  return Fragments(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }

              public struct Fragments {
                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public var priceSummary: PriceSummary {
                  get {
                    return PriceSummary(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }
              }

              public struct ChainTokenPrice: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["CurrencyAmount"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                    GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(decimal: Double, raw: String) {
                  self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var decimal: Double {
                  get {
                    return resultMap["decimal"]! as! Double
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimal")
                  }
                }

                public var raw: String {
                  get {
                    return resultMap["raw"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "raw")
                  }
                }
              }

              public struct NativePrice: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["CurrencyAmount"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                    GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                    GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(decimal: Double, raw: String, currency: Currency) {
                  self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var decimal: Double {
                  get {
                    return resultMap["decimal"]! as! Double
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimal")
                  }
                }

                public var raw: String {
                  get {
                    return resultMap["raw"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "raw")
                  }
                }

                public var currency: Currency {
                  get {
                    return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
                  }
                  set {
                    resultMap.updateValue(newValue.resultMap, forKey: "currency")
                  }
                }

                public struct Currency: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["Currency"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("address", type: .nonNull(.scalar(String.self))),
                      GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                      GraphQLField("name", type: .nonNull(.scalar(String.self))),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(address: String, decimals: Int, name: String) {
                    self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var address: String {
                    get {
                      return resultMap["address"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "address")
                    }
                  }

                  public var decimals: Int {
                    get {
                      return resultMap["decimals"]! as! Int
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "decimals")
                    }
                  }

                  public var name: String {
                    get {
                      return resultMap["name"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "name")
                    }
                  }
                }
              }

              public struct UsdcPrice: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["CurrencyAmount"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                    GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(decimal: Double, raw: String) {
                  self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var decimal: Double {
                  get {
                    return resultMap["decimal"]! as! Double
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimal")
                  }
                }

                public var raw: String {
                  get {
                    return resultMap["raw"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "raw")
                  }
                }
              }
            }
          }

          public var asV3Ask: AsV3Ask? {
            get {
              if !AsV3Ask.possibleTypes.contains(__typename) { return nil }
              return AsV3Ask(unsafeResultMap: resultMap)
            }
            set {
              guard let newValue = newValue else { return }
              resultMap = newValue.resultMap
            }
          }

          public struct AsV3Ask: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["V3Ask"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("buyer", type: .scalar(String.self)),
                GraphQLField("finder", type: .scalar(String.self)),
                GraphQLField("findersFeeBps", type: .nonNull(.scalar(Int.self))),
                GraphQLField("sellerFundsRecipient", type: .nonNull(.scalar(String.self))),
                GraphQLField("v3AskStatus", type: .nonNull(.scalar(V3AskStatus.self))),
                GraphQLField("seller", type: .nonNull(.scalar(String.self))),
                GraphQLField("address", type: .nonNull(.scalar(String.self))),
                GraphQLField("askCurrency", type: .nonNull(.scalar(String.self))),
                GraphQLField("collectionAddress", type: .nonNull(.scalar(String.self))),
                GraphQLField("askPrice", type: .nonNull(.object(AskPrice.selections))),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(buyer: String? = nil, finder: String? = nil, findersFeeBps: Int, sellerFundsRecipient: String, v3AskStatus: V3AskStatus, seller: String, address: String, askCurrency: String, collectionAddress: String, askPrice: AskPrice) {
              self.init(unsafeResultMap: ["__typename": "V3Ask", "buyer": buyer, "finder": finder, "findersFeeBps": findersFeeBps, "sellerFundsRecipient": sellerFundsRecipient, "v3AskStatus": v3AskStatus, "seller": seller, "address": address, "askCurrency": askCurrency, "collectionAddress": collectionAddress, "askPrice": askPrice.resultMap])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var buyer: String? {
              get {
                return resultMap["buyer"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "buyer")
              }
            }

            public var finder: String? {
              get {
                return resultMap["finder"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "finder")
              }
            }

            public var findersFeeBps: Int {
              get {
                return resultMap["findersFeeBps"]! as! Int
              }
              set {
                resultMap.updateValue(newValue, forKey: "findersFeeBps")
              }
            }

            public var sellerFundsRecipient: String {
              get {
                return resultMap["sellerFundsRecipient"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "sellerFundsRecipient")
              }
            }

            public var v3AskStatus: V3AskStatus {
              get {
                return resultMap["v3AskStatus"]! as! V3AskStatus
              }
              set {
                resultMap.updateValue(newValue, forKey: "v3AskStatus")
              }
            }

            public var seller: String {
              get {
                return resultMap["seller"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "seller")
              }
            }

            public var address: String {
              get {
                return resultMap["address"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "address")
              }
            }

            public var askCurrency: String {
              get {
                return resultMap["askCurrency"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "askCurrency")
              }
            }

            public var collectionAddress: String {
              get {
                return resultMap["collectionAddress"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "collectionAddress")
              }
            }

            public var askPrice: AskPrice {
              get {
                return AskPrice(unsafeResultMap: resultMap["askPrice"]! as! ResultMap)
              }
              set {
                resultMap.updateValue(newValue.resultMap, forKey: "askPrice")
              }
            }

            public var fragments: Fragments {
              get {
                return Fragments(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }

            public struct Fragments {
              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public var marketPropertiesFull: MarketPropertiesFull {
                get {
                  return MarketPropertiesFull(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }

              public var v2AuctionMarketProperties: V2AuctionMarketProperties? {
                get {
                  if !V2AuctionMarketProperties.possibleTypes.contains(resultMap["__typename"]! as! String) { return nil }
                  return V2AuctionMarketProperties(unsafeResultMap: resultMap)
                }
                set {
                  guard let newValue = newValue else { return }
                  resultMap += newValue.resultMap
                }
              }

              public var v3AskProperties: V3AskProperties {
                get {
                  return V3AskProperties(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }

              public var v1OfferProperties: V1OfferProperties? {
                get {
                  if !V1OfferProperties.possibleTypes.contains(resultMap["__typename"]! as! String) { return nil }
                  return V1OfferProperties(unsafeResultMap: resultMap)
                }
                set {
                  guard let newValue = newValue else { return }
                  resultMap += newValue.resultMap
                }
              }

              public var v1AskProperties: V1AskProperties? {
                get {
                  if !V1AskProperties.possibleTypes.contains(resultMap["__typename"]! as! String) { return nil }
                  return V1AskProperties(unsafeResultMap: resultMap)
                }
                set {
                  guard let newValue = newValue else { return }
                  resultMap += newValue.resultMap
                }
              }
            }

            public struct AskPrice: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["PriceAtTime"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                  GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
                  GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
                  GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
                self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var blockNumber: Int {
                get {
                  return resultMap["blockNumber"]! as! Int
                }
                set {
                  resultMap.updateValue(newValue, forKey: "blockNumber")
                }
              }

              public var chainTokenPrice: ChainTokenPrice? {
                get {
                  return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
                }
                set {
                  resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
                }
              }

              public var nativePrice: NativePrice {
                get {
                  return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
                }
                set {
                  resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
                }
              }

              public var usdcPrice: UsdcPrice? {
                get {
                  return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
                }
                set {
                  resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
                }
              }

              public var fragments: Fragments {
                get {
                  return Fragments(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }

              public struct Fragments {
                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public var priceSummary: PriceSummary {
                  get {
                    return PriceSummary(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }
              }

              public struct ChainTokenPrice: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["CurrencyAmount"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                    GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(decimal: Double, raw: String) {
                  self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var decimal: Double {
                  get {
                    return resultMap["decimal"]! as! Double
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimal")
                  }
                }

                public var raw: String {
                  get {
                    return resultMap["raw"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "raw")
                  }
                }
              }

              public struct NativePrice: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["CurrencyAmount"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                    GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                    GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(decimal: Double, raw: String, currency: Currency) {
                  self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var decimal: Double {
                  get {
                    return resultMap["decimal"]! as! Double
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimal")
                  }
                }

                public var raw: String {
                  get {
                    return resultMap["raw"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "raw")
                  }
                }

                public var currency: Currency {
                  get {
                    return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
                  }
                  set {
                    resultMap.updateValue(newValue.resultMap, forKey: "currency")
                  }
                }

                public struct Currency: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["Currency"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("address", type: .nonNull(.scalar(String.self))),
                      GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                      GraphQLField("name", type: .nonNull(.scalar(String.self))),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(address: String, decimals: Int, name: String) {
                    self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var address: String {
                    get {
                      return resultMap["address"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "address")
                    }
                  }

                  public var decimals: Int {
                    get {
                      return resultMap["decimals"]! as! Int
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "decimals")
                    }
                  }

                  public var name: String {
                    get {
                      return resultMap["name"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "name")
                    }
                  }
                }
              }

              public struct UsdcPrice: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["CurrencyAmount"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                    GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(decimal: Double, raw: String) {
                  self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var decimal: Double {
                  get {
                    return resultMap["decimal"]! as! Double
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimal")
                  }
                }

                public var raw: String {
                  get {
                    return resultMap["raw"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "raw")
                  }
                }
              }
            }
          }

          public var asV1Offer: AsV1Offer? {
            get {
              if !AsV1Offer.possibleTypes.contains(__typename) { return nil }
              return AsV1Offer(unsafeResultMap: resultMap)
            }
            set {
              guard let newValue = newValue else { return }
              resultMap = newValue.resultMap
            }
          }

          public struct AsV1Offer: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["V1Offer"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("v1OfferStatus", type: .nonNull(.scalar(V1MarketEntityStatus.self))),
                GraphQLField("sellOnShare", type: .nonNull(.scalar(String.self))),
                GraphQLField("bidder", type: .nonNull(.scalar(String.self))),
                GraphQLField("currency", type: .nonNull(.scalar(String.self))),
                GraphQLField("amount", type: .nonNull(.object(Amount.selections))),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(v1OfferStatus: V1MarketEntityStatus, sellOnShare: String, bidder: String, currency: String, amount: Amount) {
              self.init(unsafeResultMap: ["__typename": "V1Offer", "v1OfferStatus": v1OfferStatus, "sellOnShare": sellOnShare, "bidder": bidder, "currency": currency, "amount": amount.resultMap])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var v1OfferStatus: V1MarketEntityStatus {
              get {
                return resultMap["v1OfferStatus"]! as! V1MarketEntityStatus
              }
              set {
                resultMap.updateValue(newValue, forKey: "v1OfferStatus")
              }
            }

            public var sellOnShare: String {
              get {
                return resultMap["sellOnShare"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "sellOnShare")
              }
            }

            public var bidder: String {
              get {
                return resultMap["bidder"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "bidder")
              }
            }

            public var currency: String {
              get {
                return resultMap["currency"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "currency")
              }
            }

            public var amount: Amount {
              get {
                return Amount(unsafeResultMap: resultMap["amount"]! as! ResultMap)
              }
              set {
                resultMap.updateValue(newValue.resultMap, forKey: "amount")
              }
            }

            public var fragments: Fragments {
              get {
                return Fragments(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }

            public struct Fragments {
              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public var marketPropertiesFull: MarketPropertiesFull {
                get {
                  return MarketPropertiesFull(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }

              public var v2AuctionMarketProperties: V2AuctionMarketProperties? {
                get {
                  if !V2AuctionMarketProperties.possibleTypes.contains(resultMap["__typename"]! as! String) { return nil }
                  return V2AuctionMarketProperties(unsafeResultMap: resultMap)
                }
                set {
                  guard let newValue = newValue else { return }
                  resultMap += newValue.resultMap
                }
              }

              public var v3AskProperties: V3AskProperties? {
                get {
                  if !V3AskProperties.possibleTypes.contains(resultMap["__typename"]! as! String) { return nil }
                  return V3AskProperties(unsafeResultMap: resultMap)
                }
                set {
                  guard let newValue = newValue else { return }
                  resultMap += newValue.resultMap
                }
              }

              public var v1OfferProperties: V1OfferProperties {
                get {
                  return V1OfferProperties(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }

              public var v1AskProperties: V1AskProperties? {
                get {
                  if !V1AskProperties.possibleTypes.contains(resultMap["__typename"]! as! String) { return nil }
                  return V1AskProperties(unsafeResultMap: resultMap)
                }
                set {
                  guard let newValue = newValue else { return }
                  resultMap += newValue.resultMap
                }
              }
            }

            public struct Amount: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["PriceAtTime"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                  GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
                  GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
                  GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
                self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var blockNumber: Int {
                get {
                  return resultMap["blockNumber"]! as! Int
                }
                set {
                  resultMap.updateValue(newValue, forKey: "blockNumber")
                }
              }

              public var chainTokenPrice: ChainTokenPrice? {
                get {
                  return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
                }
                set {
                  resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
                }
              }

              public var nativePrice: NativePrice {
                get {
                  return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
                }
                set {
                  resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
                }
              }

              public var usdcPrice: UsdcPrice? {
                get {
                  return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
                }
                set {
                  resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
                }
              }

              public var fragments: Fragments {
                get {
                  return Fragments(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }

              public struct Fragments {
                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public var priceSummary: PriceSummary {
                  get {
                    return PriceSummary(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }
              }

              public struct ChainTokenPrice: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["CurrencyAmount"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                    GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(decimal: Double, raw: String) {
                  self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var decimal: Double {
                  get {
                    return resultMap["decimal"]! as! Double
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimal")
                  }
                }

                public var raw: String {
                  get {
                    return resultMap["raw"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "raw")
                  }
                }
              }

              public struct NativePrice: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["CurrencyAmount"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                    GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                    GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(decimal: Double, raw: String, currency: Currency) {
                  self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var decimal: Double {
                  get {
                    return resultMap["decimal"]! as! Double
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimal")
                  }
                }

                public var raw: String {
                  get {
                    return resultMap["raw"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "raw")
                  }
                }

                public var currency: Currency {
                  get {
                    return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
                  }
                  set {
                    resultMap.updateValue(newValue.resultMap, forKey: "currency")
                  }
                }

                public struct Currency: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["Currency"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("address", type: .nonNull(.scalar(String.self))),
                      GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                      GraphQLField("name", type: .nonNull(.scalar(String.self))),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(address: String, decimals: Int, name: String) {
                    self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var address: String {
                    get {
                      return resultMap["address"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "address")
                    }
                  }

                  public var decimals: Int {
                    get {
                      return resultMap["decimals"]! as! Int
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "decimals")
                    }
                  }

                  public var name: String {
                    get {
                      return resultMap["name"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "name")
                    }
                  }
                }
              }

              public struct UsdcPrice: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["CurrencyAmount"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                    GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(decimal: Double, raw: String) {
                  self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var decimal: Double {
                  get {
                    return resultMap["decimal"]! as! Double
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimal")
                  }
                }

                public var raw: String {
                  get {
                    return resultMap["raw"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "raw")
                  }
                }
              }
            }
          }

          public var asV1Ask: AsV1Ask? {
            get {
              if !AsV1Ask.possibleTypes.contains(__typename) { return nil }
              return AsV1Ask(unsafeResultMap: resultMap)
            }
            set {
              guard let newValue = newValue else { return }
              resultMap = newValue.resultMap
            }
          }

          public struct AsV1Ask: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["V1Ask"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("v1AskStatus", type: .nonNull(.scalar(V1MarketEntityStatus.self))),
                GraphQLField("currency", type: .nonNull(.scalar(String.self))),
                GraphQLField("amount", type: .nonNull(.object(Amount.selections))),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(v1AskStatus: V1MarketEntityStatus, currency: String, amount: Amount) {
              self.init(unsafeResultMap: ["__typename": "V1Ask", "v1AskStatus": v1AskStatus, "currency": currency, "amount": amount.resultMap])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var v1AskStatus: V1MarketEntityStatus {
              get {
                return resultMap["v1AskStatus"]! as! V1MarketEntityStatus
              }
              set {
                resultMap.updateValue(newValue, forKey: "v1AskStatus")
              }
            }

            public var currency: String {
              get {
                return resultMap["currency"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "currency")
              }
            }

            public var amount: Amount {
              get {
                return Amount(unsafeResultMap: resultMap["amount"]! as! ResultMap)
              }
              set {
                resultMap.updateValue(newValue.resultMap, forKey: "amount")
              }
            }

            public var fragments: Fragments {
              get {
                return Fragments(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }

            public struct Fragments {
              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public var marketPropertiesFull: MarketPropertiesFull {
                get {
                  return MarketPropertiesFull(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }

              public var v2AuctionMarketProperties: V2AuctionMarketProperties? {
                get {
                  if !V2AuctionMarketProperties.possibleTypes.contains(resultMap["__typename"]! as! String) { return nil }
                  return V2AuctionMarketProperties(unsafeResultMap: resultMap)
                }
                set {
                  guard let newValue = newValue else { return }
                  resultMap += newValue.resultMap
                }
              }

              public var v3AskProperties: V3AskProperties? {
                get {
                  if !V3AskProperties.possibleTypes.contains(resultMap["__typename"]! as! String) { return nil }
                  return V3AskProperties(unsafeResultMap: resultMap)
                }
                set {
                  guard let newValue = newValue else { return }
                  resultMap += newValue.resultMap
                }
              }

              public var v1OfferProperties: V1OfferProperties? {
                get {
                  if !V1OfferProperties.possibleTypes.contains(resultMap["__typename"]! as! String) { return nil }
                  return V1OfferProperties(unsafeResultMap: resultMap)
                }
                set {
                  guard let newValue = newValue else { return }
                  resultMap += newValue.resultMap
                }
              }

              public var v1AskProperties: V1AskProperties {
                get {
                  return V1AskProperties(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }
            }

            public struct Amount: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["PriceAtTime"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                  GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
                  GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
                  GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
                self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var blockNumber: Int {
                get {
                  return resultMap["blockNumber"]! as! Int
                }
                set {
                  resultMap.updateValue(newValue, forKey: "blockNumber")
                }
              }

              public var chainTokenPrice: ChainTokenPrice? {
                get {
                  return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
                }
                set {
                  resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
                }
              }

              public var nativePrice: NativePrice {
                get {
                  return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
                }
                set {
                  resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
                }
              }

              public var usdcPrice: UsdcPrice? {
                get {
                  return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
                }
                set {
                  resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
                }
              }

              public var fragments: Fragments {
                get {
                  return Fragments(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }

              public struct Fragments {
                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public var priceSummary: PriceSummary {
                  get {
                    return PriceSummary(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }
              }

              public struct ChainTokenPrice: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["CurrencyAmount"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                    GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(decimal: Double, raw: String) {
                  self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var decimal: Double {
                  get {
                    return resultMap["decimal"]! as! Double
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimal")
                  }
                }

                public var raw: String {
                  get {
                    return resultMap["raw"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "raw")
                  }
                }
              }

              public struct NativePrice: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["CurrencyAmount"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                    GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                    GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(decimal: Double, raw: String, currency: Currency) {
                  self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var decimal: Double {
                  get {
                    return resultMap["decimal"]! as! Double
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimal")
                  }
                }

                public var raw: String {
                  get {
                    return resultMap["raw"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "raw")
                  }
                }

                public var currency: Currency {
                  get {
                    return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
                  }
                  set {
                    resultMap.updateValue(newValue.resultMap, forKey: "currency")
                  }
                }

                public struct Currency: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["Currency"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("address", type: .nonNull(.scalar(String.self))),
                      GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                      GraphQLField("name", type: .nonNull(.scalar(String.self))),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(address: String, decimals: Int, name: String) {
                    self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var address: String {
                    get {
                      return resultMap["address"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "address")
                    }
                  }

                  public var decimals: Int {
                    get {
                      return resultMap["decimals"]! as! Int
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "decimals")
                    }
                  }

                  public var name: String {
                    get {
                      return resultMap["name"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "name")
                    }
                  }
                }
              }

              public struct UsdcPrice: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["CurrencyAmount"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                    GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(decimal: Double, raw: String) {
                  self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var decimal: Double {
                  get {
                    return resultMap["decimal"]! as! Double
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimal")
                  }
                }

                public var raw: String {
                  get {
                    return resultMap["raw"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "raw")
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

public final class AggregateAttributesQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    query aggregateAttributes($networks: [NetworkInput!]!, $where: AggregateAttributesQueryInput!) {
      aggregateAttributes(networks: $networks, where: $where) {
        __typename
        traitType
        valueMetrics {
          __typename
          value
          count
          percent
        }
      }
    }
    """

  public let operationName: String = "aggregateAttributes"

  public let operationIdentifier: String? = "16f8ba17e3f7ecc769418bfaf5d8f112ac68bebbc61e029ffe8acf4037a28bd6"

  public var networks: [NetworkInput]
  public var `where`: AggregateAttributesQueryInput

  public init(networks: [NetworkInput], `where`: AggregateAttributesQueryInput) {
    self.networks = networks
    self.`where` = `where`
  }

  public var variables: GraphQLMap? {
    return ["networks": networks, "where": `where`]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["RootQuery"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("aggregateAttributes", arguments: ["networks": GraphQLVariable("networks"), "where": GraphQLVariable("where")], type: .nonNull(.list(.nonNull(.object(AggregateAttribute.selections))))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(aggregateAttributes: [AggregateAttribute]) {
      self.init(unsafeResultMap: ["__typename": "RootQuery", "aggregateAttributes": aggregateAttributes.map { (value: AggregateAttribute) -> ResultMap in value.resultMap }])
    }

    /// Gets the total set of NFT attributes
    public var aggregateAttributes: [AggregateAttribute] {
      get {
        return (resultMap["aggregateAttributes"] as! [ResultMap]).map { (value: ResultMap) -> AggregateAttribute in AggregateAttribute(unsafeResultMap: value) }
      }
      set {
        resultMap.updateValue(newValue.map { (value: AggregateAttribute) -> ResultMap in value.resultMap }, forKey: "aggregateAttributes")
      }
    }

    public struct AggregateAttribute: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["AggregateAttribute"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("traitType", type: .nonNull(.scalar(String.self))),
          GraphQLField("valueMetrics", type: .nonNull(.list(.nonNull(.object(ValueMetric.selections))))),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(traitType: String, valueMetrics: [ValueMetric]) {
        self.init(unsafeResultMap: ["__typename": "AggregateAttribute", "traitType": traitType, "valueMetrics": valueMetrics.map { (value: ValueMetric) -> ResultMap in value.resultMap }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var traitType: String {
        get {
          return resultMap["traitType"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "traitType")
        }
      }

      public var valueMetrics: [ValueMetric] {
        get {
          return (resultMap["valueMetrics"] as! [ResultMap]).map { (value: ResultMap) -> ValueMetric in ValueMetric(unsafeResultMap: value) }
        }
        set {
          resultMap.updateValue(newValue.map { (value: ValueMetric) -> ResultMap in value.resultMap }, forKey: "valueMetrics")
        }
      }

      public struct ValueMetric: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["AggregateAttributeValue"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("value", type: .nonNull(.scalar(String.self))),
            GraphQLField("count", type: .nonNull(.scalar(Int.self))),
            GraphQLField("percent", type: .nonNull(.scalar(Double.self))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(value: String, count: Int, percent: Double) {
          self.init(unsafeResultMap: ["__typename": "AggregateAttributeValue", "value": value, "count": count, "percent": percent])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var value: String {
          get {
            return resultMap["value"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "value")
          }
        }

        public var count: Int {
          get {
            return resultMap["count"]! as! Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "count")
          }
        }

        public var percent: Double {
          get {
            return resultMap["percent"]! as! Double
          }
          set {
            resultMap.updateValue(newValue, forKey: "percent")
          }
        }
      }
    }
  }
}

public final class OwnersByCountQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    query ownersByCount($networks: [NetworkInput!]!, $pagination: PaginationInput!, $where: CollectionAddressAndAttributesInput!) {
      aggregateStat {
        __typename
        ownersByCount(networks: $networks, pagination: $pagination, where: $where) {
          __typename
          pageInfo {
            __typename
            endCursor
            hasNextPage
            limit
          }
          nodes {
            __typename
            ...OwnerCountInfo
          }
        }
      }
    }
    """

  public let operationName: String = "ownersByCount"

  public let operationIdentifier: String? = "a049e180fe5b8c207cb58a4b044d3591bc5410af442113fb8161e8fa474bd540"

  public var queryDocument: String {
    var document: String = operationDefinition
    document.append("\n" + OwnerCountInfo.fragmentDefinition)
    return document
  }

  public var networks: [NetworkInput]
  public var pagination: PaginationInput
  public var `where`: CollectionAddressAndAttributesInput

  public init(networks: [NetworkInput], pagination: PaginationInput, `where`: CollectionAddressAndAttributesInput) {
    self.networks = networks
    self.pagination = pagination
    self.`where` = `where`
  }

  public var variables: GraphQLMap? {
    return ["networks": networks, "pagination": pagination, "where": `where`]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["RootQuery"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("aggregateStat", type: .nonNull(.object(AggregateStat.selections))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(aggregateStat: AggregateStat) {
      self.init(unsafeResultMap: ["__typename": "RootQuery", "aggregateStat": aggregateStat.resultMap])
    }

    /// Gets counts, sales volume, and other statistics
    public var aggregateStat: AggregateStat {
      get {
        return AggregateStat(unsafeResultMap: resultMap["aggregateStat"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "aggregateStat")
      }
    }

    public struct AggregateStat: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["AggregateStat"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("ownersByCount", arguments: ["networks": GraphQLVariable("networks"), "pagination": GraphQLVariable("pagination"), "where": GraphQLVariable("where")], type: .nonNull(.object(OwnersByCount.selections))),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(ownersByCount: OwnersByCount) {
        self.init(unsafeResultMap: ["__typename": "AggregateStat", "ownersByCount": ownersByCount.resultMap])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var ownersByCount: OwnersByCount {
        get {
          return OwnersByCount(unsafeResultMap: resultMap["ownersByCount"]! as! ResultMap)
        }
        set {
          resultMap.updateValue(newValue.resultMap, forKey: "ownersByCount")
        }
      }

      public struct OwnersByCount: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["OwnerCountConnection"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("pageInfo", type: .nonNull(.object(PageInfo.selections))),
            GraphQLField("nodes", type: .nonNull(.list(.nonNull(.object(Node.selections))))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(pageInfo: PageInfo, nodes: [Node]) {
          self.init(unsafeResultMap: ["__typename": "OwnerCountConnection", "pageInfo": pageInfo.resultMap, "nodes": nodes.map { (value: Node) -> ResultMap in value.resultMap }])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var pageInfo: PageInfo {
          get {
            return PageInfo(unsafeResultMap: resultMap["pageInfo"]! as! ResultMap)
          }
          set {
            resultMap.updateValue(newValue.resultMap, forKey: "pageInfo")
          }
        }

        public var nodes: [Node] {
          get {
            return (resultMap["nodes"] as! [ResultMap]).map { (value: ResultMap) -> Node in Node(unsafeResultMap: value) }
          }
          set {
            resultMap.updateValue(newValue.map { (value: Node) -> ResultMap in value.resultMap }, forKey: "nodes")
          }
        }

        public struct PageInfo: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["PageInfo"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("endCursor", type: .scalar(String.self)),
              GraphQLField("hasNextPage", type: .nonNull(.scalar(Bool.self))),
              GraphQLField("limit", type: .nonNull(.scalar(Int.self))),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(endCursor: String? = nil, hasNextPage: Bool, limit: Int) {
            self.init(unsafeResultMap: ["__typename": "PageInfo", "endCursor": endCursor, "hasNextPage": hasNextPage, "limit": limit])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var endCursor: String? {
            get {
              return resultMap["endCursor"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "endCursor")
            }
          }

          public var hasNextPage: Bool {
            get {
              return resultMap["hasNextPage"]! as! Bool
            }
            set {
              resultMap.updateValue(newValue, forKey: "hasNextPage")
            }
          }

          public var limit: Int {
            get {
              return resultMap["limit"]! as! Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "limit")
            }
          }
        }

        public struct Node: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["OwnerCount"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("owner", type: .nonNull(.scalar(String.self))),
              GraphQLField("count", type: .nonNull(.scalar(Int.self))),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(owner: String, count: Int) {
            self.init(unsafeResultMap: ["__typename": "OwnerCount", "owner": owner, "count": count])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var owner: String {
            get {
              return resultMap["owner"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "owner")
            }
          }

          public var count: Int {
            get {
              return resultMap["count"]! as! Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "count")
            }
          }

          public var fragments: Fragments {
            get {
              return Fragments(unsafeResultMap: resultMap)
            }
            set {
              resultMap += newValue.resultMap
            }
          }

          public struct Fragments {
            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public var ownerCountInfo: OwnerCountInfo {
              get {
                return OwnerCountInfo(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }
          }
        }
      }
    }
  }
}

public final class SalesVolumeQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    query salesVolume($networks: [NetworkInput!]!, $where: CollectionAddressOwnerAddressAttributesInput!, $timeFilter: TimeFilter) {
      aggregateStat {
        __typename
        salesVolume(where: $where, networks: $networks, timeFilter: $timeFilter) {
          __typename
          chainTokenPrice
          usdcPrice
          totalCount
        }
      }
    }
    """

  public let operationName: String = "salesVolume"

  public let operationIdentifier: String? = "df20ead42d66ff1d5c1129dedca6a1e406ffccb89823716e891eb7e9e87ece4c"

  public var networks: [NetworkInput]
  public var `where`: CollectionAddressOwnerAddressAttributesInput
  public var timeFilter: TimeFilter?

  public init(networks: [NetworkInput], `where`: CollectionAddressOwnerAddressAttributesInput, timeFilter: TimeFilter? = nil) {
    self.networks = networks
    self.`where` = `where`
    self.timeFilter = timeFilter
  }

  public var variables: GraphQLMap? {
    return ["networks": networks, "where": `where`, "timeFilter": timeFilter]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["RootQuery"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("aggregateStat", type: .nonNull(.object(AggregateStat.selections))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(aggregateStat: AggregateStat) {
      self.init(unsafeResultMap: ["__typename": "RootQuery", "aggregateStat": aggregateStat.resultMap])
    }

    /// Gets counts, sales volume, and other statistics
    public var aggregateStat: AggregateStat {
      get {
        return AggregateStat(unsafeResultMap: resultMap["aggregateStat"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "aggregateStat")
      }
    }

    public struct AggregateStat: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["AggregateStat"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("salesVolume", arguments: ["where": GraphQLVariable("where"), "networks": GraphQLVariable("networks"), "timeFilter": GraphQLVariable("timeFilter")], type: .nonNull(.object(SalesVolume.selections))),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(salesVolume: SalesVolume) {
        self.init(unsafeResultMap: ["__typename": "AggregateStat", "salesVolume": salesVolume.resultMap])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var salesVolume: SalesVolume {
        get {
          return SalesVolume(unsafeResultMap: resultMap["salesVolume"]! as! ResultMap)
        }
        set {
          resultMap.updateValue(newValue.resultMap, forKey: "salesVolume")
        }
      }

      public struct SalesVolume: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["SalesVolume"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("chainTokenPrice", type: .nonNull(.scalar(Double.self))),
            GraphQLField("usdcPrice", type: .nonNull(.scalar(Double.self))),
            GraphQLField("totalCount", type: .nonNull(.scalar(Int.self))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(chainTokenPrice: Double, usdcPrice: Double, totalCount: Int) {
          self.init(unsafeResultMap: ["__typename": "SalesVolume", "chainTokenPrice": chainTokenPrice, "usdcPrice": usdcPrice, "totalCount": totalCount])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var chainTokenPrice: Double {
          get {
            return resultMap["chainTokenPrice"]! as! Double
          }
          set {
            resultMap.updateValue(newValue, forKey: "chainTokenPrice")
          }
        }

        public var usdcPrice: Double {
          get {
            return resultMap["usdcPrice"]! as! Double
          }
          set {
            resultMap.updateValue(newValue, forKey: "usdcPrice")
          }
        }

        public var totalCount: Int {
          get {
            return resultMap["totalCount"]! as! Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "totalCount")
          }
        }
      }
    }
  }
}

public final class OwnerCountQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    query ownerCount($networks: [NetworkInput!]!, $where: CollectionAddressAndAttributesInput!) {
      aggregateStat {
        __typename
        ownerCount(where: $where, networks: $networks)
      }
    }
    """

  public let operationName: String = "ownerCount"

  public let operationIdentifier: String? = "25a83a8678c9a7fde07c351327680f0cc33cf69ee7550d848e08f943860a94e9"

  public var networks: [NetworkInput]
  public var `where`: CollectionAddressAndAttributesInput

  public init(networks: [NetworkInput], `where`: CollectionAddressAndAttributesInput) {
    self.networks = networks
    self.`where` = `where`
  }

  public var variables: GraphQLMap? {
    return ["networks": networks, "where": `where`]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["RootQuery"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("aggregateStat", type: .nonNull(.object(AggregateStat.selections))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(aggregateStat: AggregateStat) {
      self.init(unsafeResultMap: ["__typename": "RootQuery", "aggregateStat": aggregateStat.resultMap])
    }

    /// Gets counts, sales volume, and other statistics
    public var aggregateStat: AggregateStat {
      get {
        return AggregateStat(unsafeResultMap: resultMap["aggregateStat"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "aggregateStat")
      }
    }

    public struct AggregateStat: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["AggregateStat"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("ownerCount", arguments: ["where": GraphQLVariable("where"), "networks": GraphQLVariable("networks")], type: .nonNull(.scalar(Int.self))),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(ownerCount: Int) {
        self.init(unsafeResultMap: ["__typename": "AggregateStat", "ownerCount": ownerCount])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var ownerCount: Int {
        get {
          return resultMap["ownerCount"]! as! Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "ownerCount")
        }
      }
    }
  }
}

public final class NftCountQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    query nftCount($networks: [NetworkInput!]!, $where: CollectionAddressOwnerAddressAttributesInput!) {
      aggregateStat {
        __typename
        nftCount(where: $where, networks: $networks)
      }
    }
    """

  public let operationName: String = "nftCount"

  public let operationIdentifier: String? = "827ae79c27b851d7afea75b329de7ba490d19e56474e9c4fd7361ee35720482d"

  public var networks: [NetworkInput]
  public var `where`: CollectionAddressOwnerAddressAttributesInput

  public init(networks: [NetworkInput], `where`: CollectionAddressOwnerAddressAttributesInput) {
    self.networks = networks
    self.`where` = `where`
  }

  public var variables: GraphQLMap? {
    return ["networks": networks, "where": `where`]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["RootQuery"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("aggregateStat", type: .nonNull(.object(AggregateStat.selections))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(aggregateStat: AggregateStat) {
      self.init(unsafeResultMap: ["__typename": "RootQuery", "aggregateStat": aggregateStat.resultMap])
    }

    /// Gets counts, sales volume, and other statistics
    public var aggregateStat: AggregateStat {
      get {
        return AggregateStat(unsafeResultMap: resultMap["aggregateStat"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "aggregateStat")
      }
    }

    public struct AggregateStat: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["AggregateStat"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("nftCount", arguments: ["where": GraphQLVariable("where"), "networks": GraphQLVariable("networks")], type: .nonNull(.scalar(Int.self))),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(nftCount: Int) {
        self.init(unsafeResultMap: ["__typename": "AggregateStat", "nftCount": nftCount])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var nftCount: Int {
        get {
          return resultMap["nftCount"]! as! Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "nftCount")
        }
      }
    }
  }
}

public final class FloorPriceQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    query floorPrice($networks: [NetworkInput!]!, $where: CollectionAddressAndAttributesInput!) {
      aggregateStat {
        __typename
        floorPrice(where: $where, networks: $networks)
      }
    }
    """

  public let operationName: String = "floorPrice"

  public let operationIdentifier: String? = "879789b437f8d9ecc01edf8b7062bf8d8b69f63d4263d124db53083dfe200613"

  public var networks: [NetworkInput]
  public var `where`: CollectionAddressAndAttributesInput

  public init(networks: [NetworkInput], `where`: CollectionAddressAndAttributesInput) {
    self.networks = networks
    self.`where` = `where`
  }

  public var variables: GraphQLMap? {
    return ["networks": networks, "where": `where`]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["RootQuery"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("aggregateStat", type: .nonNull(.object(AggregateStat.selections))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(aggregateStat: AggregateStat) {
      self.init(unsafeResultMap: ["__typename": "RootQuery", "aggregateStat": aggregateStat.resultMap])
    }

    /// Gets counts, sales volume, and other statistics
    public var aggregateStat: AggregateStat {
      get {
        return AggregateStat(unsafeResultMap: resultMap["aggregateStat"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "aggregateStat")
      }
    }

    public struct AggregateStat: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["AggregateStat"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("floorPrice", arguments: ["where": GraphQLVariable("where"), "networks": GraphQLVariable("networks")], type: .scalar(Double.self)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(floorPrice: Double? = nil) {
        self.init(unsafeResultMap: ["__typename": "AggregateStat", "floorPrice": floorPrice])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var floorPrice: Double? {
        get {
          return resultMap["floorPrice"] as? Double
        }
        set {
          resultMap.updateValue(newValue, forKey: "floorPrice")
        }
      }
    }
  }
}

public final class CollectionStatsAggregateQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    query collectionStatsAggregate($collectionAddress: String!, $networks: [NetworkInput!]!) {
      aggregateStat {
        __typename
        floorPrice(
          where: {collectionAddresses: [$collectionAddress]}
          networks: $networks
        )
        ownerCount(
          where: {collectionAddresses: [$collectionAddress]}
          networks: $networks
        )
        nftCount(
          where: {collectionAddresses: [$collectionAddress]}
          networks: $networks
        )
        salesVolume(
          where: {collectionAddresses: [$collectionAddress]}
          networks: $networks
        ) {
          __typename
          chainTokenPrice
          usdcPrice
          totalCount
        }
      }
    }
    """

  public let operationName: String = "collectionStatsAggregate"

  public let operationIdentifier: String? = "07f84a1608e42e8a177da0257adca23833ea55eabd1ab36af679cd4776a3415a"

  public var collectionAddress: String
  public var networks: [NetworkInput]

  public init(collectionAddress: String, networks: [NetworkInput]) {
    self.collectionAddress = collectionAddress
    self.networks = networks
  }

  public var variables: GraphQLMap? {
    return ["collectionAddress": collectionAddress, "networks": networks]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["RootQuery"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("aggregateStat", type: .nonNull(.object(AggregateStat.selections))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(aggregateStat: AggregateStat) {
      self.init(unsafeResultMap: ["__typename": "RootQuery", "aggregateStat": aggregateStat.resultMap])
    }

    /// Gets counts, sales volume, and other statistics
    public var aggregateStat: AggregateStat {
      get {
        return AggregateStat(unsafeResultMap: resultMap["aggregateStat"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "aggregateStat")
      }
    }

    public struct AggregateStat: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["AggregateStat"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("floorPrice", arguments: ["where": ["collectionAddresses": [GraphQLVariable("collectionAddress")]], "networks": GraphQLVariable("networks")], type: .scalar(Double.self)),
          GraphQLField("ownerCount", arguments: ["where": ["collectionAddresses": [GraphQLVariable("collectionAddress")]], "networks": GraphQLVariable("networks")], type: .nonNull(.scalar(Int.self))),
          GraphQLField("nftCount", arguments: ["where": ["collectionAddresses": [GraphQLVariable("collectionAddress")]], "networks": GraphQLVariable("networks")], type: .nonNull(.scalar(Int.self))),
          GraphQLField("salesVolume", arguments: ["where": ["collectionAddresses": [GraphQLVariable("collectionAddress")]], "networks": GraphQLVariable("networks")], type: .nonNull(.object(SalesVolume.selections))),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(floorPrice: Double? = nil, ownerCount: Int, nftCount: Int, salesVolume: SalesVolume) {
        self.init(unsafeResultMap: ["__typename": "AggregateStat", "floorPrice": floorPrice, "ownerCount": ownerCount, "nftCount": nftCount, "salesVolume": salesVolume.resultMap])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var floorPrice: Double? {
        get {
          return resultMap["floorPrice"] as? Double
        }
        set {
          resultMap.updateValue(newValue, forKey: "floorPrice")
        }
      }

      public var ownerCount: Int {
        get {
          return resultMap["ownerCount"]! as! Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "ownerCount")
        }
      }

      public var nftCount: Int {
        get {
          return resultMap["nftCount"]! as! Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "nftCount")
        }
      }

      public var salesVolume: SalesVolume {
        get {
          return SalesVolume(unsafeResultMap: resultMap["salesVolume"]! as! ResultMap)
        }
        set {
          resultMap.updateValue(newValue.resultMap, forKey: "salesVolume")
        }
      }

      public struct SalesVolume: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["SalesVolume"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("chainTokenPrice", type: .nonNull(.scalar(Double.self))),
            GraphQLField("usdcPrice", type: .nonNull(.scalar(Double.self))),
            GraphQLField("totalCount", type: .nonNull(.scalar(Int.self))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(chainTokenPrice: Double, usdcPrice: Double, totalCount: Int) {
          self.init(unsafeResultMap: ["__typename": "SalesVolume", "chainTokenPrice": chainTokenPrice, "usdcPrice": usdcPrice, "totalCount": totalCount])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var chainTokenPrice: Double {
          get {
            return resultMap["chainTokenPrice"]! as! Double
          }
          set {
            resultMap.updateValue(newValue, forKey: "chainTokenPrice")
          }
        }

        public var usdcPrice: Double {
          get {
            return resultMap["usdcPrice"]! as! Double
          }
          set {
            resultMap.updateValue(newValue, forKey: "usdcPrice")
          }
        }

        public var totalCount: Int {
          get {
            return resultMap["totalCount"]! as! Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "totalCount")
          }
        }
      }
    }
  }
}

public final class SearchQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    query search($pagination: SearchPaginationInput!, $query: SearchQueryInput!, $filter: SearchFilter) {
      search(pagination: $pagination, query: $query, filter: $filter) {
        __typename
        pageInfo {
          __typename
          endCursor
          hasNextPage
          limit
        }
        nodes {
          __typename
          name
          description
          entityType
          collectionAddress
          networkInfo {
            __typename
            chain
            network
          }
          tokenId
          entity {
            __typename
            ... on Token {
              __typename
              ...TokenInfo
            }
            ... on Collection {
              __typename
              ...CollectionInfoSearchResult
            }
          }
        }
      }
    }
    """

  public let operationName: String = "search"

  public let operationIdentifier: String? = "fb9b88f6d93dff4b6f4f3eb321a2fb5a23eea6b915a550fbeab8503b3ec61475"

  public var queryDocument: String {
    var document: String = operationDefinition
    document.append("\n" + TokenInfo.fragmentDefinition)
    document.append("\n" + TokenContractInfo.fragmentDefinition)
    document.append("\n" + MintDetails.fragmentDefinition)
    document.append("\n" + PriceSummary.fragmentDefinition)
    document.append("\n" + TransactionDetails.fragmentDefinition)
    document.append("\n" + FullMedia.fragmentDefinition)
    document.append("\n" + CollectionInfoSearchResult.fragmentDefinition)
    return document
  }

  public var pagination: SearchPaginationInput
  public var query: SearchQueryInput
  public var filter: SearchFilter?

  public init(pagination: SearchPaginationInput, query: SearchQueryInput, filter: SearchFilter? = nil) {
    self.pagination = pagination
    self.query = query
    self.filter = filter
  }

  public var variables: GraphQLMap? {
    return ["pagination": pagination, "query": query, "filter": filter]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["RootQuery"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("search", arguments: ["pagination": GraphQLVariable("pagination"), "query": GraphQLVariable("query"), "filter": GraphQLVariable("filter")], type: .nonNull(.object(Search.selections))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(search: Search) {
      self.init(unsafeResultMap: ["__typename": "RootQuery", "search": search.resultMap])
    }

    /// Returns search results for a query
    public var search: Search {
      get {
        return Search(unsafeResultMap: resultMap["search"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "search")
      }
    }

    public struct Search: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["SearchResultConnection"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("pageInfo", type: .nonNull(.object(PageInfo.selections))),
          GraphQLField("nodes", type: .nonNull(.list(.nonNull(.object(Node.selections))))),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(pageInfo: PageInfo, nodes: [Node]) {
        self.init(unsafeResultMap: ["__typename": "SearchResultConnection", "pageInfo": pageInfo.resultMap, "nodes": nodes.map { (value: Node) -> ResultMap in value.resultMap }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var pageInfo: PageInfo {
        get {
          return PageInfo(unsafeResultMap: resultMap["pageInfo"]! as! ResultMap)
        }
        set {
          resultMap.updateValue(newValue.resultMap, forKey: "pageInfo")
        }
      }

      public var nodes: [Node] {
        get {
          return (resultMap["nodes"] as! [ResultMap]).map { (value: ResultMap) -> Node in Node(unsafeResultMap: value) }
        }
        set {
          resultMap.updateValue(newValue.map { (value: Node) -> ResultMap in value.resultMap }, forKey: "nodes")
        }
      }

      public struct PageInfo: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["PageInfo"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("endCursor", type: .scalar(String.self)),
            GraphQLField("hasNextPage", type: .nonNull(.scalar(Bool.self))),
            GraphQLField("limit", type: .nonNull(.scalar(Int.self))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(endCursor: String? = nil, hasNextPage: Bool, limit: Int) {
          self.init(unsafeResultMap: ["__typename": "PageInfo", "endCursor": endCursor, "hasNextPage": hasNextPage, "limit": limit])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var endCursor: String? {
          get {
            return resultMap["endCursor"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "endCursor")
          }
        }

        public var hasNextPage: Bool {
          get {
            return resultMap["hasNextPage"]! as! Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "hasNextPage")
          }
        }

        public var limit: Int {
          get {
            return resultMap["limit"]! as! Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "limit")
          }
        }
      }

      public struct Node: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["SearchResult"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("name", type: .scalar(String.self)),
            GraphQLField("description", type: .scalar(String.self)),
            GraphQLField("entityType", type: .nonNull(.scalar(String.self))),
            GraphQLField("collectionAddress", type: .nonNull(.scalar(String.self))),
            GraphQLField("networkInfo", type: .nonNull(.object(NetworkInfo.selections))),
            GraphQLField("tokenId", type: .scalar(String.self)),
            GraphQLField("entity", type: .object(Entity.selections)),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(name: String? = nil, description: String? = nil, entityType: String, collectionAddress: String, networkInfo: NetworkInfo, tokenId: String? = nil, entity: Entity? = nil) {
          self.init(unsafeResultMap: ["__typename": "SearchResult", "name": name, "description": description, "entityType": entityType, "collectionAddress": collectionAddress, "networkInfo": networkInfo.resultMap, "tokenId": tokenId, "entity": entity.flatMap { (value: Entity) -> ResultMap in value.resultMap }])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var name: String? {
          get {
            return resultMap["name"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "name")
          }
        }

        public var description: String? {
          get {
            return resultMap["description"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "description")
          }
        }

        public var entityType: String {
          get {
            return resultMap["entityType"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "entityType")
          }
        }

        public var collectionAddress: String {
          get {
            return resultMap["collectionAddress"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "collectionAddress")
          }
        }

        public var networkInfo: NetworkInfo {
          get {
            return NetworkInfo(unsafeResultMap: resultMap["networkInfo"]! as! ResultMap)
          }
          set {
            resultMap.updateValue(newValue.resultMap, forKey: "networkInfo")
          }
        }

        public var tokenId: String? {
          get {
            return resultMap["tokenId"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "tokenId")
          }
        }

        public var entity: Entity? {
          get {
            return (resultMap["entity"] as? ResultMap).flatMap { Entity(unsafeResultMap: $0) }
          }
          set {
            resultMap.updateValue(newValue?.resultMap, forKey: "entity")
          }
        }

        public struct NetworkInfo: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["NetworkInfo"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("chain", type: .nonNull(.scalar(Chain.self))),
              GraphQLField("network", type: .nonNull(.scalar(Network.self))),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(chain: Chain, network: Network) {
            self.init(unsafeResultMap: ["__typename": "NetworkInfo", "chain": chain, "network": network])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var chain: Chain {
            get {
              return resultMap["chain"]! as! Chain
            }
            set {
              resultMap.updateValue(newValue, forKey: "chain")
            }
          }

          public var network: Network {
            get {
              return resultMap["network"]! as! Network
            }
            set {
              resultMap.updateValue(newValue, forKey: "network")
            }
          }
        }

        public struct Entity: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["Token", "Collection"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLTypeCase(
                variants: ["Token": AsToken.selections, "Collection": AsCollection.selections],
                default: [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                ]
              )
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public static func makeToken(tokenId: String, tokenContract: AsToken.TokenContract? = nil, mintInfo: AsToken.MintInfo? = nil, collectionAddress: String, lastRefreshTime: String? = nil, owner: String? = nil, name: String? = nil, description: String? = nil, image: AsToken.Image? = nil, content: AsToken.Content? = nil) -> Entity {
            return Entity(unsafeResultMap: ["__typename": "Token", "tokenId": tokenId, "tokenContract": tokenContract.flatMap { (value: AsToken.TokenContract) -> ResultMap in value.resultMap }, "mintInfo": mintInfo.flatMap { (value: AsToken.MintInfo) -> ResultMap in value.resultMap }, "collectionAddress": collectionAddress, "lastRefreshTime": lastRefreshTime, "owner": owner, "name": name, "description": description, "image": image.flatMap { (value: AsToken.Image) -> ResultMap in value.resultMap }, "content": content.flatMap { (value: AsToken.Content) -> ResultMap in value.resultMap }])
          }

          public static func makeCollection(address: String, collectionDescription: String, name: String? = nil, symbol: String? = nil, totalSupply: Int? = nil) -> Entity {
            return Entity(unsafeResultMap: ["__typename": "Collection", "address": address, "collectionDescription": collectionDescription, "name": name, "symbol": symbol, "totalSupply": totalSupply])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var asToken: AsToken? {
            get {
              if !AsToken.possibleTypes.contains(__typename) { return nil }
              return AsToken(unsafeResultMap: resultMap)
            }
            set {
              guard let newValue = newValue else { return }
              resultMap = newValue.resultMap
            }
          }

          public struct AsToken: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["Token"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("tokenId", type: .nonNull(.scalar(String.self))),
                GraphQLField("tokenContract", type: .object(TokenContract.selections)),
                GraphQLField("mintInfo", type: .object(MintInfo.selections)),
                GraphQLField("collectionAddress", type: .nonNull(.scalar(String.self))),
                GraphQLField("lastRefreshTime", type: .scalar(String.self)),
                GraphQLField("owner", type: .scalar(String.self)),
                GraphQLField("name", type: .scalar(String.self)),
                GraphQLField("description", type: .scalar(String.self)),
                GraphQLField("image", type: .object(Image.selections)),
                GraphQLField("content", type: .object(Content.selections)),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(tokenId: String, tokenContract: TokenContract? = nil, mintInfo: MintInfo? = nil, collectionAddress: String, lastRefreshTime: String? = nil, owner: String? = nil, name: String? = nil, description: String? = nil, image: Image? = nil, content: Content? = nil) {
              self.init(unsafeResultMap: ["__typename": "Token", "tokenId": tokenId, "tokenContract": tokenContract.flatMap { (value: TokenContract) -> ResultMap in value.resultMap }, "mintInfo": mintInfo.flatMap { (value: MintInfo) -> ResultMap in value.resultMap }, "collectionAddress": collectionAddress, "lastRefreshTime": lastRefreshTime, "owner": owner, "name": name, "description": description, "image": image.flatMap { (value: Image) -> ResultMap in value.resultMap }, "content": content.flatMap { (value: Content) -> ResultMap in value.resultMap }])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var tokenId: String {
              get {
                return resultMap["tokenId"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "tokenId")
              }
            }

            public var tokenContract: TokenContract? {
              get {
                return (resultMap["tokenContract"] as? ResultMap).flatMap { TokenContract(unsafeResultMap: $0) }
              }
              set {
                resultMap.updateValue(newValue?.resultMap, forKey: "tokenContract")
              }
            }

            public var mintInfo: MintInfo? {
              get {
                return (resultMap["mintInfo"] as? ResultMap).flatMap { MintInfo(unsafeResultMap: $0) }
              }
              set {
                resultMap.updateValue(newValue?.resultMap, forKey: "mintInfo")
              }
            }

            public var collectionAddress: String {
              get {
                return resultMap["collectionAddress"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "collectionAddress")
              }
            }

            public var lastRefreshTime: String? {
              get {
                return resultMap["lastRefreshTime"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "lastRefreshTime")
              }
            }

            public var owner: String? {
              get {
                return resultMap["owner"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "owner")
              }
            }

            public var name: String? {
              get {
                return resultMap["name"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "name")
              }
            }

            public var description: String? {
              get {
                return resultMap["description"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "description")
              }
            }

            public var image: Image? {
              get {
                return (resultMap["image"] as? ResultMap).flatMap { Image(unsafeResultMap: $0) }
              }
              set {
                resultMap.updateValue(newValue?.resultMap, forKey: "image")
              }
            }

            public var content: Content? {
              get {
                return (resultMap["content"] as? ResultMap).flatMap { Content(unsafeResultMap: $0) }
              }
              set {
                resultMap.updateValue(newValue?.resultMap, forKey: "content")
              }
            }

            public var fragments: Fragments {
              get {
                return Fragments(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }

            public struct Fragments {
              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public var tokenInfo: TokenInfo {
                get {
                  return TokenInfo(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }
            }

            public struct TokenContract: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["TokenContract"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("name", type: .scalar(String.self)),
                  GraphQLField("network", type: .nonNull(.scalar(String.self))),
                  GraphQLField("description", type: .scalar(String.self)),
                  GraphQLField("collectionAddress", type: .nonNull(.scalar(String.self))),
                  GraphQLField("symbol", type: .scalar(String.self)),
                  GraphQLField("chain", type: .nonNull(.scalar(Int.self))),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(name: String? = nil, network: String, description: String? = nil, collectionAddress: String, symbol: String? = nil, chain: Int) {
                self.init(unsafeResultMap: ["__typename": "TokenContract", "name": name, "network": network, "description": description, "collectionAddress": collectionAddress, "symbol": symbol, "chain": chain])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var name: String? {
                get {
                  return resultMap["name"] as? String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "name")
                }
              }

              public var network: String {
                get {
                  return resultMap["network"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "network")
                }
              }

              public var description: String? {
                get {
                  return resultMap["description"] as? String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "description")
                }
              }

              public var collectionAddress: String {
                get {
                  return resultMap["collectionAddress"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "collectionAddress")
                }
              }

              public var symbol: String? {
                get {
                  return resultMap["symbol"] as? String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "symbol")
                }
              }

              public var chain: Int {
                get {
                  return resultMap["chain"]! as! Int
                }
                set {
                  resultMap.updateValue(newValue, forKey: "chain")
                }
              }

              public var fragments: Fragments {
                get {
                  return Fragments(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }

              public struct Fragments {
                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public var tokenContractInfo: TokenContractInfo {
                  get {
                    return TokenContractInfo(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }
              }
            }

            public struct MintInfo: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["MintInfo"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("price", type: .nonNull(.object(Price.selections))),
                  GraphQLField("originatorAddress", type: .nonNull(.scalar(String.self))),
                  GraphQLField("toAddress", type: .nonNull(.scalar(String.self))),
                  GraphQLField("mintContext", type: .nonNull(.object(MintContext.selections))),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(price: Price, originatorAddress: String, toAddress: String, mintContext: MintContext) {
                self.init(unsafeResultMap: ["__typename": "MintInfo", "price": price.resultMap, "originatorAddress": originatorAddress, "toAddress": toAddress, "mintContext": mintContext.resultMap])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var price: Price {
                get {
                  return Price(unsafeResultMap: resultMap["price"]! as! ResultMap)
                }
                set {
                  resultMap.updateValue(newValue.resultMap, forKey: "price")
                }
              }

              public var originatorAddress: String {
                get {
                  return resultMap["originatorAddress"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "originatorAddress")
                }
              }

              public var toAddress: String {
                get {
                  return resultMap["toAddress"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "toAddress")
                }
              }

              public var mintContext: MintContext {
                get {
                  return MintContext(unsafeResultMap: resultMap["mintContext"]! as! ResultMap)
                }
                set {
                  resultMap.updateValue(newValue.resultMap, forKey: "mintContext")
                }
              }

              public var fragments: Fragments {
                get {
                  return Fragments(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }

              public struct Fragments {
                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public var mintDetails: MintDetails {
                  get {
                    return MintDetails(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }
              }

              public struct Price: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["PriceAtTime"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                    GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
                    GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
                    GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
                  self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var blockNumber: Int {
                  get {
                    return resultMap["blockNumber"]! as! Int
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "blockNumber")
                  }
                }

                public var chainTokenPrice: ChainTokenPrice? {
                  get {
                    return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
                  }
                  set {
                    resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
                  }
                }

                public var nativePrice: NativePrice {
                  get {
                    return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
                  }
                  set {
                    resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
                  }
                }

                public var usdcPrice: UsdcPrice? {
                  get {
                    return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
                  }
                  set {
                    resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
                  }
                }

                public var fragments: Fragments {
                  get {
                    return Fragments(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }

                public struct Fragments {
                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public var priceSummary: PriceSummary {
                    get {
                      return PriceSummary(unsafeResultMap: resultMap)
                    }
                    set {
                      resultMap += newValue.resultMap
                    }
                  }
                }

                public struct ChainTokenPrice: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["CurrencyAmount"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                      GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(decimal: Double, raw: String) {
                    self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var decimal: Double {
                    get {
                      return resultMap["decimal"]! as! Double
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "decimal")
                    }
                  }

                  public var raw: String {
                    get {
                      return resultMap["raw"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "raw")
                    }
                  }
                }

                public struct NativePrice: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["CurrencyAmount"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                      GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                      GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(decimal: Double, raw: String, currency: Currency) {
                    self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var decimal: Double {
                    get {
                      return resultMap["decimal"]! as! Double
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "decimal")
                    }
                  }

                  public var raw: String {
                    get {
                      return resultMap["raw"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "raw")
                    }
                  }

                  public var currency: Currency {
                    get {
                      return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
                    }
                    set {
                      resultMap.updateValue(newValue.resultMap, forKey: "currency")
                    }
                  }

                  public struct Currency: GraphQLSelectionSet {
                    public static let possibleTypes: [String] = ["Currency"]

                    public static var selections: [GraphQLSelection] {
                      return [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("address", type: .nonNull(.scalar(String.self))),
                        GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                        GraphQLField("name", type: .nonNull(.scalar(String.self))),
                      ]
                    }

                    public private(set) var resultMap: ResultMap

                    public init(unsafeResultMap: ResultMap) {
                      self.resultMap = unsafeResultMap
                    }

                    public init(address: String, decimals: Int, name: String) {
                      self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
                    }

                    public var __typename: String {
                      get {
                        return resultMap["__typename"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "__typename")
                      }
                    }

                    public var address: String {
                      get {
                        return resultMap["address"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "address")
                      }
                    }

                    public var decimals: Int {
                      get {
                        return resultMap["decimals"]! as! Int
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "decimals")
                      }
                    }

                    public var name: String {
                      get {
                        return resultMap["name"]! as! String
                      }
                      set {
                        resultMap.updateValue(newValue, forKey: "name")
                      }
                    }
                  }
                }

                public struct UsdcPrice: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["CurrencyAmount"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                      GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(decimal: Double, raw: String) {
                    self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var decimal: Double {
                    get {
                      return resultMap["decimal"]! as! Double
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "decimal")
                    }
                  }

                  public var raw: String {
                    get {
                      return resultMap["raw"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "raw")
                    }
                  }
                }
              }

              public struct MintContext: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["TransactionInfo"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                    GraphQLField("blockTimestamp", type: .nonNull(.scalar(String.self))),
                    GraphQLField("transactionHash", type: .scalar(String.self)),
                    GraphQLField("logIndex", type: .scalar(Int.self)),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(blockNumber: Int, blockTimestamp: String, transactionHash: String? = nil, logIndex: Int? = nil) {
                  self.init(unsafeResultMap: ["__typename": "TransactionInfo", "blockNumber": blockNumber, "blockTimestamp": blockTimestamp, "transactionHash": transactionHash, "logIndex": logIndex])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var blockNumber: Int {
                  get {
                    return resultMap["blockNumber"]! as! Int
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "blockNumber")
                  }
                }

                public var blockTimestamp: String {
                  get {
                    return resultMap["blockTimestamp"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "blockTimestamp")
                  }
                }

                public var transactionHash: String? {
                  get {
                    return resultMap["transactionHash"] as? String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "transactionHash")
                  }
                }

                public var logIndex: Int? {
                  get {
                    return resultMap["logIndex"] as? Int
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "logIndex")
                  }
                }

                public var fragments: Fragments {
                  get {
                    return Fragments(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }

                public struct Fragments {
                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public var transactionDetails: TransactionDetails {
                    get {
                      return TransactionDetails(unsafeResultMap: resultMap)
                    }
                    set {
                      resultMap += newValue.resultMap
                    }
                  }
                }
              }
            }

            public struct Image: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["TokenContentMedia"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("size", type: .scalar(String.self)),
                  GraphQLField("url", type: .scalar(String.self)),
                  GraphQLField("size", type: .scalar(String.self)),
                  GraphQLField("mimeType", type: .scalar(String.self)),
                  GraphQLField("mediaEncoding", type: .object(MediaEncoding.selections)),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(size: String? = nil, url: String? = nil, mimeType: String? = nil, mediaEncoding: MediaEncoding? = nil) {
                self.init(unsafeResultMap: ["__typename": "TokenContentMedia", "size": size, "url": url, "mimeType": mimeType, "mediaEncoding": mediaEncoding.flatMap { (value: MediaEncoding) -> ResultMap in value.resultMap }])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var size: String? {
                get {
                  return resultMap["size"] as? String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "size")
                }
              }

              public var url: String? {
                get {
                  return resultMap["url"] as? String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "url")
                }
              }

              public var mimeType: String? {
                get {
                  return resultMap["mimeType"] as? String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "mimeType")
                }
              }

              public var mediaEncoding: MediaEncoding? {
                get {
                  return (resultMap["mediaEncoding"] as? ResultMap).flatMap { MediaEncoding(unsafeResultMap: $0) }
                }
                set {
                  resultMap.updateValue(newValue?.resultMap, forKey: "mediaEncoding")
                }
              }

              public var fragments: Fragments {
                get {
                  return Fragments(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }

              public struct Fragments {
                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public var fullMedia: FullMedia {
                  get {
                    return FullMedia(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }
              }

              public struct MediaEncoding: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["ImageEncodingTypes", "VideoEncodingTypes", "AudioEncodingTypes", "UnsupportedEncodingTypes"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLTypeCase(
                      variants: ["ImageEncodingTypes": AsImageEncodingTypes.selections, "VideoEncodingTypes": AsVideoEncodingTypes.selections, "AudioEncodingTypes": AsAudioEncodingTypes.selections, "UnsupportedEncodingTypes": AsUnsupportedEncodingTypes.selections],
                      default: [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      ]
                    )
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public static func makeImageEncodingTypes(original: String, large: String? = nil, poster: String? = nil, thumbnail: String? = nil) -> MediaEncoding {
                  return MediaEncoding(unsafeResultMap: ["__typename": "ImageEncodingTypes", "original": original, "large": large, "poster": poster, "thumbnail": thumbnail])
                }

                public static func makeVideoEncodingTypes(original: String, large: String? = nil, poster: String? = nil, preview: String? = nil, thumbnail: String? = nil) -> MediaEncoding {
                  return MediaEncoding(unsafeResultMap: ["__typename": "VideoEncodingTypes", "original": original, "large": large, "poster": poster, "preview": preview, "thumbnail": thumbnail])
                }

                public static func makeAudioEncodingTypes(original: String, large: String? = nil) -> MediaEncoding {
                  return MediaEncoding(unsafeResultMap: ["__typename": "AudioEncodingTypes", "original": original, "large": large])
                }

                public static func makeUnsupportedEncodingTypes(original: String) -> MediaEncoding {
                  return MediaEncoding(unsafeResultMap: ["__typename": "UnsupportedEncodingTypes", "original": original])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var asImageEncodingTypes: AsImageEncodingTypes? {
                  get {
                    if !AsImageEncodingTypes.possibleTypes.contains(__typename) { return nil }
                    return AsImageEncodingTypes(unsafeResultMap: resultMap)
                  }
                  set {
                    guard let newValue = newValue else { return }
                    resultMap = newValue.resultMap
                  }
                }

                public struct AsImageEncodingTypes: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["ImageEncodingTypes"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("original", type: .nonNull(.scalar(String.self))),
                      GraphQLField("large", type: .scalar(String.self)),
                      GraphQLField("poster", type: .scalar(String.self)),
                      GraphQLField("thumbnail", type: .scalar(String.self)),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(original: String, large: String? = nil, poster: String? = nil, thumbnail: String? = nil) {
                    self.init(unsafeResultMap: ["__typename": "ImageEncodingTypes", "original": original, "large": large, "poster": poster, "thumbnail": thumbnail])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var original: String {
                    get {
                      return resultMap["original"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "original")
                    }
                  }

                  public var large: String? {
                    get {
                      return resultMap["large"] as? String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "large")
                    }
                  }

                  public var poster: String? {
                    get {
                      return resultMap["poster"] as? String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "poster")
                    }
                  }

                  public var thumbnail: String? {
                    get {
                      return resultMap["thumbnail"] as? String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "thumbnail")
                    }
                  }
                }

                public var asVideoEncodingTypes: AsVideoEncodingTypes? {
                  get {
                    if !AsVideoEncodingTypes.possibleTypes.contains(__typename) { return nil }
                    return AsVideoEncodingTypes(unsafeResultMap: resultMap)
                  }
                  set {
                    guard let newValue = newValue else { return }
                    resultMap = newValue.resultMap
                  }
                }

                public struct AsVideoEncodingTypes: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["VideoEncodingTypes"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("original", type: .nonNull(.scalar(String.self))),
                      GraphQLField("large", type: .scalar(String.self)),
                      GraphQLField("poster", type: .scalar(String.self)),
                      GraphQLField("preview", type: .scalar(String.self)),
                      GraphQLField("thumbnail", type: .scalar(String.self)),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(original: String, large: String? = nil, poster: String? = nil, preview: String? = nil, thumbnail: String? = nil) {
                    self.init(unsafeResultMap: ["__typename": "VideoEncodingTypes", "original": original, "large": large, "poster": poster, "preview": preview, "thumbnail": thumbnail])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var original: String {
                    get {
                      return resultMap["original"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "original")
                    }
                  }

                  public var large: String? {
                    get {
                      return resultMap["large"] as? String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "large")
                    }
                  }

                  public var poster: String? {
                    get {
                      return resultMap["poster"] as? String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "poster")
                    }
                  }

                  public var preview: String? {
                    get {
                      return resultMap["preview"] as? String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "preview")
                    }
                  }

                  public var thumbnail: String? {
                    get {
                      return resultMap["thumbnail"] as? String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "thumbnail")
                    }
                  }
                }

                public var asAudioEncodingTypes: AsAudioEncodingTypes? {
                  get {
                    if !AsAudioEncodingTypes.possibleTypes.contains(__typename) { return nil }
                    return AsAudioEncodingTypes(unsafeResultMap: resultMap)
                  }
                  set {
                    guard let newValue = newValue else { return }
                    resultMap = newValue.resultMap
                  }
                }

                public struct AsAudioEncodingTypes: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["AudioEncodingTypes"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("original", type: .nonNull(.scalar(String.self))),
                      GraphQLField("large", type: .scalar(String.self)),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(original: String, large: String? = nil) {
                    self.init(unsafeResultMap: ["__typename": "AudioEncodingTypes", "original": original, "large": large])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var original: String {
                    get {
                      return resultMap["original"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "original")
                    }
                  }

                  public var large: String? {
                    get {
                      return resultMap["large"] as? String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "large")
                    }
                  }
                }

                public var asUnsupportedEncodingTypes: AsUnsupportedEncodingTypes? {
                  get {
                    if !AsUnsupportedEncodingTypes.possibleTypes.contains(__typename) { return nil }
                    return AsUnsupportedEncodingTypes(unsafeResultMap: resultMap)
                  }
                  set {
                    guard let newValue = newValue else { return }
                    resultMap = newValue.resultMap
                  }
                }

                public struct AsUnsupportedEncodingTypes: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["UnsupportedEncodingTypes"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("original", type: .nonNull(.scalar(String.self))),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(original: String) {
                    self.init(unsafeResultMap: ["__typename": "UnsupportedEncodingTypes", "original": original])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var original: String {
                    get {
                      return resultMap["original"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "original")
                    }
                  }
                }
              }
            }

            public struct Content: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["TokenContentMedia"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("size", type: .scalar(String.self)),
                  GraphQLField("url", type: .scalar(String.self)),
                  GraphQLField("size", type: .scalar(String.self)),
                  GraphQLField("mimeType", type: .scalar(String.self)),
                  GraphQLField("mediaEncoding", type: .object(MediaEncoding.selections)),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(size: String? = nil, url: String? = nil, mimeType: String? = nil, mediaEncoding: MediaEncoding? = nil) {
                self.init(unsafeResultMap: ["__typename": "TokenContentMedia", "size": size, "url": url, "mimeType": mimeType, "mediaEncoding": mediaEncoding.flatMap { (value: MediaEncoding) -> ResultMap in value.resultMap }])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var size: String? {
                get {
                  return resultMap["size"] as? String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "size")
                }
              }

              public var url: String? {
                get {
                  return resultMap["url"] as? String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "url")
                }
              }

              public var mimeType: String? {
                get {
                  return resultMap["mimeType"] as? String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "mimeType")
                }
              }

              public var mediaEncoding: MediaEncoding? {
                get {
                  return (resultMap["mediaEncoding"] as? ResultMap).flatMap { MediaEncoding(unsafeResultMap: $0) }
                }
                set {
                  resultMap.updateValue(newValue?.resultMap, forKey: "mediaEncoding")
                }
              }

              public var fragments: Fragments {
                get {
                  return Fragments(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }

              public struct Fragments {
                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public var fullMedia: FullMedia {
                  get {
                    return FullMedia(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }
              }

              public struct MediaEncoding: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["ImageEncodingTypes", "VideoEncodingTypes", "AudioEncodingTypes", "UnsupportedEncodingTypes"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLTypeCase(
                      variants: ["ImageEncodingTypes": AsImageEncodingTypes.selections, "VideoEncodingTypes": AsVideoEncodingTypes.selections, "AudioEncodingTypes": AsAudioEncodingTypes.selections, "UnsupportedEncodingTypes": AsUnsupportedEncodingTypes.selections],
                      default: [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      ]
                    )
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public static func makeImageEncodingTypes(original: String, large: String? = nil, poster: String? = nil, thumbnail: String? = nil) -> MediaEncoding {
                  return MediaEncoding(unsafeResultMap: ["__typename": "ImageEncodingTypes", "original": original, "large": large, "poster": poster, "thumbnail": thumbnail])
                }

                public static func makeVideoEncodingTypes(original: String, large: String? = nil, poster: String? = nil, preview: String? = nil, thumbnail: String? = nil) -> MediaEncoding {
                  return MediaEncoding(unsafeResultMap: ["__typename": "VideoEncodingTypes", "original": original, "large": large, "poster": poster, "preview": preview, "thumbnail": thumbnail])
                }

                public static func makeAudioEncodingTypes(original: String, large: String? = nil) -> MediaEncoding {
                  return MediaEncoding(unsafeResultMap: ["__typename": "AudioEncodingTypes", "original": original, "large": large])
                }

                public static func makeUnsupportedEncodingTypes(original: String) -> MediaEncoding {
                  return MediaEncoding(unsafeResultMap: ["__typename": "UnsupportedEncodingTypes", "original": original])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var asImageEncodingTypes: AsImageEncodingTypes? {
                  get {
                    if !AsImageEncodingTypes.possibleTypes.contains(__typename) { return nil }
                    return AsImageEncodingTypes(unsafeResultMap: resultMap)
                  }
                  set {
                    guard let newValue = newValue else { return }
                    resultMap = newValue.resultMap
                  }
                }

                public struct AsImageEncodingTypes: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["ImageEncodingTypes"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("original", type: .nonNull(.scalar(String.self))),
                      GraphQLField("large", type: .scalar(String.self)),
                      GraphQLField("poster", type: .scalar(String.self)),
                      GraphQLField("thumbnail", type: .scalar(String.self)),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(original: String, large: String? = nil, poster: String? = nil, thumbnail: String? = nil) {
                    self.init(unsafeResultMap: ["__typename": "ImageEncodingTypes", "original": original, "large": large, "poster": poster, "thumbnail": thumbnail])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var original: String {
                    get {
                      return resultMap["original"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "original")
                    }
                  }

                  public var large: String? {
                    get {
                      return resultMap["large"] as? String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "large")
                    }
                  }

                  public var poster: String? {
                    get {
                      return resultMap["poster"] as? String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "poster")
                    }
                  }

                  public var thumbnail: String? {
                    get {
                      return resultMap["thumbnail"] as? String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "thumbnail")
                    }
                  }
                }

                public var asVideoEncodingTypes: AsVideoEncodingTypes? {
                  get {
                    if !AsVideoEncodingTypes.possibleTypes.contains(__typename) { return nil }
                    return AsVideoEncodingTypes(unsafeResultMap: resultMap)
                  }
                  set {
                    guard let newValue = newValue else { return }
                    resultMap = newValue.resultMap
                  }
                }

                public struct AsVideoEncodingTypes: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["VideoEncodingTypes"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("original", type: .nonNull(.scalar(String.self))),
                      GraphQLField("large", type: .scalar(String.self)),
                      GraphQLField("poster", type: .scalar(String.self)),
                      GraphQLField("preview", type: .scalar(String.self)),
                      GraphQLField("thumbnail", type: .scalar(String.self)),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(original: String, large: String? = nil, poster: String? = nil, preview: String? = nil, thumbnail: String? = nil) {
                    self.init(unsafeResultMap: ["__typename": "VideoEncodingTypes", "original": original, "large": large, "poster": poster, "preview": preview, "thumbnail": thumbnail])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var original: String {
                    get {
                      return resultMap["original"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "original")
                    }
                  }

                  public var large: String? {
                    get {
                      return resultMap["large"] as? String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "large")
                    }
                  }

                  public var poster: String? {
                    get {
                      return resultMap["poster"] as? String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "poster")
                    }
                  }

                  public var preview: String? {
                    get {
                      return resultMap["preview"] as? String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "preview")
                    }
                  }

                  public var thumbnail: String? {
                    get {
                      return resultMap["thumbnail"] as? String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "thumbnail")
                    }
                  }
                }

                public var asAudioEncodingTypes: AsAudioEncodingTypes? {
                  get {
                    if !AsAudioEncodingTypes.possibleTypes.contains(__typename) { return nil }
                    return AsAudioEncodingTypes(unsafeResultMap: resultMap)
                  }
                  set {
                    guard let newValue = newValue else { return }
                    resultMap = newValue.resultMap
                  }
                }

                public struct AsAudioEncodingTypes: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["AudioEncodingTypes"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("original", type: .nonNull(.scalar(String.self))),
                      GraphQLField("large", type: .scalar(String.self)),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(original: String, large: String? = nil) {
                    self.init(unsafeResultMap: ["__typename": "AudioEncodingTypes", "original": original, "large": large])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var original: String {
                    get {
                      return resultMap["original"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "original")
                    }
                  }

                  public var large: String? {
                    get {
                      return resultMap["large"] as? String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "large")
                    }
                  }
                }

                public var asUnsupportedEncodingTypes: AsUnsupportedEncodingTypes? {
                  get {
                    if !AsUnsupportedEncodingTypes.possibleTypes.contains(__typename) { return nil }
                    return AsUnsupportedEncodingTypes(unsafeResultMap: resultMap)
                  }
                  set {
                    guard let newValue = newValue else { return }
                    resultMap = newValue.resultMap
                  }
                }

                public struct AsUnsupportedEncodingTypes: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["UnsupportedEncodingTypes"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("original", type: .nonNull(.scalar(String.self))),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(original: String) {
                    self.init(unsafeResultMap: ["__typename": "UnsupportedEncodingTypes", "original": original])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var original: String {
                    get {
                      return resultMap["original"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "original")
                    }
                  }
                }
              }
            }
          }

          public var asCollection: AsCollection? {
            get {
              if !AsCollection.possibleTypes.contains(__typename) { return nil }
              return AsCollection(unsafeResultMap: resultMap)
            }
            set {
              guard let newValue = newValue else { return }
              resultMap = newValue.resultMap
            }
          }

          public struct AsCollection: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["Collection"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("address", type: .nonNull(.scalar(String.self))),
                GraphQLField("description", alias: "collectionDescription", type: .nonNull(.scalar(String.self))),
                GraphQLField("name", type: .scalar(String.self)),
                GraphQLField("symbol", type: .scalar(String.self)),
                GraphQLField("totalSupply", type: .scalar(Int.self)),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(address: String, collectionDescription: String, name: String? = nil, symbol: String? = nil, totalSupply: Int? = nil) {
              self.init(unsafeResultMap: ["__typename": "Collection", "address": address, "collectionDescription": collectionDescription, "name": name, "symbol": symbol, "totalSupply": totalSupply])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var address: String {
              get {
                return resultMap["address"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "address")
              }
            }

            public var collectionDescription: String {
              get {
                return resultMap["collectionDescription"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "collectionDescription")
              }
            }

            public var name: String? {
              get {
                return resultMap["name"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "name")
              }
            }

            public var symbol: String? {
              get {
                return resultMap["symbol"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "symbol")
              }
            }

            public var totalSupply: Int? {
              get {
                return resultMap["totalSupply"] as? Int
              }
              set {
                resultMap.updateValue(newValue, forKey: "totalSupply")
              }
            }

            public var fragments: Fragments {
              get {
                return Fragments(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }

            public struct Fragments {
              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public var collectionInfoSearchResult: CollectionInfoSearchResult {
                get {
                  return CollectionInfoSearchResult(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }
            }
          }
        }
      }
    }
  }
}

public struct TokenContractInfo: GraphQLFragment {
  /// The raw GraphQL definition of this fragment.
  public static let fragmentDefinition: String =
    """
    fragment TokenContractInfo on TokenContract {
      __typename
      name
      network
      description
      collectionAddress
      symbol
      chain
    }
    """

  public static let possibleTypes: [String] = ["TokenContract"]

  public static var selections: [GraphQLSelection] {
    return [
      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
      GraphQLField("name", type: .scalar(String.self)),
      GraphQLField("network", type: .nonNull(.scalar(String.self))),
      GraphQLField("description", type: .scalar(String.self)),
      GraphQLField("collectionAddress", type: .nonNull(.scalar(String.self))),
      GraphQLField("symbol", type: .scalar(String.self)),
      GraphQLField("chain", type: .nonNull(.scalar(Int.self))),
    ]
  }

  public private(set) var resultMap: ResultMap

  public init(unsafeResultMap: ResultMap) {
    self.resultMap = unsafeResultMap
  }

  public init(name: String? = nil, network: String, description: String? = nil, collectionAddress: String, symbol: String? = nil, chain: Int) {
    self.init(unsafeResultMap: ["__typename": "TokenContract", "name": name, "network": network, "description": description, "collectionAddress": collectionAddress, "symbol": symbol, "chain": chain])
  }

  public var __typename: String {
    get {
      return resultMap["__typename"]! as! String
    }
    set {
      resultMap.updateValue(newValue, forKey: "__typename")
    }
  }

  public var name: String? {
    get {
      return resultMap["name"] as? String
    }
    set {
      resultMap.updateValue(newValue, forKey: "name")
    }
  }

  public var network: String {
    get {
      return resultMap["network"]! as! String
    }
    set {
      resultMap.updateValue(newValue, forKey: "network")
    }
  }

  public var description: String? {
    get {
      return resultMap["description"] as? String
    }
    set {
      resultMap.updateValue(newValue, forKey: "description")
    }
  }

  public var collectionAddress: String {
    get {
      return resultMap["collectionAddress"]! as! String
    }
    set {
      resultMap.updateValue(newValue, forKey: "collectionAddress")
    }
  }

  public var symbol: String? {
    get {
      return resultMap["symbol"] as? String
    }
    set {
      resultMap.updateValue(newValue, forKey: "symbol")
    }
  }

  public var chain: Int {
    get {
      return resultMap["chain"]! as! Int
    }
    set {
      resultMap.updateValue(newValue, forKey: "chain")
    }
  }
}

public struct FullMedia: GraphQLFragment {
  /// The raw GraphQL definition of this fragment.
  public static let fragmentDefinition: String =
    """
    fragment FullMedia on TokenContentMedia {
      __typename
      size
      url
      size
      mimeType
      mediaEncoding {
        __typename
        ... on ImageEncodingTypes {
          __typename
          original
          large
          poster
          thumbnail
        }
        ... on VideoEncodingTypes {
          __typename
          original
          large
          poster
          preview
          thumbnail
        }
        ... on AudioEncodingTypes {
          __typename
          original
          large
        }
        ... on UnsupportedEncodingTypes {
          __typename
          original
        }
      }
    }
    """

  public static let possibleTypes: [String] = ["TokenContentMedia"]

  public static var selections: [GraphQLSelection] {
    return [
      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
      GraphQLField("size", type: .scalar(String.self)),
      GraphQLField("url", type: .scalar(String.self)),
      GraphQLField("size", type: .scalar(String.self)),
      GraphQLField("mimeType", type: .scalar(String.self)),
      GraphQLField("mediaEncoding", type: .object(MediaEncoding.selections)),
    ]
  }

  public private(set) var resultMap: ResultMap

  public init(unsafeResultMap: ResultMap) {
    self.resultMap = unsafeResultMap
  }

  public init(size: String? = nil, url: String? = nil, mimeType: String? = nil, mediaEncoding: MediaEncoding? = nil) {
    self.init(unsafeResultMap: ["__typename": "TokenContentMedia", "size": size, "url": url, "mimeType": mimeType, "mediaEncoding": mediaEncoding.flatMap { (value: MediaEncoding) -> ResultMap in value.resultMap }])
  }

  public var __typename: String {
    get {
      return resultMap["__typename"]! as! String
    }
    set {
      resultMap.updateValue(newValue, forKey: "__typename")
    }
  }

  public var size: String? {
    get {
      return resultMap["size"] as? String
    }
    set {
      resultMap.updateValue(newValue, forKey: "size")
    }
  }

  public var url: String? {
    get {
      return resultMap["url"] as? String
    }
    set {
      resultMap.updateValue(newValue, forKey: "url")
    }
  }

  public var mimeType: String? {
    get {
      return resultMap["mimeType"] as? String
    }
    set {
      resultMap.updateValue(newValue, forKey: "mimeType")
    }
  }

  public var mediaEncoding: MediaEncoding? {
    get {
      return (resultMap["mediaEncoding"] as? ResultMap).flatMap { MediaEncoding(unsafeResultMap: $0) }
    }
    set {
      resultMap.updateValue(newValue?.resultMap, forKey: "mediaEncoding")
    }
  }

  public struct MediaEncoding: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["ImageEncodingTypes", "VideoEncodingTypes", "AudioEncodingTypes", "UnsupportedEncodingTypes"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLTypeCase(
          variants: ["ImageEncodingTypes": AsImageEncodingTypes.selections, "VideoEncodingTypes": AsVideoEncodingTypes.selections, "AudioEncodingTypes": AsAudioEncodingTypes.selections, "UnsupportedEncodingTypes": AsUnsupportedEncodingTypes.selections],
          default: [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          ]
        )
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public static func makeImageEncodingTypes(original: String, large: String? = nil, poster: String? = nil, thumbnail: String? = nil) -> MediaEncoding {
      return MediaEncoding(unsafeResultMap: ["__typename": "ImageEncodingTypes", "original": original, "large": large, "poster": poster, "thumbnail": thumbnail])
    }

    public static func makeVideoEncodingTypes(original: String, large: String? = nil, poster: String? = nil, preview: String? = nil, thumbnail: String? = nil) -> MediaEncoding {
      return MediaEncoding(unsafeResultMap: ["__typename": "VideoEncodingTypes", "original": original, "large": large, "poster": poster, "preview": preview, "thumbnail": thumbnail])
    }

    public static func makeAudioEncodingTypes(original: String, large: String? = nil) -> MediaEncoding {
      return MediaEncoding(unsafeResultMap: ["__typename": "AudioEncodingTypes", "original": original, "large": large])
    }

    public static func makeUnsupportedEncodingTypes(original: String) -> MediaEncoding {
      return MediaEncoding(unsafeResultMap: ["__typename": "UnsupportedEncodingTypes", "original": original])
    }

    public var __typename: String {
      get {
        return resultMap["__typename"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "__typename")
      }
    }

    public var asImageEncodingTypes: AsImageEncodingTypes? {
      get {
        if !AsImageEncodingTypes.possibleTypes.contains(__typename) { return nil }
        return AsImageEncodingTypes(unsafeResultMap: resultMap)
      }
      set {
        guard let newValue = newValue else { return }
        resultMap = newValue.resultMap
      }
    }

    public struct AsImageEncodingTypes: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["ImageEncodingTypes"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("original", type: .nonNull(.scalar(String.self))),
          GraphQLField("large", type: .scalar(String.self)),
          GraphQLField("poster", type: .scalar(String.self)),
          GraphQLField("thumbnail", type: .scalar(String.self)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(original: String, large: String? = nil, poster: String? = nil, thumbnail: String? = nil) {
        self.init(unsafeResultMap: ["__typename": "ImageEncodingTypes", "original": original, "large": large, "poster": poster, "thumbnail": thumbnail])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var original: String {
        get {
          return resultMap["original"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "original")
        }
      }

      public var large: String? {
        get {
          return resultMap["large"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "large")
        }
      }

      public var poster: String? {
        get {
          return resultMap["poster"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "poster")
        }
      }

      public var thumbnail: String? {
        get {
          return resultMap["thumbnail"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "thumbnail")
        }
      }
    }

    public var asVideoEncodingTypes: AsVideoEncodingTypes? {
      get {
        if !AsVideoEncodingTypes.possibleTypes.contains(__typename) { return nil }
        return AsVideoEncodingTypes(unsafeResultMap: resultMap)
      }
      set {
        guard let newValue = newValue else { return }
        resultMap = newValue.resultMap
      }
    }

    public struct AsVideoEncodingTypes: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["VideoEncodingTypes"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("original", type: .nonNull(.scalar(String.self))),
          GraphQLField("large", type: .scalar(String.self)),
          GraphQLField("poster", type: .scalar(String.self)),
          GraphQLField("preview", type: .scalar(String.self)),
          GraphQLField("thumbnail", type: .scalar(String.self)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(original: String, large: String? = nil, poster: String? = nil, preview: String? = nil, thumbnail: String? = nil) {
        self.init(unsafeResultMap: ["__typename": "VideoEncodingTypes", "original": original, "large": large, "poster": poster, "preview": preview, "thumbnail": thumbnail])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var original: String {
        get {
          return resultMap["original"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "original")
        }
      }

      public var large: String? {
        get {
          return resultMap["large"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "large")
        }
      }

      public var poster: String? {
        get {
          return resultMap["poster"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "poster")
        }
      }

      public var preview: String? {
        get {
          return resultMap["preview"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "preview")
        }
      }

      public var thumbnail: String? {
        get {
          return resultMap["thumbnail"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "thumbnail")
        }
      }
    }

    public var asAudioEncodingTypes: AsAudioEncodingTypes? {
      get {
        if !AsAudioEncodingTypes.possibleTypes.contains(__typename) { return nil }
        return AsAudioEncodingTypes(unsafeResultMap: resultMap)
      }
      set {
        guard let newValue = newValue else { return }
        resultMap = newValue.resultMap
      }
    }

    public struct AsAudioEncodingTypes: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["AudioEncodingTypes"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("original", type: .nonNull(.scalar(String.self))),
          GraphQLField("large", type: .scalar(String.self)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(original: String, large: String? = nil) {
        self.init(unsafeResultMap: ["__typename": "AudioEncodingTypes", "original": original, "large": large])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var original: String {
        get {
          return resultMap["original"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "original")
        }
      }

      public var large: String? {
        get {
          return resultMap["large"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "large")
        }
      }
    }

    public var asUnsupportedEncodingTypes: AsUnsupportedEncodingTypes? {
      get {
        if !AsUnsupportedEncodingTypes.possibleTypes.contains(__typename) { return nil }
        return AsUnsupportedEncodingTypes(unsafeResultMap: resultMap)
      }
      set {
        guard let newValue = newValue else { return }
        resultMap = newValue.resultMap
      }
    }

    public struct AsUnsupportedEncodingTypes: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["UnsupportedEncodingTypes"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("original", type: .nonNull(.scalar(String.self))),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(original: String) {
        self.init(unsafeResultMap: ["__typename": "UnsupportedEncodingTypes", "original": original])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var original: String {
        get {
          return resultMap["original"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "original")
        }
      }
    }
  }
}

public struct PriceSummary: GraphQLFragment {
  /// The raw GraphQL definition of this fragment.
  public static let fragmentDefinition: String =
    """
    fragment PriceSummary on PriceAtTime {
      __typename
      blockNumber
      chainTokenPrice {
        __typename
        decimal
        raw
      }
      nativePrice {
        __typename
        decimal
        raw
        currency {
          __typename
          address
          decimals
          name
        }
      }
      usdcPrice {
        __typename
        decimal
        raw
      }
    }
    """

  public static let possibleTypes: [String] = ["PriceAtTime"]

  public static var selections: [GraphQLSelection] {
    return [
      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
      GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
      GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
      GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
      GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
    ]
  }

  public private(set) var resultMap: ResultMap

  public init(unsafeResultMap: ResultMap) {
    self.resultMap = unsafeResultMap
  }

  public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
    self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
  }

  public var __typename: String {
    get {
      return resultMap["__typename"]! as! String
    }
    set {
      resultMap.updateValue(newValue, forKey: "__typename")
    }
  }

  public var blockNumber: Int {
    get {
      return resultMap["blockNumber"]! as! Int
    }
    set {
      resultMap.updateValue(newValue, forKey: "blockNumber")
    }
  }

  public var chainTokenPrice: ChainTokenPrice? {
    get {
      return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
    }
    set {
      resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
    }
  }

  public var nativePrice: NativePrice {
    get {
      return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
    }
    set {
      resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
    }
  }

  public var usdcPrice: UsdcPrice? {
    get {
      return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
    }
    set {
      resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
    }
  }

  public struct ChainTokenPrice: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["CurrencyAmount"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
        GraphQLField("raw", type: .nonNull(.scalar(String.self))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(decimal: Double, raw: String) {
      self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
    }

    public var __typename: String {
      get {
        return resultMap["__typename"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "__typename")
      }
    }

    public var decimal: Double {
      get {
        return resultMap["decimal"]! as! Double
      }
      set {
        resultMap.updateValue(newValue, forKey: "decimal")
      }
    }

    public var raw: String {
      get {
        return resultMap["raw"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "raw")
      }
    }
  }

  public struct NativePrice: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["CurrencyAmount"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
        GraphQLField("raw", type: .nonNull(.scalar(String.self))),
        GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(decimal: Double, raw: String, currency: Currency) {
      self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
    }

    public var __typename: String {
      get {
        return resultMap["__typename"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "__typename")
      }
    }

    public var decimal: Double {
      get {
        return resultMap["decimal"]! as! Double
      }
      set {
        resultMap.updateValue(newValue, forKey: "decimal")
      }
    }

    public var raw: String {
      get {
        return resultMap["raw"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "raw")
      }
    }

    public var currency: Currency {
      get {
        return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "currency")
      }
    }

    public struct Currency: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["Currency"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("address", type: .nonNull(.scalar(String.self))),
          GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(address: String, decimals: Int, name: String) {
        self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var address: String {
        get {
          return resultMap["address"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "address")
        }
      }

      public var decimals: Int {
        get {
          return resultMap["decimals"]! as! Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "decimals")
        }
      }

      public var name: String {
        get {
          return resultMap["name"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "name")
        }
      }
    }
  }

  public struct UsdcPrice: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["CurrencyAmount"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
        GraphQLField("raw", type: .nonNull(.scalar(String.self))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(decimal: Double, raw: String) {
      self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
    }

    public var __typename: String {
      get {
        return resultMap["__typename"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "__typename")
      }
    }

    public var decimal: Double {
      get {
        return resultMap["decimal"]! as! Double
      }
      set {
        resultMap.updateValue(newValue, forKey: "decimal")
      }
    }

    public var raw: String {
      get {
        return resultMap["raw"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "raw")
      }
    }
  }
}

public struct MintDetails: GraphQLFragment {
  /// The raw GraphQL definition of this fragment.
  public static let fragmentDefinition: String =
    """
    fragment MintDetails on MintInfo {
      __typename
      price {
        __typename
        ...PriceSummary
      }
      originatorAddress
      toAddress
      mintContext {
        __typename
        ...TransactionDetails
      }
    }
    """

  public static let possibleTypes: [String] = ["MintInfo"]

  public static var selections: [GraphQLSelection] {
    return [
      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
      GraphQLField("price", type: .nonNull(.object(Price.selections))),
      GraphQLField("originatorAddress", type: .nonNull(.scalar(String.self))),
      GraphQLField("toAddress", type: .nonNull(.scalar(String.self))),
      GraphQLField("mintContext", type: .nonNull(.object(MintContext.selections))),
    ]
  }

  public private(set) var resultMap: ResultMap

  public init(unsafeResultMap: ResultMap) {
    self.resultMap = unsafeResultMap
  }

  public init(price: Price, originatorAddress: String, toAddress: String, mintContext: MintContext) {
    self.init(unsafeResultMap: ["__typename": "MintInfo", "price": price.resultMap, "originatorAddress": originatorAddress, "toAddress": toAddress, "mintContext": mintContext.resultMap])
  }

  public var __typename: String {
    get {
      return resultMap["__typename"]! as! String
    }
    set {
      resultMap.updateValue(newValue, forKey: "__typename")
    }
  }

  public var price: Price {
    get {
      return Price(unsafeResultMap: resultMap["price"]! as! ResultMap)
    }
    set {
      resultMap.updateValue(newValue.resultMap, forKey: "price")
    }
  }

  public var originatorAddress: String {
    get {
      return resultMap["originatorAddress"]! as! String
    }
    set {
      resultMap.updateValue(newValue, forKey: "originatorAddress")
    }
  }

  public var toAddress: String {
    get {
      return resultMap["toAddress"]! as! String
    }
    set {
      resultMap.updateValue(newValue, forKey: "toAddress")
    }
  }

  public var mintContext: MintContext {
    get {
      return MintContext(unsafeResultMap: resultMap["mintContext"]! as! ResultMap)
    }
    set {
      resultMap.updateValue(newValue.resultMap, forKey: "mintContext")
    }
  }

  public struct Price: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["PriceAtTime"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
        GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
        GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
        GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
      self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
    }

    public var __typename: String {
      get {
        return resultMap["__typename"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "__typename")
      }
    }

    public var blockNumber: Int {
      get {
        return resultMap["blockNumber"]! as! Int
      }
      set {
        resultMap.updateValue(newValue, forKey: "blockNumber")
      }
    }

    public var chainTokenPrice: ChainTokenPrice? {
      get {
        return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
      }
    }

    public var nativePrice: NativePrice {
      get {
        return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
      }
    }

    public var usdcPrice: UsdcPrice? {
      get {
        return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
      }
    }

    public var fragments: Fragments {
      get {
        return Fragments(unsafeResultMap: resultMap)
      }
      set {
        resultMap += newValue.resultMap
      }
    }

    public struct Fragments {
      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public var priceSummary: PriceSummary {
        get {
          return PriceSummary(unsafeResultMap: resultMap)
        }
        set {
          resultMap += newValue.resultMap
        }
      }
    }

    public struct ChainTokenPrice: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["CurrencyAmount"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
          GraphQLField("raw", type: .nonNull(.scalar(String.self))),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(decimal: Double, raw: String) {
        self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var decimal: Double {
        get {
          return resultMap["decimal"]! as! Double
        }
        set {
          resultMap.updateValue(newValue, forKey: "decimal")
        }
      }

      public var raw: String {
        get {
          return resultMap["raw"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "raw")
        }
      }
    }

    public struct NativePrice: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["CurrencyAmount"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
          GraphQLField("raw", type: .nonNull(.scalar(String.self))),
          GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(decimal: Double, raw: String, currency: Currency) {
        self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var decimal: Double {
        get {
          return resultMap["decimal"]! as! Double
        }
        set {
          resultMap.updateValue(newValue, forKey: "decimal")
        }
      }

      public var raw: String {
        get {
          return resultMap["raw"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "raw")
        }
      }

      public var currency: Currency {
        get {
          return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
        }
        set {
          resultMap.updateValue(newValue.resultMap, forKey: "currency")
        }
      }

      public struct Currency: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["Currency"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("address", type: .nonNull(.scalar(String.self))),
            GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
            GraphQLField("name", type: .nonNull(.scalar(String.self))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(address: String, decimals: Int, name: String) {
          self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var address: String {
          get {
            return resultMap["address"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "address")
          }
        }

        public var decimals: Int {
          get {
            return resultMap["decimals"]! as! Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "decimals")
          }
        }

        public var name: String {
          get {
            return resultMap["name"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "name")
          }
        }
      }
    }

    public struct UsdcPrice: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["CurrencyAmount"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
          GraphQLField("raw", type: .nonNull(.scalar(String.self))),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(decimal: Double, raw: String) {
        self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var decimal: Double {
        get {
          return resultMap["decimal"]! as! Double
        }
        set {
          resultMap.updateValue(newValue, forKey: "decimal")
        }
      }

      public var raw: String {
        get {
          return resultMap["raw"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "raw")
        }
      }
    }
  }

  public struct MintContext: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["TransactionInfo"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
        GraphQLField("blockTimestamp", type: .nonNull(.scalar(String.self))),
        GraphQLField("transactionHash", type: .scalar(String.self)),
        GraphQLField("logIndex", type: .scalar(Int.self)),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(blockNumber: Int, blockTimestamp: String, transactionHash: String? = nil, logIndex: Int? = nil) {
      self.init(unsafeResultMap: ["__typename": "TransactionInfo", "blockNumber": blockNumber, "blockTimestamp": blockTimestamp, "transactionHash": transactionHash, "logIndex": logIndex])
    }

    public var __typename: String {
      get {
        return resultMap["__typename"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "__typename")
      }
    }

    public var blockNumber: Int {
      get {
        return resultMap["blockNumber"]! as! Int
      }
      set {
        resultMap.updateValue(newValue, forKey: "blockNumber")
      }
    }

    public var blockTimestamp: String {
      get {
        return resultMap["blockTimestamp"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "blockTimestamp")
      }
    }

    public var transactionHash: String? {
      get {
        return resultMap["transactionHash"] as? String
      }
      set {
        resultMap.updateValue(newValue, forKey: "transactionHash")
      }
    }

    public var logIndex: Int? {
      get {
        return resultMap["logIndex"] as? Int
      }
      set {
        resultMap.updateValue(newValue, forKey: "logIndex")
      }
    }

    public var fragments: Fragments {
      get {
        return Fragments(unsafeResultMap: resultMap)
      }
      set {
        resultMap += newValue.resultMap
      }
    }

    public struct Fragments {
      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public var transactionDetails: TransactionDetails {
        get {
          return TransactionDetails(unsafeResultMap: resultMap)
        }
        set {
          resultMap += newValue.resultMap
        }
      }
    }
  }
}

public struct TransactionDetails: GraphQLFragment {
  /// The raw GraphQL definition of this fragment.
  public static let fragmentDefinition: String =
    """
    fragment TransactionDetails on TransactionInfo {
      __typename
      blockNumber
      blockTimestamp
      transactionHash
      logIndex
    }
    """

  public static let possibleTypes: [String] = ["TransactionInfo"]

  public static var selections: [GraphQLSelection] {
    return [
      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
      GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
      GraphQLField("blockTimestamp", type: .nonNull(.scalar(String.self))),
      GraphQLField("transactionHash", type: .scalar(String.self)),
      GraphQLField("logIndex", type: .scalar(Int.self)),
    ]
  }

  public private(set) var resultMap: ResultMap

  public init(unsafeResultMap: ResultMap) {
    self.resultMap = unsafeResultMap
  }

  public init(blockNumber: Int, blockTimestamp: String, transactionHash: String? = nil, logIndex: Int? = nil) {
    self.init(unsafeResultMap: ["__typename": "TransactionInfo", "blockNumber": blockNumber, "blockTimestamp": blockTimestamp, "transactionHash": transactionHash, "logIndex": logIndex])
  }

  public var __typename: String {
    get {
      return resultMap["__typename"]! as! String
    }
    set {
      resultMap.updateValue(newValue, forKey: "__typename")
    }
  }

  public var blockNumber: Int {
    get {
      return resultMap["blockNumber"]! as! Int
    }
    set {
      resultMap.updateValue(newValue, forKey: "blockNumber")
    }
  }

  public var blockTimestamp: String {
    get {
      return resultMap["blockTimestamp"]! as! String
    }
    set {
      resultMap.updateValue(newValue, forKey: "blockTimestamp")
    }
  }

  public var transactionHash: String? {
    get {
      return resultMap["transactionHash"] as? String
    }
    set {
      resultMap.updateValue(newValue, forKey: "transactionHash")
    }
  }

  public var logIndex: Int? {
    get {
      return resultMap["logIndex"] as? Int
    }
    set {
      resultMap.updateValue(newValue, forKey: "logIndex")
    }
  }
}

public struct SaleInfo: GraphQLFragment {
  /// The raw GraphQL definition of this fragment.
  public static let fragmentDefinition: String =
    """
    fragment SaleInfo on Sale {
      __typename
      saleContractAddress
      transactionInfo {
        __typename
        ...TransactionDetails
      }
      buyerAddress
      collectionAddress
      price {
        __typename
        ...PriceSummary
      }
      sellerAddress
      tokenId
    }
    """

  public static let possibleTypes: [String] = ["Sale"]

  public static var selections: [GraphQLSelection] {
    return [
      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
      GraphQLField("saleContractAddress", type: .scalar(String.self)),
      GraphQLField("transactionInfo", type: .nonNull(.object(TransactionInfo.selections))),
      GraphQLField("buyerAddress", type: .nonNull(.scalar(String.self))),
      GraphQLField("collectionAddress", type: .nonNull(.scalar(String.self))),
      GraphQLField("price", type: .nonNull(.object(Price.selections))),
      GraphQLField("sellerAddress", type: .nonNull(.scalar(String.self))),
      GraphQLField("tokenId", type: .nonNull(.scalar(String.self))),
    ]
  }

  public private(set) var resultMap: ResultMap

  public init(unsafeResultMap: ResultMap) {
    self.resultMap = unsafeResultMap
  }

  public init(saleContractAddress: String? = nil, transactionInfo: TransactionInfo, buyerAddress: String, collectionAddress: String, price: Price, sellerAddress: String, tokenId: String) {
    self.init(unsafeResultMap: ["__typename": "Sale", "saleContractAddress": saleContractAddress, "transactionInfo": transactionInfo.resultMap, "buyerAddress": buyerAddress, "collectionAddress": collectionAddress, "price": price.resultMap, "sellerAddress": sellerAddress, "tokenId": tokenId])
  }

  public var __typename: String {
    get {
      return resultMap["__typename"]! as! String
    }
    set {
      resultMap.updateValue(newValue, forKey: "__typename")
    }
  }

  public var saleContractAddress: String? {
    get {
      return resultMap["saleContractAddress"] as? String
    }
    set {
      resultMap.updateValue(newValue, forKey: "saleContractAddress")
    }
  }

  public var transactionInfo: TransactionInfo {
    get {
      return TransactionInfo(unsafeResultMap: resultMap["transactionInfo"]! as! ResultMap)
    }
    set {
      resultMap.updateValue(newValue.resultMap, forKey: "transactionInfo")
    }
  }

  public var buyerAddress: String {
    get {
      return resultMap["buyerAddress"]! as! String
    }
    set {
      resultMap.updateValue(newValue, forKey: "buyerAddress")
    }
  }

  public var collectionAddress: String {
    get {
      return resultMap["collectionAddress"]! as! String
    }
    set {
      resultMap.updateValue(newValue, forKey: "collectionAddress")
    }
  }

  public var price: Price {
    get {
      return Price(unsafeResultMap: resultMap["price"]! as! ResultMap)
    }
    set {
      resultMap.updateValue(newValue.resultMap, forKey: "price")
    }
  }

  public var sellerAddress: String {
    get {
      return resultMap["sellerAddress"]! as! String
    }
    set {
      resultMap.updateValue(newValue, forKey: "sellerAddress")
    }
  }

  public var tokenId: String {
    get {
      return resultMap["tokenId"]! as! String
    }
    set {
      resultMap.updateValue(newValue, forKey: "tokenId")
    }
  }

  public struct TransactionInfo: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["TransactionInfo"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
        GraphQLField("blockTimestamp", type: .nonNull(.scalar(String.self))),
        GraphQLField("transactionHash", type: .scalar(String.self)),
        GraphQLField("logIndex", type: .scalar(Int.self)),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(blockNumber: Int, blockTimestamp: String, transactionHash: String? = nil, logIndex: Int? = nil) {
      self.init(unsafeResultMap: ["__typename": "TransactionInfo", "blockNumber": blockNumber, "blockTimestamp": blockTimestamp, "transactionHash": transactionHash, "logIndex": logIndex])
    }

    public var __typename: String {
      get {
        return resultMap["__typename"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "__typename")
      }
    }

    public var blockNumber: Int {
      get {
        return resultMap["blockNumber"]! as! Int
      }
      set {
        resultMap.updateValue(newValue, forKey: "blockNumber")
      }
    }

    public var blockTimestamp: String {
      get {
        return resultMap["blockTimestamp"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "blockTimestamp")
      }
    }

    public var transactionHash: String? {
      get {
        return resultMap["transactionHash"] as? String
      }
      set {
        resultMap.updateValue(newValue, forKey: "transactionHash")
      }
    }

    public var logIndex: Int? {
      get {
        return resultMap["logIndex"] as? Int
      }
      set {
        resultMap.updateValue(newValue, forKey: "logIndex")
      }
    }

    public var fragments: Fragments {
      get {
        return Fragments(unsafeResultMap: resultMap)
      }
      set {
        resultMap += newValue.resultMap
      }
    }

    public struct Fragments {
      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public var transactionDetails: TransactionDetails {
        get {
          return TransactionDetails(unsafeResultMap: resultMap)
        }
        set {
          resultMap += newValue.resultMap
        }
      }
    }
  }

  public struct Price: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["PriceAtTime"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
        GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
        GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
        GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
      self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
    }

    public var __typename: String {
      get {
        return resultMap["__typename"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "__typename")
      }
    }

    public var blockNumber: Int {
      get {
        return resultMap["blockNumber"]! as! Int
      }
      set {
        resultMap.updateValue(newValue, forKey: "blockNumber")
      }
    }

    public var chainTokenPrice: ChainTokenPrice? {
      get {
        return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
      }
    }

    public var nativePrice: NativePrice {
      get {
        return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
      }
    }

    public var usdcPrice: UsdcPrice? {
      get {
        return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
      }
    }

    public var fragments: Fragments {
      get {
        return Fragments(unsafeResultMap: resultMap)
      }
      set {
        resultMap += newValue.resultMap
      }
    }

    public struct Fragments {
      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public var priceSummary: PriceSummary {
        get {
          return PriceSummary(unsafeResultMap: resultMap)
        }
        set {
          resultMap += newValue.resultMap
        }
      }
    }

    public struct ChainTokenPrice: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["CurrencyAmount"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
          GraphQLField("raw", type: .nonNull(.scalar(String.self))),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(decimal: Double, raw: String) {
        self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var decimal: Double {
        get {
          return resultMap["decimal"]! as! Double
        }
        set {
          resultMap.updateValue(newValue, forKey: "decimal")
        }
      }

      public var raw: String {
        get {
          return resultMap["raw"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "raw")
        }
      }
    }

    public struct NativePrice: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["CurrencyAmount"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
          GraphQLField("raw", type: .nonNull(.scalar(String.self))),
          GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(decimal: Double, raw: String, currency: Currency) {
        self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var decimal: Double {
        get {
          return resultMap["decimal"]! as! Double
        }
        set {
          resultMap.updateValue(newValue, forKey: "decimal")
        }
      }

      public var raw: String {
        get {
          return resultMap["raw"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "raw")
        }
      }

      public var currency: Currency {
        get {
          return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
        }
        set {
          resultMap.updateValue(newValue.resultMap, forKey: "currency")
        }
      }

      public struct Currency: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["Currency"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("address", type: .nonNull(.scalar(String.self))),
            GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
            GraphQLField("name", type: .nonNull(.scalar(String.self))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(address: String, decimals: Int, name: String) {
          self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var address: String {
          get {
            return resultMap["address"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "address")
          }
        }

        public var decimals: Int {
          get {
            return resultMap["decimals"]! as! Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "decimals")
          }
        }

        public var name: String {
          get {
            return resultMap["name"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "name")
          }
        }
      }
    }

    public struct UsdcPrice: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["CurrencyAmount"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
          GraphQLField("raw", type: .nonNull(.scalar(String.self))),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(decimal: Double, raw: String) {
        self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var decimal: Double {
        get {
          return resultMap["decimal"]! as! Double
        }
        set {
          resultMap.updateValue(newValue, forKey: "decimal")
        }
      }

      public var raw: String {
        get {
          return resultMap["raw"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "raw")
        }
      }
    }
  }
}

public struct V2AuctionMarketProperties: GraphQLFragment {
  /// The raw GraphQL definition of this fragment.
  public static let fragmentDefinition: String =
    """
    fragment V2AuctionMarketProperties on V2Auction {
      __typename
      firstBidTime
      highestBidder
      curator
      collectionAddress
      curatorFeePercentage
      tokenId
      auctionCurrency
      duration
      estimatedExpirationTime
      v2AuctionStatus
      tokenOwner
      address
      auctionId
      approved
      reservePrice {
        __typename
        ...PriceSummary
      }
      highestBidPrice {
        __typename
        ...PriceSummary
      }
    }
    """

  public static let possibleTypes: [String] = ["V2Auction"]

  public static var selections: [GraphQLSelection] {
    return [
      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
      GraphQLField("firstBidTime", type: .scalar(String.self)),
      GraphQLField("highestBidder", type: .scalar(String.self)),
      GraphQLField("curator", type: .nonNull(.scalar(String.self))),
      GraphQLField("collectionAddress", type: .nonNull(.scalar(String.self))),
      GraphQLField("curatorFeePercentage", type: .nonNull(.scalar(Int.self))),
      GraphQLField("tokenId", type: .nonNull(.scalar(String.self))),
      GraphQLField("auctionCurrency", type: .nonNull(.scalar(String.self))),
      GraphQLField("duration", type: .nonNull(.scalar(String.self))),
      GraphQLField("estimatedExpirationTime", type: .scalar(String.self)),
      GraphQLField("v2AuctionStatus", type: .nonNull(.scalar(V2AuctionStatus.self))),
      GraphQLField("tokenOwner", type: .nonNull(.scalar(String.self))),
      GraphQLField("address", type: .nonNull(.scalar(String.self))),
      GraphQLField("auctionId", type: .nonNull(.scalar(String.self))),
      GraphQLField("approved", type: .nonNull(.scalar(Bool.self))),
      GraphQLField("reservePrice", type: .nonNull(.object(ReservePrice.selections))),
      GraphQLField("highestBidPrice", type: .object(HighestBidPrice.selections)),
    ]
  }

  public private(set) var resultMap: ResultMap

  public init(unsafeResultMap: ResultMap) {
    self.resultMap = unsafeResultMap
  }

  public init(firstBidTime: String? = nil, highestBidder: String? = nil, curator: String, collectionAddress: String, curatorFeePercentage: Int, tokenId: String, auctionCurrency: String, duration: String, estimatedExpirationTime: String? = nil, v2AuctionStatus: V2AuctionStatus, tokenOwner: String, address: String, auctionId: String, approved: Bool, reservePrice: ReservePrice, highestBidPrice: HighestBidPrice? = nil) {
    self.init(unsafeResultMap: ["__typename": "V2Auction", "firstBidTime": firstBidTime, "highestBidder": highestBidder, "curator": curator, "collectionAddress": collectionAddress, "curatorFeePercentage": curatorFeePercentage, "tokenId": tokenId, "auctionCurrency": auctionCurrency, "duration": duration, "estimatedExpirationTime": estimatedExpirationTime, "v2AuctionStatus": v2AuctionStatus, "tokenOwner": tokenOwner, "address": address, "auctionId": auctionId, "approved": approved, "reservePrice": reservePrice.resultMap, "highestBidPrice": highestBidPrice.flatMap { (value: HighestBidPrice) -> ResultMap in value.resultMap }])
  }

  public var __typename: String {
    get {
      return resultMap["__typename"]! as! String
    }
    set {
      resultMap.updateValue(newValue, forKey: "__typename")
    }
  }

  public var firstBidTime: String? {
    get {
      return resultMap["firstBidTime"] as? String
    }
    set {
      resultMap.updateValue(newValue, forKey: "firstBidTime")
    }
  }

  public var highestBidder: String? {
    get {
      return resultMap["highestBidder"] as? String
    }
    set {
      resultMap.updateValue(newValue, forKey: "highestBidder")
    }
  }

  public var curator: String {
    get {
      return resultMap["curator"]! as! String
    }
    set {
      resultMap.updateValue(newValue, forKey: "curator")
    }
  }

  public var collectionAddress: String {
    get {
      return resultMap["collectionAddress"]! as! String
    }
    set {
      resultMap.updateValue(newValue, forKey: "collectionAddress")
    }
  }

  public var curatorFeePercentage: Int {
    get {
      return resultMap["curatorFeePercentage"]! as! Int
    }
    set {
      resultMap.updateValue(newValue, forKey: "curatorFeePercentage")
    }
  }

  public var tokenId: String {
    get {
      return resultMap["tokenId"]! as! String
    }
    set {
      resultMap.updateValue(newValue, forKey: "tokenId")
    }
  }

  public var auctionCurrency: String {
    get {
      return resultMap["auctionCurrency"]! as! String
    }
    set {
      resultMap.updateValue(newValue, forKey: "auctionCurrency")
    }
  }

  public var duration: String {
    get {
      return resultMap["duration"]! as! String
    }
    set {
      resultMap.updateValue(newValue, forKey: "duration")
    }
  }

  public var estimatedExpirationTime: String? {
    get {
      return resultMap["estimatedExpirationTime"] as? String
    }
    set {
      resultMap.updateValue(newValue, forKey: "estimatedExpirationTime")
    }
  }

  public var v2AuctionStatus: V2AuctionStatus {
    get {
      return resultMap["v2AuctionStatus"]! as! V2AuctionStatus
    }
    set {
      resultMap.updateValue(newValue, forKey: "v2AuctionStatus")
    }
  }

  public var tokenOwner: String {
    get {
      return resultMap["tokenOwner"]! as! String
    }
    set {
      resultMap.updateValue(newValue, forKey: "tokenOwner")
    }
  }

  public var address: String {
    get {
      return resultMap["address"]! as! String
    }
    set {
      resultMap.updateValue(newValue, forKey: "address")
    }
  }

  public var auctionId: String {
    get {
      return resultMap["auctionId"]! as! String
    }
    set {
      resultMap.updateValue(newValue, forKey: "auctionId")
    }
  }

  public var approved: Bool {
    get {
      return resultMap["approved"]! as! Bool
    }
    set {
      resultMap.updateValue(newValue, forKey: "approved")
    }
  }

  public var reservePrice: ReservePrice {
    get {
      return ReservePrice(unsafeResultMap: resultMap["reservePrice"]! as! ResultMap)
    }
    set {
      resultMap.updateValue(newValue.resultMap, forKey: "reservePrice")
    }
  }

  public var highestBidPrice: HighestBidPrice? {
    get {
      return (resultMap["highestBidPrice"] as? ResultMap).flatMap { HighestBidPrice(unsafeResultMap: $0) }
    }
    set {
      resultMap.updateValue(newValue?.resultMap, forKey: "highestBidPrice")
    }
  }

  public struct ReservePrice: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["PriceAtTime"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
        GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
        GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
        GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
      self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
    }

    public var __typename: String {
      get {
        return resultMap["__typename"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "__typename")
      }
    }

    public var blockNumber: Int {
      get {
        return resultMap["blockNumber"]! as! Int
      }
      set {
        resultMap.updateValue(newValue, forKey: "blockNumber")
      }
    }

    public var chainTokenPrice: ChainTokenPrice? {
      get {
        return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
      }
    }

    public var nativePrice: NativePrice {
      get {
        return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
      }
    }

    public var usdcPrice: UsdcPrice? {
      get {
        return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
      }
    }

    public var fragments: Fragments {
      get {
        return Fragments(unsafeResultMap: resultMap)
      }
      set {
        resultMap += newValue.resultMap
      }
    }

    public struct Fragments {
      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public var priceSummary: PriceSummary {
        get {
          return PriceSummary(unsafeResultMap: resultMap)
        }
        set {
          resultMap += newValue.resultMap
        }
      }
    }

    public struct ChainTokenPrice: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["CurrencyAmount"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
          GraphQLField("raw", type: .nonNull(.scalar(String.self))),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(decimal: Double, raw: String) {
        self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var decimal: Double {
        get {
          return resultMap["decimal"]! as! Double
        }
        set {
          resultMap.updateValue(newValue, forKey: "decimal")
        }
      }

      public var raw: String {
        get {
          return resultMap["raw"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "raw")
        }
      }
    }

    public struct NativePrice: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["CurrencyAmount"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
          GraphQLField("raw", type: .nonNull(.scalar(String.self))),
          GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(decimal: Double, raw: String, currency: Currency) {
        self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var decimal: Double {
        get {
          return resultMap["decimal"]! as! Double
        }
        set {
          resultMap.updateValue(newValue, forKey: "decimal")
        }
      }

      public var raw: String {
        get {
          return resultMap["raw"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "raw")
        }
      }

      public var currency: Currency {
        get {
          return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
        }
        set {
          resultMap.updateValue(newValue.resultMap, forKey: "currency")
        }
      }

      public struct Currency: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["Currency"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("address", type: .nonNull(.scalar(String.self))),
            GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
            GraphQLField("name", type: .nonNull(.scalar(String.self))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(address: String, decimals: Int, name: String) {
          self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var address: String {
          get {
            return resultMap["address"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "address")
          }
        }

        public var decimals: Int {
          get {
            return resultMap["decimals"]! as! Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "decimals")
          }
        }

        public var name: String {
          get {
            return resultMap["name"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "name")
          }
        }
      }
    }

    public struct UsdcPrice: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["CurrencyAmount"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
          GraphQLField("raw", type: .nonNull(.scalar(String.self))),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(decimal: Double, raw: String) {
        self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var decimal: Double {
        get {
          return resultMap["decimal"]! as! Double
        }
        set {
          resultMap.updateValue(newValue, forKey: "decimal")
        }
      }

      public var raw: String {
        get {
          return resultMap["raw"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "raw")
        }
      }
    }
  }

  public struct HighestBidPrice: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["PriceAtTime"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
        GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
        GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
        GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
      self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
    }

    public var __typename: String {
      get {
        return resultMap["__typename"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "__typename")
      }
    }

    public var blockNumber: Int {
      get {
        return resultMap["blockNumber"]! as! Int
      }
      set {
        resultMap.updateValue(newValue, forKey: "blockNumber")
      }
    }

    public var chainTokenPrice: ChainTokenPrice? {
      get {
        return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
      }
    }

    public var nativePrice: NativePrice {
      get {
        return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
      }
    }

    public var usdcPrice: UsdcPrice? {
      get {
        return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
      }
    }

    public var fragments: Fragments {
      get {
        return Fragments(unsafeResultMap: resultMap)
      }
      set {
        resultMap += newValue.resultMap
      }
    }

    public struct Fragments {
      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public var priceSummary: PriceSummary {
        get {
          return PriceSummary(unsafeResultMap: resultMap)
        }
        set {
          resultMap += newValue.resultMap
        }
      }
    }

    public struct ChainTokenPrice: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["CurrencyAmount"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
          GraphQLField("raw", type: .nonNull(.scalar(String.self))),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(decimal: Double, raw: String) {
        self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var decimal: Double {
        get {
          return resultMap["decimal"]! as! Double
        }
        set {
          resultMap.updateValue(newValue, forKey: "decimal")
        }
      }

      public var raw: String {
        get {
          return resultMap["raw"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "raw")
        }
      }
    }

    public struct NativePrice: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["CurrencyAmount"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
          GraphQLField("raw", type: .nonNull(.scalar(String.self))),
          GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(decimal: Double, raw: String, currency: Currency) {
        self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var decimal: Double {
        get {
          return resultMap["decimal"]! as! Double
        }
        set {
          resultMap.updateValue(newValue, forKey: "decimal")
        }
      }

      public var raw: String {
        get {
          return resultMap["raw"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "raw")
        }
      }

      public var currency: Currency {
        get {
          return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
        }
        set {
          resultMap.updateValue(newValue.resultMap, forKey: "currency")
        }
      }

      public struct Currency: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["Currency"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("address", type: .nonNull(.scalar(String.self))),
            GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
            GraphQLField("name", type: .nonNull(.scalar(String.self))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(address: String, decimals: Int, name: String) {
          self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var address: String {
          get {
            return resultMap["address"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "address")
          }
        }

        public var decimals: Int {
          get {
            return resultMap["decimals"]! as! Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "decimals")
          }
        }

        public var name: String {
          get {
            return resultMap["name"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "name")
          }
        }
      }
    }

    public struct UsdcPrice: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["CurrencyAmount"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
          GraphQLField("raw", type: .nonNull(.scalar(String.self))),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(decimal: Double, raw: String) {
        self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var decimal: Double {
        get {
          return resultMap["decimal"]! as! Double
        }
        set {
          resultMap.updateValue(newValue, forKey: "decimal")
        }
      }

      public var raw: String {
        get {
          return resultMap["raw"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "raw")
        }
      }
    }
  }
}

public struct V3AskProperties: GraphQLFragment {
  /// The raw GraphQL definition of this fragment.
  public static let fragmentDefinition: String =
    """
    fragment V3AskProperties on V3Ask {
      __typename
      buyer
      finder
      findersFeeBps
      sellerFundsRecipient
      v3AskStatus
      seller
      address
      askCurrency
      collectionAddress
      askPrice {
        __typename
        ...PriceSummary
      }
    }
    """

  public static let possibleTypes: [String] = ["V3Ask"]

  public static var selections: [GraphQLSelection] {
    return [
      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
      GraphQLField("buyer", type: .scalar(String.self)),
      GraphQLField("finder", type: .scalar(String.self)),
      GraphQLField("findersFeeBps", type: .nonNull(.scalar(Int.self))),
      GraphQLField("sellerFundsRecipient", type: .nonNull(.scalar(String.self))),
      GraphQLField("v3AskStatus", type: .nonNull(.scalar(V3AskStatus.self))),
      GraphQLField("seller", type: .nonNull(.scalar(String.self))),
      GraphQLField("address", type: .nonNull(.scalar(String.self))),
      GraphQLField("askCurrency", type: .nonNull(.scalar(String.self))),
      GraphQLField("collectionAddress", type: .nonNull(.scalar(String.self))),
      GraphQLField("askPrice", type: .nonNull(.object(AskPrice.selections))),
    ]
  }

  public private(set) var resultMap: ResultMap

  public init(unsafeResultMap: ResultMap) {
    self.resultMap = unsafeResultMap
  }

  public init(buyer: String? = nil, finder: String? = nil, findersFeeBps: Int, sellerFundsRecipient: String, v3AskStatus: V3AskStatus, seller: String, address: String, askCurrency: String, collectionAddress: String, askPrice: AskPrice) {
    self.init(unsafeResultMap: ["__typename": "V3Ask", "buyer": buyer, "finder": finder, "findersFeeBps": findersFeeBps, "sellerFundsRecipient": sellerFundsRecipient, "v3AskStatus": v3AskStatus, "seller": seller, "address": address, "askCurrency": askCurrency, "collectionAddress": collectionAddress, "askPrice": askPrice.resultMap])
  }

  public var __typename: String {
    get {
      return resultMap["__typename"]! as! String
    }
    set {
      resultMap.updateValue(newValue, forKey: "__typename")
    }
  }

  public var buyer: String? {
    get {
      return resultMap["buyer"] as? String
    }
    set {
      resultMap.updateValue(newValue, forKey: "buyer")
    }
  }

  public var finder: String? {
    get {
      return resultMap["finder"] as? String
    }
    set {
      resultMap.updateValue(newValue, forKey: "finder")
    }
  }

  public var findersFeeBps: Int {
    get {
      return resultMap["findersFeeBps"]! as! Int
    }
    set {
      resultMap.updateValue(newValue, forKey: "findersFeeBps")
    }
  }

  public var sellerFundsRecipient: String {
    get {
      return resultMap["sellerFundsRecipient"]! as! String
    }
    set {
      resultMap.updateValue(newValue, forKey: "sellerFundsRecipient")
    }
  }

  public var v3AskStatus: V3AskStatus {
    get {
      return resultMap["v3AskStatus"]! as! V3AskStatus
    }
    set {
      resultMap.updateValue(newValue, forKey: "v3AskStatus")
    }
  }

  public var seller: String {
    get {
      return resultMap["seller"]! as! String
    }
    set {
      resultMap.updateValue(newValue, forKey: "seller")
    }
  }

  public var address: String {
    get {
      return resultMap["address"]! as! String
    }
    set {
      resultMap.updateValue(newValue, forKey: "address")
    }
  }

  public var askCurrency: String {
    get {
      return resultMap["askCurrency"]! as! String
    }
    set {
      resultMap.updateValue(newValue, forKey: "askCurrency")
    }
  }

  public var collectionAddress: String {
    get {
      return resultMap["collectionAddress"]! as! String
    }
    set {
      resultMap.updateValue(newValue, forKey: "collectionAddress")
    }
  }

  public var askPrice: AskPrice {
    get {
      return AskPrice(unsafeResultMap: resultMap["askPrice"]! as! ResultMap)
    }
    set {
      resultMap.updateValue(newValue.resultMap, forKey: "askPrice")
    }
  }

  public struct AskPrice: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["PriceAtTime"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
        GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
        GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
        GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
      self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
    }

    public var __typename: String {
      get {
        return resultMap["__typename"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "__typename")
      }
    }

    public var blockNumber: Int {
      get {
        return resultMap["blockNumber"]! as! Int
      }
      set {
        resultMap.updateValue(newValue, forKey: "blockNumber")
      }
    }

    public var chainTokenPrice: ChainTokenPrice? {
      get {
        return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
      }
    }

    public var nativePrice: NativePrice {
      get {
        return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
      }
    }

    public var usdcPrice: UsdcPrice? {
      get {
        return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
      }
    }

    public var fragments: Fragments {
      get {
        return Fragments(unsafeResultMap: resultMap)
      }
      set {
        resultMap += newValue.resultMap
      }
    }

    public struct Fragments {
      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public var priceSummary: PriceSummary {
        get {
          return PriceSummary(unsafeResultMap: resultMap)
        }
        set {
          resultMap += newValue.resultMap
        }
      }
    }

    public struct ChainTokenPrice: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["CurrencyAmount"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
          GraphQLField("raw", type: .nonNull(.scalar(String.self))),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(decimal: Double, raw: String) {
        self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var decimal: Double {
        get {
          return resultMap["decimal"]! as! Double
        }
        set {
          resultMap.updateValue(newValue, forKey: "decimal")
        }
      }

      public var raw: String {
        get {
          return resultMap["raw"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "raw")
        }
      }
    }

    public struct NativePrice: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["CurrencyAmount"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
          GraphQLField("raw", type: .nonNull(.scalar(String.self))),
          GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(decimal: Double, raw: String, currency: Currency) {
        self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var decimal: Double {
        get {
          return resultMap["decimal"]! as! Double
        }
        set {
          resultMap.updateValue(newValue, forKey: "decimal")
        }
      }

      public var raw: String {
        get {
          return resultMap["raw"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "raw")
        }
      }

      public var currency: Currency {
        get {
          return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
        }
        set {
          resultMap.updateValue(newValue.resultMap, forKey: "currency")
        }
      }

      public struct Currency: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["Currency"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("address", type: .nonNull(.scalar(String.self))),
            GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
            GraphQLField("name", type: .nonNull(.scalar(String.self))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(address: String, decimals: Int, name: String) {
          self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var address: String {
          get {
            return resultMap["address"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "address")
          }
        }

        public var decimals: Int {
          get {
            return resultMap["decimals"]! as! Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "decimals")
          }
        }

        public var name: String {
          get {
            return resultMap["name"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "name")
          }
        }
      }
    }

    public struct UsdcPrice: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["CurrencyAmount"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
          GraphQLField("raw", type: .nonNull(.scalar(String.self))),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(decimal: Double, raw: String) {
        self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var decimal: Double {
        get {
          return resultMap["decimal"]! as! Double
        }
        set {
          resultMap.updateValue(newValue, forKey: "decimal")
        }
      }

      public var raw: String {
        get {
          return resultMap["raw"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "raw")
        }
      }
    }
  }
}

public struct V1OfferProperties: GraphQLFragment {
  /// The raw GraphQL definition of this fragment.
  public static let fragmentDefinition: String =
    """
    fragment V1OfferProperties on V1Offer {
      __typename
      v1OfferStatus
      sellOnShare
      bidder
      currency
      amount {
        __typename
        ...PriceSummary
      }
    }
    """

  public static let possibleTypes: [String] = ["V1Offer"]

  public static var selections: [GraphQLSelection] {
    return [
      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
      GraphQLField("v1OfferStatus", type: .nonNull(.scalar(V1MarketEntityStatus.self))),
      GraphQLField("sellOnShare", type: .nonNull(.scalar(String.self))),
      GraphQLField("bidder", type: .nonNull(.scalar(String.self))),
      GraphQLField("currency", type: .nonNull(.scalar(String.self))),
      GraphQLField("amount", type: .nonNull(.object(Amount.selections))),
    ]
  }

  public private(set) var resultMap: ResultMap

  public init(unsafeResultMap: ResultMap) {
    self.resultMap = unsafeResultMap
  }

  public init(v1OfferStatus: V1MarketEntityStatus, sellOnShare: String, bidder: String, currency: String, amount: Amount) {
    self.init(unsafeResultMap: ["__typename": "V1Offer", "v1OfferStatus": v1OfferStatus, "sellOnShare": sellOnShare, "bidder": bidder, "currency": currency, "amount": amount.resultMap])
  }

  public var __typename: String {
    get {
      return resultMap["__typename"]! as! String
    }
    set {
      resultMap.updateValue(newValue, forKey: "__typename")
    }
  }

  public var v1OfferStatus: V1MarketEntityStatus {
    get {
      return resultMap["v1OfferStatus"]! as! V1MarketEntityStatus
    }
    set {
      resultMap.updateValue(newValue, forKey: "v1OfferStatus")
    }
  }

  public var sellOnShare: String {
    get {
      return resultMap["sellOnShare"]! as! String
    }
    set {
      resultMap.updateValue(newValue, forKey: "sellOnShare")
    }
  }

  public var bidder: String {
    get {
      return resultMap["bidder"]! as! String
    }
    set {
      resultMap.updateValue(newValue, forKey: "bidder")
    }
  }

  public var currency: String {
    get {
      return resultMap["currency"]! as! String
    }
    set {
      resultMap.updateValue(newValue, forKey: "currency")
    }
  }

  public var amount: Amount {
    get {
      return Amount(unsafeResultMap: resultMap["amount"]! as! ResultMap)
    }
    set {
      resultMap.updateValue(newValue.resultMap, forKey: "amount")
    }
  }

  public struct Amount: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["PriceAtTime"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
        GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
        GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
        GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
      self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
    }

    public var __typename: String {
      get {
        return resultMap["__typename"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "__typename")
      }
    }

    public var blockNumber: Int {
      get {
        return resultMap["blockNumber"]! as! Int
      }
      set {
        resultMap.updateValue(newValue, forKey: "blockNumber")
      }
    }

    public var chainTokenPrice: ChainTokenPrice? {
      get {
        return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
      }
    }

    public var nativePrice: NativePrice {
      get {
        return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
      }
    }

    public var usdcPrice: UsdcPrice? {
      get {
        return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
      }
    }

    public var fragments: Fragments {
      get {
        return Fragments(unsafeResultMap: resultMap)
      }
      set {
        resultMap += newValue.resultMap
      }
    }

    public struct Fragments {
      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public var priceSummary: PriceSummary {
        get {
          return PriceSummary(unsafeResultMap: resultMap)
        }
        set {
          resultMap += newValue.resultMap
        }
      }
    }

    public struct ChainTokenPrice: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["CurrencyAmount"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
          GraphQLField("raw", type: .nonNull(.scalar(String.self))),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(decimal: Double, raw: String) {
        self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var decimal: Double {
        get {
          return resultMap["decimal"]! as! Double
        }
        set {
          resultMap.updateValue(newValue, forKey: "decimal")
        }
      }

      public var raw: String {
        get {
          return resultMap["raw"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "raw")
        }
      }
    }

    public struct NativePrice: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["CurrencyAmount"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
          GraphQLField("raw", type: .nonNull(.scalar(String.self))),
          GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(decimal: Double, raw: String, currency: Currency) {
        self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var decimal: Double {
        get {
          return resultMap["decimal"]! as! Double
        }
        set {
          resultMap.updateValue(newValue, forKey: "decimal")
        }
      }

      public var raw: String {
        get {
          return resultMap["raw"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "raw")
        }
      }

      public var currency: Currency {
        get {
          return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
        }
        set {
          resultMap.updateValue(newValue.resultMap, forKey: "currency")
        }
      }

      public struct Currency: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["Currency"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("address", type: .nonNull(.scalar(String.self))),
            GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
            GraphQLField("name", type: .nonNull(.scalar(String.self))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(address: String, decimals: Int, name: String) {
          self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var address: String {
          get {
            return resultMap["address"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "address")
          }
        }

        public var decimals: Int {
          get {
            return resultMap["decimals"]! as! Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "decimals")
          }
        }

        public var name: String {
          get {
            return resultMap["name"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "name")
          }
        }
      }
    }

    public struct UsdcPrice: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["CurrencyAmount"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
          GraphQLField("raw", type: .nonNull(.scalar(String.self))),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(decimal: Double, raw: String) {
        self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var decimal: Double {
        get {
          return resultMap["decimal"]! as! Double
        }
        set {
          resultMap.updateValue(newValue, forKey: "decimal")
        }
      }

      public var raw: String {
        get {
          return resultMap["raw"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "raw")
        }
      }
    }
  }
}

public struct V1AskProperties: GraphQLFragment {
  /// The raw GraphQL definition of this fragment.
  public static let fragmentDefinition: String =
    """
    fragment V1AskProperties on V1Ask {
      __typename
      v1AskStatus
      currency
      amount {
        __typename
        ...PriceSummary
      }
    }
    """

  public static let possibleTypes: [String] = ["V1Ask"]

  public static var selections: [GraphQLSelection] {
    return [
      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
      GraphQLField("v1AskStatus", type: .nonNull(.scalar(V1MarketEntityStatus.self))),
      GraphQLField("currency", type: .nonNull(.scalar(String.self))),
      GraphQLField("amount", type: .nonNull(.object(Amount.selections))),
    ]
  }

  public private(set) var resultMap: ResultMap

  public init(unsafeResultMap: ResultMap) {
    self.resultMap = unsafeResultMap
  }

  public init(v1AskStatus: V1MarketEntityStatus, currency: String, amount: Amount) {
    self.init(unsafeResultMap: ["__typename": "V1Ask", "v1AskStatus": v1AskStatus, "currency": currency, "amount": amount.resultMap])
  }

  public var __typename: String {
    get {
      return resultMap["__typename"]! as! String
    }
    set {
      resultMap.updateValue(newValue, forKey: "__typename")
    }
  }

  public var v1AskStatus: V1MarketEntityStatus {
    get {
      return resultMap["v1AskStatus"]! as! V1MarketEntityStatus
    }
    set {
      resultMap.updateValue(newValue, forKey: "v1AskStatus")
    }
  }

  public var currency: String {
    get {
      return resultMap["currency"]! as! String
    }
    set {
      resultMap.updateValue(newValue, forKey: "currency")
    }
  }

  public var amount: Amount {
    get {
      return Amount(unsafeResultMap: resultMap["amount"]! as! ResultMap)
    }
    set {
      resultMap.updateValue(newValue.resultMap, forKey: "amount")
    }
  }

  public struct Amount: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["PriceAtTime"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
        GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
        GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
        GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
      self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
    }

    public var __typename: String {
      get {
        return resultMap["__typename"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "__typename")
      }
    }

    public var blockNumber: Int {
      get {
        return resultMap["blockNumber"]! as! Int
      }
      set {
        resultMap.updateValue(newValue, forKey: "blockNumber")
      }
    }

    public var chainTokenPrice: ChainTokenPrice? {
      get {
        return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
      }
    }

    public var nativePrice: NativePrice {
      get {
        return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
      }
    }

    public var usdcPrice: UsdcPrice? {
      get {
        return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
      }
    }

    public var fragments: Fragments {
      get {
        return Fragments(unsafeResultMap: resultMap)
      }
      set {
        resultMap += newValue.resultMap
      }
    }

    public struct Fragments {
      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public var priceSummary: PriceSummary {
        get {
          return PriceSummary(unsafeResultMap: resultMap)
        }
        set {
          resultMap += newValue.resultMap
        }
      }
    }

    public struct ChainTokenPrice: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["CurrencyAmount"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
          GraphQLField("raw", type: .nonNull(.scalar(String.self))),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(decimal: Double, raw: String) {
        self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var decimal: Double {
        get {
          return resultMap["decimal"]! as! Double
        }
        set {
          resultMap.updateValue(newValue, forKey: "decimal")
        }
      }

      public var raw: String {
        get {
          return resultMap["raw"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "raw")
        }
      }
    }

    public struct NativePrice: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["CurrencyAmount"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
          GraphQLField("raw", type: .nonNull(.scalar(String.self))),
          GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(decimal: Double, raw: String, currency: Currency) {
        self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var decimal: Double {
        get {
          return resultMap["decimal"]! as! Double
        }
        set {
          resultMap.updateValue(newValue, forKey: "decimal")
        }
      }

      public var raw: String {
        get {
          return resultMap["raw"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "raw")
        }
      }

      public var currency: Currency {
        get {
          return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
        }
        set {
          resultMap.updateValue(newValue.resultMap, forKey: "currency")
        }
      }

      public struct Currency: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["Currency"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("address", type: .nonNull(.scalar(String.self))),
            GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
            GraphQLField("name", type: .nonNull(.scalar(String.self))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(address: String, decimals: Int, name: String) {
          self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var address: String {
          get {
            return resultMap["address"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "address")
          }
        }

        public var decimals: Int {
          get {
            return resultMap["decimals"]! as! Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "decimals")
          }
        }

        public var name: String {
          get {
            return resultMap["name"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "name")
          }
        }
      }
    }

    public struct UsdcPrice: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["CurrencyAmount"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
          GraphQLField("raw", type: .nonNull(.scalar(String.self))),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(decimal: Double, raw: String) {
        self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var decimal: Double {
        get {
          return resultMap["decimal"]! as! Double
        }
        set {
          resultMap.updateValue(newValue, forKey: "decimal")
        }
      }

      public var raw: String {
        get {
          return resultMap["raw"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "raw")
        }
      }
    }
  }
}

public struct MarketPropertiesFull: GraphQLFragment {
  /// The raw GraphQL definition of this fragment.
  public static let fragmentDefinition: String =
    """
    fragment MarketPropertiesFull on MarketProperties {
      __typename
      ...V2AuctionMarketProperties
      ...V3AskProperties
      ...V1OfferProperties
      ...V1AskProperties
    }
    """

  public static let possibleTypes: [String] = ["V1Ask", "V1Offer", "V1BidShare", "V2Auction", "V3Ask"]

  public static var selections: [GraphQLSelection] {
    return [
      GraphQLTypeCase(
        variants: ["V2Auction": AsV2Auction.selections, "V3Ask": AsV3Ask.selections, "V1Offer": AsV1Offer.selections, "V1Ask": AsV1Ask.selections],
        default: [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        ]
      )
    ]
  }

  public private(set) var resultMap: ResultMap

  public init(unsafeResultMap: ResultMap) {
    self.resultMap = unsafeResultMap
  }

  public static func makeV1BidShare() -> MarketPropertiesFull {
    return MarketPropertiesFull(unsafeResultMap: ["__typename": "V1BidShare"])
  }

  public static func makeV2Auction(firstBidTime: String? = nil, highestBidder: String? = nil, curator: String, collectionAddress: String, curatorFeePercentage: Int, tokenId: String, auctionCurrency: String, duration: String, estimatedExpirationTime: String? = nil, v2AuctionStatus: V2AuctionStatus, tokenOwner: String, address: String, auctionId: String, approved: Bool, reservePrice: AsV2Auction.ReservePrice, highestBidPrice: AsV2Auction.HighestBidPrice? = nil) -> MarketPropertiesFull {
    return MarketPropertiesFull(unsafeResultMap: ["__typename": "V2Auction", "firstBidTime": firstBidTime, "highestBidder": highestBidder, "curator": curator, "collectionAddress": collectionAddress, "curatorFeePercentage": curatorFeePercentage, "tokenId": tokenId, "auctionCurrency": auctionCurrency, "duration": duration, "estimatedExpirationTime": estimatedExpirationTime, "v2AuctionStatus": v2AuctionStatus, "tokenOwner": tokenOwner, "address": address, "auctionId": auctionId, "approved": approved, "reservePrice": reservePrice.resultMap, "highestBidPrice": highestBidPrice.flatMap { (value: AsV2Auction.HighestBidPrice) -> ResultMap in value.resultMap }])
  }

  public static func makeV3Ask(buyer: String? = nil, finder: String? = nil, findersFeeBps: Int, sellerFundsRecipient: String, v3AskStatus: V3AskStatus, seller: String, address: String, askCurrency: String, collectionAddress: String, askPrice: AsV3Ask.AskPrice) -> MarketPropertiesFull {
    return MarketPropertiesFull(unsafeResultMap: ["__typename": "V3Ask", "buyer": buyer, "finder": finder, "findersFeeBps": findersFeeBps, "sellerFundsRecipient": sellerFundsRecipient, "v3AskStatus": v3AskStatus, "seller": seller, "address": address, "askCurrency": askCurrency, "collectionAddress": collectionAddress, "askPrice": askPrice.resultMap])
  }

  public static func makeV1Offer(v1OfferStatus: V1MarketEntityStatus, sellOnShare: String, bidder: String, currency: String, amount: AsV1Offer.Amount) -> MarketPropertiesFull {
    return MarketPropertiesFull(unsafeResultMap: ["__typename": "V1Offer", "v1OfferStatus": v1OfferStatus, "sellOnShare": sellOnShare, "bidder": bidder, "currency": currency, "amount": amount.resultMap])
  }

  public static func makeV1Ask(v1AskStatus: V1MarketEntityStatus, currency: String, amount: AsV1Ask.Amount) -> MarketPropertiesFull {
    return MarketPropertiesFull(unsafeResultMap: ["__typename": "V1Ask", "v1AskStatus": v1AskStatus, "currency": currency, "amount": amount.resultMap])
  }

  public var __typename: String {
    get {
      return resultMap["__typename"]! as! String
    }
    set {
      resultMap.updateValue(newValue, forKey: "__typename")
    }
  }

  public var fragments: Fragments {
    get {
      return Fragments(unsafeResultMap: resultMap)
    }
    set {
      resultMap += newValue.resultMap
    }
  }

  public struct Fragments {
    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public var v2AuctionMarketProperties: V2AuctionMarketProperties? {
      get {
        if !V2AuctionMarketProperties.possibleTypes.contains(resultMap["__typename"]! as! String) { return nil }
        return V2AuctionMarketProperties(unsafeResultMap: resultMap)
      }
      set {
        guard let newValue = newValue else { return }
        resultMap += newValue.resultMap
      }
    }

    public var v3AskProperties: V3AskProperties? {
      get {
        if !V3AskProperties.possibleTypes.contains(resultMap["__typename"]! as! String) { return nil }
        return V3AskProperties(unsafeResultMap: resultMap)
      }
      set {
        guard let newValue = newValue else { return }
        resultMap += newValue.resultMap
      }
    }

    public var v1OfferProperties: V1OfferProperties? {
      get {
        if !V1OfferProperties.possibleTypes.contains(resultMap["__typename"]! as! String) { return nil }
        return V1OfferProperties(unsafeResultMap: resultMap)
      }
      set {
        guard let newValue = newValue else { return }
        resultMap += newValue.resultMap
      }
    }

    public var v1AskProperties: V1AskProperties? {
      get {
        if !V1AskProperties.possibleTypes.contains(resultMap["__typename"]! as! String) { return nil }
        return V1AskProperties(unsafeResultMap: resultMap)
      }
      set {
        guard let newValue = newValue else { return }
        resultMap += newValue.resultMap
      }
    }
  }

  public var asV2Auction: AsV2Auction? {
    get {
      if !AsV2Auction.possibleTypes.contains(__typename) { return nil }
      return AsV2Auction(unsafeResultMap: resultMap)
    }
    set {
      guard let newValue = newValue else { return }
      resultMap = newValue.resultMap
    }
  }

  public struct AsV2Auction: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["V2Auction"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("firstBidTime", type: .scalar(String.self)),
        GraphQLField("highestBidder", type: .scalar(String.self)),
        GraphQLField("curator", type: .nonNull(.scalar(String.self))),
        GraphQLField("collectionAddress", type: .nonNull(.scalar(String.self))),
        GraphQLField("curatorFeePercentage", type: .nonNull(.scalar(Int.self))),
        GraphQLField("tokenId", type: .nonNull(.scalar(String.self))),
        GraphQLField("auctionCurrency", type: .nonNull(.scalar(String.self))),
        GraphQLField("duration", type: .nonNull(.scalar(String.self))),
        GraphQLField("estimatedExpirationTime", type: .scalar(String.self)),
        GraphQLField("v2AuctionStatus", type: .nonNull(.scalar(V2AuctionStatus.self))),
        GraphQLField("tokenOwner", type: .nonNull(.scalar(String.self))),
        GraphQLField("address", type: .nonNull(.scalar(String.self))),
        GraphQLField("auctionId", type: .nonNull(.scalar(String.self))),
        GraphQLField("approved", type: .nonNull(.scalar(Bool.self))),
        GraphQLField("reservePrice", type: .nonNull(.object(ReservePrice.selections))),
        GraphQLField("highestBidPrice", type: .object(HighestBidPrice.selections)),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(firstBidTime: String? = nil, highestBidder: String? = nil, curator: String, collectionAddress: String, curatorFeePercentage: Int, tokenId: String, auctionCurrency: String, duration: String, estimatedExpirationTime: String? = nil, v2AuctionStatus: V2AuctionStatus, tokenOwner: String, address: String, auctionId: String, approved: Bool, reservePrice: ReservePrice, highestBidPrice: HighestBidPrice? = nil) {
      self.init(unsafeResultMap: ["__typename": "V2Auction", "firstBidTime": firstBidTime, "highestBidder": highestBidder, "curator": curator, "collectionAddress": collectionAddress, "curatorFeePercentage": curatorFeePercentage, "tokenId": tokenId, "auctionCurrency": auctionCurrency, "duration": duration, "estimatedExpirationTime": estimatedExpirationTime, "v2AuctionStatus": v2AuctionStatus, "tokenOwner": tokenOwner, "address": address, "auctionId": auctionId, "approved": approved, "reservePrice": reservePrice.resultMap, "highestBidPrice": highestBidPrice.flatMap { (value: HighestBidPrice) -> ResultMap in value.resultMap }])
    }

    public var __typename: String {
      get {
        return resultMap["__typename"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "__typename")
      }
    }

    public var firstBidTime: String? {
      get {
        return resultMap["firstBidTime"] as? String
      }
      set {
        resultMap.updateValue(newValue, forKey: "firstBidTime")
      }
    }

    public var highestBidder: String? {
      get {
        return resultMap["highestBidder"] as? String
      }
      set {
        resultMap.updateValue(newValue, forKey: "highestBidder")
      }
    }

    public var curator: String {
      get {
        return resultMap["curator"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "curator")
      }
    }

    public var collectionAddress: String {
      get {
        return resultMap["collectionAddress"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "collectionAddress")
      }
    }

    public var curatorFeePercentage: Int {
      get {
        return resultMap["curatorFeePercentage"]! as! Int
      }
      set {
        resultMap.updateValue(newValue, forKey: "curatorFeePercentage")
      }
    }

    public var tokenId: String {
      get {
        return resultMap["tokenId"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "tokenId")
      }
    }

    public var auctionCurrency: String {
      get {
        return resultMap["auctionCurrency"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "auctionCurrency")
      }
    }

    public var duration: String {
      get {
        return resultMap["duration"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "duration")
      }
    }

    public var estimatedExpirationTime: String? {
      get {
        return resultMap["estimatedExpirationTime"] as? String
      }
      set {
        resultMap.updateValue(newValue, forKey: "estimatedExpirationTime")
      }
    }

    public var v2AuctionStatus: V2AuctionStatus {
      get {
        return resultMap["v2AuctionStatus"]! as! V2AuctionStatus
      }
      set {
        resultMap.updateValue(newValue, forKey: "v2AuctionStatus")
      }
    }

    public var tokenOwner: String {
      get {
        return resultMap["tokenOwner"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "tokenOwner")
      }
    }

    public var address: String {
      get {
        return resultMap["address"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "address")
      }
    }

    public var auctionId: String {
      get {
        return resultMap["auctionId"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "auctionId")
      }
    }

    public var approved: Bool {
      get {
        return resultMap["approved"]! as! Bool
      }
      set {
        resultMap.updateValue(newValue, forKey: "approved")
      }
    }

    public var reservePrice: ReservePrice {
      get {
        return ReservePrice(unsafeResultMap: resultMap["reservePrice"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "reservePrice")
      }
    }

    public var highestBidPrice: HighestBidPrice? {
      get {
        return (resultMap["highestBidPrice"] as? ResultMap).flatMap { HighestBidPrice(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "highestBidPrice")
      }
    }

    public var fragments: Fragments {
      get {
        return Fragments(unsafeResultMap: resultMap)
      }
      set {
        resultMap += newValue.resultMap
      }
    }

    public struct Fragments {
      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public var v2AuctionMarketProperties: V2AuctionMarketProperties {
        get {
          return V2AuctionMarketProperties(unsafeResultMap: resultMap)
        }
        set {
          resultMap += newValue.resultMap
        }
      }

      public var v3AskProperties: V3AskProperties? {
        get {
          if !V3AskProperties.possibleTypes.contains(resultMap["__typename"]! as! String) { return nil }
          return V3AskProperties(unsafeResultMap: resultMap)
        }
        set {
          guard let newValue = newValue else { return }
          resultMap += newValue.resultMap
        }
      }

      public var v1OfferProperties: V1OfferProperties? {
        get {
          if !V1OfferProperties.possibleTypes.contains(resultMap["__typename"]! as! String) { return nil }
          return V1OfferProperties(unsafeResultMap: resultMap)
        }
        set {
          guard let newValue = newValue else { return }
          resultMap += newValue.resultMap
        }
      }

      public var v1AskProperties: V1AskProperties? {
        get {
          if !V1AskProperties.possibleTypes.contains(resultMap["__typename"]! as! String) { return nil }
          return V1AskProperties(unsafeResultMap: resultMap)
        }
        set {
          guard let newValue = newValue else { return }
          resultMap += newValue.resultMap
        }
      }
    }

    public struct ReservePrice: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["PriceAtTime"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
          GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
          GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
          GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
        self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var blockNumber: Int {
        get {
          return resultMap["blockNumber"]! as! Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "blockNumber")
        }
      }

      public var chainTokenPrice: ChainTokenPrice? {
        get {
          return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
        }
      }

      public var nativePrice: NativePrice {
        get {
          return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
        }
        set {
          resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
        }
      }

      public var usdcPrice: UsdcPrice? {
        get {
          return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
        }
      }

      public var fragments: Fragments {
        get {
          return Fragments(unsafeResultMap: resultMap)
        }
        set {
          resultMap += newValue.resultMap
        }
      }

      public struct Fragments {
        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public var priceSummary: PriceSummary {
          get {
            return PriceSummary(unsafeResultMap: resultMap)
          }
          set {
            resultMap += newValue.resultMap
          }
        }
      }

      public struct ChainTokenPrice: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["CurrencyAmount"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
            GraphQLField("raw", type: .nonNull(.scalar(String.self))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(decimal: Double, raw: String) {
          self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var decimal: Double {
          get {
            return resultMap["decimal"]! as! Double
          }
          set {
            resultMap.updateValue(newValue, forKey: "decimal")
          }
        }

        public var raw: String {
          get {
            return resultMap["raw"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "raw")
          }
        }
      }

      public struct NativePrice: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["CurrencyAmount"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
            GraphQLField("raw", type: .nonNull(.scalar(String.self))),
            GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(decimal: Double, raw: String, currency: Currency) {
          self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var decimal: Double {
          get {
            return resultMap["decimal"]! as! Double
          }
          set {
            resultMap.updateValue(newValue, forKey: "decimal")
          }
        }

        public var raw: String {
          get {
            return resultMap["raw"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "raw")
          }
        }

        public var currency: Currency {
          get {
            return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
          }
          set {
            resultMap.updateValue(newValue.resultMap, forKey: "currency")
          }
        }

        public struct Currency: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["Currency"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("address", type: .nonNull(.scalar(String.self))),
              GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(address: String, decimals: Int, name: String) {
            self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var address: String {
            get {
              return resultMap["address"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "address")
            }
          }

          public var decimals: Int {
            get {
              return resultMap["decimals"]! as! Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "decimals")
            }
          }

          public var name: String {
            get {
              return resultMap["name"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "name")
            }
          }
        }
      }

      public struct UsdcPrice: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["CurrencyAmount"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
            GraphQLField("raw", type: .nonNull(.scalar(String.self))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(decimal: Double, raw: String) {
          self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var decimal: Double {
          get {
            return resultMap["decimal"]! as! Double
          }
          set {
            resultMap.updateValue(newValue, forKey: "decimal")
          }
        }

        public var raw: String {
          get {
            return resultMap["raw"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "raw")
          }
        }
      }
    }

    public struct HighestBidPrice: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["PriceAtTime"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
          GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
          GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
          GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
        self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var blockNumber: Int {
        get {
          return resultMap["blockNumber"]! as! Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "blockNumber")
        }
      }

      public var chainTokenPrice: ChainTokenPrice? {
        get {
          return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
        }
      }

      public var nativePrice: NativePrice {
        get {
          return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
        }
        set {
          resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
        }
      }

      public var usdcPrice: UsdcPrice? {
        get {
          return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
        }
      }

      public var fragments: Fragments {
        get {
          return Fragments(unsafeResultMap: resultMap)
        }
        set {
          resultMap += newValue.resultMap
        }
      }

      public struct Fragments {
        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public var priceSummary: PriceSummary {
          get {
            return PriceSummary(unsafeResultMap: resultMap)
          }
          set {
            resultMap += newValue.resultMap
          }
        }
      }

      public struct ChainTokenPrice: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["CurrencyAmount"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
            GraphQLField("raw", type: .nonNull(.scalar(String.self))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(decimal: Double, raw: String) {
          self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var decimal: Double {
          get {
            return resultMap["decimal"]! as! Double
          }
          set {
            resultMap.updateValue(newValue, forKey: "decimal")
          }
        }

        public var raw: String {
          get {
            return resultMap["raw"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "raw")
          }
        }
      }

      public struct NativePrice: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["CurrencyAmount"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
            GraphQLField("raw", type: .nonNull(.scalar(String.self))),
            GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(decimal: Double, raw: String, currency: Currency) {
          self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var decimal: Double {
          get {
            return resultMap["decimal"]! as! Double
          }
          set {
            resultMap.updateValue(newValue, forKey: "decimal")
          }
        }

        public var raw: String {
          get {
            return resultMap["raw"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "raw")
          }
        }

        public var currency: Currency {
          get {
            return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
          }
          set {
            resultMap.updateValue(newValue.resultMap, forKey: "currency")
          }
        }

        public struct Currency: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["Currency"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("address", type: .nonNull(.scalar(String.self))),
              GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(address: String, decimals: Int, name: String) {
            self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var address: String {
            get {
              return resultMap["address"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "address")
            }
          }

          public var decimals: Int {
            get {
              return resultMap["decimals"]! as! Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "decimals")
            }
          }

          public var name: String {
            get {
              return resultMap["name"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "name")
            }
          }
        }
      }

      public struct UsdcPrice: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["CurrencyAmount"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
            GraphQLField("raw", type: .nonNull(.scalar(String.self))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(decimal: Double, raw: String) {
          self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var decimal: Double {
          get {
            return resultMap["decimal"]! as! Double
          }
          set {
            resultMap.updateValue(newValue, forKey: "decimal")
          }
        }

        public var raw: String {
          get {
            return resultMap["raw"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "raw")
          }
        }
      }
    }
  }

  public var asV3Ask: AsV3Ask? {
    get {
      if !AsV3Ask.possibleTypes.contains(__typename) { return nil }
      return AsV3Ask(unsafeResultMap: resultMap)
    }
    set {
      guard let newValue = newValue else { return }
      resultMap = newValue.resultMap
    }
  }

  public struct AsV3Ask: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["V3Ask"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("buyer", type: .scalar(String.self)),
        GraphQLField("finder", type: .scalar(String.self)),
        GraphQLField("findersFeeBps", type: .nonNull(.scalar(Int.self))),
        GraphQLField("sellerFundsRecipient", type: .nonNull(.scalar(String.self))),
        GraphQLField("v3AskStatus", type: .nonNull(.scalar(V3AskStatus.self))),
        GraphQLField("seller", type: .nonNull(.scalar(String.self))),
        GraphQLField("address", type: .nonNull(.scalar(String.self))),
        GraphQLField("askCurrency", type: .nonNull(.scalar(String.self))),
        GraphQLField("collectionAddress", type: .nonNull(.scalar(String.self))),
        GraphQLField("askPrice", type: .nonNull(.object(AskPrice.selections))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(buyer: String? = nil, finder: String? = nil, findersFeeBps: Int, sellerFundsRecipient: String, v3AskStatus: V3AskStatus, seller: String, address: String, askCurrency: String, collectionAddress: String, askPrice: AskPrice) {
      self.init(unsafeResultMap: ["__typename": "V3Ask", "buyer": buyer, "finder": finder, "findersFeeBps": findersFeeBps, "sellerFundsRecipient": sellerFundsRecipient, "v3AskStatus": v3AskStatus, "seller": seller, "address": address, "askCurrency": askCurrency, "collectionAddress": collectionAddress, "askPrice": askPrice.resultMap])
    }

    public var __typename: String {
      get {
        return resultMap["__typename"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "__typename")
      }
    }

    public var buyer: String? {
      get {
        return resultMap["buyer"] as? String
      }
      set {
        resultMap.updateValue(newValue, forKey: "buyer")
      }
    }

    public var finder: String? {
      get {
        return resultMap["finder"] as? String
      }
      set {
        resultMap.updateValue(newValue, forKey: "finder")
      }
    }

    public var findersFeeBps: Int {
      get {
        return resultMap["findersFeeBps"]! as! Int
      }
      set {
        resultMap.updateValue(newValue, forKey: "findersFeeBps")
      }
    }

    public var sellerFundsRecipient: String {
      get {
        return resultMap["sellerFundsRecipient"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "sellerFundsRecipient")
      }
    }

    public var v3AskStatus: V3AskStatus {
      get {
        return resultMap["v3AskStatus"]! as! V3AskStatus
      }
      set {
        resultMap.updateValue(newValue, forKey: "v3AskStatus")
      }
    }

    public var seller: String {
      get {
        return resultMap["seller"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "seller")
      }
    }

    public var address: String {
      get {
        return resultMap["address"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "address")
      }
    }

    public var askCurrency: String {
      get {
        return resultMap["askCurrency"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "askCurrency")
      }
    }

    public var collectionAddress: String {
      get {
        return resultMap["collectionAddress"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "collectionAddress")
      }
    }

    public var askPrice: AskPrice {
      get {
        return AskPrice(unsafeResultMap: resultMap["askPrice"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "askPrice")
      }
    }

    public var fragments: Fragments {
      get {
        return Fragments(unsafeResultMap: resultMap)
      }
      set {
        resultMap += newValue.resultMap
      }
    }

    public struct Fragments {
      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public var v2AuctionMarketProperties: V2AuctionMarketProperties? {
        get {
          if !V2AuctionMarketProperties.possibleTypes.contains(resultMap["__typename"]! as! String) { return nil }
          return V2AuctionMarketProperties(unsafeResultMap: resultMap)
        }
        set {
          guard let newValue = newValue else { return }
          resultMap += newValue.resultMap
        }
      }

      public var v3AskProperties: V3AskProperties {
        get {
          return V3AskProperties(unsafeResultMap: resultMap)
        }
        set {
          resultMap += newValue.resultMap
        }
      }

      public var v1OfferProperties: V1OfferProperties? {
        get {
          if !V1OfferProperties.possibleTypes.contains(resultMap["__typename"]! as! String) { return nil }
          return V1OfferProperties(unsafeResultMap: resultMap)
        }
        set {
          guard let newValue = newValue else { return }
          resultMap += newValue.resultMap
        }
      }

      public var v1AskProperties: V1AskProperties? {
        get {
          if !V1AskProperties.possibleTypes.contains(resultMap["__typename"]! as! String) { return nil }
          return V1AskProperties(unsafeResultMap: resultMap)
        }
        set {
          guard let newValue = newValue else { return }
          resultMap += newValue.resultMap
        }
      }
    }

    public struct AskPrice: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["PriceAtTime"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
          GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
          GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
          GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
        self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var blockNumber: Int {
        get {
          return resultMap["blockNumber"]! as! Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "blockNumber")
        }
      }

      public var chainTokenPrice: ChainTokenPrice? {
        get {
          return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
        }
      }

      public var nativePrice: NativePrice {
        get {
          return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
        }
        set {
          resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
        }
      }

      public var usdcPrice: UsdcPrice? {
        get {
          return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
        }
      }

      public var fragments: Fragments {
        get {
          return Fragments(unsafeResultMap: resultMap)
        }
        set {
          resultMap += newValue.resultMap
        }
      }

      public struct Fragments {
        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public var priceSummary: PriceSummary {
          get {
            return PriceSummary(unsafeResultMap: resultMap)
          }
          set {
            resultMap += newValue.resultMap
          }
        }
      }

      public struct ChainTokenPrice: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["CurrencyAmount"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
            GraphQLField("raw", type: .nonNull(.scalar(String.self))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(decimal: Double, raw: String) {
          self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var decimal: Double {
          get {
            return resultMap["decimal"]! as! Double
          }
          set {
            resultMap.updateValue(newValue, forKey: "decimal")
          }
        }

        public var raw: String {
          get {
            return resultMap["raw"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "raw")
          }
        }
      }

      public struct NativePrice: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["CurrencyAmount"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
            GraphQLField("raw", type: .nonNull(.scalar(String.self))),
            GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(decimal: Double, raw: String, currency: Currency) {
          self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var decimal: Double {
          get {
            return resultMap["decimal"]! as! Double
          }
          set {
            resultMap.updateValue(newValue, forKey: "decimal")
          }
        }

        public var raw: String {
          get {
            return resultMap["raw"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "raw")
          }
        }

        public var currency: Currency {
          get {
            return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
          }
          set {
            resultMap.updateValue(newValue.resultMap, forKey: "currency")
          }
        }

        public struct Currency: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["Currency"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("address", type: .nonNull(.scalar(String.self))),
              GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(address: String, decimals: Int, name: String) {
            self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var address: String {
            get {
              return resultMap["address"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "address")
            }
          }

          public var decimals: Int {
            get {
              return resultMap["decimals"]! as! Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "decimals")
            }
          }

          public var name: String {
            get {
              return resultMap["name"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "name")
            }
          }
        }
      }

      public struct UsdcPrice: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["CurrencyAmount"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
            GraphQLField("raw", type: .nonNull(.scalar(String.self))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(decimal: Double, raw: String) {
          self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var decimal: Double {
          get {
            return resultMap["decimal"]! as! Double
          }
          set {
            resultMap.updateValue(newValue, forKey: "decimal")
          }
        }

        public var raw: String {
          get {
            return resultMap["raw"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "raw")
          }
        }
      }
    }
  }

  public var asV1Offer: AsV1Offer? {
    get {
      if !AsV1Offer.possibleTypes.contains(__typename) { return nil }
      return AsV1Offer(unsafeResultMap: resultMap)
    }
    set {
      guard let newValue = newValue else { return }
      resultMap = newValue.resultMap
    }
  }

  public struct AsV1Offer: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["V1Offer"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("v1OfferStatus", type: .nonNull(.scalar(V1MarketEntityStatus.self))),
        GraphQLField("sellOnShare", type: .nonNull(.scalar(String.self))),
        GraphQLField("bidder", type: .nonNull(.scalar(String.self))),
        GraphQLField("currency", type: .nonNull(.scalar(String.self))),
        GraphQLField("amount", type: .nonNull(.object(Amount.selections))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(v1OfferStatus: V1MarketEntityStatus, sellOnShare: String, bidder: String, currency: String, amount: Amount) {
      self.init(unsafeResultMap: ["__typename": "V1Offer", "v1OfferStatus": v1OfferStatus, "sellOnShare": sellOnShare, "bidder": bidder, "currency": currency, "amount": amount.resultMap])
    }

    public var __typename: String {
      get {
        return resultMap["__typename"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "__typename")
      }
    }

    public var v1OfferStatus: V1MarketEntityStatus {
      get {
        return resultMap["v1OfferStatus"]! as! V1MarketEntityStatus
      }
      set {
        resultMap.updateValue(newValue, forKey: "v1OfferStatus")
      }
    }

    public var sellOnShare: String {
      get {
        return resultMap["sellOnShare"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "sellOnShare")
      }
    }

    public var bidder: String {
      get {
        return resultMap["bidder"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "bidder")
      }
    }

    public var currency: String {
      get {
        return resultMap["currency"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "currency")
      }
    }

    public var amount: Amount {
      get {
        return Amount(unsafeResultMap: resultMap["amount"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "amount")
      }
    }

    public var fragments: Fragments {
      get {
        return Fragments(unsafeResultMap: resultMap)
      }
      set {
        resultMap += newValue.resultMap
      }
    }

    public struct Fragments {
      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public var v2AuctionMarketProperties: V2AuctionMarketProperties? {
        get {
          if !V2AuctionMarketProperties.possibleTypes.contains(resultMap["__typename"]! as! String) { return nil }
          return V2AuctionMarketProperties(unsafeResultMap: resultMap)
        }
        set {
          guard let newValue = newValue else { return }
          resultMap += newValue.resultMap
        }
      }

      public var v3AskProperties: V3AskProperties? {
        get {
          if !V3AskProperties.possibleTypes.contains(resultMap["__typename"]! as! String) { return nil }
          return V3AskProperties(unsafeResultMap: resultMap)
        }
        set {
          guard let newValue = newValue else { return }
          resultMap += newValue.resultMap
        }
      }

      public var v1OfferProperties: V1OfferProperties {
        get {
          return V1OfferProperties(unsafeResultMap: resultMap)
        }
        set {
          resultMap += newValue.resultMap
        }
      }

      public var v1AskProperties: V1AskProperties? {
        get {
          if !V1AskProperties.possibleTypes.contains(resultMap["__typename"]! as! String) { return nil }
          return V1AskProperties(unsafeResultMap: resultMap)
        }
        set {
          guard let newValue = newValue else { return }
          resultMap += newValue.resultMap
        }
      }
    }

    public struct Amount: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["PriceAtTime"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
          GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
          GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
          GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
        self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var blockNumber: Int {
        get {
          return resultMap["blockNumber"]! as! Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "blockNumber")
        }
      }

      public var chainTokenPrice: ChainTokenPrice? {
        get {
          return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
        }
      }

      public var nativePrice: NativePrice {
        get {
          return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
        }
        set {
          resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
        }
      }

      public var usdcPrice: UsdcPrice? {
        get {
          return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
        }
      }

      public var fragments: Fragments {
        get {
          return Fragments(unsafeResultMap: resultMap)
        }
        set {
          resultMap += newValue.resultMap
        }
      }

      public struct Fragments {
        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public var priceSummary: PriceSummary {
          get {
            return PriceSummary(unsafeResultMap: resultMap)
          }
          set {
            resultMap += newValue.resultMap
          }
        }
      }

      public struct ChainTokenPrice: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["CurrencyAmount"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
            GraphQLField("raw", type: .nonNull(.scalar(String.self))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(decimal: Double, raw: String) {
          self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var decimal: Double {
          get {
            return resultMap["decimal"]! as! Double
          }
          set {
            resultMap.updateValue(newValue, forKey: "decimal")
          }
        }

        public var raw: String {
          get {
            return resultMap["raw"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "raw")
          }
        }
      }

      public struct NativePrice: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["CurrencyAmount"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
            GraphQLField("raw", type: .nonNull(.scalar(String.self))),
            GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(decimal: Double, raw: String, currency: Currency) {
          self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var decimal: Double {
          get {
            return resultMap["decimal"]! as! Double
          }
          set {
            resultMap.updateValue(newValue, forKey: "decimal")
          }
        }

        public var raw: String {
          get {
            return resultMap["raw"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "raw")
          }
        }

        public var currency: Currency {
          get {
            return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
          }
          set {
            resultMap.updateValue(newValue.resultMap, forKey: "currency")
          }
        }

        public struct Currency: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["Currency"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("address", type: .nonNull(.scalar(String.self))),
              GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(address: String, decimals: Int, name: String) {
            self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var address: String {
            get {
              return resultMap["address"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "address")
            }
          }

          public var decimals: Int {
            get {
              return resultMap["decimals"]! as! Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "decimals")
            }
          }

          public var name: String {
            get {
              return resultMap["name"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "name")
            }
          }
        }
      }

      public struct UsdcPrice: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["CurrencyAmount"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
            GraphQLField("raw", type: .nonNull(.scalar(String.self))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(decimal: Double, raw: String) {
          self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var decimal: Double {
          get {
            return resultMap["decimal"]! as! Double
          }
          set {
            resultMap.updateValue(newValue, forKey: "decimal")
          }
        }

        public var raw: String {
          get {
            return resultMap["raw"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "raw")
          }
        }
      }
    }
  }

  public var asV1Ask: AsV1Ask? {
    get {
      if !AsV1Ask.possibleTypes.contains(__typename) { return nil }
      return AsV1Ask(unsafeResultMap: resultMap)
    }
    set {
      guard let newValue = newValue else { return }
      resultMap = newValue.resultMap
    }
  }

  public struct AsV1Ask: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["V1Ask"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("v1AskStatus", type: .nonNull(.scalar(V1MarketEntityStatus.self))),
        GraphQLField("currency", type: .nonNull(.scalar(String.self))),
        GraphQLField("amount", type: .nonNull(.object(Amount.selections))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(v1AskStatus: V1MarketEntityStatus, currency: String, amount: Amount) {
      self.init(unsafeResultMap: ["__typename": "V1Ask", "v1AskStatus": v1AskStatus, "currency": currency, "amount": amount.resultMap])
    }

    public var __typename: String {
      get {
        return resultMap["__typename"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "__typename")
      }
    }

    public var v1AskStatus: V1MarketEntityStatus {
      get {
        return resultMap["v1AskStatus"]! as! V1MarketEntityStatus
      }
      set {
        resultMap.updateValue(newValue, forKey: "v1AskStatus")
      }
    }

    public var currency: String {
      get {
        return resultMap["currency"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "currency")
      }
    }

    public var amount: Amount {
      get {
        return Amount(unsafeResultMap: resultMap["amount"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "amount")
      }
    }

    public var fragments: Fragments {
      get {
        return Fragments(unsafeResultMap: resultMap)
      }
      set {
        resultMap += newValue.resultMap
      }
    }

    public struct Fragments {
      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public var v2AuctionMarketProperties: V2AuctionMarketProperties? {
        get {
          if !V2AuctionMarketProperties.possibleTypes.contains(resultMap["__typename"]! as! String) { return nil }
          return V2AuctionMarketProperties(unsafeResultMap: resultMap)
        }
        set {
          guard let newValue = newValue else { return }
          resultMap += newValue.resultMap
        }
      }

      public var v3AskProperties: V3AskProperties? {
        get {
          if !V3AskProperties.possibleTypes.contains(resultMap["__typename"]! as! String) { return nil }
          return V3AskProperties(unsafeResultMap: resultMap)
        }
        set {
          guard let newValue = newValue else { return }
          resultMap += newValue.resultMap
        }
      }

      public var v1OfferProperties: V1OfferProperties? {
        get {
          if !V1OfferProperties.possibleTypes.contains(resultMap["__typename"]! as! String) { return nil }
          return V1OfferProperties(unsafeResultMap: resultMap)
        }
        set {
          guard let newValue = newValue else { return }
          resultMap += newValue.resultMap
        }
      }

      public var v1AskProperties: V1AskProperties {
        get {
          return V1AskProperties(unsafeResultMap: resultMap)
        }
        set {
          resultMap += newValue.resultMap
        }
      }
    }

    public struct Amount: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["PriceAtTime"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
          GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
          GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
          GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
        self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var blockNumber: Int {
        get {
          return resultMap["blockNumber"]! as! Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "blockNumber")
        }
      }

      public var chainTokenPrice: ChainTokenPrice? {
        get {
          return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
        }
      }

      public var nativePrice: NativePrice {
        get {
          return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
        }
        set {
          resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
        }
      }

      public var usdcPrice: UsdcPrice? {
        get {
          return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
        }
      }

      public var fragments: Fragments {
        get {
          return Fragments(unsafeResultMap: resultMap)
        }
        set {
          resultMap += newValue.resultMap
        }
      }

      public struct Fragments {
        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public var priceSummary: PriceSummary {
          get {
            return PriceSummary(unsafeResultMap: resultMap)
          }
          set {
            resultMap += newValue.resultMap
          }
        }
      }

      public struct ChainTokenPrice: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["CurrencyAmount"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
            GraphQLField("raw", type: .nonNull(.scalar(String.self))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(decimal: Double, raw: String) {
          self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var decimal: Double {
          get {
            return resultMap["decimal"]! as! Double
          }
          set {
            resultMap.updateValue(newValue, forKey: "decimal")
          }
        }

        public var raw: String {
          get {
            return resultMap["raw"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "raw")
          }
        }
      }

      public struct NativePrice: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["CurrencyAmount"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
            GraphQLField("raw", type: .nonNull(.scalar(String.self))),
            GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(decimal: Double, raw: String, currency: Currency) {
          self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var decimal: Double {
          get {
            return resultMap["decimal"]! as! Double
          }
          set {
            resultMap.updateValue(newValue, forKey: "decimal")
          }
        }

        public var raw: String {
          get {
            return resultMap["raw"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "raw")
          }
        }

        public var currency: Currency {
          get {
            return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
          }
          set {
            resultMap.updateValue(newValue.resultMap, forKey: "currency")
          }
        }

        public struct Currency: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["Currency"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("address", type: .nonNull(.scalar(String.self))),
              GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(address: String, decimals: Int, name: String) {
            self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var address: String {
            get {
              return resultMap["address"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "address")
            }
          }

          public var decimals: Int {
            get {
              return resultMap["decimals"]! as! Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "decimals")
            }
          }

          public var name: String {
            get {
              return resultMap["name"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "name")
            }
          }
        }
      }

      public struct UsdcPrice: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["CurrencyAmount"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
            GraphQLField("raw", type: .nonNull(.scalar(String.self))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(decimal: Double, raw: String) {
          self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var decimal: Double {
          get {
            return resultMap["decimal"]! as! Double
          }
          set {
            resultMap.updateValue(newValue, forKey: "decimal")
          }
        }

        public var raw: String {
          get {
            return resultMap["raw"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "raw")
          }
        }
      }
    }
  }
}

public struct NetworkInfoDetails: GraphQLFragment {
  /// The raw GraphQL definition of this fragment.
  public static let fragmentDefinition: String =
    """
    fragment NetworkInfoDetails on NetworkInfo {
      __typename
      chain
      network
    }
    """

  public static let possibleTypes: [String] = ["NetworkInfo"]

  public static var selections: [GraphQLSelection] {
    return [
      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
      GraphQLField("chain", type: .nonNull(.scalar(Chain.self))),
      GraphQLField("network", type: .nonNull(.scalar(Network.self))),
    ]
  }

  public private(set) var resultMap: ResultMap

  public init(unsafeResultMap: ResultMap) {
    self.resultMap = unsafeResultMap
  }

  public init(chain: Chain, network: Network) {
    self.init(unsafeResultMap: ["__typename": "NetworkInfo", "chain": chain, "network": network])
  }

  public var __typename: String {
    get {
      return resultMap["__typename"]! as! String
    }
    set {
      resultMap.updateValue(newValue, forKey: "__typename")
    }
  }

  public var chain: Chain {
    get {
      return resultMap["chain"]! as! Chain
    }
    set {
      resultMap.updateValue(newValue, forKey: "chain")
    }
  }

  public var network: Network {
    get {
      return resultMap["network"]! as! Network
    }
    set {
      resultMap.updateValue(newValue, forKey: "network")
    }
  }
}

public struct MarketInfo: GraphQLFragment {
  /// The raw GraphQL definition of this fragment.
  public static let fragmentDefinition: String =
    """
    fragment MarketInfo on Market {
      __typename
      collectionAddress
      marketAddress
      marketType
      transactionInfo {
        __typename
        ...TransactionDetails
      }
      price {
        __typename
        ...PriceSummary
      }
      status
      networkInfo {
        __typename
        ...NetworkInfoDetails
      }
    }
    """

  public static let possibleTypes: [String] = ["Market"]

  public static var selections: [GraphQLSelection] {
    return [
      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
      GraphQLField("collectionAddress", type: .nonNull(.scalar(String.self))),
      GraphQLField("marketAddress", type: .nonNull(.scalar(String.self))),
      GraphQLField("marketType", type: .nonNull(.scalar(MarketType.self))),
      GraphQLField("transactionInfo", type: .nonNull(.object(TransactionInfo.selections))),
      GraphQLField("price", type: .object(Price.selections)),
      GraphQLField("status", type: .nonNull(.scalar(String.self))),
      GraphQLField("networkInfo", type: .nonNull(.object(NetworkInfo.selections))),
    ]
  }

  public private(set) var resultMap: ResultMap

  public init(unsafeResultMap: ResultMap) {
    self.resultMap = unsafeResultMap
  }

  public init(collectionAddress: String, marketAddress: String, marketType: MarketType, transactionInfo: TransactionInfo, price: Price? = nil, status: String, networkInfo: NetworkInfo) {
    self.init(unsafeResultMap: ["__typename": "Market", "collectionAddress": collectionAddress, "marketAddress": marketAddress, "marketType": marketType, "transactionInfo": transactionInfo.resultMap, "price": price.flatMap { (value: Price) -> ResultMap in value.resultMap }, "status": status, "networkInfo": networkInfo.resultMap])
  }

  public var __typename: String {
    get {
      return resultMap["__typename"]! as! String
    }
    set {
      resultMap.updateValue(newValue, forKey: "__typename")
    }
  }

  public var collectionAddress: String {
    get {
      return resultMap["collectionAddress"]! as! String
    }
    set {
      resultMap.updateValue(newValue, forKey: "collectionAddress")
    }
  }

  public var marketAddress: String {
    get {
      return resultMap["marketAddress"]! as! String
    }
    set {
      resultMap.updateValue(newValue, forKey: "marketAddress")
    }
  }

  public var marketType: MarketType {
    get {
      return resultMap["marketType"]! as! MarketType
    }
    set {
      resultMap.updateValue(newValue, forKey: "marketType")
    }
  }

  public var transactionInfo: TransactionInfo {
    get {
      return TransactionInfo(unsafeResultMap: resultMap["transactionInfo"]! as! ResultMap)
    }
    set {
      resultMap.updateValue(newValue.resultMap, forKey: "transactionInfo")
    }
  }

  public var price: Price? {
    get {
      return (resultMap["price"] as? ResultMap).flatMap { Price(unsafeResultMap: $0) }
    }
    set {
      resultMap.updateValue(newValue?.resultMap, forKey: "price")
    }
  }

  public var status: String {
    get {
      return resultMap["status"]! as! String
    }
    set {
      resultMap.updateValue(newValue, forKey: "status")
    }
  }

  public var networkInfo: NetworkInfo {
    get {
      return NetworkInfo(unsafeResultMap: resultMap["networkInfo"]! as! ResultMap)
    }
    set {
      resultMap.updateValue(newValue.resultMap, forKey: "networkInfo")
    }
  }

  public struct TransactionInfo: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["TransactionInfo"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
        GraphQLField("blockTimestamp", type: .nonNull(.scalar(String.self))),
        GraphQLField("transactionHash", type: .scalar(String.self)),
        GraphQLField("logIndex", type: .scalar(Int.self)),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(blockNumber: Int, blockTimestamp: String, transactionHash: String? = nil, logIndex: Int? = nil) {
      self.init(unsafeResultMap: ["__typename": "TransactionInfo", "blockNumber": blockNumber, "blockTimestamp": blockTimestamp, "transactionHash": transactionHash, "logIndex": logIndex])
    }

    public var __typename: String {
      get {
        return resultMap["__typename"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "__typename")
      }
    }

    public var blockNumber: Int {
      get {
        return resultMap["blockNumber"]! as! Int
      }
      set {
        resultMap.updateValue(newValue, forKey: "blockNumber")
      }
    }

    public var blockTimestamp: String {
      get {
        return resultMap["blockTimestamp"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "blockTimestamp")
      }
    }

    public var transactionHash: String? {
      get {
        return resultMap["transactionHash"] as? String
      }
      set {
        resultMap.updateValue(newValue, forKey: "transactionHash")
      }
    }

    public var logIndex: Int? {
      get {
        return resultMap["logIndex"] as? Int
      }
      set {
        resultMap.updateValue(newValue, forKey: "logIndex")
      }
    }

    public var fragments: Fragments {
      get {
        return Fragments(unsafeResultMap: resultMap)
      }
      set {
        resultMap += newValue.resultMap
      }
    }

    public struct Fragments {
      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public var transactionDetails: TransactionDetails {
        get {
          return TransactionDetails(unsafeResultMap: resultMap)
        }
        set {
          resultMap += newValue.resultMap
        }
      }
    }
  }

  public struct Price: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["PriceAtTime"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
        GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
        GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
        GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
      self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
    }

    public var __typename: String {
      get {
        return resultMap["__typename"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "__typename")
      }
    }

    public var blockNumber: Int {
      get {
        return resultMap["blockNumber"]! as! Int
      }
      set {
        resultMap.updateValue(newValue, forKey: "blockNumber")
      }
    }

    public var chainTokenPrice: ChainTokenPrice? {
      get {
        return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
      }
    }

    public var nativePrice: NativePrice {
      get {
        return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
      }
    }

    public var usdcPrice: UsdcPrice? {
      get {
        return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
      }
    }

    public var fragments: Fragments {
      get {
        return Fragments(unsafeResultMap: resultMap)
      }
      set {
        resultMap += newValue.resultMap
      }
    }

    public struct Fragments {
      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public var priceSummary: PriceSummary {
        get {
          return PriceSummary(unsafeResultMap: resultMap)
        }
        set {
          resultMap += newValue.resultMap
        }
      }
    }

    public struct ChainTokenPrice: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["CurrencyAmount"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
          GraphQLField("raw", type: .nonNull(.scalar(String.self))),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(decimal: Double, raw: String) {
        self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var decimal: Double {
        get {
          return resultMap["decimal"]! as! Double
        }
        set {
          resultMap.updateValue(newValue, forKey: "decimal")
        }
      }

      public var raw: String {
        get {
          return resultMap["raw"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "raw")
        }
      }
    }

    public struct NativePrice: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["CurrencyAmount"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
          GraphQLField("raw", type: .nonNull(.scalar(String.self))),
          GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(decimal: Double, raw: String, currency: Currency) {
        self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var decimal: Double {
        get {
          return resultMap["decimal"]! as! Double
        }
        set {
          resultMap.updateValue(newValue, forKey: "decimal")
        }
      }

      public var raw: String {
        get {
          return resultMap["raw"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "raw")
        }
      }

      public var currency: Currency {
        get {
          return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
        }
        set {
          resultMap.updateValue(newValue.resultMap, forKey: "currency")
        }
      }

      public struct Currency: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["Currency"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("address", type: .nonNull(.scalar(String.self))),
            GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
            GraphQLField("name", type: .nonNull(.scalar(String.self))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(address: String, decimals: Int, name: String) {
          self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var address: String {
          get {
            return resultMap["address"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "address")
          }
        }

        public var decimals: Int {
          get {
            return resultMap["decimals"]! as! Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "decimals")
          }
        }

        public var name: String {
          get {
            return resultMap["name"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "name")
          }
        }
      }
    }

    public struct UsdcPrice: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["CurrencyAmount"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
          GraphQLField("raw", type: .nonNull(.scalar(String.self))),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(decimal: Double, raw: String) {
        self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var decimal: Double {
        get {
          return resultMap["decimal"]! as! Double
        }
        set {
          resultMap.updateValue(newValue, forKey: "decimal")
        }
      }

      public var raw: String {
        get {
          return resultMap["raw"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "raw")
        }
      }
    }
  }

  public struct NetworkInfo: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["NetworkInfo"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("chain", type: .nonNull(.scalar(Chain.self))),
        GraphQLField("network", type: .nonNull(.scalar(Network.self))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(chain: Chain, network: Network) {
      self.init(unsafeResultMap: ["__typename": "NetworkInfo", "chain": chain, "network": network])
    }

    public var __typename: String {
      get {
        return resultMap["__typename"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "__typename")
      }
    }

    public var chain: Chain {
      get {
        return resultMap["chain"]! as! Chain
      }
      set {
        resultMap.updateValue(newValue, forKey: "chain")
      }
    }

    public var network: Network {
      get {
        return resultMap["network"]! as! Network
      }
      set {
        resultMap.updateValue(newValue, forKey: "network")
      }
    }

    public var fragments: Fragments {
      get {
        return Fragments(unsafeResultMap: resultMap)
      }
      set {
        resultMap += newValue.resultMap
      }
    }

    public struct Fragments {
      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public var networkInfoDetails: NetworkInfoDetails {
        get {
          return NetworkInfoDetails(unsafeResultMap: resultMap)
        }
        set {
          resultMap += newValue.resultMap
        }
      }
    }
  }
}

public struct MarketDetails: GraphQLFragment {
  /// The raw GraphQL definition of this fragment.
  public static let fragmentDefinition: String =
    """
    fragment MarketDetails on Market {
      __typename
      properties {
        __typename
        ...MarketPropertiesFull
      }
    }
    """

  public static let possibleTypes: [String] = ["Market"]

  public static var selections: [GraphQLSelection] {
    return [
      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
      GraphQLField("properties", type: .nonNull(.object(Property.selections))),
    ]
  }

  public private(set) var resultMap: ResultMap

  public init(unsafeResultMap: ResultMap) {
    self.resultMap = unsafeResultMap
  }

  public init(properties: Property) {
    self.init(unsafeResultMap: ["__typename": "Market", "properties": properties.resultMap])
  }

  public var __typename: String {
    get {
      return resultMap["__typename"]! as! String
    }
    set {
      resultMap.updateValue(newValue, forKey: "__typename")
    }
  }

  public var properties: Property {
    get {
      return Property(unsafeResultMap: resultMap["properties"]! as! ResultMap)
    }
    set {
      resultMap.updateValue(newValue.resultMap, forKey: "properties")
    }
  }

  public struct Property: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["V1Ask", "V1Offer", "V1BidShare", "V2Auction", "V3Ask"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLTypeCase(
          variants: ["V2Auction": AsV2Auction.selections, "V3Ask": AsV3Ask.selections, "V1Offer": AsV1Offer.selections, "V1Ask": AsV1Ask.selections],
          default: [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          ]
        )
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public static func makeV1BidShare() -> Property {
      return Property(unsafeResultMap: ["__typename": "V1BidShare"])
    }

    public static func makeV2Auction(firstBidTime: String? = nil, highestBidder: String? = nil, curator: String, collectionAddress: String, curatorFeePercentage: Int, tokenId: String, auctionCurrency: String, duration: String, estimatedExpirationTime: String? = nil, v2AuctionStatus: V2AuctionStatus, tokenOwner: String, address: String, auctionId: String, approved: Bool, reservePrice: AsV2Auction.ReservePrice, highestBidPrice: AsV2Auction.HighestBidPrice? = nil) -> Property {
      return Property(unsafeResultMap: ["__typename": "V2Auction", "firstBidTime": firstBidTime, "highestBidder": highestBidder, "curator": curator, "collectionAddress": collectionAddress, "curatorFeePercentage": curatorFeePercentage, "tokenId": tokenId, "auctionCurrency": auctionCurrency, "duration": duration, "estimatedExpirationTime": estimatedExpirationTime, "v2AuctionStatus": v2AuctionStatus, "tokenOwner": tokenOwner, "address": address, "auctionId": auctionId, "approved": approved, "reservePrice": reservePrice.resultMap, "highestBidPrice": highestBidPrice.flatMap { (value: AsV2Auction.HighestBidPrice) -> ResultMap in value.resultMap }])
    }

    public static func makeV3Ask(buyer: String? = nil, finder: String? = nil, findersFeeBps: Int, sellerFundsRecipient: String, v3AskStatus: V3AskStatus, seller: String, address: String, askCurrency: String, collectionAddress: String, askPrice: AsV3Ask.AskPrice) -> Property {
      return Property(unsafeResultMap: ["__typename": "V3Ask", "buyer": buyer, "finder": finder, "findersFeeBps": findersFeeBps, "sellerFundsRecipient": sellerFundsRecipient, "v3AskStatus": v3AskStatus, "seller": seller, "address": address, "askCurrency": askCurrency, "collectionAddress": collectionAddress, "askPrice": askPrice.resultMap])
    }

    public static func makeV1Offer(v1OfferStatus: V1MarketEntityStatus, sellOnShare: String, bidder: String, currency: String, amount: AsV1Offer.Amount) -> Property {
      return Property(unsafeResultMap: ["__typename": "V1Offer", "v1OfferStatus": v1OfferStatus, "sellOnShare": sellOnShare, "bidder": bidder, "currency": currency, "amount": amount.resultMap])
    }

    public static func makeV1Ask(v1AskStatus: V1MarketEntityStatus, currency: String, amount: AsV1Ask.Amount) -> Property {
      return Property(unsafeResultMap: ["__typename": "V1Ask", "v1AskStatus": v1AskStatus, "currency": currency, "amount": amount.resultMap])
    }

    public var __typename: String {
      get {
        return resultMap["__typename"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "__typename")
      }
    }

    public var fragments: Fragments {
      get {
        return Fragments(unsafeResultMap: resultMap)
      }
      set {
        resultMap += newValue.resultMap
      }
    }

    public struct Fragments {
      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public var marketPropertiesFull: MarketPropertiesFull {
        get {
          return MarketPropertiesFull(unsafeResultMap: resultMap)
        }
        set {
          resultMap += newValue.resultMap
        }
      }

      public var v2AuctionMarketProperties: V2AuctionMarketProperties? {
        get {
          if !V2AuctionMarketProperties.possibleTypes.contains(resultMap["__typename"]! as! String) { return nil }
          return V2AuctionMarketProperties(unsafeResultMap: resultMap)
        }
        set {
          guard let newValue = newValue else { return }
          resultMap += newValue.resultMap
        }
      }

      public var v3AskProperties: V3AskProperties? {
        get {
          if !V3AskProperties.possibleTypes.contains(resultMap["__typename"]! as! String) { return nil }
          return V3AskProperties(unsafeResultMap: resultMap)
        }
        set {
          guard let newValue = newValue else { return }
          resultMap += newValue.resultMap
        }
      }

      public var v1OfferProperties: V1OfferProperties? {
        get {
          if !V1OfferProperties.possibleTypes.contains(resultMap["__typename"]! as! String) { return nil }
          return V1OfferProperties(unsafeResultMap: resultMap)
        }
        set {
          guard let newValue = newValue else { return }
          resultMap += newValue.resultMap
        }
      }

      public var v1AskProperties: V1AskProperties? {
        get {
          if !V1AskProperties.possibleTypes.contains(resultMap["__typename"]! as! String) { return nil }
          return V1AskProperties(unsafeResultMap: resultMap)
        }
        set {
          guard let newValue = newValue else { return }
          resultMap += newValue.resultMap
        }
      }
    }

    public var asV2Auction: AsV2Auction? {
      get {
        if !AsV2Auction.possibleTypes.contains(__typename) { return nil }
        return AsV2Auction(unsafeResultMap: resultMap)
      }
      set {
        guard let newValue = newValue else { return }
        resultMap = newValue.resultMap
      }
    }

    public struct AsV2Auction: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["V2Auction"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("firstBidTime", type: .scalar(String.self)),
          GraphQLField("highestBidder", type: .scalar(String.self)),
          GraphQLField("curator", type: .nonNull(.scalar(String.self))),
          GraphQLField("collectionAddress", type: .nonNull(.scalar(String.self))),
          GraphQLField("curatorFeePercentage", type: .nonNull(.scalar(Int.self))),
          GraphQLField("tokenId", type: .nonNull(.scalar(String.self))),
          GraphQLField("auctionCurrency", type: .nonNull(.scalar(String.self))),
          GraphQLField("duration", type: .nonNull(.scalar(String.self))),
          GraphQLField("estimatedExpirationTime", type: .scalar(String.self)),
          GraphQLField("v2AuctionStatus", type: .nonNull(.scalar(V2AuctionStatus.self))),
          GraphQLField("tokenOwner", type: .nonNull(.scalar(String.self))),
          GraphQLField("address", type: .nonNull(.scalar(String.self))),
          GraphQLField("auctionId", type: .nonNull(.scalar(String.self))),
          GraphQLField("approved", type: .nonNull(.scalar(Bool.self))),
          GraphQLField("reservePrice", type: .nonNull(.object(ReservePrice.selections))),
          GraphQLField("highestBidPrice", type: .object(HighestBidPrice.selections)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(firstBidTime: String? = nil, highestBidder: String? = nil, curator: String, collectionAddress: String, curatorFeePercentage: Int, tokenId: String, auctionCurrency: String, duration: String, estimatedExpirationTime: String? = nil, v2AuctionStatus: V2AuctionStatus, tokenOwner: String, address: String, auctionId: String, approved: Bool, reservePrice: ReservePrice, highestBidPrice: HighestBidPrice? = nil) {
        self.init(unsafeResultMap: ["__typename": "V2Auction", "firstBidTime": firstBidTime, "highestBidder": highestBidder, "curator": curator, "collectionAddress": collectionAddress, "curatorFeePercentage": curatorFeePercentage, "tokenId": tokenId, "auctionCurrency": auctionCurrency, "duration": duration, "estimatedExpirationTime": estimatedExpirationTime, "v2AuctionStatus": v2AuctionStatus, "tokenOwner": tokenOwner, "address": address, "auctionId": auctionId, "approved": approved, "reservePrice": reservePrice.resultMap, "highestBidPrice": highestBidPrice.flatMap { (value: HighestBidPrice) -> ResultMap in value.resultMap }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var firstBidTime: String? {
        get {
          return resultMap["firstBidTime"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "firstBidTime")
        }
      }

      public var highestBidder: String? {
        get {
          return resultMap["highestBidder"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "highestBidder")
        }
      }

      public var curator: String {
        get {
          return resultMap["curator"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "curator")
        }
      }

      public var collectionAddress: String {
        get {
          return resultMap["collectionAddress"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "collectionAddress")
        }
      }

      public var curatorFeePercentage: Int {
        get {
          return resultMap["curatorFeePercentage"]! as! Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "curatorFeePercentage")
        }
      }

      public var tokenId: String {
        get {
          return resultMap["tokenId"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "tokenId")
        }
      }

      public var auctionCurrency: String {
        get {
          return resultMap["auctionCurrency"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "auctionCurrency")
        }
      }

      public var duration: String {
        get {
          return resultMap["duration"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "duration")
        }
      }

      public var estimatedExpirationTime: String? {
        get {
          return resultMap["estimatedExpirationTime"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "estimatedExpirationTime")
        }
      }

      public var v2AuctionStatus: V2AuctionStatus {
        get {
          return resultMap["v2AuctionStatus"]! as! V2AuctionStatus
        }
        set {
          resultMap.updateValue(newValue, forKey: "v2AuctionStatus")
        }
      }

      public var tokenOwner: String {
        get {
          return resultMap["tokenOwner"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "tokenOwner")
        }
      }

      public var address: String {
        get {
          return resultMap["address"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "address")
        }
      }

      public var auctionId: String {
        get {
          return resultMap["auctionId"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "auctionId")
        }
      }

      public var approved: Bool {
        get {
          return resultMap["approved"]! as! Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "approved")
        }
      }

      public var reservePrice: ReservePrice {
        get {
          return ReservePrice(unsafeResultMap: resultMap["reservePrice"]! as! ResultMap)
        }
        set {
          resultMap.updateValue(newValue.resultMap, forKey: "reservePrice")
        }
      }

      public var highestBidPrice: HighestBidPrice? {
        get {
          return (resultMap["highestBidPrice"] as? ResultMap).flatMap { HighestBidPrice(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "highestBidPrice")
        }
      }

      public var fragments: Fragments {
        get {
          return Fragments(unsafeResultMap: resultMap)
        }
        set {
          resultMap += newValue.resultMap
        }
      }

      public struct Fragments {
        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public var marketPropertiesFull: MarketPropertiesFull {
          get {
            return MarketPropertiesFull(unsafeResultMap: resultMap)
          }
          set {
            resultMap += newValue.resultMap
          }
        }

        public var v2AuctionMarketProperties: V2AuctionMarketProperties {
          get {
            return V2AuctionMarketProperties(unsafeResultMap: resultMap)
          }
          set {
            resultMap += newValue.resultMap
          }
        }

        public var v3AskProperties: V3AskProperties? {
          get {
            if !V3AskProperties.possibleTypes.contains(resultMap["__typename"]! as! String) { return nil }
            return V3AskProperties(unsafeResultMap: resultMap)
          }
          set {
            guard let newValue = newValue else { return }
            resultMap += newValue.resultMap
          }
        }

        public var v1OfferProperties: V1OfferProperties? {
          get {
            if !V1OfferProperties.possibleTypes.contains(resultMap["__typename"]! as! String) { return nil }
            return V1OfferProperties(unsafeResultMap: resultMap)
          }
          set {
            guard let newValue = newValue else { return }
            resultMap += newValue.resultMap
          }
        }

        public var v1AskProperties: V1AskProperties? {
          get {
            if !V1AskProperties.possibleTypes.contains(resultMap["__typename"]! as! String) { return nil }
            return V1AskProperties(unsafeResultMap: resultMap)
          }
          set {
            guard let newValue = newValue else { return }
            resultMap += newValue.resultMap
          }
        }
      }

      public struct ReservePrice: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["PriceAtTime"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
            GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
            GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
            GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
          self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var blockNumber: Int {
          get {
            return resultMap["blockNumber"]! as! Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "blockNumber")
          }
        }

        public var chainTokenPrice: ChainTokenPrice? {
          get {
            return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
          }
          set {
            resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
          }
        }

        public var nativePrice: NativePrice {
          get {
            return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
          }
          set {
            resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
          }
        }

        public var usdcPrice: UsdcPrice? {
          get {
            return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
          }
          set {
            resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
          }
        }

        public var fragments: Fragments {
          get {
            return Fragments(unsafeResultMap: resultMap)
          }
          set {
            resultMap += newValue.resultMap
          }
        }

        public struct Fragments {
          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public var priceSummary: PriceSummary {
            get {
              return PriceSummary(unsafeResultMap: resultMap)
            }
            set {
              resultMap += newValue.resultMap
            }
          }
        }

        public struct ChainTokenPrice: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["CurrencyAmount"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
              GraphQLField("raw", type: .nonNull(.scalar(String.self))),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(decimal: Double, raw: String) {
            self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var decimal: Double {
            get {
              return resultMap["decimal"]! as! Double
            }
            set {
              resultMap.updateValue(newValue, forKey: "decimal")
            }
          }

          public var raw: String {
            get {
              return resultMap["raw"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "raw")
            }
          }
        }

        public struct NativePrice: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["CurrencyAmount"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
              GraphQLField("raw", type: .nonNull(.scalar(String.self))),
              GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(decimal: Double, raw: String, currency: Currency) {
            self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var decimal: Double {
            get {
              return resultMap["decimal"]! as! Double
            }
            set {
              resultMap.updateValue(newValue, forKey: "decimal")
            }
          }

          public var raw: String {
            get {
              return resultMap["raw"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "raw")
            }
          }

          public var currency: Currency {
            get {
              return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
            }
            set {
              resultMap.updateValue(newValue.resultMap, forKey: "currency")
            }
          }

          public struct Currency: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["Currency"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("address", type: .nonNull(.scalar(String.self))),
                GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(address: String, decimals: Int, name: String) {
              self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var address: String {
              get {
                return resultMap["address"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "address")
              }
            }

            public var decimals: Int {
              get {
                return resultMap["decimals"]! as! Int
              }
              set {
                resultMap.updateValue(newValue, forKey: "decimals")
              }
            }

            public var name: String {
              get {
                return resultMap["name"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "name")
              }
            }
          }
        }

        public struct UsdcPrice: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["CurrencyAmount"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
              GraphQLField("raw", type: .nonNull(.scalar(String.self))),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(decimal: Double, raw: String) {
            self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var decimal: Double {
            get {
              return resultMap["decimal"]! as! Double
            }
            set {
              resultMap.updateValue(newValue, forKey: "decimal")
            }
          }

          public var raw: String {
            get {
              return resultMap["raw"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "raw")
            }
          }
        }
      }

      public struct HighestBidPrice: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["PriceAtTime"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
            GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
            GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
            GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
          self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var blockNumber: Int {
          get {
            return resultMap["blockNumber"]! as! Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "blockNumber")
          }
        }

        public var chainTokenPrice: ChainTokenPrice? {
          get {
            return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
          }
          set {
            resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
          }
        }

        public var nativePrice: NativePrice {
          get {
            return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
          }
          set {
            resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
          }
        }

        public var usdcPrice: UsdcPrice? {
          get {
            return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
          }
          set {
            resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
          }
        }

        public var fragments: Fragments {
          get {
            return Fragments(unsafeResultMap: resultMap)
          }
          set {
            resultMap += newValue.resultMap
          }
        }

        public struct Fragments {
          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public var priceSummary: PriceSummary {
            get {
              return PriceSummary(unsafeResultMap: resultMap)
            }
            set {
              resultMap += newValue.resultMap
            }
          }
        }

        public struct ChainTokenPrice: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["CurrencyAmount"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
              GraphQLField("raw", type: .nonNull(.scalar(String.self))),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(decimal: Double, raw: String) {
            self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var decimal: Double {
            get {
              return resultMap["decimal"]! as! Double
            }
            set {
              resultMap.updateValue(newValue, forKey: "decimal")
            }
          }

          public var raw: String {
            get {
              return resultMap["raw"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "raw")
            }
          }
        }

        public struct NativePrice: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["CurrencyAmount"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
              GraphQLField("raw", type: .nonNull(.scalar(String.self))),
              GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(decimal: Double, raw: String, currency: Currency) {
            self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var decimal: Double {
            get {
              return resultMap["decimal"]! as! Double
            }
            set {
              resultMap.updateValue(newValue, forKey: "decimal")
            }
          }

          public var raw: String {
            get {
              return resultMap["raw"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "raw")
            }
          }

          public var currency: Currency {
            get {
              return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
            }
            set {
              resultMap.updateValue(newValue.resultMap, forKey: "currency")
            }
          }

          public struct Currency: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["Currency"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("address", type: .nonNull(.scalar(String.self))),
                GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(address: String, decimals: Int, name: String) {
              self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var address: String {
              get {
                return resultMap["address"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "address")
              }
            }

            public var decimals: Int {
              get {
                return resultMap["decimals"]! as! Int
              }
              set {
                resultMap.updateValue(newValue, forKey: "decimals")
              }
            }

            public var name: String {
              get {
                return resultMap["name"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "name")
              }
            }
          }
        }

        public struct UsdcPrice: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["CurrencyAmount"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
              GraphQLField("raw", type: .nonNull(.scalar(String.self))),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(decimal: Double, raw: String) {
            self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var decimal: Double {
            get {
              return resultMap["decimal"]! as! Double
            }
            set {
              resultMap.updateValue(newValue, forKey: "decimal")
            }
          }

          public var raw: String {
            get {
              return resultMap["raw"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "raw")
            }
          }
        }
      }
    }

    public var asV3Ask: AsV3Ask? {
      get {
        if !AsV3Ask.possibleTypes.contains(__typename) { return nil }
        return AsV3Ask(unsafeResultMap: resultMap)
      }
      set {
        guard let newValue = newValue else { return }
        resultMap = newValue.resultMap
      }
    }

    public struct AsV3Ask: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["V3Ask"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("buyer", type: .scalar(String.self)),
          GraphQLField("finder", type: .scalar(String.self)),
          GraphQLField("findersFeeBps", type: .nonNull(.scalar(Int.self))),
          GraphQLField("sellerFundsRecipient", type: .nonNull(.scalar(String.self))),
          GraphQLField("v3AskStatus", type: .nonNull(.scalar(V3AskStatus.self))),
          GraphQLField("seller", type: .nonNull(.scalar(String.self))),
          GraphQLField("address", type: .nonNull(.scalar(String.self))),
          GraphQLField("askCurrency", type: .nonNull(.scalar(String.self))),
          GraphQLField("collectionAddress", type: .nonNull(.scalar(String.self))),
          GraphQLField("askPrice", type: .nonNull(.object(AskPrice.selections))),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(buyer: String? = nil, finder: String? = nil, findersFeeBps: Int, sellerFundsRecipient: String, v3AskStatus: V3AskStatus, seller: String, address: String, askCurrency: String, collectionAddress: String, askPrice: AskPrice) {
        self.init(unsafeResultMap: ["__typename": "V3Ask", "buyer": buyer, "finder": finder, "findersFeeBps": findersFeeBps, "sellerFundsRecipient": sellerFundsRecipient, "v3AskStatus": v3AskStatus, "seller": seller, "address": address, "askCurrency": askCurrency, "collectionAddress": collectionAddress, "askPrice": askPrice.resultMap])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var buyer: String? {
        get {
          return resultMap["buyer"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "buyer")
        }
      }

      public var finder: String? {
        get {
          return resultMap["finder"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "finder")
        }
      }

      public var findersFeeBps: Int {
        get {
          return resultMap["findersFeeBps"]! as! Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "findersFeeBps")
        }
      }

      public var sellerFundsRecipient: String {
        get {
          return resultMap["sellerFundsRecipient"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "sellerFundsRecipient")
        }
      }

      public var v3AskStatus: V3AskStatus {
        get {
          return resultMap["v3AskStatus"]! as! V3AskStatus
        }
        set {
          resultMap.updateValue(newValue, forKey: "v3AskStatus")
        }
      }

      public var seller: String {
        get {
          return resultMap["seller"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "seller")
        }
      }

      public var address: String {
        get {
          return resultMap["address"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "address")
        }
      }

      public var askCurrency: String {
        get {
          return resultMap["askCurrency"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "askCurrency")
        }
      }

      public var collectionAddress: String {
        get {
          return resultMap["collectionAddress"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "collectionAddress")
        }
      }

      public var askPrice: AskPrice {
        get {
          return AskPrice(unsafeResultMap: resultMap["askPrice"]! as! ResultMap)
        }
        set {
          resultMap.updateValue(newValue.resultMap, forKey: "askPrice")
        }
      }

      public var fragments: Fragments {
        get {
          return Fragments(unsafeResultMap: resultMap)
        }
        set {
          resultMap += newValue.resultMap
        }
      }

      public struct Fragments {
        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public var marketPropertiesFull: MarketPropertiesFull {
          get {
            return MarketPropertiesFull(unsafeResultMap: resultMap)
          }
          set {
            resultMap += newValue.resultMap
          }
        }

        public var v2AuctionMarketProperties: V2AuctionMarketProperties? {
          get {
            if !V2AuctionMarketProperties.possibleTypes.contains(resultMap["__typename"]! as! String) { return nil }
            return V2AuctionMarketProperties(unsafeResultMap: resultMap)
          }
          set {
            guard let newValue = newValue else { return }
            resultMap += newValue.resultMap
          }
        }

        public var v3AskProperties: V3AskProperties {
          get {
            return V3AskProperties(unsafeResultMap: resultMap)
          }
          set {
            resultMap += newValue.resultMap
          }
        }

        public var v1OfferProperties: V1OfferProperties? {
          get {
            if !V1OfferProperties.possibleTypes.contains(resultMap["__typename"]! as! String) { return nil }
            return V1OfferProperties(unsafeResultMap: resultMap)
          }
          set {
            guard let newValue = newValue else { return }
            resultMap += newValue.resultMap
          }
        }

        public var v1AskProperties: V1AskProperties? {
          get {
            if !V1AskProperties.possibleTypes.contains(resultMap["__typename"]! as! String) { return nil }
            return V1AskProperties(unsafeResultMap: resultMap)
          }
          set {
            guard let newValue = newValue else { return }
            resultMap += newValue.resultMap
          }
        }
      }

      public struct AskPrice: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["PriceAtTime"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
            GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
            GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
            GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
          self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var blockNumber: Int {
          get {
            return resultMap["blockNumber"]! as! Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "blockNumber")
          }
        }

        public var chainTokenPrice: ChainTokenPrice? {
          get {
            return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
          }
          set {
            resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
          }
        }

        public var nativePrice: NativePrice {
          get {
            return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
          }
          set {
            resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
          }
        }

        public var usdcPrice: UsdcPrice? {
          get {
            return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
          }
          set {
            resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
          }
        }

        public var fragments: Fragments {
          get {
            return Fragments(unsafeResultMap: resultMap)
          }
          set {
            resultMap += newValue.resultMap
          }
        }

        public struct Fragments {
          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public var priceSummary: PriceSummary {
            get {
              return PriceSummary(unsafeResultMap: resultMap)
            }
            set {
              resultMap += newValue.resultMap
            }
          }
        }

        public struct ChainTokenPrice: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["CurrencyAmount"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
              GraphQLField("raw", type: .nonNull(.scalar(String.self))),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(decimal: Double, raw: String) {
            self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var decimal: Double {
            get {
              return resultMap["decimal"]! as! Double
            }
            set {
              resultMap.updateValue(newValue, forKey: "decimal")
            }
          }

          public var raw: String {
            get {
              return resultMap["raw"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "raw")
            }
          }
        }

        public struct NativePrice: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["CurrencyAmount"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
              GraphQLField("raw", type: .nonNull(.scalar(String.self))),
              GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(decimal: Double, raw: String, currency: Currency) {
            self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var decimal: Double {
            get {
              return resultMap["decimal"]! as! Double
            }
            set {
              resultMap.updateValue(newValue, forKey: "decimal")
            }
          }

          public var raw: String {
            get {
              return resultMap["raw"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "raw")
            }
          }

          public var currency: Currency {
            get {
              return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
            }
            set {
              resultMap.updateValue(newValue.resultMap, forKey: "currency")
            }
          }

          public struct Currency: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["Currency"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("address", type: .nonNull(.scalar(String.self))),
                GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(address: String, decimals: Int, name: String) {
              self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var address: String {
              get {
                return resultMap["address"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "address")
              }
            }

            public var decimals: Int {
              get {
                return resultMap["decimals"]! as! Int
              }
              set {
                resultMap.updateValue(newValue, forKey: "decimals")
              }
            }

            public var name: String {
              get {
                return resultMap["name"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "name")
              }
            }
          }
        }

        public struct UsdcPrice: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["CurrencyAmount"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
              GraphQLField("raw", type: .nonNull(.scalar(String.self))),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(decimal: Double, raw: String) {
            self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var decimal: Double {
            get {
              return resultMap["decimal"]! as! Double
            }
            set {
              resultMap.updateValue(newValue, forKey: "decimal")
            }
          }

          public var raw: String {
            get {
              return resultMap["raw"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "raw")
            }
          }
        }
      }
    }

    public var asV1Offer: AsV1Offer? {
      get {
        if !AsV1Offer.possibleTypes.contains(__typename) { return nil }
        return AsV1Offer(unsafeResultMap: resultMap)
      }
      set {
        guard let newValue = newValue else { return }
        resultMap = newValue.resultMap
      }
    }

    public struct AsV1Offer: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["V1Offer"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("v1OfferStatus", type: .nonNull(.scalar(V1MarketEntityStatus.self))),
          GraphQLField("sellOnShare", type: .nonNull(.scalar(String.self))),
          GraphQLField("bidder", type: .nonNull(.scalar(String.self))),
          GraphQLField("currency", type: .nonNull(.scalar(String.self))),
          GraphQLField("amount", type: .nonNull(.object(Amount.selections))),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(v1OfferStatus: V1MarketEntityStatus, sellOnShare: String, bidder: String, currency: String, amount: Amount) {
        self.init(unsafeResultMap: ["__typename": "V1Offer", "v1OfferStatus": v1OfferStatus, "sellOnShare": sellOnShare, "bidder": bidder, "currency": currency, "amount": amount.resultMap])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var v1OfferStatus: V1MarketEntityStatus {
        get {
          return resultMap["v1OfferStatus"]! as! V1MarketEntityStatus
        }
        set {
          resultMap.updateValue(newValue, forKey: "v1OfferStatus")
        }
      }

      public var sellOnShare: String {
        get {
          return resultMap["sellOnShare"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "sellOnShare")
        }
      }

      public var bidder: String {
        get {
          return resultMap["bidder"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "bidder")
        }
      }

      public var currency: String {
        get {
          return resultMap["currency"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "currency")
        }
      }

      public var amount: Amount {
        get {
          return Amount(unsafeResultMap: resultMap["amount"]! as! ResultMap)
        }
        set {
          resultMap.updateValue(newValue.resultMap, forKey: "amount")
        }
      }

      public var fragments: Fragments {
        get {
          return Fragments(unsafeResultMap: resultMap)
        }
        set {
          resultMap += newValue.resultMap
        }
      }

      public struct Fragments {
        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public var marketPropertiesFull: MarketPropertiesFull {
          get {
            return MarketPropertiesFull(unsafeResultMap: resultMap)
          }
          set {
            resultMap += newValue.resultMap
          }
        }

        public var v2AuctionMarketProperties: V2AuctionMarketProperties? {
          get {
            if !V2AuctionMarketProperties.possibleTypes.contains(resultMap["__typename"]! as! String) { return nil }
            return V2AuctionMarketProperties(unsafeResultMap: resultMap)
          }
          set {
            guard let newValue = newValue else { return }
            resultMap += newValue.resultMap
          }
        }

        public var v3AskProperties: V3AskProperties? {
          get {
            if !V3AskProperties.possibleTypes.contains(resultMap["__typename"]! as! String) { return nil }
            return V3AskProperties(unsafeResultMap: resultMap)
          }
          set {
            guard let newValue = newValue else { return }
            resultMap += newValue.resultMap
          }
        }

        public var v1OfferProperties: V1OfferProperties {
          get {
            return V1OfferProperties(unsafeResultMap: resultMap)
          }
          set {
            resultMap += newValue.resultMap
          }
        }

        public var v1AskProperties: V1AskProperties? {
          get {
            if !V1AskProperties.possibleTypes.contains(resultMap["__typename"]! as! String) { return nil }
            return V1AskProperties(unsafeResultMap: resultMap)
          }
          set {
            guard let newValue = newValue else { return }
            resultMap += newValue.resultMap
          }
        }
      }

      public struct Amount: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["PriceAtTime"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
            GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
            GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
            GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
          self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var blockNumber: Int {
          get {
            return resultMap["blockNumber"]! as! Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "blockNumber")
          }
        }

        public var chainTokenPrice: ChainTokenPrice? {
          get {
            return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
          }
          set {
            resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
          }
        }

        public var nativePrice: NativePrice {
          get {
            return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
          }
          set {
            resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
          }
        }

        public var usdcPrice: UsdcPrice? {
          get {
            return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
          }
          set {
            resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
          }
        }

        public var fragments: Fragments {
          get {
            return Fragments(unsafeResultMap: resultMap)
          }
          set {
            resultMap += newValue.resultMap
          }
        }

        public struct Fragments {
          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public var priceSummary: PriceSummary {
            get {
              return PriceSummary(unsafeResultMap: resultMap)
            }
            set {
              resultMap += newValue.resultMap
            }
          }
        }

        public struct ChainTokenPrice: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["CurrencyAmount"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
              GraphQLField("raw", type: .nonNull(.scalar(String.self))),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(decimal: Double, raw: String) {
            self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var decimal: Double {
            get {
              return resultMap["decimal"]! as! Double
            }
            set {
              resultMap.updateValue(newValue, forKey: "decimal")
            }
          }

          public var raw: String {
            get {
              return resultMap["raw"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "raw")
            }
          }
        }

        public struct NativePrice: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["CurrencyAmount"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
              GraphQLField("raw", type: .nonNull(.scalar(String.self))),
              GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(decimal: Double, raw: String, currency: Currency) {
            self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var decimal: Double {
            get {
              return resultMap["decimal"]! as! Double
            }
            set {
              resultMap.updateValue(newValue, forKey: "decimal")
            }
          }

          public var raw: String {
            get {
              return resultMap["raw"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "raw")
            }
          }

          public var currency: Currency {
            get {
              return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
            }
            set {
              resultMap.updateValue(newValue.resultMap, forKey: "currency")
            }
          }

          public struct Currency: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["Currency"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("address", type: .nonNull(.scalar(String.self))),
                GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(address: String, decimals: Int, name: String) {
              self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var address: String {
              get {
                return resultMap["address"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "address")
              }
            }

            public var decimals: Int {
              get {
                return resultMap["decimals"]! as! Int
              }
              set {
                resultMap.updateValue(newValue, forKey: "decimals")
              }
            }

            public var name: String {
              get {
                return resultMap["name"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "name")
              }
            }
          }
        }

        public struct UsdcPrice: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["CurrencyAmount"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
              GraphQLField("raw", type: .nonNull(.scalar(String.self))),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(decimal: Double, raw: String) {
            self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var decimal: Double {
            get {
              return resultMap["decimal"]! as! Double
            }
            set {
              resultMap.updateValue(newValue, forKey: "decimal")
            }
          }

          public var raw: String {
            get {
              return resultMap["raw"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "raw")
            }
          }
        }
      }
    }

    public var asV1Ask: AsV1Ask? {
      get {
        if !AsV1Ask.possibleTypes.contains(__typename) { return nil }
        return AsV1Ask(unsafeResultMap: resultMap)
      }
      set {
        guard let newValue = newValue else { return }
        resultMap = newValue.resultMap
      }
    }

    public struct AsV1Ask: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["V1Ask"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("v1AskStatus", type: .nonNull(.scalar(V1MarketEntityStatus.self))),
          GraphQLField("currency", type: .nonNull(.scalar(String.self))),
          GraphQLField("amount", type: .nonNull(.object(Amount.selections))),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(v1AskStatus: V1MarketEntityStatus, currency: String, amount: Amount) {
        self.init(unsafeResultMap: ["__typename": "V1Ask", "v1AskStatus": v1AskStatus, "currency": currency, "amount": amount.resultMap])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var v1AskStatus: V1MarketEntityStatus {
        get {
          return resultMap["v1AskStatus"]! as! V1MarketEntityStatus
        }
        set {
          resultMap.updateValue(newValue, forKey: "v1AskStatus")
        }
      }

      public var currency: String {
        get {
          return resultMap["currency"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "currency")
        }
      }

      public var amount: Amount {
        get {
          return Amount(unsafeResultMap: resultMap["amount"]! as! ResultMap)
        }
        set {
          resultMap.updateValue(newValue.resultMap, forKey: "amount")
        }
      }

      public var fragments: Fragments {
        get {
          return Fragments(unsafeResultMap: resultMap)
        }
        set {
          resultMap += newValue.resultMap
        }
      }

      public struct Fragments {
        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public var marketPropertiesFull: MarketPropertiesFull {
          get {
            return MarketPropertiesFull(unsafeResultMap: resultMap)
          }
          set {
            resultMap += newValue.resultMap
          }
        }

        public var v2AuctionMarketProperties: V2AuctionMarketProperties? {
          get {
            if !V2AuctionMarketProperties.possibleTypes.contains(resultMap["__typename"]! as! String) { return nil }
            return V2AuctionMarketProperties(unsafeResultMap: resultMap)
          }
          set {
            guard let newValue = newValue else { return }
            resultMap += newValue.resultMap
          }
        }

        public var v3AskProperties: V3AskProperties? {
          get {
            if !V3AskProperties.possibleTypes.contains(resultMap["__typename"]! as! String) { return nil }
            return V3AskProperties(unsafeResultMap: resultMap)
          }
          set {
            guard let newValue = newValue else { return }
            resultMap += newValue.resultMap
          }
        }

        public var v1OfferProperties: V1OfferProperties? {
          get {
            if !V1OfferProperties.possibleTypes.contains(resultMap["__typename"]! as! String) { return nil }
            return V1OfferProperties(unsafeResultMap: resultMap)
          }
          set {
            guard let newValue = newValue else { return }
            resultMap += newValue.resultMap
          }
        }

        public var v1AskProperties: V1AskProperties {
          get {
            return V1AskProperties(unsafeResultMap: resultMap)
          }
          set {
            resultMap += newValue.resultMap
          }
        }
      }

      public struct Amount: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["PriceAtTime"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
            GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
            GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
            GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
          self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var blockNumber: Int {
          get {
            return resultMap["blockNumber"]! as! Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "blockNumber")
          }
        }

        public var chainTokenPrice: ChainTokenPrice? {
          get {
            return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
          }
          set {
            resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
          }
        }

        public var nativePrice: NativePrice {
          get {
            return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
          }
          set {
            resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
          }
        }

        public var usdcPrice: UsdcPrice? {
          get {
            return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
          }
          set {
            resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
          }
        }

        public var fragments: Fragments {
          get {
            return Fragments(unsafeResultMap: resultMap)
          }
          set {
            resultMap += newValue.resultMap
          }
        }

        public struct Fragments {
          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public var priceSummary: PriceSummary {
            get {
              return PriceSummary(unsafeResultMap: resultMap)
            }
            set {
              resultMap += newValue.resultMap
            }
          }
        }

        public struct ChainTokenPrice: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["CurrencyAmount"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
              GraphQLField("raw", type: .nonNull(.scalar(String.self))),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(decimal: Double, raw: String) {
            self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var decimal: Double {
            get {
              return resultMap["decimal"]! as! Double
            }
            set {
              resultMap.updateValue(newValue, forKey: "decimal")
            }
          }

          public var raw: String {
            get {
              return resultMap["raw"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "raw")
            }
          }
        }

        public struct NativePrice: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["CurrencyAmount"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
              GraphQLField("raw", type: .nonNull(.scalar(String.self))),
              GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(decimal: Double, raw: String, currency: Currency) {
            self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var decimal: Double {
            get {
              return resultMap["decimal"]! as! Double
            }
            set {
              resultMap.updateValue(newValue, forKey: "decimal")
            }
          }

          public var raw: String {
            get {
              return resultMap["raw"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "raw")
            }
          }

          public var currency: Currency {
            get {
              return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
            }
            set {
              resultMap.updateValue(newValue.resultMap, forKey: "currency")
            }
          }

          public struct Currency: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["Currency"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("address", type: .nonNull(.scalar(String.self))),
                GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(address: String, decimals: Int, name: String) {
              self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var address: String {
              get {
                return resultMap["address"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "address")
              }
            }

            public var decimals: Int {
              get {
                return resultMap["decimals"]! as! Int
              }
              set {
                resultMap.updateValue(newValue, forKey: "decimals")
              }
            }

            public var name: String {
              get {
                return resultMap["name"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "name")
              }
            }
          }
        }

        public struct UsdcPrice: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["CurrencyAmount"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
              GraphQLField("raw", type: .nonNull(.scalar(String.self))),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(decimal: Double, raw: String) {
            self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var decimal: Double {
            get {
              return resultMap["decimal"]! as! Double
            }
            set {
              resultMap.updateValue(newValue, forKey: "decimal")
            }
          }

          public var raw: String {
            get {
              return resultMap["raw"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "raw")
            }
          }
        }
      }
    }
  }
}

public struct TokenInfo: GraphQLFragment {
  /// The raw GraphQL definition of this fragment.
  public static let fragmentDefinition: String =
    """
    fragment TokenInfo on Token {
      __typename
      tokenId
      tokenContract {
        __typename
        ...TokenContractInfo
      }
      mintInfo {
        __typename
        ...MintDetails
      }
      collectionAddress
      lastRefreshTime
      owner
      name
      description
      image {
        __typename
        ...FullMedia
      }
      content {
        __typename
        ...FullMedia
      }
    }
    """

  public static let possibleTypes: [String] = ["Token"]

  public static var selections: [GraphQLSelection] {
    return [
      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
      GraphQLField("tokenId", type: .nonNull(.scalar(String.self))),
      GraphQLField("tokenContract", type: .object(TokenContract.selections)),
      GraphQLField("mintInfo", type: .object(MintInfo.selections)),
      GraphQLField("collectionAddress", type: .nonNull(.scalar(String.self))),
      GraphQLField("lastRefreshTime", type: .scalar(String.self)),
      GraphQLField("owner", type: .scalar(String.self)),
      GraphQLField("name", type: .scalar(String.self)),
      GraphQLField("description", type: .scalar(String.self)),
      GraphQLField("image", type: .object(Image.selections)),
      GraphQLField("content", type: .object(Content.selections)),
    ]
  }

  public private(set) var resultMap: ResultMap

  public init(unsafeResultMap: ResultMap) {
    self.resultMap = unsafeResultMap
  }

  public init(tokenId: String, tokenContract: TokenContract? = nil, mintInfo: MintInfo? = nil, collectionAddress: String, lastRefreshTime: String? = nil, owner: String? = nil, name: String? = nil, description: String? = nil, image: Image? = nil, content: Content? = nil) {
    self.init(unsafeResultMap: ["__typename": "Token", "tokenId": tokenId, "tokenContract": tokenContract.flatMap { (value: TokenContract) -> ResultMap in value.resultMap }, "mintInfo": mintInfo.flatMap { (value: MintInfo) -> ResultMap in value.resultMap }, "collectionAddress": collectionAddress, "lastRefreshTime": lastRefreshTime, "owner": owner, "name": name, "description": description, "image": image.flatMap { (value: Image) -> ResultMap in value.resultMap }, "content": content.flatMap { (value: Content) -> ResultMap in value.resultMap }])
  }

  public var __typename: String {
    get {
      return resultMap["__typename"]! as! String
    }
    set {
      resultMap.updateValue(newValue, forKey: "__typename")
    }
  }

  public var tokenId: String {
    get {
      return resultMap["tokenId"]! as! String
    }
    set {
      resultMap.updateValue(newValue, forKey: "tokenId")
    }
  }

  public var tokenContract: TokenContract? {
    get {
      return (resultMap["tokenContract"] as? ResultMap).flatMap { TokenContract(unsafeResultMap: $0) }
    }
    set {
      resultMap.updateValue(newValue?.resultMap, forKey: "tokenContract")
    }
  }

  public var mintInfo: MintInfo? {
    get {
      return (resultMap["mintInfo"] as? ResultMap).flatMap { MintInfo(unsafeResultMap: $0) }
    }
    set {
      resultMap.updateValue(newValue?.resultMap, forKey: "mintInfo")
    }
  }

  public var collectionAddress: String {
    get {
      return resultMap["collectionAddress"]! as! String
    }
    set {
      resultMap.updateValue(newValue, forKey: "collectionAddress")
    }
  }

  public var lastRefreshTime: String? {
    get {
      return resultMap["lastRefreshTime"] as? String
    }
    set {
      resultMap.updateValue(newValue, forKey: "lastRefreshTime")
    }
  }

  public var owner: String? {
    get {
      return resultMap["owner"] as? String
    }
    set {
      resultMap.updateValue(newValue, forKey: "owner")
    }
  }

  public var name: String? {
    get {
      return resultMap["name"] as? String
    }
    set {
      resultMap.updateValue(newValue, forKey: "name")
    }
  }

  public var description: String? {
    get {
      return resultMap["description"] as? String
    }
    set {
      resultMap.updateValue(newValue, forKey: "description")
    }
  }

  public var image: Image? {
    get {
      return (resultMap["image"] as? ResultMap).flatMap { Image(unsafeResultMap: $0) }
    }
    set {
      resultMap.updateValue(newValue?.resultMap, forKey: "image")
    }
  }

  public var content: Content? {
    get {
      return (resultMap["content"] as? ResultMap).flatMap { Content(unsafeResultMap: $0) }
    }
    set {
      resultMap.updateValue(newValue?.resultMap, forKey: "content")
    }
  }

  public struct TokenContract: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["TokenContract"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("name", type: .scalar(String.self)),
        GraphQLField("network", type: .nonNull(.scalar(String.self))),
        GraphQLField("description", type: .scalar(String.self)),
        GraphQLField("collectionAddress", type: .nonNull(.scalar(String.self))),
        GraphQLField("symbol", type: .scalar(String.self)),
        GraphQLField("chain", type: .nonNull(.scalar(Int.self))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(name: String? = nil, network: String, description: String? = nil, collectionAddress: String, symbol: String? = nil, chain: Int) {
      self.init(unsafeResultMap: ["__typename": "TokenContract", "name": name, "network": network, "description": description, "collectionAddress": collectionAddress, "symbol": symbol, "chain": chain])
    }

    public var __typename: String {
      get {
        return resultMap["__typename"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "__typename")
      }
    }

    public var name: String? {
      get {
        return resultMap["name"] as? String
      }
      set {
        resultMap.updateValue(newValue, forKey: "name")
      }
    }

    public var network: String {
      get {
        return resultMap["network"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "network")
      }
    }

    public var description: String? {
      get {
        return resultMap["description"] as? String
      }
      set {
        resultMap.updateValue(newValue, forKey: "description")
      }
    }

    public var collectionAddress: String {
      get {
        return resultMap["collectionAddress"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "collectionAddress")
      }
    }

    public var symbol: String? {
      get {
        return resultMap["symbol"] as? String
      }
      set {
        resultMap.updateValue(newValue, forKey: "symbol")
      }
    }

    public var chain: Int {
      get {
        return resultMap["chain"]! as! Int
      }
      set {
        resultMap.updateValue(newValue, forKey: "chain")
      }
    }

    public var fragments: Fragments {
      get {
        return Fragments(unsafeResultMap: resultMap)
      }
      set {
        resultMap += newValue.resultMap
      }
    }

    public struct Fragments {
      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public var tokenContractInfo: TokenContractInfo {
        get {
          return TokenContractInfo(unsafeResultMap: resultMap)
        }
        set {
          resultMap += newValue.resultMap
        }
      }
    }
  }

  public struct MintInfo: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["MintInfo"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("price", type: .nonNull(.object(Price.selections))),
        GraphQLField("originatorAddress", type: .nonNull(.scalar(String.self))),
        GraphQLField("toAddress", type: .nonNull(.scalar(String.self))),
        GraphQLField("mintContext", type: .nonNull(.object(MintContext.selections))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(price: Price, originatorAddress: String, toAddress: String, mintContext: MintContext) {
      self.init(unsafeResultMap: ["__typename": "MintInfo", "price": price.resultMap, "originatorAddress": originatorAddress, "toAddress": toAddress, "mintContext": mintContext.resultMap])
    }

    public var __typename: String {
      get {
        return resultMap["__typename"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "__typename")
      }
    }

    public var price: Price {
      get {
        return Price(unsafeResultMap: resultMap["price"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "price")
      }
    }

    public var originatorAddress: String {
      get {
        return resultMap["originatorAddress"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "originatorAddress")
      }
    }

    public var toAddress: String {
      get {
        return resultMap["toAddress"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "toAddress")
      }
    }

    public var mintContext: MintContext {
      get {
        return MintContext(unsafeResultMap: resultMap["mintContext"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "mintContext")
      }
    }

    public var fragments: Fragments {
      get {
        return Fragments(unsafeResultMap: resultMap)
      }
      set {
        resultMap += newValue.resultMap
      }
    }

    public struct Fragments {
      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public var mintDetails: MintDetails {
        get {
          return MintDetails(unsafeResultMap: resultMap)
        }
        set {
          resultMap += newValue.resultMap
        }
      }
    }

    public struct Price: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["PriceAtTime"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
          GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
          GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
          GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
        self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var blockNumber: Int {
        get {
          return resultMap["blockNumber"]! as! Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "blockNumber")
        }
      }

      public var chainTokenPrice: ChainTokenPrice? {
        get {
          return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
        }
      }

      public var nativePrice: NativePrice {
        get {
          return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
        }
        set {
          resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
        }
      }

      public var usdcPrice: UsdcPrice? {
        get {
          return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
        }
      }

      public var fragments: Fragments {
        get {
          return Fragments(unsafeResultMap: resultMap)
        }
        set {
          resultMap += newValue.resultMap
        }
      }

      public struct Fragments {
        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public var priceSummary: PriceSummary {
          get {
            return PriceSummary(unsafeResultMap: resultMap)
          }
          set {
            resultMap += newValue.resultMap
          }
        }
      }

      public struct ChainTokenPrice: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["CurrencyAmount"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
            GraphQLField("raw", type: .nonNull(.scalar(String.self))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(decimal: Double, raw: String) {
          self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var decimal: Double {
          get {
            return resultMap["decimal"]! as! Double
          }
          set {
            resultMap.updateValue(newValue, forKey: "decimal")
          }
        }

        public var raw: String {
          get {
            return resultMap["raw"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "raw")
          }
        }
      }

      public struct NativePrice: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["CurrencyAmount"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
            GraphQLField("raw", type: .nonNull(.scalar(String.self))),
            GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(decimal: Double, raw: String, currency: Currency) {
          self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var decimal: Double {
          get {
            return resultMap["decimal"]! as! Double
          }
          set {
            resultMap.updateValue(newValue, forKey: "decimal")
          }
        }

        public var raw: String {
          get {
            return resultMap["raw"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "raw")
          }
        }

        public var currency: Currency {
          get {
            return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
          }
          set {
            resultMap.updateValue(newValue.resultMap, forKey: "currency")
          }
        }

        public struct Currency: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["Currency"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("address", type: .nonNull(.scalar(String.self))),
              GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(address: String, decimals: Int, name: String) {
            self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var address: String {
            get {
              return resultMap["address"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "address")
            }
          }

          public var decimals: Int {
            get {
              return resultMap["decimals"]! as! Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "decimals")
            }
          }

          public var name: String {
            get {
              return resultMap["name"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "name")
            }
          }
        }
      }

      public struct UsdcPrice: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["CurrencyAmount"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
            GraphQLField("raw", type: .nonNull(.scalar(String.self))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(decimal: Double, raw: String) {
          self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var decimal: Double {
          get {
            return resultMap["decimal"]! as! Double
          }
          set {
            resultMap.updateValue(newValue, forKey: "decimal")
          }
        }

        public var raw: String {
          get {
            return resultMap["raw"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "raw")
          }
        }
      }
    }

    public struct MintContext: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["TransactionInfo"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
          GraphQLField("blockTimestamp", type: .nonNull(.scalar(String.self))),
          GraphQLField("transactionHash", type: .scalar(String.self)),
          GraphQLField("logIndex", type: .scalar(Int.self)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(blockNumber: Int, blockTimestamp: String, transactionHash: String? = nil, logIndex: Int? = nil) {
        self.init(unsafeResultMap: ["__typename": "TransactionInfo", "blockNumber": blockNumber, "blockTimestamp": blockTimestamp, "transactionHash": transactionHash, "logIndex": logIndex])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var blockNumber: Int {
        get {
          return resultMap["blockNumber"]! as! Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "blockNumber")
        }
      }

      public var blockTimestamp: String {
        get {
          return resultMap["blockTimestamp"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "blockTimestamp")
        }
      }

      public var transactionHash: String? {
        get {
          return resultMap["transactionHash"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "transactionHash")
        }
      }

      public var logIndex: Int? {
        get {
          return resultMap["logIndex"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "logIndex")
        }
      }

      public var fragments: Fragments {
        get {
          return Fragments(unsafeResultMap: resultMap)
        }
        set {
          resultMap += newValue.resultMap
        }
      }

      public struct Fragments {
        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public var transactionDetails: TransactionDetails {
          get {
            return TransactionDetails(unsafeResultMap: resultMap)
          }
          set {
            resultMap += newValue.resultMap
          }
        }
      }
    }
  }

  public struct Image: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["TokenContentMedia"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("size", type: .scalar(String.self)),
        GraphQLField("url", type: .scalar(String.self)),
        GraphQLField("size", type: .scalar(String.self)),
        GraphQLField("mimeType", type: .scalar(String.self)),
        GraphQLField("mediaEncoding", type: .object(MediaEncoding.selections)),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(size: String? = nil, url: String? = nil, mimeType: String? = nil, mediaEncoding: MediaEncoding? = nil) {
      self.init(unsafeResultMap: ["__typename": "TokenContentMedia", "size": size, "url": url, "mimeType": mimeType, "mediaEncoding": mediaEncoding.flatMap { (value: MediaEncoding) -> ResultMap in value.resultMap }])
    }

    public var __typename: String {
      get {
        return resultMap["__typename"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "__typename")
      }
    }

    public var size: String? {
      get {
        return resultMap["size"] as? String
      }
      set {
        resultMap.updateValue(newValue, forKey: "size")
      }
    }

    public var url: String? {
      get {
        return resultMap["url"] as? String
      }
      set {
        resultMap.updateValue(newValue, forKey: "url")
      }
    }

    public var mimeType: String? {
      get {
        return resultMap["mimeType"] as? String
      }
      set {
        resultMap.updateValue(newValue, forKey: "mimeType")
      }
    }

    public var mediaEncoding: MediaEncoding? {
      get {
        return (resultMap["mediaEncoding"] as? ResultMap).flatMap { MediaEncoding(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "mediaEncoding")
      }
    }

    public var fragments: Fragments {
      get {
        return Fragments(unsafeResultMap: resultMap)
      }
      set {
        resultMap += newValue.resultMap
      }
    }

    public struct Fragments {
      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public var fullMedia: FullMedia {
        get {
          return FullMedia(unsafeResultMap: resultMap)
        }
        set {
          resultMap += newValue.resultMap
        }
      }
    }

    public struct MediaEncoding: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["ImageEncodingTypes", "VideoEncodingTypes", "AudioEncodingTypes", "UnsupportedEncodingTypes"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLTypeCase(
            variants: ["ImageEncodingTypes": AsImageEncodingTypes.selections, "VideoEncodingTypes": AsVideoEncodingTypes.selections, "AudioEncodingTypes": AsAudioEncodingTypes.selections, "UnsupportedEncodingTypes": AsUnsupportedEncodingTypes.selections],
            default: [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            ]
          )
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public static func makeImageEncodingTypes(original: String, large: String? = nil, poster: String? = nil, thumbnail: String? = nil) -> MediaEncoding {
        return MediaEncoding(unsafeResultMap: ["__typename": "ImageEncodingTypes", "original": original, "large": large, "poster": poster, "thumbnail": thumbnail])
      }

      public static func makeVideoEncodingTypes(original: String, large: String? = nil, poster: String? = nil, preview: String? = nil, thumbnail: String? = nil) -> MediaEncoding {
        return MediaEncoding(unsafeResultMap: ["__typename": "VideoEncodingTypes", "original": original, "large": large, "poster": poster, "preview": preview, "thumbnail": thumbnail])
      }

      public static func makeAudioEncodingTypes(original: String, large: String? = nil) -> MediaEncoding {
        return MediaEncoding(unsafeResultMap: ["__typename": "AudioEncodingTypes", "original": original, "large": large])
      }

      public static func makeUnsupportedEncodingTypes(original: String) -> MediaEncoding {
        return MediaEncoding(unsafeResultMap: ["__typename": "UnsupportedEncodingTypes", "original": original])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var asImageEncodingTypes: AsImageEncodingTypes? {
        get {
          if !AsImageEncodingTypes.possibleTypes.contains(__typename) { return nil }
          return AsImageEncodingTypes(unsafeResultMap: resultMap)
        }
        set {
          guard let newValue = newValue else { return }
          resultMap = newValue.resultMap
        }
      }

      public struct AsImageEncodingTypes: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["ImageEncodingTypes"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("original", type: .nonNull(.scalar(String.self))),
            GraphQLField("large", type: .scalar(String.self)),
            GraphQLField("poster", type: .scalar(String.self)),
            GraphQLField("thumbnail", type: .scalar(String.self)),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(original: String, large: String? = nil, poster: String? = nil, thumbnail: String? = nil) {
          self.init(unsafeResultMap: ["__typename": "ImageEncodingTypes", "original": original, "large": large, "poster": poster, "thumbnail": thumbnail])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var original: String {
          get {
            return resultMap["original"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "original")
          }
        }

        public var large: String? {
          get {
            return resultMap["large"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "large")
          }
        }

        public var poster: String? {
          get {
            return resultMap["poster"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "poster")
          }
        }

        public var thumbnail: String? {
          get {
            return resultMap["thumbnail"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "thumbnail")
          }
        }
      }

      public var asVideoEncodingTypes: AsVideoEncodingTypes? {
        get {
          if !AsVideoEncodingTypes.possibleTypes.contains(__typename) { return nil }
          return AsVideoEncodingTypes(unsafeResultMap: resultMap)
        }
        set {
          guard let newValue = newValue else { return }
          resultMap = newValue.resultMap
        }
      }

      public struct AsVideoEncodingTypes: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["VideoEncodingTypes"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("original", type: .nonNull(.scalar(String.self))),
            GraphQLField("large", type: .scalar(String.self)),
            GraphQLField("poster", type: .scalar(String.self)),
            GraphQLField("preview", type: .scalar(String.self)),
            GraphQLField("thumbnail", type: .scalar(String.self)),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(original: String, large: String? = nil, poster: String? = nil, preview: String? = nil, thumbnail: String? = nil) {
          self.init(unsafeResultMap: ["__typename": "VideoEncodingTypes", "original": original, "large": large, "poster": poster, "preview": preview, "thumbnail": thumbnail])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var original: String {
          get {
            return resultMap["original"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "original")
          }
        }

        public var large: String? {
          get {
            return resultMap["large"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "large")
          }
        }

        public var poster: String? {
          get {
            return resultMap["poster"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "poster")
          }
        }

        public var preview: String? {
          get {
            return resultMap["preview"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "preview")
          }
        }

        public var thumbnail: String? {
          get {
            return resultMap["thumbnail"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "thumbnail")
          }
        }
      }

      public var asAudioEncodingTypes: AsAudioEncodingTypes? {
        get {
          if !AsAudioEncodingTypes.possibleTypes.contains(__typename) { return nil }
          return AsAudioEncodingTypes(unsafeResultMap: resultMap)
        }
        set {
          guard let newValue = newValue else { return }
          resultMap = newValue.resultMap
        }
      }

      public struct AsAudioEncodingTypes: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["AudioEncodingTypes"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("original", type: .nonNull(.scalar(String.self))),
            GraphQLField("large", type: .scalar(String.self)),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(original: String, large: String? = nil) {
          self.init(unsafeResultMap: ["__typename": "AudioEncodingTypes", "original": original, "large": large])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var original: String {
          get {
            return resultMap["original"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "original")
          }
        }

        public var large: String? {
          get {
            return resultMap["large"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "large")
          }
        }
      }

      public var asUnsupportedEncodingTypes: AsUnsupportedEncodingTypes? {
        get {
          if !AsUnsupportedEncodingTypes.possibleTypes.contains(__typename) { return nil }
          return AsUnsupportedEncodingTypes(unsafeResultMap: resultMap)
        }
        set {
          guard let newValue = newValue else { return }
          resultMap = newValue.resultMap
        }
      }

      public struct AsUnsupportedEncodingTypes: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["UnsupportedEncodingTypes"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("original", type: .nonNull(.scalar(String.self))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(original: String) {
          self.init(unsafeResultMap: ["__typename": "UnsupportedEncodingTypes", "original": original])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var original: String {
          get {
            return resultMap["original"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "original")
          }
        }
      }
    }
  }

  public struct Content: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["TokenContentMedia"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("size", type: .scalar(String.self)),
        GraphQLField("url", type: .scalar(String.self)),
        GraphQLField("size", type: .scalar(String.self)),
        GraphQLField("mimeType", type: .scalar(String.self)),
        GraphQLField("mediaEncoding", type: .object(MediaEncoding.selections)),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(size: String? = nil, url: String? = nil, mimeType: String? = nil, mediaEncoding: MediaEncoding? = nil) {
      self.init(unsafeResultMap: ["__typename": "TokenContentMedia", "size": size, "url": url, "mimeType": mimeType, "mediaEncoding": mediaEncoding.flatMap { (value: MediaEncoding) -> ResultMap in value.resultMap }])
    }

    public var __typename: String {
      get {
        return resultMap["__typename"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "__typename")
      }
    }

    public var size: String? {
      get {
        return resultMap["size"] as? String
      }
      set {
        resultMap.updateValue(newValue, forKey: "size")
      }
    }

    public var url: String? {
      get {
        return resultMap["url"] as? String
      }
      set {
        resultMap.updateValue(newValue, forKey: "url")
      }
    }

    public var mimeType: String? {
      get {
        return resultMap["mimeType"] as? String
      }
      set {
        resultMap.updateValue(newValue, forKey: "mimeType")
      }
    }

    public var mediaEncoding: MediaEncoding? {
      get {
        return (resultMap["mediaEncoding"] as? ResultMap).flatMap { MediaEncoding(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "mediaEncoding")
      }
    }

    public var fragments: Fragments {
      get {
        return Fragments(unsafeResultMap: resultMap)
      }
      set {
        resultMap += newValue.resultMap
      }
    }

    public struct Fragments {
      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public var fullMedia: FullMedia {
        get {
          return FullMedia(unsafeResultMap: resultMap)
        }
        set {
          resultMap += newValue.resultMap
        }
      }
    }

    public struct MediaEncoding: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["ImageEncodingTypes", "VideoEncodingTypes", "AudioEncodingTypes", "UnsupportedEncodingTypes"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLTypeCase(
            variants: ["ImageEncodingTypes": AsImageEncodingTypes.selections, "VideoEncodingTypes": AsVideoEncodingTypes.selections, "AudioEncodingTypes": AsAudioEncodingTypes.selections, "UnsupportedEncodingTypes": AsUnsupportedEncodingTypes.selections],
            default: [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            ]
          )
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public static func makeImageEncodingTypes(original: String, large: String? = nil, poster: String? = nil, thumbnail: String? = nil) -> MediaEncoding {
        return MediaEncoding(unsafeResultMap: ["__typename": "ImageEncodingTypes", "original": original, "large": large, "poster": poster, "thumbnail": thumbnail])
      }

      public static func makeVideoEncodingTypes(original: String, large: String? = nil, poster: String? = nil, preview: String? = nil, thumbnail: String? = nil) -> MediaEncoding {
        return MediaEncoding(unsafeResultMap: ["__typename": "VideoEncodingTypes", "original": original, "large": large, "poster": poster, "preview": preview, "thumbnail": thumbnail])
      }

      public static func makeAudioEncodingTypes(original: String, large: String? = nil) -> MediaEncoding {
        return MediaEncoding(unsafeResultMap: ["__typename": "AudioEncodingTypes", "original": original, "large": large])
      }

      public static func makeUnsupportedEncodingTypes(original: String) -> MediaEncoding {
        return MediaEncoding(unsafeResultMap: ["__typename": "UnsupportedEncodingTypes", "original": original])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var asImageEncodingTypes: AsImageEncodingTypes? {
        get {
          if !AsImageEncodingTypes.possibleTypes.contains(__typename) { return nil }
          return AsImageEncodingTypes(unsafeResultMap: resultMap)
        }
        set {
          guard let newValue = newValue else { return }
          resultMap = newValue.resultMap
        }
      }

      public struct AsImageEncodingTypes: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["ImageEncodingTypes"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("original", type: .nonNull(.scalar(String.self))),
            GraphQLField("large", type: .scalar(String.self)),
            GraphQLField("poster", type: .scalar(String.self)),
            GraphQLField("thumbnail", type: .scalar(String.self)),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(original: String, large: String? = nil, poster: String? = nil, thumbnail: String? = nil) {
          self.init(unsafeResultMap: ["__typename": "ImageEncodingTypes", "original": original, "large": large, "poster": poster, "thumbnail": thumbnail])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var original: String {
          get {
            return resultMap["original"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "original")
          }
        }

        public var large: String? {
          get {
            return resultMap["large"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "large")
          }
        }

        public var poster: String? {
          get {
            return resultMap["poster"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "poster")
          }
        }

        public var thumbnail: String? {
          get {
            return resultMap["thumbnail"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "thumbnail")
          }
        }
      }

      public var asVideoEncodingTypes: AsVideoEncodingTypes? {
        get {
          if !AsVideoEncodingTypes.possibleTypes.contains(__typename) { return nil }
          return AsVideoEncodingTypes(unsafeResultMap: resultMap)
        }
        set {
          guard let newValue = newValue else { return }
          resultMap = newValue.resultMap
        }
      }

      public struct AsVideoEncodingTypes: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["VideoEncodingTypes"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("original", type: .nonNull(.scalar(String.self))),
            GraphQLField("large", type: .scalar(String.self)),
            GraphQLField("poster", type: .scalar(String.self)),
            GraphQLField("preview", type: .scalar(String.self)),
            GraphQLField("thumbnail", type: .scalar(String.self)),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(original: String, large: String? = nil, poster: String? = nil, preview: String? = nil, thumbnail: String? = nil) {
          self.init(unsafeResultMap: ["__typename": "VideoEncodingTypes", "original": original, "large": large, "poster": poster, "preview": preview, "thumbnail": thumbnail])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var original: String {
          get {
            return resultMap["original"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "original")
          }
        }

        public var large: String? {
          get {
            return resultMap["large"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "large")
          }
        }

        public var poster: String? {
          get {
            return resultMap["poster"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "poster")
          }
        }

        public var preview: String? {
          get {
            return resultMap["preview"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "preview")
          }
        }

        public var thumbnail: String? {
          get {
            return resultMap["thumbnail"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "thumbnail")
          }
        }
      }

      public var asAudioEncodingTypes: AsAudioEncodingTypes? {
        get {
          if !AsAudioEncodingTypes.possibleTypes.contains(__typename) { return nil }
          return AsAudioEncodingTypes(unsafeResultMap: resultMap)
        }
        set {
          guard let newValue = newValue else { return }
          resultMap = newValue.resultMap
        }
      }

      public struct AsAudioEncodingTypes: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["AudioEncodingTypes"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("original", type: .nonNull(.scalar(String.self))),
            GraphQLField("large", type: .scalar(String.self)),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(original: String, large: String? = nil) {
          self.init(unsafeResultMap: ["__typename": "AudioEncodingTypes", "original": original, "large": large])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var original: String {
          get {
            return resultMap["original"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "original")
          }
        }

        public var large: String? {
          get {
            return resultMap["large"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "large")
          }
        }
      }

      public var asUnsupportedEncodingTypes: AsUnsupportedEncodingTypes? {
        get {
          if !AsUnsupportedEncodingTypes.possibleTypes.contains(__typename) { return nil }
          return AsUnsupportedEncodingTypes(unsafeResultMap: resultMap)
        }
        set {
          guard let newValue = newValue else { return }
          resultMap = newValue.resultMap
        }
      }

      public struct AsUnsupportedEncodingTypes: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["UnsupportedEncodingTypes"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("original", type: .nonNull(.scalar(String.self))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(original: String) {
          self.init(unsafeResultMap: ["__typename": "UnsupportedEncodingTypes", "original": original])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var original: String {
          get {
            return resultMap["original"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "original")
          }
        }
      }
    }
  }
}

public struct V1MarketEventPropertiesInfo: GraphQLFragment {
  /// The raw GraphQL definition of this fragment.
  public static let fragmentDefinition: String =
    """
    fragment V1MarketEventPropertiesInfo on V1MarketEventProperties {
      __typename
      ... on V1MarketAskCreatedEventProperties {
        __typename
        amount
        price {
          __typename
          ...PriceSummary
        }
        currency
      }
      ... on V1MarketAskRemovedEventProperties {
        __typename
        amount
        price {
          __typename
          ...PriceSummary
        }
        currency
      }
      ... on V1MarketOfferCreatedEventProperties {
        __typename
        amount
        price {
          __typename
          ...PriceSummary
        }
        currency
        bidder
      }
      ... on V1MarketOfferFinalizedEventProperties {
        __typename
        amount
        price {
          __typename
          ...PriceSummary
        }
        currency
        bidder
      }
      ... on V1MarketOfferRemovedEventProperties {
        __typename
        amount
        price {
          __typename
          ...PriceSummary
        }
        currency
        bidder
      }
    }
    """

  public static let possibleTypes: [String] = ["V1MarketAskCreatedEventProperties", "V1MarketAskRemovedEventProperties", "V1MarketOfferCreatedEventProperties", "V1MarketOfferFinalizedEventProperties", "V1MarketOfferRemovedEventProperties", "V1MarketBidShareUpdatedEventProperties"]

  public static var selections: [GraphQLSelection] {
    return [
      GraphQLTypeCase(
        variants: ["V1MarketAskCreatedEventProperties": AsV1MarketAskCreatedEventProperties.selections, "V1MarketAskRemovedEventProperties": AsV1MarketAskRemovedEventProperties.selections, "V1MarketOfferCreatedEventProperties": AsV1MarketOfferCreatedEventProperties.selections, "V1MarketOfferFinalizedEventProperties": AsV1MarketOfferFinalizedEventProperties.selections, "V1MarketOfferRemovedEventProperties": AsV1MarketOfferRemovedEventProperties.selections],
        default: [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        ]
      )
    ]
  }

  public private(set) var resultMap: ResultMap

  public init(unsafeResultMap: ResultMap) {
    self.resultMap = unsafeResultMap
  }

  public static func makeV1MarketBidShareUpdatedEventProperties() -> V1MarketEventPropertiesInfo {
    return V1MarketEventPropertiesInfo(unsafeResultMap: ["__typename": "V1MarketBidShareUpdatedEventProperties"])
  }

  public static func makeV1MarketAskCreatedEventProperties(amount: String, price: AsV1MarketAskCreatedEventProperties.Price, currency: String) -> V1MarketEventPropertiesInfo {
    return V1MarketEventPropertiesInfo(unsafeResultMap: ["__typename": "V1MarketAskCreatedEventProperties", "amount": amount, "price": price.resultMap, "currency": currency])
  }

  public static func makeV1MarketAskRemovedEventProperties(amount: String, price: AsV1MarketAskRemovedEventProperties.Price, currency: String) -> V1MarketEventPropertiesInfo {
    return V1MarketEventPropertiesInfo(unsafeResultMap: ["__typename": "V1MarketAskRemovedEventProperties", "amount": amount, "price": price.resultMap, "currency": currency])
  }

  public static func makeV1MarketOfferCreatedEventProperties(amount: String, price: AsV1MarketOfferCreatedEventProperties.Price, currency: String, bidder: String) -> V1MarketEventPropertiesInfo {
    return V1MarketEventPropertiesInfo(unsafeResultMap: ["__typename": "V1MarketOfferCreatedEventProperties", "amount": amount, "price": price.resultMap, "currency": currency, "bidder": bidder])
  }

  public static func makeV1MarketOfferFinalizedEventProperties(amount: String, price: AsV1MarketOfferFinalizedEventProperties.Price, currency: String, bidder: String) -> V1MarketEventPropertiesInfo {
    return V1MarketEventPropertiesInfo(unsafeResultMap: ["__typename": "V1MarketOfferFinalizedEventProperties", "amount": amount, "price": price.resultMap, "currency": currency, "bidder": bidder])
  }

  public static func makeV1MarketOfferRemovedEventProperties(amount: String, price: AsV1MarketOfferRemovedEventProperties.Price, currency: String, bidder: String) -> V1MarketEventPropertiesInfo {
    return V1MarketEventPropertiesInfo(unsafeResultMap: ["__typename": "V1MarketOfferRemovedEventProperties", "amount": amount, "price": price.resultMap, "currency": currency, "bidder": bidder])
  }

  public var __typename: String {
    get {
      return resultMap["__typename"]! as! String
    }
    set {
      resultMap.updateValue(newValue, forKey: "__typename")
    }
  }

  public var asV1MarketAskCreatedEventProperties: AsV1MarketAskCreatedEventProperties? {
    get {
      if !AsV1MarketAskCreatedEventProperties.possibleTypes.contains(__typename) { return nil }
      return AsV1MarketAskCreatedEventProperties(unsafeResultMap: resultMap)
    }
    set {
      guard let newValue = newValue else { return }
      resultMap = newValue.resultMap
    }
  }

  public struct AsV1MarketAskCreatedEventProperties: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["V1MarketAskCreatedEventProperties"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("amount", type: .nonNull(.scalar(String.self))),
        GraphQLField("price", type: .nonNull(.object(Price.selections))),
        GraphQLField("currency", type: .nonNull(.scalar(String.self))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(amount: String, price: Price, currency: String) {
      self.init(unsafeResultMap: ["__typename": "V1MarketAskCreatedEventProperties", "amount": amount, "price": price.resultMap, "currency": currency])
    }

    public var __typename: String {
      get {
        return resultMap["__typename"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "__typename")
      }
    }

    public var amount: String {
      get {
        return resultMap["amount"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "amount")
      }
    }

    public var price: Price {
      get {
        return Price(unsafeResultMap: resultMap["price"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "price")
      }
    }

    public var currency: String {
      get {
        return resultMap["currency"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "currency")
      }
    }

    public struct Price: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["PriceAtTime"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
          GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
          GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
          GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
        self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var blockNumber: Int {
        get {
          return resultMap["blockNumber"]! as! Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "blockNumber")
        }
      }

      public var chainTokenPrice: ChainTokenPrice? {
        get {
          return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
        }
      }

      public var nativePrice: NativePrice {
        get {
          return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
        }
        set {
          resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
        }
      }

      public var usdcPrice: UsdcPrice? {
        get {
          return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
        }
      }

      public var fragments: Fragments {
        get {
          return Fragments(unsafeResultMap: resultMap)
        }
        set {
          resultMap += newValue.resultMap
        }
      }

      public struct Fragments {
        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public var priceSummary: PriceSummary {
          get {
            return PriceSummary(unsafeResultMap: resultMap)
          }
          set {
            resultMap += newValue.resultMap
          }
        }
      }

      public struct ChainTokenPrice: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["CurrencyAmount"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
            GraphQLField("raw", type: .nonNull(.scalar(String.self))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(decimal: Double, raw: String) {
          self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var decimal: Double {
          get {
            return resultMap["decimal"]! as! Double
          }
          set {
            resultMap.updateValue(newValue, forKey: "decimal")
          }
        }

        public var raw: String {
          get {
            return resultMap["raw"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "raw")
          }
        }
      }

      public struct NativePrice: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["CurrencyAmount"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
            GraphQLField("raw", type: .nonNull(.scalar(String.self))),
            GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(decimal: Double, raw: String, currency: Currency) {
          self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var decimal: Double {
          get {
            return resultMap["decimal"]! as! Double
          }
          set {
            resultMap.updateValue(newValue, forKey: "decimal")
          }
        }

        public var raw: String {
          get {
            return resultMap["raw"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "raw")
          }
        }

        public var currency: Currency {
          get {
            return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
          }
          set {
            resultMap.updateValue(newValue.resultMap, forKey: "currency")
          }
        }

        public struct Currency: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["Currency"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("address", type: .nonNull(.scalar(String.self))),
              GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(address: String, decimals: Int, name: String) {
            self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var address: String {
            get {
              return resultMap["address"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "address")
            }
          }

          public var decimals: Int {
            get {
              return resultMap["decimals"]! as! Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "decimals")
            }
          }

          public var name: String {
            get {
              return resultMap["name"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "name")
            }
          }
        }
      }

      public struct UsdcPrice: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["CurrencyAmount"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
            GraphQLField("raw", type: .nonNull(.scalar(String.self))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(decimal: Double, raw: String) {
          self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var decimal: Double {
          get {
            return resultMap["decimal"]! as! Double
          }
          set {
            resultMap.updateValue(newValue, forKey: "decimal")
          }
        }

        public var raw: String {
          get {
            return resultMap["raw"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "raw")
          }
        }
      }
    }
  }

  public var asV1MarketAskRemovedEventProperties: AsV1MarketAskRemovedEventProperties? {
    get {
      if !AsV1MarketAskRemovedEventProperties.possibleTypes.contains(__typename) { return nil }
      return AsV1MarketAskRemovedEventProperties(unsafeResultMap: resultMap)
    }
    set {
      guard let newValue = newValue else { return }
      resultMap = newValue.resultMap
    }
  }

  public struct AsV1MarketAskRemovedEventProperties: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["V1MarketAskRemovedEventProperties"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("amount", type: .nonNull(.scalar(String.self))),
        GraphQLField("price", type: .nonNull(.object(Price.selections))),
        GraphQLField("currency", type: .nonNull(.scalar(String.self))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(amount: String, price: Price, currency: String) {
      self.init(unsafeResultMap: ["__typename": "V1MarketAskRemovedEventProperties", "amount": amount, "price": price.resultMap, "currency": currency])
    }

    public var __typename: String {
      get {
        return resultMap["__typename"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "__typename")
      }
    }

    public var amount: String {
      get {
        return resultMap["amount"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "amount")
      }
    }

    public var price: Price {
      get {
        return Price(unsafeResultMap: resultMap["price"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "price")
      }
    }

    public var currency: String {
      get {
        return resultMap["currency"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "currency")
      }
    }

    public struct Price: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["PriceAtTime"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
          GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
          GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
          GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
        self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var blockNumber: Int {
        get {
          return resultMap["blockNumber"]! as! Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "blockNumber")
        }
      }

      public var chainTokenPrice: ChainTokenPrice? {
        get {
          return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
        }
      }

      public var nativePrice: NativePrice {
        get {
          return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
        }
        set {
          resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
        }
      }

      public var usdcPrice: UsdcPrice? {
        get {
          return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
        }
      }

      public var fragments: Fragments {
        get {
          return Fragments(unsafeResultMap: resultMap)
        }
        set {
          resultMap += newValue.resultMap
        }
      }

      public struct Fragments {
        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public var priceSummary: PriceSummary {
          get {
            return PriceSummary(unsafeResultMap: resultMap)
          }
          set {
            resultMap += newValue.resultMap
          }
        }
      }

      public struct ChainTokenPrice: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["CurrencyAmount"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
            GraphQLField("raw", type: .nonNull(.scalar(String.self))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(decimal: Double, raw: String) {
          self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var decimal: Double {
          get {
            return resultMap["decimal"]! as! Double
          }
          set {
            resultMap.updateValue(newValue, forKey: "decimal")
          }
        }

        public var raw: String {
          get {
            return resultMap["raw"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "raw")
          }
        }
      }

      public struct NativePrice: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["CurrencyAmount"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
            GraphQLField("raw", type: .nonNull(.scalar(String.self))),
            GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(decimal: Double, raw: String, currency: Currency) {
          self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var decimal: Double {
          get {
            return resultMap["decimal"]! as! Double
          }
          set {
            resultMap.updateValue(newValue, forKey: "decimal")
          }
        }

        public var raw: String {
          get {
            return resultMap["raw"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "raw")
          }
        }

        public var currency: Currency {
          get {
            return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
          }
          set {
            resultMap.updateValue(newValue.resultMap, forKey: "currency")
          }
        }

        public struct Currency: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["Currency"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("address", type: .nonNull(.scalar(String.self))),
              GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(address: String, decimals: Int, name: String) {
            self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var address: String {
            get {
              return resultMap["address"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "address")
            }
          }

          public var decimals: Int {
            get {
              return resultMap["decimals"]! as! Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "decimals")
            }
          }

          public var name: String {
            get {
              return resultMap["name"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "name")
            }
          }
        }
      }

      public struct UsdcPrice: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["CurrencyAmount"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
            GraphQLField("raw", type: .nonNull(.scalar(String.self))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(decimal: Double, raw: String) {
          self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var decimal: Double {
          get {
            return resultMap["decimal"]! as! Double
          }
          set {
            resultMap.updateValue(newValue, forKey: "decimal")
          }
        }

        public var raw: String {
          get {
            return resultMap["raw"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "raw")
          }
        }
      }
    }
  }

  public var asV1MarketOfferCreatedEventProperties: AsV1MarketOfferCreatedEventProperties? {
    get {
      if !AsV1MarketOfferCreatedEventProperties.possibleTypes.contains(__typename) { return nil }
      return AsV1MarketOfferCreatedEventProperties(unsafeResultMap: resultMap)
    }
    set {
      guard let newValue = newValue else { return }
      resultMap = newValue.resultMap
    }
  }

  public struct AsV1MarketOfferCreatedEventProperties: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["V1MarketOfferCreatedEventProperties"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("amount", type: .nonNull(.scalar(String.self))),
        GraphQLField("price", type: .nonNull(.object(Price.selections))),
        GraphQLField("currency", type: .nonNull(.scalar(String.self))),
        GraphQLField("bidder", type: .nonNull(.scalar(String.self))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(amount: String, price: Price, currency: String, bidder: String) {
      self.init(unsafeResultMap: ["__typename": "V1MarketOfferCreatedEventProperties", "amount": amount, "price": price.resultMap, "currency": currency, "bidder": bidder])
    }

    public var __typename: String {
      get {
        return resultMap["__typename"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "__typename")
      }
    }

    public var amount: String {
      get {
        return resultMap["amount"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "amount")
      }
    }

    public var price: Price {
      get {
        return Price(unsafeResultMap: resultMap["price"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "price")
      }
    }

    public var currency: String {
      get {
        return resultMap["currency"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "currency")
      }
    }

    public var bidder: String {
      get {
        return resultMap["bidder"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "bidder")
      }
    }

    public struct Price: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["PriceAtTime"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
          GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
          GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
          GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
        self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var blockNumber: Int {
        get {
          return resultMap["blockNumber"]! as! Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "blockNumber")
        }
      }

      public var chainTokenPrice: ChainTokenPrice? {
        get {
          return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
        }
      }

      public var nativePrice: NativePrice {
        get {
          return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
        }
        set {
          resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
        }
      }

      public var usdcPrice: UsdcPrice? {
        get {
          return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
        }
      }

      public var fragments: Fragments {
        get {
          return Fragments(unsafeResultMap: resultMap)
        }
        set {
          resultMap += newValue.resultMap
        }
      }

      public struct Fragments {
        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public var priceSummary: PriceSummary {
          get {
            return PriceSummary(unsafeResultMap: resultMap)
          }
          set {
            resultMap += newValue.resultMap
          }
        }
      }

      public struct ChainTokenPrice: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["CurrencyAmount"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
            GraphQLField("raw", type: .nonNull(.scalar(String.self))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(decimal: Double, raw: String) {
          self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var decimal: Double {
          get {
            return resultMap["decimal"]! as! Double
          }
          set {
            resultMap.updateValue(newValue, forKey: "decimal")
          }
        }

        public var raw: String {
          get {
            return resultMap["raw"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "raw")
          }
        }
      }

      public struct NativePrice: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["CurrencyAmount"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
            GraphQLField("raw", type: .nonNull(.scalar(String.self))),
            GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(decimal: Double, raw: String, currency: Currency) {
          self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var decimal: Double {
          get {
            return resultMap["decimal"]! as! Double
          }
          set {
            resultMap.updateValue(newValue, forKey: "decimal")
          }
        }

        public var raw: String {
          get {
            return resultMap["raw"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "raw")
          }
        }

        public var currency: Currency {
          get {
            return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
          }
          set {
            resultMap.updateValue(newValue.resultMap, forKey: "currency")
          }
        }

        public struct Currency: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["Currency"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("address", type: .nonNull(.scalar(String.self))),
              GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(address: String, decimals: Int, name: String) {
            self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var address: String {
            get {
              return resultMap["address"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "address")
            }
          }

          public var decimals: Int {
            get {
              return resultMap["decimals"]! as! Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "decimals")
            }
          }

          public var name: String {
            get {
              return resultMap["name"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "name")
            }
          }
        }
      }

      public struct UsdcPrice: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["CurrencyAmount"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
            GraphQLField("raw", type: .nonNull(.scalar(String.self))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(decimal: Double, raw: String) {
          self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var decimal: Double {
          get {
            return resultMap["decimal"]! as! Double
          }
          set {
            resultMap.updateValue(newValue, forKey: "decimal")
          }
        }

        public var raw: String {
          get {
            return resultMap["raw"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "raw")
          }
        }
      }
    }
  }

  public var asV1MarketOfferFinalizedEventProperties: AsV1MarketOfferFinalizedEventProperties? {
    get {
      if !AsV1MarketOfferFinalizedEventProperties.possibleTypes.contains(__typename) { return nil }
      return AsV1MarketOfferFinalizedEventProperties(unsafeResultMap: resultMap)
    }
    set {
      guard let newValue = newValue else { return }
      resultMap = newValue.resultMap
    }
  }

  public struct AsV1MarketOfferFinalizedEventProperties: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["V1MarketOfferFinalizedEventProperties"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("amount", type: .nonNull(.scalar(String.self))),
        GraphQLField("price", type: .nonNull(.object(Price.selections))),
        GraphQLField("currency", type: .nonNull(.scalar(String.self))),
        GraphQLField("bidder", type: .nonNull(.scalar(String.self))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(amount: String, price: Price, currency: String, bidder: String) {
      self.init(unsafeResultMap: ["__typename": "V1MarketOfferFinalizedEventProperties", "amount": amount, "price": price.resultMap, "currency": currency, "bidder": bidder])
    }

    public var __typename: String {
      get {
        return resultMap["__typename"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "__typename")
      }
    }

    public var amount: String {
      get {
        return resultMap["amount"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "amount")
      }
    }

    public var price: Price {
      get {
        return Price(unsafeResultMap: resultMap["price"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "price")
      }
    }

    public var currency: String {
      get {
        return resultMap["currency"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "currency")
      }
    }

    public var bidder: String {
      get {
        return resultMap["bidder"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "bidder")
      }
    }

    public struct Price: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["PriceAtTime"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
          GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
          GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
          GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
        self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var blockNumber: Int {
        get {
          return resultMap["blockNumber"]! as! Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "blockNumber")
        }
      }

      public var chainTokenPrice: ChainTokenPrice? {
        get {
          return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
        }
      }

      public var nativePrice: NativePrice {
        get {
          return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
        }
        set {
          resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
        }
      }

      public var usdcPrice: UsdcPrice? {
        get {
          return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
        }
      }

      public var fragments: Fragments {
        get {
          return Fragments(unsafeResultMap: resultMap)
        }
        set {
          resultMap += newValue.resultMap
        }
      }

      public struct Fragments {
        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public var priceSummary: PriceSummary {
          get {
            return PriceSummary(unsafeResultMap: resultMap)
          }
          set {
            resultMap += newValue.resultMap
          }
        }
      }

      public struct ChainTokenPrice: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["CurrencyAmount"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
            GraphQLField("raw", type: .nonNull(.scalar(String.self))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(decimal: Double, raw: String) {
          self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var decimal: Double {
          get {
            return resultMap["decimal"]! as! Double
          }
          set {
            resultMap.updateValue(newValue, forKey: "decimal")
          }
        }

        public var raw: String {
          get {
            return resultMap["raw"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "raw")
          }
        }
      }

      public struct NativePrice: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["CurrencyAmount"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
            GraphQLField("raw", type: .nonNull(.scalar(String.self))),
            GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(decimal: Double, raw: String, currency: Currency) {
          self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var decimal: Double {
          get {
            return resultMap["decimal"]! as! Double
          }
          set {
            resultMap.updateValue(newValue, forKey: "decimal")
          }
        }

        public var raw: String {
          get {
            return resultMap["raw"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "raw")
          }
        }

        public var currency: Currency {
          get {
            return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
          }
          set {
            resultMap.updateValue(newValue.resultMap, forKey: "currency")
          }
        }

        public struct Currency: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["Currency"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("address", type: .nonNull(.scalar(String.self))),
              GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(address: String, decimals: Int, name: String) {
            self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var address: String {
            get {
              return resultMap["address"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "address")
            }
          }

          public var decimals: Int {
            get {
              return resultMap["decimals"]! as! Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "decimals")
            }
          }

          public var name: String {
            get {
              return resultMap["name"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "name")
            }
          }
        }
      }

      public struct UsdcPrice: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["CurrencyAmount"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
            GraphQLField("raw", type: .nonNull(.scalar(String.self))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(decimal: Double, raw: String) {
          self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var decimal: Double {
          get {
            return resultMap["decimal"]! as! Double
          }
          set {
            resultMap.updateValue(newValue, forKey: "decimal")
          }
        }

        public var raw: String {
          get {
            return resultMap["raw"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "raw")
          }
        }
      }
    }
  }

  public var asV1MarketOfferRemovedEventProperties: AsV1MarketOfferRemovedEventProperties? {
    get {
      if !AsV1MarketOfferRemovedEventProperties.possibleTypes.contains(__typename) { return nil }
      return AsV1MarketOfferRemovedEventProperties(unsafeResultMap: resultMap)
    }
    set {
      guard let newValue = newValue else { return }
      resultMap = newValue.resultMap
    }
  }

  public struct AsV1MarketOfferRemovedEventProperties: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["V1MarketOfferRemovedEventProperties"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("amount", type: .nonNull(.scalar(String.self))),
        GraphQLField("price", type: .nonNull(.object(Price.selections))),
        GraphQLField("currency", type: .nonNull(.scalar(String.self))),
        GraphQLField("bidder", type: .nonNull(.scalar(String.self))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(amount: String, price: Price, currency: String, bidder: String) {
      self.init(unsafeResultMap: ["__typename": "V1MarketOfferRemovedEventProperties", "amount": amount, "price": price.resultMap, "currency": currency, "bidder": bidder])
    }

    public var __typename: String {
      get {
        return resultMap["__typename"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "__typename")
      }
    }

    public var amount: String {
      get {
        return resultMap["amount"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "amount")
      }
    }

    public var price: Price {
      get {
        return Price(unsafeResultMap: resultMap["price"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "price")
      }
    }

    public var currency: String {
      get {
        return resultMap["currency"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "currency")
      }
    }

    public var bidder: String {
      get {
        return resultMap["bidder"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "bidder")
      }
    }

    public struct Price: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["PriceAtTime"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
          GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
          GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
          GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
        self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var blockNumber: Int {
        get {
          return resultMap["blockNumber"]! as! Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "blockNumber")
        }
      }

      public var chainTokenPrice: ChainTokenPrice? {
        get {
          return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
        }
      }

      public var nativePrice: NativePrice {
        get {
          return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
        }
        set {
          resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
        }
      }

      public var usdcPrice: UsdcPrice? {
        get {
          return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
        }
      }

      public var fragments: Fragments {
        get {
          return Fragments(unsafeResultMap: resultMap)
        }
        set {
          resultMap += newValue.resultMap
        }
      }

      public struct Fragments {
        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public var priceSummary: PriceSummary {
          get {
            return PriceSummary(unsafeResultMap: resultMap)
          }
          set {
            resultMap += newValue.resultMap
          }
        }
      }

      public struct ChainTokenPrice: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["CurrencyAmount"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
            GraphQLField("raw", type: .nonNull(.scalar(String.self))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(decimal: Double, raw: String) {
          self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var decimal: Double {
          get {
            return resultMap["decimal"]! as! Double
          }
          set {
            resultMap.updateValue(newValue, forKey: "decimal")
          }
        }

        public var raw: String {
          get {
            return resultMap["raw"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "raw")
          }
        }
      }

      public struct NativePrice: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["CurrencyAmount"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
            GraphQLField("raw", type: .nonNull(.scalar(String.self))),
            GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(decimal: Double, raw: String, currency: Currency) {
          self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var decimal: Double {
          get {
            return resultMap["decimal"]! as! Double
          }
          set {
            resultMap.updateValue(newValue, forKey: "decimal")
          }
        }

        public var raw: String {
          get {
            return resultMap["raw"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "raw")
          }
        }

        public var currency: Currency {
          get {
            return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
          }
          set {
            resultMap.updateValue(newValue.resultMap, forKey: "currency")
          }
        }

        public struct Currency: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["Currency"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("address", type: .nonNull(.scalar(String.self))),
              GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(address: String, decimals: Int, name: String) {
            self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var address: String {
            get {
              return resultMap["address"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "address")
            }
          }

          public var decimals: Int {
            get {
              return resultMap["decimals"]! as! Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "decimals")
            }
          }

          public var name: String {
            get {
              return resultMap["name"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "name")
            }
          }
        }
      }

      public struct UsdcPrice: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["CurrencyAmount"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
            GraphQLField("raw", type: .nonNull(.scalar(String.self))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(decimal: Double, raw: String) {
          self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var decimal: Double {
          get {
            return resultMap["decimal"]! as! Double
          }
          set {
            resultMap.updateValue(newValue, forKey: "decimal")
          }
        }

        public var raw: String {
          get {
            return resultMap["raw"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "raw")
          }
        }
      }
    }
  }
}

public struct V2AuctionEventPropertiesInfo: GraphQLFragment {
  /// The raw GraphQL definition of this fragment.
  public static let fragmentDefinition: String =
    """
    fragment V2AuctionEventPropertiesInfo on V2AuctionEventProperties {
      __typename
      ... on V2AuctionBidEventProperties {
        __typename
        sender
        firstBid
        extended
        value
        price {
          __typename
          ...PriceSummary
        }
      }
      ... on V2AuctionCreatedEventProperties {
        __typename
        auctionCurrency
        tokenOwner
        curator
        curatorFeePercentage
        duration
        reservePrice
        price {
          __typename
          ...PriceSummary
        }
      }
      ... on V2AuctionCanceledEventProperties {
        __typename
        tokenOwner
      }
      ... on V2AuctionDurationExtendedEventProperties {
        __typename
        duration
      }
      ... on V2AuctionBidEventProperties {
        __typename
        sender
        firstBid
        extended
        value
        price {
          __typename
          ...PriceSummary
        }
      }
      ... on V2AuctionEndedEventProperties {
        __typename
        tokenOwner
        curator
        winner
        auctionCurrency
        amount
        curatorFee
      }
      ... on V2AuctionReservePriceUpdatedEventProperties {
        __typename
        reservePrice
        price {
          __typename
          ...PriceSummary
        }
      }
      ... on V2AuctionEndedEventProperties {
        __typename
        tokenOwner
        curator
        winner
        auctionCurrency
        amount
        curatorFee
      }
      ... on V2AuctionApprovalUpdatedEventProperties {
        __typename
        approved
      }
    }
    """

  public static let possibleTypes: [String] = ["V2AuctionBidEventProperties", "V2AuctionCreatedEventProperties", "V2AuctionCanceledEventProperties", "V2AuctionDurationExtendedEventProperties", "V2AuctionEndedEventProperties", "V2AuctionReservePriceUpdatedEventProperties", "V2AuctionApprovalUpdatedEventProperties"]

  public static var selections: [GraphQLSelection] {
    return [
      GraphQLTypeCase(
        variants: ["V2AuctionBidEventProperties": AsV2AuctionBidEventProperties.selections, "V2AuctionCreatedEventProperties": AsV2AuctionCreatedEventProperties.selections, "V2AuctionCanceledEventProperties": AsV2AuctionCanceledEventProperties.selections, "V2AuctionDurationExtendedEventProperties": AsV2AuctionDurationExtendedEventProperties.selections, "V2AuctionEndedEventProperties": AsV2AuctionEndedEventProperties.selections, "V2AuctionReservePriceUpdatedEventProperties": AsV2AuctionReservePriceUpdatedEventProperties.selections, "V2AuctionApprovalUpdatedEventProperties": AsV2AuctionApprovalUpdatedEventProperties.selections],
        default: [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        ]
      )
    ]
  }

  public private(set) var resultMap: ResultMap

  public init(unsafeResultMap: ResultMap) {
    self.resultMap = unsafeResultMap
  }

  public static func makeV2AuctionBidEventProperties(sender: String, firstBid: Bool, extended: Bool, value: String, price: AsV2AuctionBidEventProperties.Price) -> V2AuctionEventPropertiesInfo {
    return V2AuctionEventPropertiesInfo(unsafeResultMap: ["__typename": "V2AuctionBidEventProperties", "sender": sender, "firstBid": firstBid, "extended": extended, "value": value, "price": price.resultMap])
  }

  public static func makeV2AuctionCreatedEventProperties(auctionCurrency: String, tokenOwner: String, curator: String, curatorFeePercentage: Int, duration: String, reservePrice: String, price: AsV2AuctionCreatedEventProperties.Price) -> V2AuctionEventPropertiesInfo {
    return V2AuctionEventPropertiesInfo(unsafeResultMap: ["__typename": "V2AuctionCreatedEventProperties", "auctionCurrency": auctionCurrency, "tokenOwner": tokenOwner, "curator": curator, "curatorFeePercentage": curatorFeePercentage, "duration": duration, "reservePrice": reservePrice, "price": price.resultMap])
  }

  public static func makeV2AuctionCanceledEventProperties(tokenOwner: String) -> V2AuctionEventPropertiesInfo {
    return V2AuctionEventPropertiesInfo(unsafeResultMap: ["__typename": "V2AuctionCanceledEventProperties", "tokenOwner": tokenOwner])
  }

  public static func makeV2AuctionDurationExtendedEventProperties(duration: String) -> V2AuctionEventPropertiesInfo {
    return V2AuctionEventPropertiesInfo(unsafeResultMap: ["__typename": "V2AuctionDurationExtendedEventProperties", "duration": duration])
  }

  public static func makeV2AuctionEndedEventProperties(tokenOwner: String, curator: String, winner: String, auctionCurrency: String, amount: String, curatorFee: String) -> V2AuctionEventPropertiesInfo {
    return V2AuctionEventPropertiesInfo(unsafeResultMap: ["__typename": "V2AuctionEndedEventProperties", "tokenOwner": tokenOwner, "curator": curator, "winner": winner, "auctionCurrency": auctionCurrency, "amount": amount, "curatorFee": curatorFee])
  }

  public static func makeV2AuctionReservePriceUpdatedEventProperties(reservePrice: String, price: AsV2AuctionReservePriceUpdatedEventProperties.Price) -> V2AuctionEventPropertiesInfo {
    return V2AuctionEventPropertiesInfo(unsafeResultMap: ["__typename": "V2AuctionReservePriceUpdatedEventProperties", "reservePrice": reservePrice, "price": price.resultMap])
  }

  public static func makeV2AuctionApprovalUpdatedEventProperties(approved: Bool) -> V2AuctionEventPropertiesInfo {
    return V2AuctionEventPropertiesInfo(unsafeResultMap: ["__typename": "V2AuctionApprovalUpdatedEventProperties", "approved": approved])
  }

  public var __typename: String {
    get {
      return resultMap["__typename"]! as! String
    }
    set {
      resultMap.updateValue(newValue, forKey: "__typename")
    }
  }

  public var asV2AuctionBidEventProperties: AsV2AuctionBidEventProperties? {
    get {
      if !AsV2AuctionBidEventProperties.possibleTypes.contains(__typename) { return nil }
      return AsV2AuctionBidEventProperties(unsafeResultMap: resultMap)
    }
    set {
      guard let newValue = newValue else { return }
      resultMap = newValue.resultMap
    }
  }

  public struct AsV2AuctionBidEventProperties: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["V2AuctionBidEventProperties"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("sender", type: .nonNull(.scalar(String.self))),
        GraphQLField("firstBid", type: .nonNull(.scalar(Bool.self))),
        GraphQLField("extended", type: .nonNull(.scalar(Bool.self))),
        GraphQLField("value", type: .nonNull(.scalar(String.self))),
        GraphQLField("price", type: .nonNull(.object(Price.selections))),
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("sender", type: .nonNull(.scalar(String.self))),
        GraphQLField("firstBid", type: .nonNull(.scalar(Bool.self))),
        GraphQLField("extended", type: .nonNull(.scalar(Bool.self))),
        GraphQLField("value", type: .nonNull(.scalar(String.self))),
        GraphQLField("price", type: .nonNull(.object(Price.selections))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(sender: String, firstBid: Bool, extended: Bool, value: String, price: Price) {
      self.init(unsafeResultMap: ["__typename": "V2AuctionBidEventProperties", "sender": sender, "firstBid": firstBid, "extended": extended, "value": value, "price": price.resultMap])
    }

    public var __typename: String {
      get {
        return resultMap["__typename"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "__typename")
      }
    }

    public var sender: String {
      get {
        return resultMap["sender"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "sender")
      }
    }

    public var firstBid: Bool {
      get {
        return resultMap["firstBid"]! as! Bool
      }
      set {
        resultMap.updateValue(newValue, forKey: "firstBid")
      }
    }

    public var extended: Bool {
      get {
        return resultMap["extended"]! as! Bool
      }
      set {
        resultMap.updateValue(newValue, forKey: "extended")
      }
    }

    public var value: String {
      get {
        return resultMap["value"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "value")
      }
    }

    public var price: Price {
      get {
        return Price(unsafeResultMap: resultMap["price"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "price")
      }
    }

    public struct Price: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["PriceAtTime"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
          GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
          GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
          GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
        self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var blockNumber: Int {
        get {
          return resultMap["blockNumber"]! as! Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "blockNumber")
        }
      }

      public var chainTokenPrice: ChainTokenPrice? {
        get {
          return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
        }
      }

      public var nativePrice: NativePrice {
        get {
          return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
        }
        set {
          resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
        }
      }

      public var usdcPrice: UsdcPrice? {
        get {
          return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
        }
      }

      public var fragments: Fragments {
        get {
          return Fragments(unsafeResultMap: resultMap)
        }
        set {
          resultMap += newValue.resultMap
        }
      }

      public struct Fragments {
        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public var priceSummary: PriceSummary {
          get {
            return PriceSummary(unsafeResultMap: resultMap)
          }
          set {
            resultMap += newValue.resultMap
          }
        }
      }

      public struct ChainTokenPrice: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["CurrencyAmount"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
            GraphQLField("raw", type: .nonNull(.scalar(String.self))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(decimal: Double, raw: String) {
          self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var decimal: Double {
          get {
            return resultMap["decimal"]! as! Double
          }
          set {
            resultMap.updateValue(newValue, forKey: "decimal")
          }
        }

        public var raw: String {
          get {
            return resultMap["raw"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "raw")
          }
        }
      }

      public struct NativePrice: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["CurrencyAmount"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
            GraphQLField("raw", type: .nonNull(.scalar(String.self))),
            GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(decimal: Double, raw: String, currency: Currency) {
          self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var decimal: Double {
          get {
            return resultMap["decimal"]! as! Double
          }
          set {
            resultMap.updateValue(newValue, forKey: "decimal")
          }
        }

        public var raw: String {
          get {
            return resultMap["raw"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "raw")
          }
        }

        public var currency: Currency {
          get {
            return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
          }
          set {
            resultMap.updateValue(newValue.resultMap, forKey: "currency")
          }
        }

        public struct Currency: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["Currency"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("address", type: .nonNull(.scalar(String.self))),
              GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(address: String, decimals: Int, name: String) {
            self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var address: String {
            get {
              return resultMap["address"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "address")
            }
          }

          public var decimals: Int {
            get {
              return resultMap["decimals"]! as! Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "decimals")
            }
          }

          public var name: String {
            get {
              return resultMap["name"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "name")
            }
          }
        }
      }

      public struct UsdcPrice: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["CurrencyAmount"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
            GraphQLField("raw", type: .nonNull(.scalar(String.self))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(decimal: Double, raw: String) {
          self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var decimal: Double {
          get {
            return resultMap["decimal"]! as! Double
          }
          set {
            resultMap.updateValue(newValue, forKey: "decimal")
          }
        }

        public var raw: String {
          get {
            return resultMap["raw"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "raw")
          }
        }
      }
    }
  }

  public var asV2AuctionCreatedEventProperties: AsV2AuctionCreatedEventProperties? {
    get {
      if !AsV2AuctionCreatedEventProperties.possibleTypes.contains(__typename) { return nil }
      return AsV2AuctionCreatedEventProperties(unsafeResultMap: resultMap)
    }
    set {
      guard let newValue = newValue else { return }
      resultMap = newValue.resultMap
    }
  }

  public struct AsV2AuctionCreatedEventProperties: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["V2AuctionCreatedEventProperties"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("auctionCurrency", type: .nonNull(.scalar(String.self))),
        GraphQLField("tokenOwner", type: .nonNull(.scalar(String.self))),
        GraphQLField("curator", type: .nonNull(.scalar(String.self))),
        GraphQLField("curatorFeePercentage", type: .nonNull(.scalar(Int.self))),
        GraphQLField("duration", type: .nonNull(.scalar(String.self))),
        GraphQLField("reservePrice", type: .nonNull(.scalar(String.self))),
        GraphQLField("price", type: .nonNull(.object(Price.selections))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(auctionCurrency: String, tokenOwner: String, curator: String, curatorFeePercentage: Int, duration: String, reservePrice: String, price: Price) {
      self.init(unsafeResultMap: ["__typename": "V2AuctionCreatedEventProperties", "auctionCurrency": auctionCurrency, "tokenOwner": tokenOwner, "curator": curator, "curatorFeePercentage": curatorFeePercentage, "duration": duration, "reservePrice": reservePrice, "price": price.resultMap])
    }

    public var __typename: String {
      get {
        return resultMap["__typename"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "__typename")
      }
    }

    public var auctionCurrency: String {
      get {
        return resultMap["auctionCurrency"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "auctionCurrency")
      }
    }

    public var tokenOwner: String {
      get {
        return resultMap["tokenOwner"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "tokenOwner")
      }
    }

    public var curator: String {
      get {
        return resultMap["curator"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "curator")
      }
    }

    public var curatorFeePercentage: Int {
      get {
        return resultMap["curatorFeePercentage"]! as! Int
      }
      set {
        resultMap.updateValue(newValue, forKey: "curatorFeePercentage")
      }
    }

    public var duration: String {
      get {
        return resultMap["duration"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "duration")
      }
    }

    public var reservePrice: String {
      get {
        return resultMap["reservePrice"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "reservePrice")
      }
    }

    public var price: Price {
      get {
        return Price(unsafeResultMap: resultMap["price"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "price")
      }
    }

    public struct Price: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["PriceAtTime"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
          GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
          GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
          GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
        self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var blockNumber: Int {
        get {
          return resultMap["blockNumber"]! as! Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "blockNumber")
        }
      }

      public var chainTokenPrice: ChainTokenPrice? {
        get {
          return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
        }
      }

      public var nativePrice: NativePrice {
        get {
          return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
        }
        set {
          resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
        }
      }

      public var usdcPrice: UsdcPrice? {
        get {
          return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
        }
      }

      public var fragments: Fragments {
        get {
          return Fragments(unsafeResultMap: resultMap)
        }
        set {
          resultMap += newValue.resultMap
        }
      }

      public struct Fragments {
        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public var priceSummary: PriceSummary {
          get {
            return PriceSummary(unsafeResultMap: resultMap)
          }
          set {
            resultMap += newValue.resultMap
          }
        }
      }

      public struct ChainTokenPrice: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["CurrencyAmount"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
            GraphQLField("raw", type: .nonNull(.scalar(String.self))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(decimal: Double, raw: String) {
          self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var decimal: Double {
          get {
            return resultMap["decimal"]! as! Double
          }
          set {
            resultMap.updateValue(newValue, forKey: "decimal")
          }
        }

        public var raw: String {
          get {
            return resultMap["raw"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "raw")
          }
        }
      }

      public struct NativePrice: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["CurrencyAmount"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
            GraphQLField("raw", type: .nonNull(.scalar(String.self))),
            GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(decimal: Double, raw: String, currency: Currency) {
          self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var decimal: Double {
          get {
            return resultMap["decimal"]! as! Double
          }
          set {
            resultMap.updateValue(newValue, forKey: "decimal")
          }
        }

        public var raw: String {
          get {
            return resultMap["raw"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "raw")
          }
        }

        public var currency: Currency {
          get {
            return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
          }
          set {
            resultMap.updateValue(newValue.resultMap, forKey: "currency")
          }
        }

        public struct Currency: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["Currency"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("address", type: .nonNull(.scalar(String.self))),
              GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(address: String, decimals: Int, name: String) {
            self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var address: String {
            get {
              return resultMap["address"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "address")
            }
          }

          public var decimals: Int {
            get {
              return resultMap["decimals"]! as! Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "decimals")
            }
          }

          public var name: String {
            get {
              return resultMap["name"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "name")
            }
          }
        }
      }

      public struct UsdcPrice: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["CurrencyAmount"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
            GraphQLField("raw", type: .nonNull(.scalar(String.self))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(decimal: Double, raw: String) {
          self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var decimal: Double {
          get {
            return resultMap["decimal"]! as! Double
          }
          set {
            resultMap.updateValue(newValue, forKey: "decimal")
          }
        }

        public var raw: String {
          get {
            return resultMap["raw"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "raw")
          }
        }
      }
    }
  }

  public var asV2AuctionCanceledEventProperties: AsV2AuctionCanceledEventProperties? {
    get {
      if !AsV2AuctionCanceledEventProperties.possibleTypes.contains(__typename) { return nil }
      return AsV2AuctionCanceledEventProperties(unsafeResultMap: resultMap)
    }
    set {
      guard let newValue = newValue else { return }
      resultMap = newValue.resultMap
    }
  }

  public struct AsV2AuctionCanceledEventProperties: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["V2AuctionCanceledEventProperties"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("tokenOwner", type: .nonNull(.scalar(String.self))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(tokenOwner: String) {
      self.init(unsafeResultMap: ["__typename": "V2AuctionCanceledEventProperties", "tokenOwner": tokenOwner])
    }

    public var __typename: String {
      get {
        return resultMap["__typename"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "__typename")
      }
    }

    public var tokenOwner: String {
      get {
        return resultMap["tokenOwner"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "tokenOwner")
      }
    }
  }

  public var asV2AuctionDurationExtendedEventProperties: AsV2AuctionDurationExtendedEventProperties? {
    get {
      if !AsV2AuctionDurationExtendedEventProperties.possibleTypes.contains(__typename) { return nil }
      return AsV2AuctionDurationExtendedEventProperties(unsafeResultMap: resultMap)
    }
    set {
      guard let newValue = newValue else { return }
      resultMap = newValue.resultMap
    }
  }

  public struct AsV2AuctionDurationExtendedEventProperties: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["V2AuctionDurationExtendedEventProperties"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("duration", type: .nonNull(.scalar(String.self))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(duration: String) {
      self.init(unsafeResultMap: ["__typename": "V2AuctionDurationExtendedEventProperties", "duration": duration])
    }

    public var __typename: String {
      get {
        return resultMap["__typename"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "__typename")
      }
    }

    public var duration: String {
      get {
        return resultMap["duration"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "duration")
      }
    }
  }

  public var asV2AuctionEndedEventProperties: AsV2AuctionEndedEventProperties? {
    get {
      if !AsV2AuctionEndedEventProperties.possibleTypes.contains(__typename) { return nil }
      return AsV2AuctionEndedEventProperties(unsafeResultMap: resultMap)
    }
    set {
      guard let newValue = newValue else { return }
      resultMap = newValue.resultMap
    }
  }

  public struct AsV2AuctionEndedEventProperties: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["V2AuctionEndedEventProperties"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("tokenOwner", type: .nonNull(.scalar(String.self))),
        GraphQLField("curator", type: .nonNull(.scalar(String.self))),
        GraphQLField("winner", type: .nonNull(.scalar(String.self))),
        GraphQLField("auctionCurrency", type: .nonNull(.scalar(String.self))),
        GraphQLField("amount", type: .nonNull(.scalar(String.self))),
        GraphQLField("curatorFee", type: .nonNull(.scalar(String.self))),
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("tokenOwner", type: .nonNull(.scalar(String.self))),
        GraphQLField("curator", type: .nonNull(.scalar(String.self))),
        GraphQLField("winner", type: .nonNull(.scalar(String.self))),
        GraphQLField("auctionCurrency", type: .nonNull(.scalar(String.self))),
        GraphQLField("amount", type: .nonNull(.scalar(String.self))),
        GraphQLField("curatorFee", type: .nonNull(.scalar(String.self))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(tokenOwner: String, curator: String, winner: String, auctionCurrency: String, amount: String, curatorFee: String) {
      self.init(unsafeResultMap: ["__typename": "V2AuctionEndedEventProperties", "tokenOwner": tokenOwner, "curator": curator, "winner": winner, "auctionCurrency": auctionCurrency, "amount": amount, "curatorFee": curatorFee])
    }

    public var __typename: String {
      get {
        return resultMap["__typename"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "__typename")
      }
    }

    public var tokenOwner: String {
      get {
        return resultMap["tokenOwner"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "tokenOwner")
      }
    }

    public var curator: String {
      get {
        return resultMap["curator"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "curator")
      }
    }

    public var winner: String {
      get {
        return resultMap["winner"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "winner")
      }
    }

    public var auctionCurrency: String {
      get {
        return resultMap["auctionCurrency"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "auctionCurrency")
      }
    }

    public var amount: String {
      get {
        return resultMap["amount"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "amount")
      }
    }

    public var curatorFee: String {
      get {
        return resultMap["curatorFee"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "curatorFee")
      }
    }
  }

  public var asV2AuctionReservePriceUpdatedEventProperties: AsV2AuctionReservePriceUpdatedEventProperties? {
    get {
      if !AsV2AuctionReservePriceUpdatedEventProperties.possibleTypes.contains(__typename) { return nil }
      return AsV2AuctionReservePriceUpdatedEventProperties(unsafeResultMap: resultMap)
    }
    set {
      guard let newValue = newValue else { return }
      resultMap = newValue.resultMap
    }
  }

  public struct AsV2AuctionReservePriceUpdatedEventProperties: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["V2AuctionReservePriceUpdatedEventProperties"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("reservePrice", type: .nonNull(.scalar(String.self))),
        GraphQLField("price", type: .nonNull(.object(Price.selections))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(reservePrice: String, price: Price) {
      self.init(unsafeResultMap: ["__typename": "V2AuctionReservePriceUpdatedEventProperties", "reservePrice": reservePrice, "price": price.resultMap])
    }

    public var __typename: String {
      get {
        return resultMap["__typename"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "__typename")
      }
    }

    public var reservePrice: String {
      get {
        return resultMap["reservePrice"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "reservePrice")
      }
    }

    public var price: Price {
      get {
        return Price(unsafeResultMap: resultMap["price"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "price")
      }
    }

    public struct Price: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["PriceAtTime"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
          GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
          GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
          GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
        self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var blockNumber: Int {
        get {
          return resultMap["blockNumber"]! as! Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "blockNumber")
        }
      }

      public var chainTokenPrice: ChainTokenPrice? {
        get {
          return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
        }
      }

      public var nativePrice: NativePrice {
        get {
          return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
        }
        set {
          resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
        }
      }

      public var usdcPrice: UsdcPrice? {
        get {
          return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
        }
      }

      public var fragments: Fragments {
        get {
          return Fragments(unsafeResultMap: resultMap)
        }
        set {
          resultMap += newValue.resultMap
        }
      }

      public struct Fragments {
        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public var priceSummary: PriceSummary {
          get {
            return PriceSummary(unsafeResultMap: resultMap)
          }
          set {
            resultMap += newValue.resultMap
          }
        }
      }

      public struct ChainTokenPrice: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["CurrencyAmount"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
            GraphQLField("raw", type: .nonNull(.scalar(String.self))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(decimal: Double, raw: String) {
          self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var decimal: Double {
          get {
            return resultMap["decimal"]! as! Double
          }
          set {
            resultMap.updateValue(newValue, forKey: "decimal")
          }
        }

        public var raw: String {
          get {
            return resultMap["raw"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "raw")
          }
        }
      }

      public struct NativePrice: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["CurrencyAmount"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
            GraphQLField("raw", type: .nonNull(.scalar(String.self))),
            GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(decimal: Double, raw: String, currency: Currency) {
          self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var decimal: Double {
          get {
            return resultMap["decimal"]! as! Double
          }
          set {
            resultMap.updateValue(newValue, forKey: "decimal")
          }
        }

        public var raw: String {
          get {
            return resultMap["raw"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "raw")
          }
        }

        public var currency: Currency {
          get {
            return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
          }
          set {
            resultMap.updateValue(newValue.resultMap, forKey: "currency")
          }
        }

        public struct Currency: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["Currency"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("address", type: .nonNull(.scalar(String.self))),
              GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(address: String, decimals: Int, name: String) {
            self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var address: String {
            get {
              return resultMap["address"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "address")
            }
          }

          public var decimals: Int {
            get {
              return resultMap["decimals"]! as! Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "decimals")
            }
          }

          public var name: String {
            get {
              return resultMap["name"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "name")
            }
          }
        }
      }

      public struct UsdcPrice: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["CurrencyAmount"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
            GraphQLField("raw", type: .nonNull(.scalar(String.self))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(decimal: Double, raw: String) {
          self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var decimal: Double {
          get {
            return resultMap["decimal"]! as! Double
          }
          set {
            resultMap.updateValue(newValue, forKey: "decimal")
          }
        }

        public var raw: String {
          get {
            return resultMap["raw"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "raw")
          }
        }
      }
    }
  }

  public var asV2AuctionApprovalUpdatedEventProperties: AsV2AuctionApprovalUpdatedEventProperties? {
    get {
      if !AsV2AuctionApprovalUpdatedEventProperties.possibleTypes.contains(__typename) { return nil }
      return AsV2AuctionApprovalUpdatedEventProperties(unsafeResultMap: resultMap)
    }
    set {
      guard let newValue = newValue else { return }
      resultMap = newValue.resultMap
    }
  }

  public struct AsV2AuctionApprovalUpdatedEventProperties: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["V2AuctionApprovalUpdatedEventProperties"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("approved", type: .nonNull(.scalar(Bool.self))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(approved: Bool) {
      self.init(unsafeResultMap: ["__typename": "V2AuctionApprovalUpdatedEventProperties", "approved": approved])
    }

    public var __typename: String {
      get {
        return resultMap["__typename"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "__typename")
      }
    }

    public var approved: Bool {
      get {
        return resultMap["approved"]! as! Bool
      }
      set {
        resultMap.updateValue(newValue, forKey: "approved")
      }
    }
  }
}

public struct V3AskEventPropertiesInfo: GraphQLFragment {
  /// The raw GraphQL definition of this fragment.
  public static let fragmentDefinition: String =
    """
    fragment V3AskEventPropertiesInfo on V3AskEventProperties {
      __typename
      ... on V3AskCreatedEventProperties {
        __typename
        seller
        sellerFundsRecipient
        askCurrency
        askPrice
        findersFeeBps
        price {
          __typename
          ...PriceSummary
        }
      }
      ... on V3AskCanceledEventProperties {
        __typename
        seller
        sellerFundsRecipient
        askCurrency
        askPrice
        findersFeeBps
        price {
          __typename
          ...PriceSummary
        }
      }
      ... on V3AskPriceUpdatedEventProperties {
        __typename
        seller
        sellerFundsRecipient
        askCurrency
        askPrice
        findersFeeBps
        price {
          __typename
          ...PriceSummary
        }
      }
      ... on V3AskFilledEventProperties {
        __typename
        seller
        sellerFundsRecipient
        askCurrency
        askPrice
        findersFeeBps
        price {
          __typename
          ...PriceSummary
        }
        finder
        buyer
      }
    }
    """

  public static let possibleTypes: [String] = ["V3AskCreatedEventProperties", "V3AskCanceledEventProperties", "V3AskPriceUpdatedEventProperties", "V3AskFilledEventProperties"]

  public static var selections: [GraphQLSelection] {
    return [
      GraphQLTypeCase(
        variants: ["V3AskCreatedEventProperties": AsV3AskCreatedEventProperties.selections, "V3AskCanceledEventProperties": AsV3AskCanceledEventProperties.selections, "V3AskPriceUpdatedEventProperties": AsV3AskPriceUpdatedEventProperties.selections, "V3AskFilledEventProperties": AsV3AskFilledEventProperties.selections],
        default: [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        ]
      )
    ]
  }

  public private(set) var resultMap: ResultMap

  public init(unsafeResultMap: ResultMap) {
    self.resultMap = unsafeResultMap
  }

  public static func makeV3AskCreatedEventProperties(seller: String, sellerFundsRecipient: String, askCurrency: String, askPrice: String, findersFeeBps: Int, price: AsV3AskCreatedEventProperties.Price) -> V3AskEventPropertiesInfo {
    return V3AskEventPropertiesInfo(unsafeResultMap: ["__typename": "V3AskCreatedEventProperties", "seller": seller, "sellerFundsRecipient": sellerFundsRecipient, "askCurrency": askCurrency, "askPrice": askPrice, "findersFeeBps": findersFeeBps, "price": price.resultMap])
  }

  public static func makeV3AskCanceledEventProperties(seller: String, sellerFundsRecipient: String, askCurrency: String, askPrice: String, findersFeeBps: Int, price: AsV3AskCanceledEventProperties.Price) -> V3AskEventPropertiesInfo {
    return V3AskEventPropertiesInfo(unsafeResultMap: ["__typename": "V3AskCanceledEventProperties", "seller": seller, "sellerFundsRecipient": sellerFundsRecipient, "askCurrency": askCurrency, "askPrice": askPrice, "findersFeeBps": findersFeeBps, "price": price.resultMap])
  }

  public static func makeV3AskPriceUpdatedEventProperties(seller: String, sellerFundsRecipient: String, askCurrency: String, askPrice: String, findersFeeBps: Int, price: AsV3AskPriceUpdatedEventProperties.Price) -> V3AskEventPropertiesInfo {
    return V3AskEventPropertiesInfo(unsafeResultMap: ["__typename": "V3AskPriceUpdatedEventProperties", "seller": seller, "sellerFundsRecipient": sellerFundsRecipient, "askCurrency": askCurrency, "askPrice": askPrice, "findersFeeBps": findersFeeBps, "price": price.resultMap])
  }

  public static func makeV3AskFilledEventProperties(seller: String, sellerFundsRecipient: String, askCurrency: String, askPrice: String, findersFeeBps: Int, price: AsV3AskFilledEventProperties.Price, finder: String, buyer: String) -> V3AskEventPropertiesInfo {
    return V3AskEventPropertiesInfo(unsafeResultMap: ["__typename": "V3AskFilledEventProperties", "seller": seller, "sellerFundsRecipient": sellerFundsRecipient, "askCurrency": askCurrency, "askPrice": askPrice, "findersFeeBps": findersFeeBps, "price": price.resultMap, "finder": finder, "buyer": buyer])
  }

  public var __typename: String {
    get {
      return resultMap["__typename"]! as! String
    }
    set {
      resultMap.updateValue(newValue, forKey: "__typename")
    }
  }

  public var asV3AskCreatedEventProperties: AsV3AskCreatedEventProperties? {
    get {
      if !AsV3AskCreatedEventProperties.possibleTypes.contains(__typename) { return nil }
      return AsV3AskCreatedEventProperties(unsafeResultMap: resultMap)
    }
    set {
      guard let newValue = newValue else { return }
      resultMap = newValue.resultMap
    }
  }

  public struct AsV3AskCreatedEventProperties: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["V3AskCreatedEventProperties"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("seller", type: .nonNull(.scalar(String.self))),
        GraphQLField("sellerFundsRecipient", type: .nonNull(.scalar(String.self))),
        GraphQLField("askCurrency", type: .nonNull(.scalar(String.self))),
        GraphQLField("askPrice", type: .nonNull(.scalar(String.self))),
        GraphQLField("findersFeeBps", type: .nonNull(.scalar(Int.self))),
        GraphQLField("price", type: .nonNull(.object(Price.selections))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(seller: String, sellerFundsRecipient: String, askCurrency: String, askPrice: String, findersFeeBps: Int, price: Price) {
      self.init(unsafeResultMap: ["__typename": "V3AskCreatedEventProperties", "seller": seller, "sellerFundsRecipient": sellerFundsRecipient, "askCurrency": askCurrency, "askPrice": askPrice, "findersFeeBps": findersFeeBps, "price": price.resultMap])
    }

    public var __typename: String {
      get {
        return resultMap["__typename"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "__typename")
      }
    }

    public var seller: String {
      get {
        return resultMap["seller"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "seller")
      }
    }

    public var sellerFundsRecipient: String {
      get {
        return resultMap["sellerFundsRecipient"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "sellerFundsRecipient")
      }
    }

    public var askCurrency: String {
      get {
        return resultMap["askCurrency"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "askCurrency")
      }
    }

    public var askPrice: String {
      get {
        return resultMap["askPrice"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "askPrice")
      }
    }

    public var findersFeeBps: Int {
      get {
        return resultMap["findersFeeBps"]! as! Int
      }
      set {
        resultMap.updateValue(newValue, forKey: "findersFeeBps")
      }
    }

    public var price: Price {
      get {
        return Price(unsafeResultMap: resultMap["price"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "price")
      }
    }

    public struct Price: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["PriceAtTime"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
          GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
          GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
          GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
        self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var blockNumber: Int {
        get {
          return resultMap["blockNumber"]! as! Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "blockNumber")
        }
      }

      public var chainTokenPrice: ChainTokenPrice? {
        get {
          return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
        }
      }

      public var nativePrice: NativePrice {
        get {
          return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
        }
        set {
          resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
        }
      }

      public var usdcPrice: UsdcPrice? {
        get {
          return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
        }
      }

      public var fragments: Fragments {
        get {
          return Fragments(unsafeResultMap: resultMap)
        }
        set {
          resultMap += newValue.resultMap
        }
      }

      public struct Fragments {
        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public var priceSummary: PriceSummary {
          get {
            return PriceSummary(unsafeResultMap: resultMap)
          }
          set {
            resultMap += newValue.resultMap
          }
        }
      }

      public struct ChainTokenPrice: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["CurrencyAmount"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
            GraphQLField("raw", type: .nonNull(.scalar(String.self))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(decimal: Double, raw: String) {
          self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var decimal: Double {
          get {
            return resultMap["decimal"]! as! Double
          }
          set {
            resultMap.updateValue(newValue, forKey: "decimal")
          }
        }

        public var raw: String {
          get {
            return resultMap["raw"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "raw")
          }
        }
      }

      public struct NativePrice: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["CurrencyAmount"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
            GraphQLField("raw", type: .nonNull(.scalar(String.self))),
            GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(decimal: Double, raw: String, currency: Currency) {
          self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var decimal: Double {
          get {
            return resultMap["decimal"]! as! Double
          }
          set {
            resultMap.updateValue(newValue, forKey: "decimal")
          }
        }

        public var raw: String {
          get {
            return resultMap["raw"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "raw")
          }
        }

        public var currency: Currency {
          get {
            return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
          }
          set {
            resultMap.updateValue(newValue.resultMap, forKey: "currency")
          }
        }

        public struct Currency: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["Currency"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("address", type: .nonNull(.scalar(String.self))),
              GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(address: String, decimals: Int, name: String) {
            self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var address: String {
            get {
              return resultMap["address"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "address")
            }
          }

          public var decimals: Int {
            get {
              return resultMap["decimals"]! as! Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "decimals")
            }
          }

          public var name: String {
            get {
              return resultMap["name"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "name")
            }
          }
        }
      }

      public struct UsdcPrice: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["CurrencyAmount"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
            GraphQLField("raw", type: .nonNull(.scalar(String.self))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(decimal: Double, raw: String) {
          self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var decimal: Double {
          get {
            return resultMap["decimal"]! as! Double
          }
          set {
            resultMap.updateValue(newValue, forKey: "decimal")
          }
        }

        public var raw: String {
          get {
            return resultMap["raw"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "raw")
          }
        }
      }
    }
  }

  public var asV3AskCanceledEventProperties: AsV3AskCanceledEventProperties? {
    get {
      if !AsV3AskCanceledEventProperties.possibleTypes.contains(__typename) { return nil }
      return AsV3AskCanceledEventProperties(unsafeResultMap: resultMap)
    }
    set {
      guard let newValue = newValue else { return }
      resultMap = newValue.resultMap
    }
  }

  public struct AsV3AskCanceledEventProperties: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["V3AskCanceledEventProperties"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("seller", type: .nonNull(.scalar(String.self))),
        GraphQLField("sellerFundsRecipient", type: .nonNull(.scalar(String.self))),
        GraphQLField("askCurrency", type: .nonNull(.scalar(String.self))),
        GraphQLField("askPrice", type: .nonNull(.scalar(String.self))),
        GraphQLField("findersFeeBps", type: .nonNull(.scalar(Int.self))),
        GraphQLField("price", type: .nonNull(.object(Price.selections))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(seller: String, sellerFundsRecipient: String, askCurrency: String, askPrice: String, findersFeeBps: Int, price: Price) {
      self.init(unsafeResultMap: ["__typename": "V3AskCanceledEventProperties", "seller": seller, "sellerFundsRecipient": sellerFundsRecipient, "askCurrency": askCurrency, "askPrice": askPrice, "findersFeeBps": findersFeeBps, "price": price.resultMap])
    }

    public var __typename: String {
      get {
        return resultMap["__typename"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "__typename")
      }
    }

    public var seller: String {
      get {
        return resultMap["seller"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "seller")
      }
    }

    public var sellerFundsRecipient: String {
      get {
        return resultMap["sellerFundsRecipient"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "sellerFundsRecipient")
      }
    }

    public var askCurrency: String {
      get {
        return resultMap["askCurrency"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "askCurrency")
      }
    }

    public var askPrice: String {
      get {
        return resultMap["askPrice"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "askPrice")
      }
    }

    public var findersFeeBps: Int {
      get {
        return resultMap["findersFeeBps"]! as! Int
      }
      set {
        resultMap.updateValue(newValue, forKey: "findersFeeBps")
      }
    }

    public var price: Price {
      get {
        return Price(unsafeResultMap: resultMap["price"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "price")
      }
    }

    public struct Price: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["PriceAtTime"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
          GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
          GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
          GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
        self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var blockNumber: Int {
        get {
          return resultMap["blockNumber"]! as! Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "blockNumber")
        }
      }

      public var chainTokenPrice: ChainTokenPrice? {
        get {
          return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
        }
      }

      public var nativePrice: NativePrice {
        get {
          return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
        }
        set {
          resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
        }
      }

      public var usdcPrice: UsdcPrice? {
        get {
          return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
        }
      }

      public var fragments: Fragments {
        get {
          return Fragments(unsafeResultMap: resultMap)
        }
        set {
          resultMap += newValue.resultMap
        }
      }

      public struct Fragments {
        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public var priceSummary: PriceSummary {
          get {
            return PriceSummary(unsafeResultMap: resultMap)
          }
          set {
            resultMap += newValue.resultMap
          }
        }
      }

      public struct ChainTokenPrice: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["CurrencyAmount"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
            GraphQLField("raw", type: .nonNull(.scalar(String.self))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(decimal: Double, raw: String) {
          self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var decimal: Double {
          get {
            return resultMap["decimal"]! as! Double
          }
          set {
            resultMap.updateValue(newValue, forKey: "decimal")
          }
        }

        public var raw: String {
          get {
            return resultMap["raw"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "raw")
          }
        }
      }

      public struct NativePrice: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["CurrencyAmount"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
            GraphQLField("raw", type: .nonNull(.scalar(String.self))),
            GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(decimal: Double, raw: String, currency: Currency) {
          self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var decimal: Double {
          get {
            return resultMap["decimal"]! as! Double
          }
          set {
            resultMap.updateValue(newValue, forKey: "decimal")
          }
        }

        public var raw: String {
          get {
            return resultMap["raw"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "raw")
          }
        }

        public var currency: Currency {
          get {
            return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
          }
          set {
            resultMap.updateValue(newValue.resultMap, forKey: "currency")
          }
        }

        public struct Currency: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["Currency"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("address", type: .nonNull(.scalar(String.self))),
              GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(address: String, decimals: Int, name: String) {
            self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var address: String {
            get {
              return resultMap["address"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "address")
            }
          }

          public var decimals: Int {
            get {
              return resultMap["decimals"]! as! Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "decimals")
            }
          }

          public var name: String {
            get {
              return resultMap["name"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "name")
            }
          }
        }
      }

      public struct UsdcPrice: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["CurrencyAmount"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
            GraphQLField("raw", type: .nonNull(.scalar(String.self))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(decimal: Double, raw: String) {
          self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var decimal: Double {
          get {
            return resultMap["decimal"]! as! Double
          }
          set {
            resultMap.updateValue(newValue, forKey: "decimal")
          }
        }

        public var raw: String {
          get {
            return resultMap["raw"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "raw")
          }
        }
      }
    }
  }

  public var asV3AskPriceUpdatedEventProperties: AsV3AskPriceUpdatedEventProperties? {
    get {
      if !AsV3AskPriceUpdatedEventProperties.possibleTypes.contains(__typename) { return nil }
      return AsV3AskPriceUpdatedEventProperties(unsafeResultMap: resultMap)
    }
    set {
      guard let newValue = newValue else { return }
      resultMap = newValue.resultMap
    }
  }

  public struct AsV3AskPriceUpdatedEventProperties: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["V3AskPriceUpdatedEventProperties"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("seller", type: .nonNull(.scalar(String.self))),
        GraphQLField("sellerFundsRecipient", type: .nonNull(.scalar(String.self))),
        GraphQLField("askCurrency", type: .nonNull(.scalar(String.self))),
        GraphQLField("askPrice", type: .nonNull(.scalar(String.self))),
        GraphQLField("findersFeeBps", type: .nonNull(.scalar(Int.self))),
        GraphQLField("price", type: .nonNull(.object(Price.selections))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(seller: String, sellerFundsRecipient: String, askCurrency: String, askPrice: String, findersFeeBps: Int, price: Price) {
      self.init(unsafeResultMap: ["__typename": "V3AskPriceUpdatedEventProperties", "seller": seller, "sellerFundsRecipient": sellerFundsRecipient, "askCurrency": askCurrency, "askPrice": askPrice, "findersFeeBps": findersFeeBps, "price": price.resultMap])
    }

    public var __typename: String {
      get {
        return resultMap["__typename"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "__typename")
      }
    }

    public var seller: String {
      get {
        return resultMap["seller"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "seller")
      }
    }

    public var sellerFundsRecipient: String {
      get {
        return resultMap["sellerFundsRecipient"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "sellerFundsRecipient")
      }
    }

    public var askCurrency: String {
      get {
        return resultMap["askCurrency"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "askCurrency")
      }
    }

    public var askPrice: String {
      get {
        return resultMap["askPrice"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "askPrice")
      }
    }

    public var findersFeeBps: Int {
      get {
        return resultMap["findersFeeBps"]! as! Int
      }
      set {
        resultMap.updateValue(newValue, forKey: "findersFeeBps")
      }
    }

    public var price: Price {
      get {
        return Price(unsafeResultMap: resultMap["price"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "price")
      }
    }

    public struct Price: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["PriceAtTime"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
          GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
          GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
          GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
        self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var blockNumber: Int {
        get {
          return resultMap["blockNumber"]! as! Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "blockNumber")
        }
      }

      public var chainTokenPrice: ChainTokenPrice? {
        get {
          return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
        }
      }

      public var nativePrice: NativePrice {
        get {
          return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
        }
        set {
          resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
        }
      }

      public var usdcPrice: UsdcPrice? {
        get {
          return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
        }
      }

      public var fragments: Fragments {
        get {
          return Fragments(unsafeResultMap: resultMap)
        }
        set {
          resultMap += newValue.resultMap
        }
      }

      public struct Fragments {
        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public var priceSummary: PriceSummary {
          get {
            return PriceSummary(unsafeResultMap: resultMap)
          }
          set {
            resultMap += newValue.resultMap
          }
        }
      }

      public struct ChainTokenPrice: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["CurrencyAmount"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
            GraphQLField("raw", type: .nonNull(.scalar(String.self))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(decimal: Double, raw: String) {
          self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var decimal: Double {
          get {
            return resultMap["decimal"]! as! Double
          }
          set {
            resultMap.updateValue(newValue, forKey: "decimal")
          }
        }

        public var raw: String {
          get {
            return resultMap["raw"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "raw")
          }
        }
      }

      public struct NativePrice: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["CurrencyAmount"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
            GraphQLField("raw", type: .nonNull(.scalar(String.self))),
            GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(decimal: Double, raw: String, currency: Currency) {
          self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var decimal: Double {
          get {
            return resultMap["decimal"]! as! Double
          }
          set {
            resultMap.updateValue(newValue, forKey: "decimal")
          }
        }

        public var raw: String {
          get {
            return resultMap["raw"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "raw")
          }
        }

        public var currency: Currency {
          get {
            return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
          }
          set {
            resultMap.updateValue(newValue.resultMap, forKey: "currency")
          }
        }

        public struct Currency: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["Currency"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("address", type: .nonNull(.scalar(String.self))),
              GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(address: String, decimals: Int, name: String) {
            self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var address: String {
            get {
              return resultMap["address"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "address")
            }
          }

          public var decimals: Int {
            get {
              return resultMap["decimals"]! as! Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "decimals")
            }
          }

          public var name: String {
            get {
              return resultMap["name"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "name")
            }
          }
        }
      }

      public struct UsdcPrice: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["CurrencyAmount"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
            GraphQLField("raw", type: .nonNull(.scalar(String.self))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(decimal: Double, raw: String) {
          self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var decimal: Double {
          get {
            return resultMap["decimal"]! as! Double
          }
          set {
            resultMap.updateValue(newValue, forKey: "decimal")
          }
        }

        public var raw: String {
          get {
            return resultMap["raw"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "raw")
          }
        }
      }
    }
  }

  public var asV3AskFilledEventProperties: AsV3AskFilledEventProperties? {
    get {
      if !AsV3AskFilledEventProperties.possibleTypes.contains(__typename) { return nil }
      return AsV3AskFilledEventProperties(unsafeResultMap: resultMap)
    }
    set {
      guard let newValue = newValue else { return }
      resultMap = newValue.resultMap
    }
  }

  public struct AsV3AskFilledEventProperties: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["V3AskFilledEventProperties"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("seller", type: .nonNull(.scalar(String.self))),
        GraphQLField("sellerFundsRecipient", type: .nonNull(.scalar(String.self))),
        GraphQLField("askCurrency", type: .nonNull(.scalar(String.self))),
        GraphQLField("askPrice", type: .nonNull(.scalar(String.self))),
        GraphQLField("findersFeeBps", type: .nonNull(.scalar(Int.self))),
        GraphQLField("price", type: .nonNull(.object(Price.selections))),
        GraphQLField("finder", type: .nonNull(.scalar(String.self))),
        GraphQLField("buyer", type: .nonNull(.scalar(String.self))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(seller: String, sellerFundsRecipient: String, askCurrency: String, askPrice: String, findersFeeBps: Int, price: Price, finder: String, buyer: String) {
      self.init(unsafeResultMap: ["__typename": "V3AskFilledEventProperties", "seller": seller, "sellerFundsRecipient": sellerFundsRecipient, "askCurrency": askCurrency, "askPrice": askPrice, "findersFeeBps": findersFeeBps, "price": price.resultMap, "finder": finder, "buyer": buyer])
    }

    public var __typename: String {
      get {
        return resultMap["__typename"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "__typename")
      }
    }

    public var seller: String {
      get {
        return resultMap["seller"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "seller")
      }
    }

    public var sellerFundsRecipient: String {
      get {
        return resultMap["sellerFundsRecipient"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "sellerFundsRecipient")
      }
    }

    public var askCurrency: String {
      get {
        return resultMap["askCurrency"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "askCurrency")
      }
    }

    public var askPrice: String {
      get {
        return resultMap["askPrice"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "askPrice")
      }
    }

    public var findersFeeBps: Int {
      get {
        return resultMap["findersFeeBps"]! as! Int
      }
      set {
        resultMap.updateValue(newValue, forKey: "findersFeeBps")
      }
    }

    public var price: Price {
      get {
        return Price(unsafeResultMap: resultMap["price"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "price")
      }
    }

    public var finder: String {
      get {
        return resultMap["finder"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "finder")
      }
    }

    public var buyer: String {
      get {
        return resultMap["buyer"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "buyer")
      }
    }

    public struct Price: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["PriceAtTime"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
          GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
          GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
          GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
        self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var blockNumber: Int {
        get {
          return resultMap["blockNumber"]! as! Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "blockNumber")
        }
      }

      public var chainTokenPrice: ChainTokenPrice? {
        get {
          return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
        }
      }

      public var nativePrice: NativePrice {
        get {
          return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
        }
        set {
          resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
        }
      }

      public var usdcPrice: UsdcPrice? {
        get {
          return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
        }
      }

      public var fragments: Fragments {
        get {
          return Fragments(unsafeResultMap: resultMap)
        }
        set {
          resultMap += newValue.resultMap
        }
      }

      public struct Fragments {
        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public var priceSummary: PriceSummary {
          get {
            return PriceSummary(unsafeResultMap: resultMap)
          }
          set {
            resultMap += newValue.resultMap
          }
        }
      }

      public struct ChainTokenPrice: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["CurrencyAmount"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
            GraphQLField("raw", type: .nonNull(.scalar(String.self))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(decimal: Double, raw: String) {
          self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var decimal: Double {
          get {
            return resultMap["decimal"]! as! Double
          }
          set {
            resultMap.updateValue(newValue, forKey: "decimal")
          }
        }

        public var raw: String {
          get {
            return resultMap["raw"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "raw")
          }
        }
      }

      public struct NativePrice: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["CurrencyAmount"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
            GraphQLField("raw", type: .nonNull(.scalar(String.self))),
            GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(decimal: Double, raw: String, currency: Currency) {
          self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var decimal: Double {
          get {
            return resultMap["decimal"]! as! Double
          }
          set {
            resultMap.updateValue(newValue, forKey: "decimal")
          }
        }

        public var raw: String {
          get {
            return resultMap["raw"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "raw")
          }
        }

        public var currency: Currency {
          get {
            return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
          }
          set {
            resultMap.updateValue(newValue.resultMap, forKey: "currency")
          }
        }

        public struct Currency: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["Currency"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("address", type: .nonNull(.scalar(String.self))),
              GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(address: String, decimals: Int, name: String) {
            self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var address: String {
            get {
              return resultMap["address"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "address")
            }
          }

          public var decimals: Int {
            get {
              return resultMap["decimals"]! as! Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "decimals")
            }
          }

          public var name: String {
            get {
              return resultMap["name"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "name")
            }
          }
        }
      }

      public struct UsdcPrice: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["CurrencyAmount"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
            GraphQLField("raw", type: .nonNull(.scalar(String.self))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(decimal: Double, raw: String) {
          self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var decimal: Double {
          get {
            return resultMap["decimal"]! as! Double
          }
          set {
            resultMap.updateValue(newValue, forKey: "decimal")
          }
        }

        public var raw: String {
          get {
            return resultMap["raw"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "raw")
          }
        }
      }
    }
  }
}

public struct EventInfo: GraphQLFragment {
  /// The raw GraphQL definition of this fragment.
  public static let fragmentDefinition: String =
    """
    fragment EventInfo on Event {
      __typename
      transactionInfo {
        __typename
        ...TransactionDetails
      }
      eventType
      collectionAddress
      tokenId
      properties {
        __typename
        ... on MintEvent {
          __typename
          tokenId
          collectionAddress
          originatorAddress
          toAddress
          price {
            __typename
            ...PriceSummary
          }
        }
        ... on TransferEvent {
          __typename
          fromAddress
          toAddress
          collectionAddress
          tokenId
        }
        ... on V1MarketEvent {
          __typename
          v1MarketEventType
          address
          collectionAddress
          tokenId
          properties {
            __typename
            ...V1MarketEventPropertiesInfo
          }
        }
        ... on V2AuctionEvent {
          __typename
          v2AuctionEventType
          address
          auctionId
          collectionAddress
          tokenId
          properties {
            __typename
            ...V2AuctionEventPropertiesInfo
          }
        }
        ... on V3AskEvent {
          __typename
          v3AskEventType
          address
          collectionAddress
          tokenId
          properties {
            __typename
            ...V3AskEventPropertiesInfo
          }
        }
      }
    }
    """

  public static let possibleTypes: [String] = ["Event"]

  public static var selections: [GraphQLSelection] {
    return [
      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
      GraphQLField("transactionInfo", type: .nonNull(.object(TransactionInfo.selections))),
      GraphQLField("eventType", type: .nonNull(.scalar(EventType.self))),
      GraphQLField("collectionAddress", type: .nonNull(.scalar(String.self))),
      GraphQLField("tokenId", type: .scalar(String.self)),
      GraphQLField("properties", type: .nonNull(.object(Property.selections))),
    ]
  }

  public private(set) var resultMap: ResultMap

  public init(unsafeResultMap: ResultMap) {
    self.resultMap = unsafeResultMap
  }

  public init(transactionInfo: TransactionInfo, eventType: EventType, collectionAddress: String, tokenId: String? = nil, properties: Property) {
    self.init(unsafeResultMap: ["__typename": "Event", "transactionInfo": transactionInfo.resultMap, "eventType": eventType, "collectionAddress": collectionAddress, "tokenId": tokenId, "properties": properties.resultMap])
  }

  public var __typename: String {
    get {
      return resultMap["__typename"]! as! String
    }
    set {
      resultMap.updateValue(newValue, forKey: "__typename")
    }
  }

  public var transactionInfo: TransactionInfo {
    get {
      return TransactionInfo(unsafeResultMap: resultMap["transactionInfo"]! as! ResultMap)
    }
    set {
      resultMap.updateValue(newValue.resultMap, forKey: "transactionInfo")
    }
  }

  public var eventType: EventType {
    get {
      return resultMap["eventType"]! as! EventType
    }
    set {
      resultMap.updateValue(newValue, forKey: "eventType")
    }
  }

  public var collectionAddress: String {
    get {
      return resultMap["collectionAddress"]! as! String
    }
    set {
      resultMap.updateValue(newValue, forKey: "collectionAddress")
    }
  }

  public var tokenId: String? {
    get {
      return resultMap["tokenId"] as? String
    }
    set {
      resultMap.updateValue(newValue, forKey: "tokenId")
    }
  }

  public var properties: Property {
    get {
      return Property(unsafeResultMap: resultMap["properties"]! as! ResultMap)
    }
    set {
      resultMap.updateValue(newValue.resultMap, forKey: "properties")
    }
  }

  public struct TransactionInfo: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["TransactionInfo"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
        GraphQLField("blockTimestamp", type: .nonNull(.scalar(String.self))),
        GraphQLField("transactionHash", type: .scalar(String.self)),
        GraphQLField("logIndex", type: .scalar(Int.self)),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(blockNumber: Int, blockTimestamp: String, transactionHash: String? = nil, logIndex: Int? = nil) {
      self.init(unsafeResultMap: ["__typename": "TransactionInfo", "blockNumber": blockNumber, "blockTimestamp": blockTimestamp, "transactionHash": transactionHash, "logIndex": logIndex])
    }

    public var __typename: String {
      get {
        return resultMap["__typename"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "__typename")
      }
    }

    public var blockNumber: Int {
      get {
        return resultMap["blockNumber"]! as! Int
      }
      set {
        resultMap.updateValue(newValue, forKey: "blockNumber")
      }
    }

    public var blockTimestamp: String {
      get {
        return resultMap["blockTimestamp"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "blockTimestamp")
      }
    }

    public var transactionHash: String? {
      get {
        return resultMap["transactionHash"] as? String
      }
      set {
        resultMap.updateValue(newValue, forKey: "transactionHash")
      }
    }

    public var logIndex: Int? {
      get {
        return resultMap["logIndex"] as? Int
      }
      set {
        resultMap.updateValue(newValue, forKey: "logIndex")
      }
    }

    public var fragments: Fragments {
      get {
        return Fragments(unsafeResultMap: resultMap)
      }
      set {
        resultMap += newValue.resultMap
      }
    }

    public struct Fragments {
      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public var transactionDetails: TransactionDetails {
        get {
          return TransactionDetails(unsafeResultMap: resultMap)
        }
        set {
          resultMap += newValue.resultMap
        }
      }
    }
  }

  public struct Property: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["ApprovalEvent", "MintEvent", "Sale", "TransferEvent", "V1MarketEvent", "V2AuctionEvent", "V3AskEvent"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLTypeCase(
          variants: ["MintEvent": AsMintEvent.selections, "TransferEvent": AsTransferEvent.selections, "V1MarketEvent": AsV1MarketEvent.selections, "V2AuctionEvent": AsV2AuctionEvent.selections, "V3AskEvent": AsV3AskEvent.selections],
          default: [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          ]
        )
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public static func makeApprovalEvent() -> Property {
      return Property(unsafeResultMap: ["__typename": "ApprovalEvent"])
    }

    public static func makeSale() -> Property {
      return Property(unsafeResultMap: ["__typename": "Sale"])
    }

    public static func makeMintEvent(tokenId: String, collectionAddress: String, originatorAddress: String, toAddress: String, price: AsMintEvent.Price) -> Property {
      return Property(unsafeResultMap: ["__typename": "MintEvent", "tokenId": tokenId, "collectionAddress": collectionAddress, "originatorAddress": originatorAddress, "toAddress": toAddress, "price": price.resultMap])
    }

    public static func makeTransferEvent(fromAddress: String, toAddress: String, collectionAddress: String, tokenId: String) -> Property {
      return Property(unsafeResultMap: ["__typename": "TransferEvent", "fromAddress": fromAddress, "toAddress": toAddress, "collectionAddress": collectionAddress, "tokenId": tokenId])
    }

    public static func makeV1MarketEvent(v1MarketEventType: V1MarketEventType, address: String, collectionAddress: String, tokenId: String, properties: AsV1MarketEvent.Property) -> Property {
      return Property(unsafeResultMap: ["__typename": "V1MarketEvent", "v1MarketEventType": v1MarketEventType, "address": address, "collectionAddress": collectionAddress, "tokenId": tokenId, "properties": properties.resultMap])
    }

    public static func makeV2AuctionEvent(v2AuctionEventType: V2AuctionEventType, address: String, auctionId: Int, collectionAddress: String, tokenId: String, properties: AsV2AuctionEvent.Property) -> Property {
      return Property(unsafeResultMap: ["__typename": "V2AuctionEvent", "v2AuctionEventType": v2AuctionEventType, "address": address, "auctionId": auctionId, "collectionAddress": collectionAddress, "tokenId": tokenId, "properties": properties.resultMap])
    }

    public static func makeV3AskEvent(v3AskEventType: V3AskEventType, address: String, collectionAddress: String, tokenId: String, properties: AsV3AskEvent.Property) -> Property {
      return Property(unsafeResultMap: ["__typename": "V3AskEvent", "v3AskEventType": v3AskEventType, "address": address, "collectionAddress": collectionAddress, "tokenId": tokenId, "properties": properties.resultMap])
    }

    public var __typename: String {
      get {
        return resultMap["__typename"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "__typename")
      }
    }

    public var asMintEvent: AsMintEvent? {
      get {
        if !AsMintEvent.possibleTypes.contains(__typename) { return nil }
        return AsMintEvent(unsafeResultMap: resultMap)
      }
      set {
        guard let newValue = newValue else { return }
        resultMap = newValue.resultMap
      }
    }

    public struct AsMintEvent: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["MintEvent"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("tokenId", type: .nonNull(.scalar(String.self))),
          GraphQLField("collectionAddress", type: .nonNull(.scalar(String.self))),
          GraphQLField("originatorAddress", type: .nonNull(.scalar(String.self))),
          GraphQLField("toAddress", type: .nonNull(.scalar(String.self))),
          GraphQLField("price", type: .nonNull(.object(Price.selections))),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(tokenId: String, collectionAddress: String, originatorAddress: String, toAddress: String, price: Price) {
        self.init(unsafeResultMap: ["__typename": "MintEvent", "tokenId": tokenId, "collectionAddress": collectionAddress, "originatorAddress": originatorAddress, "toAddress": toAddress, "price": price.resultMap])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var tokenId: String {
        get {
          return resultMap["tokenId"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "tokenId")
        }
      }

      public var collectionAddress: String {
        get {
          return resultMap["collectionAddress"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "collectionAddress")
        }
      }

      public var originatorAddress: String {
        get {
          return resultMap["originatorAddress"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "originatorAddress")
        }
      }

      public var toAddress: String {
        get {
          return resultMap["toAddress"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "toAddress")
        }
      }

      public var price: Price {
        get {
          return Price(unsafeResultMap: resultMap["price"]! as! ResultMap)
        }
        set {
          resultMap.updateValue(newValue.resultMap, forKey: "price")
        }
      }

      public struct Price: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["PriceAtTime"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
            GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
            GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
            GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
          self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var blockNumber: Int {
          get {
            return resultMap["blockNumber"]! as! Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "blockNumber")
          }
        }

        public var chainTokenPrice: ChainTokenPrice? {
          get {
            return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
          }
          set {
            resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
          }
        }

        public var nativePrice: NativePrice {
          get {
            return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
          }
          set {
            resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
          }
        }

        public var usdcPrice: UsdcPrice? {
          get {
            return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
          }
          set {
            resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
          }
        }

        public var fragments: Fragments {
          get {
            return Fragments(unsafeResultMap: resultMap)
          }
          set {
            resultMap += newValue.resultMap
          }
        }

        public struct Fragments {
          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public var priceSummary: PriceSummary {
            get {
              return PriceSummary(unsafeResultMap: resultMap)
            }
            set {
              resultMap += newValue.resultMap
            }
          }
        }

        public struct ChainTokenPrice: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["CurrencyAmount"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
              GraphQLField("raw", type: .nonNull(.scalar(String.self))),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(decimal: Double, raw: String) {
            self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var decimal: Double {
            get {
              return resultMap["decimal"]! as! Double
            }
            set {
              resultMap.updateValue(newValue, forKey: "decimal")
            }
          }

          public var raw: String {
            get {
              return resultMap["raw"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "raw")
            }
          }
        }

        public struct NativePrice: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["CurrencyAmount"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
              GraphQLField("raw", type: .nonNull(.scalar(String.self))),
              GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(decimal: Double, raw: String, currency: Currency) {
            self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var decimal: Double {
            get {
              return resultMap["decimal"]! as! Double
            }
            set {
              resultMap.updateValue(newValue, forKey: "decimal")
            }
          }

          public var raw: String {
            get {
              return resultMap["raw"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "raw")
            }
          }

          public var currency: Currency {
            get {
              return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
            }
            set {
              resultMap.updateValue(newValue.resultMap, forKey: "currency")
            }
          }

          public struct Currency: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["Currency"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("address", type: .nonNull(.scalar(String.self))),
                GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(address: String, decimals: Int, name: String) {
              self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var address: String {
              get {
                return resultMap["address"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "address")
              }
            }

            public var decimals: Int {
              get {
                return resultMap["decimals"]! as! Int
              }
              set {
                resultMap.updateValue(newValue, forKey: "decimals")
              }
            }

            public var name: String {
              get {
                return resultMap["name"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "name")
              }
            }
          }
        }

        public struct UsdcPrice: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["CurrencyAmount"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
              GraphQLField("raw", type: .nonNull(.scalar(String.self))),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(decimal: Double, raw: String) {
            self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var decimal: Double {
            get {
              return resultMap["decimal"]! as! Double
            }
            set {
              resultMap.updateValue(newValue, forKey: "decimal")
            }
          }

          public var raw: String {
            get {
              return resultMap["raw"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "raw")
            }
          }
        }
      }
    }

    public var asTransferEvent: AsTransferEvent? {
      get {
        if !AsTransferEvent.possibleTypes.contains(__typename) { return nil }
        return AsTransferEvent(unsafeResultMap: resultMap)
      }
      set {
        guard let newValue = newValue else { return }
        resultMap = newValue.resultMap
      }
    }

    public struct AsTransferEvent: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["TransferEvent"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("fromAddress", type: .nonNull(.scalar(String.self))),
          GraphQLField("toAddress", type: .nonNull(.scalar(String.self))),
          GraphQLField("collectionAddress", type: .nonNull(.scalar(String.self))),
          GraphQLField("tokenId", type: .nonNull(.scalar(String.self))),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(fromAddress: String, toAddress: String, collectionAddress: String, tokenId: String) {
        self.init(unsafeResultMap: ["__typename": "TransferEvent", "fromAddress": fromAddress, "toAddress": toAddress, "collectionAddress": collectionAddress, "tokenId": tokenId])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var fromAddress: String {
        get {
          return resultMap["fromAddress"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "fromAddress")
        }
      }

      public var toAddress: String {
        get {
          return resultMap["toAddress"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "toAddress")
        }
      }

      public var collectionAddress: String {
        get {
          return resultMap["collectionAddress"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "collectionAddress")
        }
      }

      public var tokenId: String {
        get {
          return resultMap["tokenId"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "tokenId")
        }
      }
    }

    public var asV1MarketEvent: AsV1MarketEvent? {
      get {
        if !AsV1MarketEvent.possibleTypes.contains(__typename) { return nil }
        return AsV1MarketEvent(unsafeResultMap: resultMap)
      }
      set {
        guard let newValue = newValue else { return }
        resultMap = newValue.resultMap
      }
    }

    public struct AsV1MarketEvent: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["V1MarketEvent"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("v1MarketEventType", type: .nonNull(.scalar(V1MarketEventType.self))),
          GraphQLField("address", type: .nonNull(.scalar(String.self))),
          GraphQLField("collectionAddress", type: .nonNull(.scalar(String.self))),
          GraphQLField("tokenId", type: .nonNull(.scalar(String.self))),
          GraphQLField("properties", type: .nonNull(.object(Property.selections))),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(v1MarketEventType: V1MarketEventType, address: String, collectionAddress: String, tokenId: String, properties: Property) {
        self.init(unsafeResultMap: ["__typename": "V1MarketEvent", "v1MarketEventType": v1MarketEventType, "address": address, "collectionAddress": collectionAddress, "tokenId": tokenId, "properties": properties.resultMap])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var v1MarketEventType: V1MarketEventType {
        get {
          return resultMap["v1MarketEventType"]! as! V1MarketEventType
        }
        set {
          resultMap.updateValue(newValue, forKey: "v1MarketEventType")
        }
      }

      public var address: String {
        get {
          return resultMap["address"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "address")
        }
      }

      public var collectionAddress: String {
        get {
          return resultMap["collectionAddress"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "collectionAddress")
        }
      }

      public var tokenId: String {
        get {
          return resultMap["tokenId"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "tokenId")
        }
      }

      public var properties: Property {
        get {
          return Property(unsafeResultMap: resultMap["properties"]! as! ResultMap)
        }
        set {
          resultMap.updateValue(newValue.resultMap, forKey: "properties")
        }
      }

      public struct Property: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["V1MarketAskCreatedEventProperties", "V1MarketAskRemovedEventProperties", "V1MarketOfferCreatedEventProperties", "V1MarketOfferFinalizedEventProperties", "V1MarketOfferRemovedEventProperties", "V1MarketBidShareUpdatedEventProperties"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLTypeCase(
              variants: ["V1MarketAskCreatedEventProperties": AsV1MarketAskCreatedEventProperties.selections, "V1MarketAskRemovedEventProperties": AsV1MarketAskRemovedEventProperties.selections, "V1MarketOfferCreatedEventProperties": AsV1MarketOfferCreatedEventProperties.selections, "V1MarketOfferFinalizedEventProperties": AsV1MarketOfferFinalizedEventProperties.selections, "V1MarketOfferRemovedEventProperties": AsV1MarketOfferRemovedEventProperties.selections],
              default: [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              ]
            )
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public static func makeV1MarketBidShareUpdatedEventProperties() -> Property {
          return Property(unsafeResultMap: ["__typename": "V1MarketBidShareUpdatedEventProperties"])
        }

        public static func makeV1MarketAskCreatedEventProperties(amount: String, price: AsV1MarketAskCreatedEventProperties.Price, currency: String) -> Property {
          return Property(unsafeResultMap: ["__typename": "V1MarketAskCreatedEventProperties", "amount": amount, "price": price.resultMap, "currency": currency])
        }

        public static func makeV1MarketAskRemovedEventProperties(amount: String, price: AsV1MarketAskRemovedEventProperties.Price, currency: String) -> Property {
          return Property(unsafeResultMap: ["__typename": "V1MarketAskRemovedEventProperties", "amount": amount, "price": price.resultMap, "currency": currency])
        }

        public static func makeV1MarketOfferCreatedEventProperties(amount: String, price: AsV1MarketOfferCreatedEventProperties.Price, currency: String, bidder: String) -> Property {
          return Property(unsafeResultMap: ["__typename": "V1MarketOfferCreatedEventProperties", "amount": amount, "price": price.resultMap, "currency": currency, "bidder": bidder])
        }

        public static func makeV1MarketOfferFinalizedEventProperties(amount: String, price: AsV1MarketOfferFinalizedEventProperties.Price, currency: String, bidder: String) -> Property {
          return Property(unsafeResultMap: ["__typename": "V1MarketOfferFinalizedEventProperties", "amount": amount, "price": price.resultMap, "currency": currency, "bidder": bidder])
        }

        public static func makeV1MarketOfferRemovedEventProperties(amount: String, price: AsV1MarketOfferRemovedEventProperties.Price, currency: String, bidder: String) -> Property {
          return Property(unsafeResultMap: ["__typename": "V1MarketOfferRemovedEventProperties", "amount": amount, "price": price.resultMap, "currency": currency, "bidder": bidder])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var fragments: Fragments {
          get {
            return Fragments(unsafeResultMap: resultMap)
          }
          set {
            resultMap += newValue.resultMap
          }
        }

        public struct Fragments {
          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public var v1MarketEventPropertiesInfo: V1MarketEventPropertiesInfo {
            get {
              return V1MarketEventPropertiesInfo(unsafeResultMap: resultMap)
            }
            set {
              resultMap += newValue.resultMap
            }
          }
        }

        public var asV1MarketAskCreatedEventProperties: AsV1MarketAskCreatedEventProperties? {
          get {
            if !AsV1MarketAskCreatedEventProperties.possibleTypes.contains(__typename) { return nil }
            return AsV1MarketAskCreatedEventProperties(unsafeResultMap: resultMap)
          }
          set {
            guard let newValue = newValue else { return }
            resultMap = newValue.resultMap
          }
        }

        public struct AsV1MarketAskCreatedEventProperties: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["V1MarketAskCreatedEventProperties"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("amount", type: .nonNull(.scalar(String.self))),
              GraphQLField("price", type: .nonNull(.object(Price.selections))),
              GraphQLField("currency", type: .nonNull(.scalar(String.self))),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(amount: String, price: Price, currency: String) {
            self.init(unsafeResultMap: ["__typename": "V1MarketAskCreatedEventProperties", "amount": amount, "price": price.resultMap, "currency": currency])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var amount: String {
            get {
              return resultMap["amount"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "amount")
            }
          }

          public var price: Price {
            get {
              return Price(unsafeResultMap: resultMap["price"]! as! ResultMap)
            }
            set {
              resultMap.updateValue(newValue.resultMap, forKey: "price")
            }
          }

          public var currency: String {
            get {
              return resultMap["currency"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "currency")
            }
          }

          public var fragments: Fragments {
            get {
              return Fragments(unsafeResultMap: resultMap)
            }
            set {
              resultMap += newValue.resultMap
            }
          }

          public struct Fragments {
            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public var v1MarketEventPropertiesInfo: V1MarketEventPropertiesInfo {
              get {
                return V1MarketEventPropertiesInfo(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }
          }

          public struct Price: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["PriceAtTime"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
                GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
                GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
              self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var blockNumber: Int {
              get {
                return resultMap["blockNumber"]! as! Int
              }
              set {
                resultMap.updateValue(newValue, forKey: "blockNumber")
              }
            }

            public var chainTokenPrice: ChainTokenPrice? {
              get {
                return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
              }
              set {
                resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
              }
            }

            public var nativePrice: NativePrice {
              get {
                return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
              }
              set {
                resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
              }
            }

            public var usdcPrice: UsdcPrice? {
              get {
                return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
              }
              set {
                resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
              }
            }

            public var fragments: Fragments {
              get {
                return Fragments(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }

            public struct Fragments {
              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public var priceSummary: PriceSummary {
                get {
                  return PriceSummary(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }
            }

            public struct ChainTokenPrice: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["CurrencyAmount"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                  GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(decimal: Double, raw: String) {
                self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var decimal: Double {
                get {
                  return resultMap["decimal"]! as! Double
                }
                set {
                  resultMap.updateValue(newValue, forKey: "decimal")
                }
              }

              public var raw: String {
                get {
                  return resultMap["raw"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "raw")
                }
              }
            }

            public struct NativePrice: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["CurrencyAmount"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                  GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                  GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(decimal: Double, raw: String, currency: Currency) {
                self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var decimal: Double {
                get {
                  return resultMap["decimal"]! as! Double
                }
                set {
                  resultMap.updateValue(newValue, forKey: "decimal")
                }
              }

              public var raw: String {
                get {
                  return resultMap["raw"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "raw")
                }
              }

              public var currency: Currency {
                get {
                  return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
                }
                set {
                  resultMap.updateValue(newValue.resultMap, forKey: "currency")
                }
              }

              public struct Currency: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["Currency"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("address", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                    GraphQLField("name", type: .nonNull(.scalar(String.self))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(address: String, decimals: Int, name: String) {
                  self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var address: String {
                  get {
                    return resultMap["address"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "address")
                  }
                }

                public var decimals: Int {
                  get {
                    return resultMap["decimals"]! as! Int
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimals")
                  }
                }

                public var name: String {
                  get {
                    return resultMap["name"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "name")
                  }
                }
              }
            }

            public struct UsdcPrice: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["CurrencyAmount"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                  GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(decimal: Double, raw: String) {
                self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var decimal: Double {
                get {
                  return resultMap["decimal"]! as! Double
                }
                set {
                  resultMap.updateValue(newValue, forKey: "decimal")
                }
              }

              public var raw: String {
                get {
                  return resultMap["raw"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "raw")
                }
              }
            }
          }
        }

        public var asV1MarketAskRemovedEventProperties: AsV1MarketAskRemovedEventProperties? {
          get {
            if !AsV1MarketAskRemovedEventProperties.possibleTypes.contains(__typename) { return nil }
            return AsV1MarketAskRemovedEventProperties(unsafeResultMap: resultMap)
          }
          set {
            guard let newValue = newValue else { return }
            resultMap = newValue.resultMap
          }
        }

        public struct AsV1MarketAskRemovedEventProperties: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["V1MarketAskRemovedEventProperties"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("amount", type: .nonNull(.scalar(String.self))),
              GraphQLField("price", type: .nonNull(.object(Price.selections))),
              GraphQLField("currency", type: .nonNull(.scalar(String.self))),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(amount: String, price: Price, currency: String) {
            self.init(unsafeResultMap: ["__typename": "V1MarketAskRemovedEventProperties", "amount": amount, "price": price.resultMap, "currency": currency])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var amount: String {
            get {
              return resultMap["amount"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "amount")
            }
          }

          public var price: Price {
            get {
              return Price(unsafeResultMap: resultMap["price"]! as! ResultMap)
            }
            set {
              resultMap.updateValue(newValue.resultMap, forKey: "price")
            }
          }

          public var currency: String {
            get {
              return resultMap["currency"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "currency")
            }
          }

          public var fragments: Fragments {
            get {
              return Fragments(unsafeResultMap: resultMap)
            }
            set {
              resultMap += newValue.resultMap
            }
          }

          public struct Fragments {
            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public var v1MarketEventPropertiesInfo: V1MarketEventPropertiesInfo {
              get {
                return V1MarketEventPropertiesInfo(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }
          }

          public struct Price: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["PriceAtTime"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
                GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
                GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
              self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var blockNumber: Int {
              get {
                return resultMap["blockNumber"]! as! Int
              }
              set {
                resultMap.updateValue(newValue, forKey: "blockNumber")
              }
            }

            public var chainTokenPrice: ChainTokenPrice? {
              get {
                return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
              }
              set {
                resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
              }
            }

            public var nativePrice: NativePrice {
              get {
                return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
              }
              set {
                resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
              }
            }

            public var usdcPrice: UsdcPrice? {
              get {
                return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
              }
              set {
                resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
              }
            }

            public var fragments: Fragments {
              get {
                return Fragments(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }

            public struct Fragments {
              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public var priceSummary: PriceSummary {
                get {
                  return PriceSummary(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }
            }

            public struct ChainTokenPrice: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["CurrencyAmount"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                  GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(decimal: Double, raw: String) {
                self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var decimal: Double {
                get {
                  return resultMap["decimal"]! as! Double
                }
                set {
                  resultMap.updateValue(newValue, forKey: "decimal")
                }
              }

              public var raw: String {
                get {
                  return resultMap["raw"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "raw")
                }
              }
            }

            public struct NativePrice: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["CurrencyAmount"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                  GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                  GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(decimal: Double, raw: String, currency: Currency) {
                self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var decimal: Double {
                get {
                  return resultMap["decimal"]! as! Double
                }
                set {
                  resultMap.updateValue(newValue, forKey: "decimal")
                }
              }

              public var raw: String {
                get {
                  return resultMap["raw"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "raw")
                }
              }

              public var currency: Currency {
                get {
                  return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
                }
                set {
                  resultMap.updateValue(newValue.resultMap, forKey: "currency")
                }
              }

              public struct Currency: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["Currency"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("address", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                    GraphQLField("name", type: .nonNull(.scalar(String.self))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(address: String, decimals: Int, name: String) {
                  self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var address: String {
                  get {
                    return resultMap["address"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "address")
                  }
                }

                public var decimals: Int {
                  get {
                    return resultMap["decimals"]! as! Int
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimals")
                  }
                }

                public var name: String {
                  get {
                    return resultMap["name"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "name")
                  }
                }
              }
            }

            public struct UsdcPrice: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["CurrencyAmount"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                  GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(decimal: Double, raw: String) {
                self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var decimal: Double {
                get {
                  return resultMap["decimal"]! as! Double
                }
                set {
                  resultMap.updateValue(newValue, forKey: "decimal")
                }
              }

              public var raw: String {
                get {
                  return resultMap["raw"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "raw")
                }
              }
            }
          }
        }

        public var asV1MarketOfferCreatedEventProperties: AsV1MarketOfferCreatedEventProperties? {
          get {
            if !AsV1MarketOfferCreatedEventProperties.possibleTypes.contains(__typename) { return nil }
            return AsV1MarketOfferCreatedEventProperties(unsafeResultMap: resultMap)
          }
          set {
            guard let newValue = newValue else { return }
            resultMap = newValue.resultMap
          }
        }

        public struct AsV1MarketOfferCreatedEventProperties: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["V1MarketOfferCreatedEventProperties"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("amount", type: .nonNull(.scalar(String.self))),
              GraphQLField("price", type: .nonNull(.object(Price.selections))),
              GraphQLField("currency", type: .nonNull(.scalar(String.self))),
              GraphQLField("bidder", type: .nonNull(.scalar(String.self))),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(amount: String, price: Price, currency: String, bidder: String) {
            self.init(unsafeResultMap: ["__typename": "V1MarketOfferCreatedEventProperties", "amount": amount, "price": price.resultMap, "currency": currency, "bidder": bidder])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var amount: String {
            get {
              return resultMap["amount"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "amount")
            }
          }

          public var price: Price {
            get {
              return Price(unsafeResultMap: resultMap["price"]! as! ResultMap)
            }
            set {
              resultMap.updateValue(newValue.resultMap, forKey: "price")
            }
          }

          public var currency: String {
            get {
              return resultMap["currency"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "currency")
            }
          }

          public var bidder: String {
            get {
              return resultMap["bidder"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "bidder")
            }
          }

          public var fragments: Fragments {
            get {
              return Fragments(unsafeResultMap: resultMap)
            }
            set {
              resultMap += newValue.resultMap
            }
          }

          public struct Fragments {
            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public var v1MarketEventPropertiesInfo: V1MarketEventPropertiesInfo {
              get {
                return V1MarketEventPropertiesInfo(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }
          }

          public struct Price: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["PriceAtTime"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
                GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
                GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
              self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var blockNumber: Int {
              get {
                return resultMap["blockNumber"]! as! Int
              }
              set {
                resultMap.updateValue(newValue, forKey: "blockNumber")
              }
            }

            public var chainTokenPrice: ChainTokenPrice? {
              get {
                return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
              }
              set {
                resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
              }
            }

            public var nativePrice: NativePrice {
              get {
                return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
              }
              set {
                resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
              }
            }

            public var usdcPrice: UsdcPrice? {
              get {
                return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
              }
              set {
                resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
              }
            }

            public var fragments: Fragments {
              get {
                return Fragments(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }

            public struct Fragments {
              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public var priceSummary: PriceSummary {
                get {
                  return PriceSummary(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }
            }

            public struct ChainTokenPrice: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["CurrencyAmount"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                  GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(decimal: Double, raw: String) {
                self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var decimal: Double {
                get {
                  return resultMap["decimal"]! as! Double
                }
                set {
                  resultMap.updateValue(newValue, forKey: "decimal")
                }
              }

              public var raw: String {
                get {
                  return resultMap["raw"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "raw")
                }
              }
            }

            public struct NativePrice: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["CurrencyAmount"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                  GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                  GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(decimal: Double, raw: String, currency: Currency) {
                self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var decimal: Double {
                get {
                  return resultMap["decimal"]! as! Double
                }
                set {
                  resultMap.updateValue(newValue, forKey: "decimal")
                }
              }

              public var raw: String {
                get {
                  return resultMap["raw"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "raw")
                }
              }

              public var currency: Currency {
                get {
                  return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
                }
                set {
                  resultMap.updateValue(newValue.resultMap, forKey: "currency")
                }
              }

              public struct Currency: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["Currency"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("address", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                    GraphQLField("name", type: .nonNull(.scalar(String.self))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(address: String, decimals: Int, name: String) {
                  self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var address: String {
                  get {
                    return resultMap["address"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "address")
                  }
                }

                public var decimals: Int {
                  get {
                    return resultMap["decimals"]! as! Int
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimals")
                  }
                }

                public var name: String {
                  get {
                    return resultMap["name"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "name")
                  }
                }
              }
            }

            public struct UsdcPrice: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["CurrencyAmount"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                  GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(decimal: Double, raw: String) {
                self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var decimal: Double {
                get {
                  return resultMap["decimal"]! as! Double
                }
                set {
                  resultMap.updateValue(newValue, forKey: "decimal")
                }
              }

              public var raw: String {
                get {
                  return resultMap["raw"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "raw")
                }
              }
            }
          }
        }

        public var asV1MarketOfferFinalizedEventProperties: AsV1MarketOfferFinalizedEventProperties? {
          get {
            if !AsV1MarketOfferFinalizedEventProperties.possibleTypes.contains(__typename) { return nil }
            return AsV1MarketOfferFinalizedEventProperties(unsafeResultMap: resultMap)
          }
          set {
            guard let newValue = newValue else { return }
            resultMap = newValue.resultMap
          }
        }

        public struct AsV1MarketOfferFinalizedEventProperties: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["V1MarketOfferFinalizedEventProperties"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("amount", type: .nonNull(.scalar(String.self))),
              GraphQLField("price", type: .nonNull(.object(Price.selections))),
              GraphQLField("currency", type: .nonNull(.scalar(String.self))),
              GraphQLField("bidder", type: .nonNull(.scalar(String.self))),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(amount: String, price: Price, currency: String, bidder: String) {
            self.init(unsafeResultMap: ["__typename": "V1MarketOfferFinalizedEventProperties", "amount": amount, "price": price.resultMap, "currency": currency, "bidder": bidder])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var amount: String {
            get {
              return resultMap["amount"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "amount")
            }
          }

          public var price: Price {
            get {
              return Price(unsafeResultMap: resultMap["price"]! as! ResultMap)
            }
            set {
              resultMap.updateValue(newValue.resultMap, forKey: "price")
            }
          }

          public var currency: String {
            get {
              return resultMap["currency"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "currency")
            }
          }

          public var bidder: String {
            get {
              return resultMap["bidder"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "bidder")
            }
          }

          public var fragments: Fragments {
            get {
              return Fragments(unsafeResultMap: resultMap)
            }
            set {
              resultMap += newValue.resultMap
            }
          }

          public struct Fragments {
            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public var v1MarketEventPropertiesInfo: V1MarketEventPropertiesInfo {
              get {
                return V1MarketEventPropertiesInfo(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }
          }

          public struct Price: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["PriceAtTime"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
                GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
                GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
              self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var blockNumber: Int {
              get {
                return resultMap["blockNumber"]! as! Int
              }
              set {
                resultMap.updateValue(newValue, forKey: "blockNumber")
              }
            }

            public var chainTokenPrice: ChainTokenPrice? {
              get {
                return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
              }
              set {
                resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
              }
            }

            public var nativePrice: NativePrice {
              get {
                return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
              }
              set {
                resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
              }
            }

            public var usdcPrice: UsdcPrice? {
              get {
                return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
              }
              set {
                resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
              }
            }

            public var fragments: Fragments {
              get {
                return Fragments(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }

            public struct Fragments {
              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public var priceSummary: PriceSummary {
                get {
                  return PriceSummary(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }
            }

            public struct ChainTokenPrice: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["CurrencyAmount"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                  GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(decimal: Double, raw: String) {
                self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var decimal: Double {
                get {
                  return resultMap["decimal"]! as! Double
                }
                set {
                  resultMap.updateValue(newValue, forKey: "decimal")
                }
              }

              public var raw: String {
                get {
                  return resultMap["raw"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "raw")
                }
              }
            }

            public struct NativePrice: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["CurrencyAmount"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                  GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                  GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(decimal: Double, raw: String, currency: Currency) {
                self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var decimal: Double {
                get {
                  return resultMap["decimal"]! as! Double
                }
                set {
                  resultMap.updateValue(newValue, forKey: "decimal")
                }
              }

              public var raw: String {
                get {
                  return resultMap["raw"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "raw")
                }
              }

              public var currency: Currency {
                get {
                  return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
                }
                set {
                  resultMap.updateValue(newValue.resultMap, forKey: "currency")
                }
              }

              public struct Currency: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["Currency"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("address", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                    GraphQLField("name", type: .nonNull(.scalar(String.self))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(address: String, decimals: Int, name: String) {
                  self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var address: String {
                  get {
                    return resultMap["address"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "address")
                  }
                }

                public var decimals: Int {
                  get {
                    return resultMap["decimals"]! as! Int
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimals")
                  }
                }

                public var name: String {
                  get {
                    return resultMap["name"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "name")
                  }
                }
              }
            }

            public struct UsdcPrice: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["CurrencyAmount"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                  GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(decimal: Double, raw: String) {
                self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var decimal: Double {
                get {
                  return resultMap["decimal"]! as! Double
                }
                set {
                  resultMap.updateValue(newValue, forKey: "decimal")
                }
              }

              public var raw: String {
                get {
                  return resultMap["raw"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "raw")
                }
              }
            }
          }
        }

        public var asV1MarketOfferRemovedEventProperties: AsV1MarketOfferRemovedEventProperties? {
          get {
            if !AsV1MarketOfferRemovedEventProperties.possibleTypes.contains(__typename) { return nil }
            return AsV1MarketOfferRemovedEventProperties(unsafeResultMap: resultMap)
          }
          set {
            guard let newValue = newValue else { return }
            resultMap = newValue.resultMap
          }
        }

        public struct AsV1MarketOfferRemovedEventProperties: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["V1MarketOfferRemovedEventProperties"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("amount", type: .nonNull(.scalar(String.self))),
              GraphQLField("price", type: .nonNull(.object(Price.selections))),
              GraphQLField("currency", type: .nonNull(.scalar(String.self))),
              GraphQLField("bidder", type: .nonNull(.scalar(String.self))),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(amount: String, price: Price, currency: String, bidder: String) {
            self.init(unsafeResultMap: ["__typename": "V1MarketOfferRemovedEventProperties", "amount": amount, "price": price.resultMap, "currency": currency, "bidder": bidder])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var amount: String {
            get {
              return resultMap["amount"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "amount")
            }
          }

          public var price: Price {
            get {
              return Price(unsafeResultMap: resultMap["price"]! as! ResultMap)
            }
            set {
              resultMap.updateValue(newValue.resultMap, forKey: "price")
            }
          }

          public var currency: String {
            get {
              return resultMap["currency"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "currency")
            }
          }

          public var bidder: String {
            get {
              return resultMap["bidder"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "bidder")
            }
          }

          public var fragments: Fragments {
            get {
              return Fragments(unsafeResultMap: resultMap)
            }
            set {
              resultMap += newValue.resultMap
            }
          }

          public struct Fragments {
            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public var v1MarketEventPropertiesInfo: V1MarketEventPropertiesInfo {
              get {
                return V1MarketEventPropertiesInfo(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }
          }

          public struct Price: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["PriceAtTime"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
                GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
                GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
              self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var blockNumber: Int {
              get {
                return resultMap["blockNumber"]! as! Int
              }
              set {
                resultMap.updateValue(newValue, forKey: "blockNumber")
              }
            }

            public var chainTokenPrice: ChainTokenPrice? {
              get {
                return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
              }
              set {
                resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
              }
            }

            public var nativePrice: NativePrice {
              get {
                return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
              }
              set {
                resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
              }
            }

            public var usdcPrice: UsdcPrice? {
              get {
                return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
              }
              set {
                resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
              }
            }

            public var fragments: Fragments {
              get {
                return Fragments(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }

            public struct Fragments {
              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public var priceSummary: PriceSummary {
                get {
                  return PriceSummary(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }
            }

            public struct ChainTokenPrice: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["CurrencyAmount"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                  GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(decimal: Double, raw: String) {
                self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var decimal: Double {
                get {
                  return resultMap["decimal"]! as! Double
                }
                set {
                  resultMap.updateValue(newValue, forKey: "decimal")
                }
              }

              public var raw: String {
                get {
                  return resultMap["raw"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "raw")
                }
              }
            }

            public struct NativePrice: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["CurrencyAmount"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                  GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                  GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(decimal: Double, raw: String, currency: Currency) {
                self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var decimal: Double {
                get {
                  return resultMap["decimal"]! as! Double
                }
                set {
                  resultMap.updateValue(newValue, forKey: "decimal")
                }
              }

              public var raw: String {
                get {
                  return resultMap["raw"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "raw")
                }
              }

              public var currency: Currency {
                get {
                  return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
                }
                set {
                  resultMap.updateValue(newValue.resultMap, forKey: "currency")
                }
              }

              public struct Currency: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["Currency"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("address", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                    GraphQLField("name", type: .nonNull(.scalar(String.self))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(address: String, decimals: Int, name: String) {
                  self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var address: String {
                  get {
                    return resultMap["address"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "address")
                  }
                }

                public var decimals: Int {
                  get {
                    return resultMap["decimals"]! as! Int
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimals")
                  }
                }

                public var name: String {
                  get {
                    return resultMap["name"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "name")
                  }
                }
              }
            }

            public struct UsdcPrice: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["CurrencyAmount"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                  GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(decimal: Double, raw: String) {
                self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var decimal: Double {
                get {
                  return resultMap["decimal"]! as! Double
                }
                set {
                  resultMap.updateValue(newValue, forKey: "decimal")
                }
              }

              public var raw: String {
                get {
                  return resultMap["raw"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "raw")
                }
              }
            }
          }
        }
      }
    }

    public var asV2AuctionEvent: AsV2AuctionEvent? {
      get {
        if !AsV2AuctionEvent.possibleTypes.contains(__typename) { return nil }
        return AsV2AuctionEvent(unsafeResultMap: resultMap)
      }
      set {
        guard let newValue = newValue else { return }
        resultMap = newValue.resultMap
      }
    }

    public struct AsV2AuctionEvent: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["V2AuctionEvent"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("v2AuctionEventType", type: .nonNull(.scalar(V2AuctionEventType.self))),
          GraphQLField("address", type: .nonNull(.scalar(String.self))),
          GraphQLField("auctionId", type: .nonNull(.scalar(Int.self))),
          GraphQLField("collectionAddress", type: .nonNull(.scalar(String.self))),
          GraphQLField("tokenId", type: .nonNull(.scalar(String.self))),
          GraphQLField("properties", type: .nonNull(.object(Property.selections))),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(v2AuctionEventType: V2AuctionEventType, address: String, auctionId: Int, collectionAddress: String, tokenId: String, properties: Property) {
        self.init(unsafeResultMap: ["__typename": "V2AuctionEvent", "v2AuctionEventType": v2AuctionEventType, "address": address, "auctionId": auctionId, "collectionAddress": collectionAddress, "tokenId": tokenId, "properties": properties.resultMap])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var v2AuctionEventType: V2AuctionEventType {
        get {
          return resultMap["v2AuctionEventType"]! as! V2AuctionEventType
        }
        set {
          resultMap.updateValue(newValue, forKey: "v2AuctionEventType")
        }
      }

      public var address: String {
        get {
          return resultMap["address"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "address")
        }
      }

      public var auctionId: Int {
        get {
          return resultMap["auctionId"]! as! Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "auctionId")
        }
      }

      public var collectionAddress: String {
        get {
          return resultMap["collectionAddress"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "collectionAddress")
        }
      }

      public var tokenId: String {
        get {
          return resultMap["tokenId"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "tokenId")
        }
      }

      public var properties: Property {
        get {
          return Property(unsafeResultMap: resultMap["properties"]! as! ResultMap)
        }
        set {
          resultMap.updateValue(newValue.resultMap, forKey: "properties")
        }
      }

      public struct Property: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["V2AuctionBidEventProperties", "V2AuctionCreatedEventProperties", "V2AuctionCanceledEventProperties", "V2AuctionDurationExtendedEventProperties", "V2AuctionEndedEventProperties", "V2AuctionReservePriceUpdatedEventProperties", "V2AuctionApprovalUpdatedEventProperties"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLTypeCase(
              variants: ["V2AuctionBidEventProperties": AsV2AuctionBidEventProperties.selections, "V2AuctionCreatedEventProperties": AsV2AuctionCreatedEventProperties.selections, "V2AuctionCanceledEventProperties": AsV2AuctionCanceledEventProperties.selections, "V2AuctionDurationExtendedEventProperties": AsV2AuctionDurationExtendedEventProperties.selections, "V2AuctionEndedEventProperties": AsV2AuctionEndedEventProperties.selections, "V2AuctionReservePriceUpdatedEventProperties": AsV2AuctionReservePriceUpdatedEventProperties.selections, "V2AuctionApprovalUpdatedEventProperties": AsV2AuctionApprovalUpdatedEventProperties.selections],
              default: [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              ]
            )
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public static func makeV2AuctionBidEventProperties(sender: String, firstBid: Bool, extended: Bool, value: String, price: AsV2AuctionBidEventProperties.Price) -> Property {
          return Property(unsafeResultMap: ["__typename": "V2AuctionBidEventProperties", "sender": sender, "firstBid": firstBid, "extended": extended, "value": value, "price": price.resultMap])
        }

        public static func makeV2AuctionCreatedEventProperties(auctionCurrency: String, tokenOwner: String, curator: String, curatorFeePercentage: Int, duration: String, reservePrice: String, price: AsV2AuctionCreatedEventProperties.Price) -> Property {
          return Property(unsafeResultMap: ["__typename": "V2AuctionCreatedEventProperties", "auctionCurrency": auctionCurrency, "tokenOwner": tokenOwner, "curator": curator, "curatorFeePercentage": curatorFeePercentage, "duration": duration, "reservePrice": reservePrice, "price": price.resultMap])
        }

        public static func makeV2AuctionCanceledEventProperties(tokenOwner: String) -> Property {
          return Property(unsafeResultMap: ["__typename": "V2AuctionCanceledEventProperties", "tokenOwner": tokenOwner])
        }

        public static func makeV2AuctionDurationExtendedEventProperties(duration: String) -> Property {
          return Property(unsafeResultMap: ["__typename": "V2AuctionDurationExtendedEventProperties", "duration": duration])
        }

        public static func makeV2AuctionEndedEventProperties(tokenOwner: String, curator: String, winner: String, auctionCurrency: String, amount: String, curatorFee: String) -> Property {
          return Property(unsafeResultMap: ["__typename": "V2AuctionEndedEventProperties", "tokenOwner": tokenOwner, "curator": curator, "winner": winner, "auctionCurrency": auctionCurrency, "amount": amount, "curatorFee": curatorFee])
        }

        public static func makeV2AuctionReservePriceUpdatedEventProperties(reservePrice: String, price: AsV2AuctionReservePriceUpdatedEventProperties.Price) -> Property {
          return Property(unsafeResultMap: ["__typename": "V2AuctionReservePriceUpdatedEventProperties", "reservePrice": reservePrice, "price": price.resultMap])
        }

        public static func makeV2AuctionApprovalUpdatedEventProperties(approved: Bool) -> Property {
          return Property(unsafeResultMap: ["__typename": "V2AuctionApprovalUpdatedEventProperties", "approved": approved])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var fragments: Fragments {
          get {
            return Fragments(unsafeResultMap: resultMap)
          }
          set {
            resultMap += newValue.resultMap
          }
        }

        public struct Fragments {
          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public var v2AuctionEventPropertiesInfo: V2AuctionEventPropertiesInfo {
            get {
              return V2AuctionEventPropertiesInfo(unsafeResultMap: resultMap)
            }
            set {
              resultMap += newValue.resultMap
            }
          }
        }

        public var asV2AuctionBidEventProperties: AsV2AuctionBidEventProperties? {
          get {
            if !AsV2AuctionBidEventProperties.possibleTypes.contains(__typename) { return nil }
            return AsV2AuctionBidEventProperties(unsafeResultMap: resultMap)
          }
          set {
            guard let newValue = newValue else { return }
            resultMap = newValue.resultMap
          }
        }

        public struct AsV2AuctionBidEventProperties: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["V2AuctionBidEventProperties"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("sender", type: .nonNull(.scalar(String.self))),
              GraphQLField("firstBid", type: .nonNull(.scalar(Bool.self))),
              GraphQLField("extended", type: .nonNull(.scalar(Bool.self))),
              GraphQLField("value", type: .nonNull(.scalar(String.self))),
              GraphQLField("price", type: .nonNull(.object(Price.selections))),
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("sender", type: .nonNull(.scalar(String.self))),
              GraphQLField("firstBid", type: .nonNull(.scalar(Bool.self))),
              GraphQLField("extended", type: .nonNull(.scalar(Bool.self))),
              GraphQLField("value", type: .nonNull(.scalar(String.self))),
              GraphQLField("price", type: .nonNull(.object(Price.selections))),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(sender: String, firstBid: Bool, extended: Bool, value: String, price: Price) {
            self.init(unsafeResultMap: ["__typename": "V2AuctionBidEventProperties", "sender": sender, "firstBid": firstBid, "extended": extended, "value": value, "price": price.resultMap])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var sender: String {
            get {
              return resultMap["sender"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "sender")
            }
          }

          public var firstBid: Bool {
            get {
              return resultMap["firstBid"]! as! Bool
            }
            set {
              resultMap.updateValue(newValue, forKey: "firstBid")
            }
          }

          public var extended: Bool {
            get {
              return resultMap["extended"]! as! Bool
            }
            set {
              resultMap.updateValue(newValue, forKey: "extended")
            }
          }

          public var value: String {
            get {
              return resultMap["value"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "value")
            }
          }

          public var price: Price {
            get {
              return Price(unsafeResultMap: resultMap["price"]! as! ResultMap)
            }
            set {
              resultMap.updateValue(newValue.resultMap, forKey: "price")
            }
          }

          public var fragments: Fragments {
            get {
              return Fragments(unsafeResultMap: resultMap)
            }
            set {
              resultMap += newValue.resultMap
            }
          }

          public struct Fragments {
            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public var v2AuctionEventPropertiesInfo: V2AuctionEventPropertiesInfo {
              get {
                return V2AuctionEventPropertiesInfo(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }
          }

          public struct Price: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["PriceAtTime"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
                GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
                GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
              self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var blockNumber: Int {
              get {
                return resultMap["blockNumber"]! as! Int
              }
              set {
                resultMap.updateValue(newValue, forKey: "blockNumber")
              }
            }

            public var chainTokenPrice: ChainTokenPrice? {
              get {
                return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
              }
              set {
                resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
              }
            }

            public var nativePrice: NativePrice {
              get {
                return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
              }
              set {
                resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
              }
            }

            public var usdcPrice: UsdcPrice? {
              get {
                return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
              }
              set {
                resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
              }
            }

            public var fragments: Fragments {
              get {
                return Fragments(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }

            public struct Fragments {
              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public var priceSummary: PriceSummary {
                get {
                  return PriceSummary(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }
            }

            public struct ChainTokenPrice: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["CurrencyAmount"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                  GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(decimal: Double, raw: String) {
                self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var decimal: Double {
                get {
                  return resultMap["decimal"]! as! Double
                }
                set {
                  resultMap.updateValue(newValue, forKey: "decimal")
                }
              }

              public var raw: String {
                get {
                  return resultMap["raw"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "raw")
                }
              }
            }

            public struct NativePrice: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["CurrencyAmount"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                  GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                  GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(decimal: Double, raw: String, currency: Currency) {
                self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var decimal: Double {
                get {
                  return resultMap["decimal"]! as! Double
                }
                set {
                  resultMap.updateValue(newValue, forKey: "decimal")
                }
              }

              public var raw: String {
                get {
                  return resultMap["raw"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "raw")
                }
              }

              public var currency: Currency {
                get {
                  return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
                }
                set {
                  resultMap.updateValue(newValue.resultMap, forKey: "currency")
                }
              }

              public struct Currency: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["Currency"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("address", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                    GraphQLField("name", type: .nonNull(.scalar(String.self))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(address: String, decimals: Int, name: String) {
                  self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var address: String {
                  get {
                    return resultMap["address"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "address")
                  }
                }

                public var decimals: Int {
                  get {
                    return resultMap["decimals"]! as! Int
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimals")
                  }
                }

                public var name: String {
                  get {
                    return resultMap["name"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "name")
                  }
                }
              }
            }

            public struct UsdcPrice: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["CurrencyAmount"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                  GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(decimal: Double, raw: String) {
                self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var decimal: Double {
                get {
                  return resultMap["decimal"]! as! Double
                }
                set {
                  resultMap.updateValue(newValue, forKey: "decimal")
                }
              }

              public var raw: String {
                get {
                  return resultMap["raw"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "raw")
                }
              }
            }
          }
        }

        public var asV2AuctionCreatedEventProperties: AsV2AuctionCreatedEventProperties? {
          get {
            if !AsV2AuctionCreatedEventProperties.possibleTypes.contains(__typename) { return nil }
            return AsV2AuctionCreatedEventProperties(unsafeResultMap: resultMap)
          }
          set {
            guard let newValue = newValue else { return }
            resultMap = newValue.resultMap
          }
        }

        public struct AsV2AuctionCreatedEventProperties: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["V2AuctionCreatedEventProperties"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("auctionCurrency", type: .nonNull(.scalar(String.self))),
              GraphQLField("tokenOwner", type: .nonNull(.scalar(String.self))),
              GraphQLField("curator", type: .nonNull(.scalar(String.self))),
              GraphQLField("curatorFeePercentage", type: .nonNull(.scalar(Int.self))),
              GraphQLField("duration", type: .nonNull(.scalar(String.self))),
              GraphQLField("reservePrice", type: .nonNull(.scalar(String.self))),
              GraphQLField("price", type: .nonNull(.object(Price.selections))),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(auctionCurrency: String, tokenOwner: String, curator: String, curatorFeePercentage: Int, duration: String, reservePrice: String, price: Price) {
            self.init(unsafeResultMap: ["__typename": "V2AuctionCreatedEventProperties", "auctionCurrency": auctionCurrency, "tokenOwner": tokenOwner, "curator": curator, "curatorFeePercentage": curatorFeePercentage, "duration": duration, "reservePrice": reservePrice, "price": price.resultMap])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var auctionCurrency: String {
            get {
              return resultMap["auctionCurrency"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "auctionCurrency")
            }
          }

          public var tokenOwner: String {
            get {
              return resultMap["tokenOwner"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "tokenOwner")
            }
          }

          public var curator: String {
            get {
              return resultMap["curator"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "curator")
            }
          }

          public var curatorFeePercentage: Int {
            get {
              return resultMap["curatorFeePercentage"]! as! Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "curatorFeePercentage")
            }
          }

          public var duration: String {
            get {
              return resultMap["duration"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "duration")
            }
          }

          public var reservePrice: String {
            get {
              return resultMap["reservePrice"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "reservePrice")
            }
          }

          public var price: Price {
            get {
              return Price(unsafeResultMap: resultMap["price"]! as! ResultMap)
            }
            set {
              resultMap.updateValue(newValue.resultMap, forKey: "price")
            }
          }

          public var fragments: Fragments {
            get {
              return Fragments(unsafeResultMap: resultMap)
            }
            set {
              resultMap += newValue.resultMap
            }
          }

          public struct Fragments {
            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public var v2AuctionEventPropertiesInfo: V2AuctionEventPropertiesInfo {
              get {
                return V2AuctionEventPropertiesInfo(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }
          }

          public struct Price: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["PriceAtTime"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
                GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
                GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
              self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var blockNumber: Int {
              get {
                return resultMap["blockNumber"]! as! Int
              }
              set {
                resultMap.updateValue(newValue, forKey: "blockNumber")
              }
            }

            public var chainTokenPrice: ChainTokenPrice? {
              get {
                return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
              }
              set {
                resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
              }
            }

            public var nativePrice: NativePrice {
              get {
                return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
              }
              set {
                resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
              }
            }

            public var usdcPrice: UsdcPrice? {
              get {
                return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
              }
              set {
                resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
              }
            }

            public var fragments: Fragments {
              get {
                return Fragments(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }

            public struct Fragments {
              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public var priceSummary: PriceSummary {
                get {
                  return PriceSummary(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }
            }

            public struct ChainTokenPrice: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["CurrencyAmount"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                  GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(decimal: Double, raw: String) {
                self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var decimal: Double {
                get {
                  return resultMap["decimal"]! as! Double
                }
                set {
                  resultMap.updateValue(newValue, forKey: "decimal")
                }
              }

              public var raw: String {
                get {
                  return resultMap["raw"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "raw")
                }
              }
            }

            public struct NativePrice: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["CurrencyAmount"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                  GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                  GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(decimal: Double, raw: String, currency: Currency) {
                self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var decimal: Double {
                get {
                  return resultMap["decimal"]! as! Double
                }
                set {
                  resultMap.updateValue(newValue, forKey: "decimal")
                }
              }

              public var raw: String {
                get {
                  return resultMap["raw"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "raw")
                }
              }

              public var currency: Currency {
                get {
                  return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
                }
                set {
                  resultMap.updateValue(newValue.resultMap, forKey: "currency")
                }
              }

              public struct Currency: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["Currency"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("address", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                    GraphQLField("name", type: .nonNull(.scalar(String.self))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(address: String, decimals: Int, name: String) {
                  self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var address: String {
                  get {
                    return resultMap["address"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "address")
                  }
                }

                public var decimals: Int {
                  get {
                    return resultMap["decimals"]! as! Int
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimals")
                  }
                }

                public var name: String {
                  get {
                    return resultMap["name"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "name")
                  }
                }
              }
            }

            public struct UsdcPrice: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["CurrencyAmount"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                  GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(decimal: Double, raw: String) {
                self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var decimal: Double {
                get {
                  return resultMap["decimal"]! as! Double
                }
                set {
                  resultMap.updateValue(newValue, forKey: "decimal")
                }
              }

              public var raw: String {
                get {
                  return resultMap["raw"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "raw")
                }
              }
            }
          }
        }

        public var asV2AuctionCanceledEventProperties: AsV2AuctionCanceledEventProperties? {
          get {
            if !AsV2AuctionCanceledEventProperties.possibleTypes.contains(__typename) { return nil }
            return AsV2AuctionCanceledEventProperties(unsafeResultMap: resultMap)
          }
          set {
            guard let newValue = newValue else { return }
            resultMap = newValue.resultMap
          }
        }

        public struct AsV2AuctionCanceledEventProperties: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["V2AuctionCanceledEventProperties"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("tokenOwner", type: .nonNull(.scalar(String.self))),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(tokenOwner: String) {
            self.init(unsafeResultMap: ["__typename": "V2AuctionCanceledEventProperties", "tokenOwner": tokenOwner])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var tokenOwner: String {
            get {
              return resultMap["tokenOwner"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "tokenOwner")
            }
          }

          public var fragments: Fragments {
            get {
              return Fragments(unsafeResultMap: resultMap)
            }
            set {
              resultMap += newValue.resultMap
            }
          }

          public struct Fragments {
            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public var v2AuctionEventPropertiesInfo: V2AuctionEventPropertiesInfo {
              get {
                return V2AuctionEventPropertiesInfo(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }
          }
        }

        public var asV2AuctionDurationExtendedEventProperties: AsV2AuctionDurationExtendedEventProperties? {
          get {
            if !AsV2AuctionDurationExtendedEventProperties.possibleTypes.contains(__typename) { return nil }
            return AsV2AuctionDurationExtendedEventProperties(unsafeResultMap: resultMap)
          }
          set {
            guard let newValue = newValue else { return }
            resultMap = newValue.resultMap
          }
        }

        public struct AsV2AuctionDurationExtendedEventProperties: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["V2AuctionDurationExtendedEventProperties"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("duration", type: .nonNull(.scalar(String.self))),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(duration: String) {
            self.init(unsafeResultMap: ["__typename": "V2AuctionDurationExtendedEventProperties", "duration": duration])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var duration: String {
            get {
              return resultMap["duration"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "duration")
            }
          }

          public var fragments: Fragments {
            get {
              return Fragments(unsafeResultMap: resultMap)
            }
            set {
              resultMap += newValue.resultMap
            }
          }

          public struct Fragments {
            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public var v2AuctionEventPropertiesInfo: V2AuctionEventPropertiesInfo {
              get {
                return V2AuctionEventPropertiesInfo(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }
          }
        }

        public var asV2AuctionEndedEventProperties: AsV2AuctionEndedEventProperties? {
          get {
            if !AsV2AuctionEndedEventProperties.possibleTypes.contains(__typename) { return nil }
            return AsV2AuctionEndedEventProperties(unsafeResultMap: resultMap)
          }
          set {
            guard let newValue = newValue else { return }
            resultMap = newValue.resultMap
          }
        }

        public struct AsV2AuctionEndedEventProperties: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["V2AuctionEndedEventProperties"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("tokenOwner", type: .nonNull(.scalar(String.self))),
              GraphQLField("curator", type: .nonNull(.scalar(String.self))),
              GraphQLField("winner", type: .nonNull(.scalar(String.self))),
              GraphQLField("auctionCurrency", type: .nonNull(.scalar(String.self))),
              GraphQLField("amount", type: .nonNull(.scalar(String.self))),
              GraphQLField("curatorFee", type: .nonNull(.scalar(String.self))),
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("tokenOwner", type: .nonNull(.scalar(String.self))),
              GraphQLField("curator", type: .nonNull(.scalar(String.self))),
              GraphQLField("winner", type: .nonNull(.scalar(String.self))),
              GraphQLField("auctionCurrency", type: .nonNull(.scalar(String.self))),
              GraphQLField("amount", type: .nonNull(.scalar(String.self))),
              GraphQLField("curatorFee", type: .nonNull(.scalar(String.self))),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(tokenOwner: String, curator: String, winner: String, auctionCurrency: String, amount: String, curatorFee: String) {
            self.init(unsafeResultMap: ["__typename": "V2AuctionEndedEventProperties", "tokenOwner": tokenOwner, "curator": curator, "winner": winner, "auctionCurrency": auctionCurrency, "amount": amount, "curatorFee": curatorFee])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var tokenOwner: String {
            get {
              return resultMap["tokenOwner"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "tokenOwner")
            }
          }

          public var curator: String {
            get {
              return resultMap["curator"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "curator")
            }
          }

          public var winner: String {
            get {
              return resultMap["winner"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "winner")
            }
          }

          public var auctionCurrency: String {
            get {
              return resultMap["auctionCurrency"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "auctionCurrency")
            }
          }

          public var amount: String {
            get {
              return resultMap["amount"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "amount")
            }
          }

          public var curatorFee: String {
            get {
              return resultMap["curatorFee"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "curatorFee")
            }
          }

          public var fragments: Fragments {
            get {
              return Fragments(unsafeResultMap: resultMap)
            }
            set {
              resultMap += newValue.resultMap
            }
          }

          public struct Fragments {
            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public var v2AuctionEventPropertiesInfo: V2AuctionEventPropertiesInfo {
              get {
                return V2AuctionEventPropertiesInfo(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }
          }
        }

        public var asV2AuctionReservePriceUpdatedEventProperties: AsV2AuctionReservePriceUpdatedEventProperties? {
          get {
            if !AsV2AuctionReservePriceUpdatedEventProperties.possibleTypes.contains(__typename) { return nil }
            return AsV2AuctionReservePriceUpdatedEventProperties(unsafeResultMap: resultMap)
          }
          set {
            guard let newValue = newValue else { return }
            resultMap = newValue.resultMap
          }
        }

        public struct AsV2AuctionReservePriceUpdatedEventProperties: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["V2AuctionReservePriceUpdatedEventProperties"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("reservePrice", type: .nonNull(.scalar(String.self))),
              GraphQLField("price", type: .nonNull(.object(Price.selections))),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(reservePrice: String, price: Price) {
            self.init(unsafeResultMap: ["__typename": "V2AuctionReservePriceUpdatedEventProperties", "reservePrice": reservePrice, "price": price.resultMap])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var reservePrice: String {
            get {
              return resultMap["reservePrice"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "reservePrice")
            }
          }

          public var price: Price {
            get {
              return Price(unsafeResultMap: resultMap["price"]! as! ResultMap)
            }
            set {
              resultMap.updateValue(newValue.resultMap, forKey: "price")
            }
          }

          public var fragments: Fragments {
            get {
              return Fragments(unsafeResultMap: resultMap)
            }
            set {
              resultMap += newValue.resultMap
            }
          }

          public struct Fragments {
            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public var v2AuctionEventPropertiesInfo: V2AuctionEventPropertiesInfo {
              get {
                return V2AuctionEventPropertiesInfo(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }
          }

          public struct Price: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["PriceAtTime"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
                GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
                GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
              self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var blockNumber: Int {
              get {
                return resultMap["blockNumber"]! as! Int
              }
              set {
                resultMap.updateValue(newValue, forKey: "blockNumber")
              }
            }

            public var chainTokenPrice: ChainTokenPrice? {
              get {
                return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
              }
              set {
                resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
              }
            }

            public var nativePrice: NativePrice {
              get {
                return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
              }
              set {
                resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
              }
            }

            public var usdcPrice: UsdcPrice? {
              get {
                return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
              }
              set {
                resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
              }
            }

            public var fragments: Fragments {
              get {
                return Fragments(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }

            public struct Fragments {
              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public var priceSummary: PriceSummary {
                get {
                  return PriceSummary(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }
            }

            public struct ChainTokenPrice: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["CurrencyAmount"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                  GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(decimal: Double, raw: String) {
                self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var decimal: Double {
                get {
                  return resultMap["decimal"]! as! Double
                }
                set {
                  resultMap.updateValue(newValue, forKey: "decimal")
                }
              }

              public var raw: String {
                get {
                  return resultMap["raw"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "raw")
                }
              }
            }

            public struct NativePrice: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["CurrencyAmount"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                  GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                  GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(decimal: Double, raw: String, currency: Currency) {
                self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var decimal: Double {
                get {
                  return resultMap["decimal"]! as! Double
                }
                set {
                  resultMap.updateValue(newValue, forKey: "decimal")
                }
              }

              public var raw: String {
                get {
                  return resultMap["raw"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "raw")
                }
              }

              public var currency: Currency {
                get {
                  return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
                }
                set {
                  resultMap.updateValue(newValue.resultMap, forKey: "currency")
                }
              }

              public struct Currency: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["Currency"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("address", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                    GraphQLField("name", type: .nonNull(.scalar(String.self))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(address: String, decimals: Int, name: String) {
                  self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var address: String {
                  get {
                    return resultMap["address"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "address")
                  }
                }

                public var decimals: Int {
                  get {
                    return resultMap["decimals"]! as! Int
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimals")
                  }
                }

                public var name: String {
                  get {
                    return resultMap["name"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "name")
                  }
                }
              }
            }

            public struct UsdcPrice: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["CurrencyAmount"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                  GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(decimal: Double, raw: String) {
                self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var decimal: Double {
                get {
                  return resultMap["decimal"]! as! Double
                }
                set {
                  resultMap.updateValue(newValue, forKey: "decimal")
                }
              }

              public var raw: String {
                get {
                  return resultMap["raw"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "raw")
                }
              }
            }
          }
        }

        public var asV2AuctionApprovalUpdatedEventProperties: AsV2AuctionApprovalUpdatedEventProperties? {
          get {
            if !AsV2AuctionApprovalUpdatedEventProperties.possibleTypes.contains(__typename) { return nil }
            return AsV2AuctionApprovalUpdatedEventProperties(unsafeResultMap: resultMap)
          }
          set {
            guard let newValue = newValue else { return }
            resultMap = newValue.resultMap
          }
        }

        public struct AsV2AuctionApprovalUpdatedEventProperties: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["V2AuctionApprovalUpdatedEventProperties"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("approved", type: .nonNull(.scalar(Bool.self))),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(approved: Bool) {
            self.init(unsafeResultMap: ["__typename": "V2AuctionApprovalUpdatedEventProperties", "approved": approved])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var approved: Bool {
            get {
              return resultMap["approved"]! as! Bool
            }
            set {
              resultMap.updateValue(newValue, forKey: "approved")
            }
          }

          public var fragments: Fragments {
            get {
              return Fragments(unsafeResultMap: resultMap)
            }
            set {
              resultMap += newValue.resultMap
            }
          }

          public struct Fragments {
            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public var v2AuctionEventPropertiesInfo: V2AuctionEventPropertiesInfo {
              get {
                return V2AuctionEventPropertiesInfo(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }
          }
        }
      }
    }

    public var asV3AskEvent: AsV3AskEvent? {
      get {
        if !AsV3AskEvent.possibleTypes.contains(__typename) { return nil }
        return AsV3AskEvent(unsafeResultMap: resultMap)
      }
      set {
        guard let newValue = newValue else { return }
        resultMap = newValue.resultMap
      }
    }

    public struct AsV3AskEvent: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["V3AskEvent"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("v3AskEventType", type: .nonNull(.scalar(V3AskEventType.self))),
          GraphQLField("address", type: .nonNull(.scalar(String.self))),
          GraphQLField("collectionAddress", type: .nonNull(.scalar(String.self))),
          GraphQLField("tokenId", type: .nonNull(.scalar(String.self))),
          GraphQLField("properties", type: .nonNull(.object(Property.selections))),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(v3AskEventType: V3AskEventType, address: String, collectionAddress: String, tokenId: String, properties: Property) {
        self.init(unsafeResultMap: ["__typename": "V3AskEvent", "v3AskEventType": v3AskEventType, "address": address, "collectionAddress": collectionAddress, "tokenId": tokenId, "properties": properties.resultMap])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var v3AskEventType: V3AskEventType {
        get {
          return resultMap["v3AskEventType"]! as! V3AskEventType
        }
        set {
          resultMap.updateValue(newValue, forKey: "v3AskEventType")
        }
      }

      public var address: String {
        get {
          return resultMap["address"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "address")
        }
      }

      public var collectionAddress: String {
        get {
          return resultMap["collectionAddress"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "collectionAddress")
        }
      }

      public var tokenId: String {
        get {
          return resultMap["tokenId"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "tokenId")
        }
      }

      public var properties: Property {
        get {
          return Property(unsafeResultMap: resultMap["properties"]! as! ResultMap)
        }
        set {
          resultMap.updateValue(newValue.resultMap, forKey: "properties")
        }
      }

      public struct Property: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["V3AskCreatedEventProperties", "V3AskCanceledEventProperties", "V3AskPriceUpdatedEventProperties", "V3AskFilledEventProperties"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLTypeCase(
              variants: ["V3AskCreatedEventProperties": AsV3AskCreatedEventProperties.selections, "V3AskCanceledEventProperties": AsV3AskCanceledEventProperties.selections, "V3AskPriceUpdatedEventProperties": AsV3AskPriceUpdatedEventProperties.selections, "V3AskFilledEventProperties": AsV3AskFilledEventProperties.selections],
              default: [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              ]
            )
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public static func makeV3AskCreatedEventProperties(seller: String, sellerFundsRecipient: String, askCurrency: String, askPrice: String, findersFeeBps: Int, price: AsV3AskCreatedEventProperties.Price) -> Property {
          return Property(unsafeResultMap: ["__typename": "V3AskCreatedEventProperties", "seller": seller, "sellerFundsRecipient": sellerFundsRecipient, "askCurrency": askCurrency, "askPrice": askPrice, "findersFeeBps": findersFeeBps, "price": price.resultMap])
        }

        public static func makeV3AskCanceledEventProperties(seller: String, sellerFundsRecipient: String, askCurrency: String, askPrice: String, findersFeeBps: Int, price: AsV3AskCanceledEventProperties.Price) -> Property {
          return Property(unsafeResultMap: ["__typename": "V3AskCanceledEventProperties", "seller": seller, "sellerFundsRecipient": sellerFundsRecipient, "askCurrency": askCurrency, "askPrice": askPrice, "findersFeeBps": findersFeeBps, "price": price.resultMap])
        }

        public static func makeV3AskPriceUpdatedEventProperties(seller: String, sellerFundsRecipient: String, askCurrency: String, askPrice: String, findersFeeBps: Int, price: AsV3AskPriceUpdatedEventProperties.Price) -> Property {
          return Property(unsafeResultMap: ["__typename": "V3AskPriceUpdatedEventProperties", "seller": seller, "sellerFundsRecipient": sellerFundsRecipient, "askCurrency": askCurrency, "askPrice": askPrice, "findersFeeBps": findersFeeBps, "price": price.resultMap])
        }

        public static func makeV3AskFilledEventProperties(seller: String, sellerFundsRecipient: String, askCurrency: String, askPrice: String, findersFeeBps: Int, price: AsV3AskFilledEventProperties.Price, finder: String, buyer: String) -> Property {
          return Property(unsafeResultMap: ["__typename": "V3AskFilledEventProperties", "seller": seller, "sellerFundsRecipient": sellerFundsRecipient, "askCurrency": askCurrency, "askPrice": askPrice, "findersFeeBps": findersFeeBps, "price": price.resultMap, "finder": finder, "buyer": buyer])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var fragments: Fragments {
          get {
            return Fragments(unsafeResultMap: resultMap)
          }
          set {
            resultMap += newValue.resultMap
          }
        }

        public struct Fragments {
          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public var v3AskEventPropertiesInfo: V3AskEventPropertiesInfo {
            get {
              return V3AskEventPropertiesInfo(unsafeResultMap: resultMap)
            }
            set {
              resultMap += newValue.resultMap
            }
          }
        }

        public var asV3AskCreatedEventProperties: AsV3AskCreatedEventProperties? {
          get {
            if !AsV3AskCreatedEventProperties.possibleTypes.contains(__typename) { return nil }
            return AsV3AskCreatedEventProperties(unsafeResultMap: resultMap)
          }
          set {
            guard let newValue = newValue else { return }
            resultMap = newValue.resultMap
          }
        }

        public struct AsV3AskCreatedEventProperties: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["V3AskCreatedEventProperties"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("seller", type: .nonNull(.scalar(String.self))),
              GraphQLField("sellerFundsRecipient", type: .nonNull(.scalar(String.self))),
              GraphQLField("askCurrency", type: .nonNull(.scalar(String.self))),
              GraphQLField("askPrice", type: .nonNull(.scalar(String.self))),
              GraphQLField("findersFeeBps", type: .nonNull(.scalar(Int.self))),
              GraphQLField("price", type: .nonNull(.object(Price.selections))),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(seller: String, sellerFundsRecipient: String, askCurrency: String, askPrice: String, findersFeeBps: Int, price: Price) {
            self.init(unsafeResultMap: ["__typename": "V3AskCreatedEventProperties", "seller": seller, "sellerFundsRecipient": sellerFundsRecipient, "askCurrency": askCurrency, "askPrice": askPrice, "findersFeeBps": findersFeeBps, "price": price.resultMap])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var seller: String {
            get {
              return resultMap["seller"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "seller")
            }
          }

          public var sellerFundsRecipient: String {
            get {
              return resultMap["sellerFundsRecipient"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "sellerFundsRecipient")
            }
          }

          public var askCurrency: String {
            get {
              return resultMap["askCurrency"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "askCurrency")
            }
          }

          public var askPrice: String {
            get {
              return resultMap["askPrice"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "askPrice")
            }
          }

          public var findersFeeBps: Int {
            get {
              return resultMap["findersFeeBps"]! as! Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "findersFeeBps")
            }
          }

          public var price: Price {
            get {
              return Price(unsafeResultMap: resultMap["price"]! as! ResultMap)
            }
            set {
              resultMap.updateValue(newValue.resultMap, forKey: "price")
            }
          }

          public var fragments: Fragments {
            get {
              return Fragments(unsafeResultMap: resultMap)
            }
            set {
              resultMap += newValue.resultMap
            }
          }

          public struct Fragments {
            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public var v3AskEventPropertiesInfo: V3AskEventPropertiesInfo {
              get {
                return V3AskEventPropertiesInfo(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }
          }

          public struct Price: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["PriceAtTime"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
                GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
                GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
              self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var blockNumber: Int {
              get {
                return resultMap["blockNumber"]! as! Int
              }
              set {
                resultMap.updateValue(newValue, forKey: "blockNumber")
              }
            }

            public var chainTokenPrice: ChainTokenPrice? {
              get {
                return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
              }
              set {
                resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
              }
            }

            public var nativePrice: NativePrice {
              get {
                return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
              }
              set {
                resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
              }
            }

            public var usdcPrice: UsdcPrice? {
              get {
                return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
              }
              set {
                resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
              }
            }

            public var fragments: Fragments {
              get {
                return Fragments(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }

            public struct Fragments {
              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public var priceSummary: PriceSummary {
                get {
                  return PriceSummary(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }
            }

            public struct ChainTokenPrice: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["CurrencyAmount"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                  GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(decimal: Double, raw: String) {
                self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var decimal: Double {
                get {
                  return resultMap["decimal"]! as! Double
                }
                set {
                  resultMap.updateValue(newValue, forKey: "decimal")
                }
              }

              public var raw: String {
                get {
                  return resultMap["raw"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "raw")
                }
              }
            }

            public struct NativePrice: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["CurrencyAmount"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                  GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                  GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(decimal: Double, raw: String, currency: Currency) {
                self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var decimal: Double {
                get {
                  return resultMap["decimal"]! as! Double
                }
                set {
                  resultMap.updateValue(newValue, forKey: "decimal")
                }
              }

              public var raw: String {
                get {
                  return resultMap["raw"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "raw")
                }
              }

              public var currency: Currency {
                get {
                  return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
                }
                set {
                  resultMap.updateValue(newValue.resultMap, forKey: "currency")
                }
              }

              public struct Currency: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["Currency"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("address", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                    GraphQLField("name", type: .nonNull(.scalar(String.self))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(address: String, decimals: Int, name: String) {
                  self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var address: String {
                  get {
                    return resultMap["address"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "address")
                  }
                }

                public var decimals: Int {
                  get {
                    return resultMap["decimals"]! as! Int
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimals")
                  }
                }

                public var name: String {
                  get {
                    return resultMap["name"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "name")
                  }
                }
              }
            }

            public struct UsdcPrice: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["CurrencyAmount"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                  GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(decimal: Double, raw: String) {
                self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var decimal: Double {
                get {
                  return resultMap["decimal"]! as! Double
                }
                set {
                  resultMap.updateValue(newValue, forKey: "decimal")
                }
              }

              public var raw: String {
                get {
                  return resultMap["raw"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "raw")
                }
              }
            }
          }
        }

        public var asV3AskCanceledEventProperties: AsV3AskCanceledEventProperties? {
          get {
            if !AsV3AskCanceledEventProperties.possibleTypes.contains(__typename) { return nil }
            return AsV3AskCanceledEventProperties(unsafeResultMap: resultMap)
          }
          set {
            guard let newValue = newValue else { return }
            resultMap = newValue.resultMap
          }
        }

        public struct AsV3AskCanceledEventProperties: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["V3AskCanceledEventProperties"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("seller", type: .nonNull(.scalar(String.self))),
              GraphQLField("sellerFundsRecipient", type: .nonNull(.scalar(String.self))),
              GraphQLField("askCurrency", type: .nonNull(.scalar(String.self))),
              GraphQLField("askPrice", type: .nonNull(.scalar(String.self))),
              GraphQLField("findersFeeBps", type: .nonNull(.scalar(Int.self))),
              GraphQLField("price", type: .nonNull(.object(Price.selections))),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(seller: String, sellerFundsRecipient: String, askCurrency: String, askPrice: String, findersFeeBps: Int, price: Price) {
            self.init(unsafeResultMap: ["__typename": "V3AskCanceledEventProperties", "seller": seller, "sellerFundsRecipient": sellerFundsRecipient, "askCurrency": askCurrency, "askPrice": askPrice, "findersFeeBps": findersFeeBps, "price": price.resultMap])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var seller: String {
            get {
              return resultMap["seller"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "seller")
            }
          }

          public var sellerFundsRecipient: String {
            get {
              return resultMap["sellerFundsRecipient"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "sellerFundsRecipient")
            }
          }

          public var askCurrency: String {
            get {
              return resultMap["askCurrency"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "askCurrency")
            }
          }

          public var askPrice: String {
            get {
              return resultMap["askPrice"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "askPrice")
            }
          }

          public var findersFeeBps: Int {
            get {
              return resultMap["findersFeeBps"]! as! Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "findersFeeBps")
            }
          }

          public var price: Price {
            get {
              return Price(unsafeResultMap: resultMap["price"]! as! ResultMap)
            }
            set {
              resultMap.updateValue(newValue.resultMap, forKey: "price")
            }
          }

          public var fragments: Fragments {
            get {
              return Fragments(unsafeResultMap: resultMap)
            }
            set {
              resultMap += newValue.resultMap
            }
          }

          public struct Fragments {
            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public var v3AskEventPropertiesInfo: V3AskEventPropertiesInfo {
              get {
                return V3AskEventPropertiesInfo(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }
          }

          public struct Price: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["PriceAtTime"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
                GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
                GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
              self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var blockNumber: Int {
              get {
                return resultMap["blockNumber"]! as! Int
              }
              set {
                resultMap.updateValue(newValue, forKey: "blockNumber")
              }
            }

            public var chainTokenPrice: ChainTokenPrice? {
              get {
                return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
              }
              set {
                resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
              }
            }

            public var nativePrice: NativePrice {
              get {
                return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
              }
              set {
                resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
              }
            }

            public var usdcPrice: UsdcPrice? {
              get {
                return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
              }
              set {
                resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
              }
            }

            public var fragments: Fragments {
              get {
                return Fragments(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }

            public struct Fragments {
              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public var priceSummary: PriceSummary {
                get {
                  return PriceSummary(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }
            }

            public struct ChainTokenPrice: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["CurrencyAmount"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                  GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(decimal: Double, raw: String) {
                self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var decimal: Double {
                get {
                  return resultMap["decimal"]! as! Double
                }
                set {
                  resultMap.updateValue(newValue, forKey: "decimal")
                }
              }

              public var raw: String {
                get {
                  return resultMap["raw"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "raw")
                }
              }
            }

            public struct NativePrice: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["CurrencyAmount"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                  GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                  GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(decimal: Double, raw: String, currency: Currency) {
                self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var decimal: Double {
                get {
                  return resultMap["decimal"]! as! Double
                }
                set {
                  resultMap.updateValue(newValue, forKey: "decimal")
                }
              }

              public var raw: String {
                get {
                  return resultMap["raw"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "raw")
                }
              }

              public var currency: Currency {
                get {
                  return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
                }
                set {
                  resultMap.updateValue(newValue.resultMap, forKey: "currency")
                }
              }

              public struct Currency: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["Currency"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("address", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                    GraphQLField("name", type: .nonNull(.scalar(String.self))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(address: String, decimals: Int, name: String) {
                  self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var address: String {
                  get {
                    return resultMap["address"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "address")
                  }
                }

                public var decimals: Int {
                  get {
                    return resultMap["decimals"]! as! Int
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimals")
                  }
                }

                public var name: String {
                  get {
                    return resultMap["name"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "name")
                  }
                }
              }
            }

            public struct UsdcPrice: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["CurrencyAmount"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                  GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(decimal: Double, raw: String) {
                self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var decimal: Double {
                get {
                  return resultMap["decimal"]! as! Double
                }
                set {
                  resultMap.updateValue(newValue, forKey: "decimal")
                }
              }

              public var raw: String {
                get {
                  return resultMap["raw"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "raw")
                }
              }
            }
          }
        }

        public var asV3AskPriceUpdatedEventProperties: AsV3AskPriceUpdatedEventProperties? {
          get {
            if !AsV3AskPriceUpdatedEventProperties.possibleTypes.contains(__typename) { return nil }
            return AsV3AskPriceUpdatedEventProperties(unsafeResultMap: resultMap)
          }
          set {
            guard let newValue = newValue else { return }
            resultMap = newValue.resultMap
          }
        }

        public struct AsV3AskPriceUpdatedEventProperties: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["V3AskPriceUpdatedEventProperties"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("seller", type: .nonNull(.scalar(String.self))),
              GraphQLField("sellerFundsRecipient", type: .nonNull(.scalar(String.self))),
              GraphQLField("askCurrency", type: .nonNull(.scalar(String.self))),
              GraphQLField("askPrice", type: .nonNull(.scalar(String.self))),
              GraphQLField("findersFeeBps", type: .nonNull(.scalar(Int.self))),
              GraphQLField("price", type: .nonNull(.object(Price.selections))),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(seller: String, sellerFundsRecipient: String, askCurrency: String, askPrice: String, findersFeeBps: Int, price: Price) {
            self.init(unsafeResultMap: ["__typename": "V3AskPriceUpdatedEventProperties", "seller": seller, "sellerFundsRecipient": sellerFundsRecipient, "askCurrency": askCurrency, "askPrice": askPrice, "findersFeeBps": findersFeeBps, "price": price.resultMap])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var seller: String {
            get {
              return resultMap["seller"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "seller")
            }
          }

          public var sellerFundsRecipient: String {
            get {
              return resultMap["sellerFundsRecipient"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "sellerFundsRecipient")
            }
          }

          public var askCurrency: String {
            get {
              return resultMap["askCurrency"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "askCurrency")
            }
          }

          public var askPrice: String {
            get {
              return resultMap["askPrice"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "askPrice")
            }
          }

          public var findersFeeBps: Int {
            get {
              return resultMap["findersFeeBps"]! as! Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "findersFeeBps")
            }
          }

          public var price: Price {
            get {
              return Price(unsafeResultMap: resultMap["price"]! as! ResultMap)
            }
            set {
              resultMap.updateValue(newValue.resultMap, forKey: "price")
            }
          }

          public var fragments: Fragments {
            get {
              return Fragments(unsafeResultMap: resultMap)
            }
            set {
              resultMap += newValue.resultMap
            }
          }

          public struct Fragments {
            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public var v3AskEventPropertiesInfo: V3AskEventPropertiesInfo {
              get {
                return V3AskEventPropertiesInfo(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }
          }

          public struct Price: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["PriceAtTime"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
                GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
                GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
              self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var blockNumber: Int {
              get {
                return resultMap["blockNumber"]! as! Int
              }
              set {
                resultMap.updateValue(newValue, forKey: "blockNumber")
              }
            }

            public var chainTokenPrice: ChainTokenPrice? {
              get {
                return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
              }
              set {
                resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
              }
            }

            public var nativePrice: NativePrice {
              get {
                return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
              }
              set {
                resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
              }
            }

            public var usdcPrice: UsdcPrice? {
              get {
                return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
              }
              set {
                resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
              }
            }

            public var fragments: Fragments {
              get {
                return Fragments(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }

            public struct Fragments {
              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public var priceSummary: PriceSummary {
                get {
                  return PriceSummary(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }
            }

            public struct ChainTokenPrice: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["CurrencyAmount"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                  GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(decimal: Double, raw: String) {
                self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var decimal: Double {
                get {
                  return resultMap["decimal"]! as! Double
                }
                set {
                  resultMap.updateValue(newValue, forKey: "decimal")
                }
              }

              public var raw: String {
                get {
                  return resultMap["raw"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "raw")
                }
              }
            }

            public struct NativePrice: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["CurrencyAmount"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                  GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                  GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(decimal: Double, raw: String, currency: Currency) {
                self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var decimal: Double {
                get {
                  return resultMap["decimal"]! as! Double
                }
                set {
                  resultMap.updateValue(newValue, forKey: "decimal")
                }
              }

              public var raw: String {
                get {
                  return resultMap["raw"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "raw")
                }
              }

              public var currency: Currency {
                get {
                  return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
                }
                set {
                  resultMap.updateValue(newValue.resultMap, forKey: "currency")
                }
              }

              public struct Currency: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["Currency"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("address", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                    GraphQLField("name", type: .nonNull(.scalar(String.self))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(address: String, decimals: Int, name: String) {
                  self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var address: String {
                  get {
                    return resultMap["address"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "address")
                  }
                }

                public var decimals: Int {
                  get {
                    return resultMap["decimals"]! as! Int
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimals")
                  }
                }

                public var name: String {
                  get {
                    return resultMap["name"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "name")
                  }
                }
              }
            }

            public struct UsdcPrice: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["CurrencyAmount"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                  GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(decimal: Double, raw: String) {
                self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var decimal: Double {
                get {
                  return resultMap["decimal"]! as! Double
                }
                set {
                  resultMap.updateValue(newValue, forKey: "decimal")
                }
              }

              public var raw: String {
                get {
                  return resultMap["raw"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "raw")
                }
              }
            }
          }
        }

        public var asV3AskFilledEventProperties: AsV3AskFilledEventProperties? {
          get {
            if !AsV3AskFilledEventProperties.possibleTypes.contains(__typename) { return nil }
            return AsV3AskFilledEventProperties(unsafeResultMap: resultMap)
          }
          set {
            guard let newValue = newValue else { return }
            resultMap = newValue.resultMap
          }
        }

        public struct AsV3AskFilledEventProperties: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["V3AskFilledEventProperties"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("seller", type: .nonNull(.scalar(String.self))),
              GraphQLField("sellerFundsRecipient", type: .nonNull(.scalar(String.self))),
              GraphQLField("askCurrency", type: .nonNull(.scalar(String.self))),
              GraphQLField("askPrice", type: .nonNull(.scalar(String.self))),
              GraphQLField("findersFeeBps", type: .nonNull(.scalar(Int.self))),
              GraphQLField("price", type: .nonNull(.object(Price.selections))),
              GraphQLField("finder", type: .nonNull(.scalar(String.self))),
              GraphQLField("buyer", type: .nonNull(.scalar(String.self))),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(seller: String, sellerFundsRecipient: String, askCurrency: String, askPrice: String, findersFeeBps: Int, price: Price, finder: String, buyer: String) {
            self.init(unsafeResultMap: ["__typename": "V3AskFilledEventProperties", "seller": seller, "sellerFundsRecipient": sellerFundsRecipient, "askCurrency": askCurrency, "askPrice": askPrice, "findersFeeBps": findersFeeBps, "price": price.resultMap, "finder": finder, "buyer": buyer])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var seller: String {
            get {
              return resultMap["seller"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "seller")
            }
          }

          public var sellerFundsRecipient: String {
            get {
              return resultMap["sellerFundsRecipient"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "sellerFundsRecipient")
            }
          }

          public var askCurrency: String {
            get {
              return resultMap["askCurrency"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "askCurrency")
            }
          }

          public var askPrice: String {
            get {
              return resultMap["askPrice"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "askPrice")
            }
          }

          public var findersFeeBps: Int {
            get {
              return resultMap["findersFeeBps"]! as! Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "findersFeeBps")
            }
          }

          public var price: Price {
            get {
              return Price(unsafeResultMap: resultMap["price"]! as! ResultMap)
            }
            set {
              resultMap.updateValue(newValue.resultMap, forKey: "price")
            }
          }

          public var finder: String {
            get {
              return resultMap["finder"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "finder")
            }
          }

          public var buyer: String {
            get {
              return resultMap["buyer"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "buyer")
            }
          }

          public var fragments: Fragments {
            get {
              return Fragments(unsafeResultMap: resultMap)
            }
            set {
              resultMap += newValue.resultMap
            }
          }

          public struct Fragments {
            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public var v3AskEventPropertiesInfo: V3AskEventPropertiesInfo {
              get {
                return V3AskEventPropertiesInfo(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }
          }

          public struct Price: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["PriceAtTime"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
                GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
                GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
              self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var blockNumber: Int {
              get {
                return resultMap["blockNumber"]! as! Int
              }
              set {
                resultMap.updateValue(newValue, forKey: "blockNumber")
              }
            }

            public var chainTokenPrice: ChainTokenPrice? {
              get {
                return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
              }
              set {
                resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
              }
            }

            public var nativePrice: NativePrice {
              get {
                return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
              }
              set {
                resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
              }
            }

            public var usdcPrice: UsdcPrice? {
              get {
                return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
              }
              set {
                resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
              }
            }

            public var fragments: Fragments {
              get {
                return Fragments(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }

            public struct Fragments {
              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public var priceSummary: PriceSummary {
                get {
                  return PriceSummary(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }
            }

            public struct ChainTokenPrice: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["CurrencyAmount"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                  GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(decimal: Double, raw: String) {
                self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var decimal: Double {
                get {
                  return resultMap["decimal"]! as! Double
                }
                set {
                  resultMap.updateValue(newValue, forKey: "decimal")
                }
              }

              public var raw: String {
                get {
                  return resultMap["raw"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "raw")
                }
              }
            }

            public struct NativePrice: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["CurrencyAmount"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                  GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                  GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(decimal: Double, raw: String, currency: Currency) {
                self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var decimal: Double {
                get {
                  return resultMap["decimal"]! as! Double
                }
                set {
                  resultMap.updateValue(newValue, forKey: "decimal")
                }
              }

              public var raw: String {
                get {
                  return resultMap["raw"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "raw")
                }
              }

              public var currency: Currency {
                get {
                  return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
                }
                set {
                  resultMap.updateValue(newValue.resultMap, forKey: "currency")
                }
              }

              public struct Currency: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["Currency"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("address", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                    GraphQLField("name", type: .nonNull(.scalar(String.self))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(address: String, decimals: Int, name: String) {
                  self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var address: String {
                  get {
                    return resultMap["address"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "address")
                  }
                }

                public var decimals: Int {
                  get {
                    return resultMap["decimals"]! as! Int
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimals")
                  }
                }

                public var name: String {
                  get {
                    return resultMap["name"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "name")
                  }
                }
              }
            }

            public struct UsdcPrice: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["CurrencyAmount"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                  GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(decimal: Double, raw: String) {
                self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var decimal: Double {
                get {
                  return resultMap["decimal"]! as! Double
                }
                set {
                  resultMap.updateValue(newValue, forKey: "decimal")
                }
              }

              public var raw: String {
                get {
                  return resultMap["raw"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "raw")
                }
              }
            }
          }
        }
      }
    }
  }
}

public struct TokenDetails: GraphQLFragment {
  /// The raw GraphQL definition of this fragment.
  public static let fragmentDefinition: String =
    """
    fragment TokenDetails on Token {
      __typename
      metadata
      tokenUrl
      tokenUrlMimeType
      attributes {
        __typename
        traitType
        value
        displayType
      }
    }
    """

  public static let possibleTypes: [String] = ["Token"]

  public static var selections: [GraphQLSelection] {
    return [
      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
      GraphQLField("metadata", type: .scalar(String.self)),
      GraphQLField("tokenUrl", type: .scalar(String.self)),
      GraphQLField("tokenUrlMimeType", type: .scalar(String.self)),
      GraphQLField("attributes", type: .list(.nonNull(.object(Attribute.selections)))),
    ]
  }

  public private(set) var resultMap: ResultMap

  public init(unsafeResultMap: ResultMap) {
    self.resultMap = unsafeResultMap
  }

  public init(metadata: String? = nil, tokenUrl: String? = nil, tokenUrlMimeType: String? = nil, attributes: [Attribute]? = nil) {
    self.init(unsafeResultMap: ["__typename": "Token", "metadata": metadata, "tokenUrl": tokenUrl, "tokenUrlMimeType": tokenUrlMimeType, "attributes": attributes.flatMap { (value: [Attribute]) -> [ResultMap] in value.map { (value: Attribute) -> ResultMap in value.resultMap } }])
  }

  public var __typename: String {
    get {
      return resultMap["__typename"]! as! String
    }
    set {
      resultMap.updateValue(newValue, forKey: "__typename")
    }
  }

  public var metadata: String? {
    get {
      return resultMap["metadata"] as? String
    }
    set {
      resultMap.updateValue(newValue, forKey: "metadata")
    }
  }

  public var tokenUrl: String? {
    get {
      return resultMap["tokenUrl"] as? String
    }
    set {
      resultMap.updateValue(newValue, forKey: "tokenUrl")
    }
  }

  public var tokenUrlMimeType: String? {
    get {
      return resultMap["tokenUrlMimeType"] as? String
    }
    set {
      resultMap.updateValue(newValue, forKey: "tokenUrlMimeType")
    }
  }

  public var attributes: [Attribute]? {
    get {
      return (resultMap["attributes"] as? [ResultMap]).flatMap { (value: [ResultMap]) -> [Attribute] in value.map { (value: ResultMap) -> Attribute in Attribute(unsafeResultMap: value) } }
    }
    set {
      resultMap.updateValue(newValue.flatMap { (value: [Attribute]) -> [ResultMap] in value.map { (value: Attribute) -> ResultMap in value.resultMap } }, forKey: "attributes")
    }
  }

  public struct Attribute: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["TokenAttribute"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("traitType", type: .scalar(String.self)),
        GraphQLField("value", type: .scalar(String.self)),
        GraphQLField("displayType", type: .scalar(String.self)),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(traitType: String? = nil, value: String? = nil, displayType: String? = nil) {
      self.init(unsafeResultMap: ["__typename": "TokenAttribute", "traitType": traitType, "value": value, "displayType": displayType])
    }

    public var __typename: String {
      get {
        return resultMap["__typename"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "__typename")
      }
    }

    public var traitType: String? {
      get {
        return resultMap["traitType"] as? String
      }
      set {
        resultMap.updateValue(newValue, forKey: "traitType")
      }
    }

    public var value: String? {
      get {
        return resultMap["value"] as? String
      }
      set {
        resultMap.updateValue(newValue, forKey: "value")
      }
    }

    public var displayType: String? {
      get {
        return resultMap["displayType"] as? String
      }
      set {
        resultMap.updateValue(newValue, forKey: "displayType")
      }
    }
  }
}

public struct CollectionInfo: GraphQLFragment {
  /// The raw GraphQL definition of this fragment.
  public static let fragmentDefinition: String =
    """
    fragment CollectionInfo on Collection {
      __typename
      address
      description
      name
      symbol
      totalSupply
      networkInfo {
        __typename
        ...NetworkInfoDetails
      }
    }
    """

  public static let possibleTypes: [String] = ["Collection"]

  public static var selections: [GraphQLSelection] {
    return [
      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
      GraphQLField("address", type: .nonNull(.scalar(String.self))),
      GraphQLField("description", type: .nonNull(.scalar(String.self))),
      GraphQLField("name", type: .scalar(String.self)),
      GraphQLField("symbol", type: .scalar(String.self)),
      GraphQLField("totalSupply", type: .scalar(Int.self)),
      GraphQLField("networkInfo", type: .nonNull(.object(NetworkInfo.selections))),
    ]
  }

  public private(set) var resultMap: ResultMap

  public init(unsafeResultMap: ResultMap) {
    self.resultMap = unsafeResultMap
  }

  public init(address: String, description: String, name: String? = nil, symbol: String? = nil, totalSupply: Int? = nil, networkInfo: NetworkInfo) {
    self.init(unsafeResultMap: ["__typename": "Collection", "address": address, "description": description, "name": name, "symbol": symbol, "totalSupply": totalSupply, "networkInfo": networkInfo.resultMap])
  }

  public var __typename: String {
    get {
      return resultMap["__typename"]! as! String
    }
    set {
      resultMap.updateValue(newValue, forKey: "__typename")
    }
  }

  public var address: String {
    get {
      return resultMap["address"]! as! String
    }
    set {
      resultMap.updateValue(newValue, forKey: "address")
    }
  }

  public var description: String {
    get {
      return resultMap["description"]! as! String
    }
    set {
      resultMap.updateValue(newValue, forKey: "description")
    }
  }

  public var name: String? {
    get {
      return resultMap["name"] as? String
    }
    set {
      resultMap.updateValue(newValue, forKey: "name")
    }
  }

  public var symbol: String? {
    get {
      return resultMap["symbol"] as? String
    }
    set {
      resultMap.updateValue(newValue, forKey: "symbol")
    }
  }

  public var totalSupply: Int? {
    get {
      return resultMap["totalSupply"] as? Int
    }
    set {
      resultMap.updateValue(newValue, forKey: "totalSupply")
    }
  }

  public var networkInfo: NetworkInfo {
    get {
      return NetworkInfo(unsafeResultMap: resultMap["networkInfo"]! as! ResultMap)
    }
    set {
      resultMap.updateValue(newValue.resultMap, forKey: "networkInfo")
    }
  }

  public struct NetworkInfo: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["NetworkInfo"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("chain", type: .nonNull(.scalar(Chain.self))),
        GraphQLField("network", type: .nonNull(.scalar(Network.self))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(chain: Chain, network: Network) {
      self.init(unsafeResultMap: ["__typename": "NetworkInfo", "chain": chain, "network": network])
    }

    public var __typename: String {
      get {
        return resultMap["__typename"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "__typename")
      }
    }

    public var chain: Chain {
      get {
        return resultMap["chain"]! as! Chain
      }
      set {
        resultMap.updateValue(newValue, forKey: "chain")
      }
    }

    public var network: Network {
      get {
        return resultMap["network"]! as! Network
      }
      set {
        resultMap.updateValue(newValue, forKey: "network")
      }
    }

    public var fragments: Fragments {
      get {
        return Fragments(unsafeResultMap: resultMap)
      }
      set {
        resultMap += newValue.resultMap
      }
    }

    public struct Fragments {
      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public var networkInfoDetails: NetworkInfoDetails {
        get {
          return NetworkInfoDetails(unsafeResultMap: resultMap)
        }
        set {
          resultMap += newValue.resultMap
        }
      }
    }
  }
}

public struct CollectionInfoSearchResult: GraphQLFragment {
  /// The raw GraphQL definition of this fragment.
  public static let fragmentDefinition: String =
    """
    fragment CollectionInfoSearchResult on Collection {
      __typename
      address
      collectionDescription: description
      name
      symbol
      totalSupply
    }
    """

  public static let possibleTypes: [String] = ["Collection"]

  public static var selections: [GraphQLSelection] {
    return [
      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
      GraphQLField("address", type: .nonNull(.scalar(String.self))),
      GraphQLField("description", alias: "collectionDescription", type: .nonNull(.scalar(String.self))),
      GraphQLField("name", type: .scalar(String.self)),
      GraphQLField("symbol", type: .scalar(String.self)),
      GraphQLField("totalSupply", type: .scalar(Int.self)),
    ]
  }

  public private(set) var resultMap: ResultMap

  public init(unsafeResultMap: ResultMap) {
    self.resultMap = unsafeResultMap
  }

  public init(address: String, collectionDescription: String, name: String? = nil, symbol: String? = nil, totalSupply: Int? = nil) {
    self.init(unsafeResultMap: ["__typename": "Collection", "address": address, "collectionDescription": collectionDescription, "name": name, "symbol": symbol, "totalSupply": totalSupply])
  }

  public var __typename: String {
    get {
      return resultMap["__typename"]! as! String
    }
    set {
      resultMap.updateValue(newValue, forKey: "__typename")
    }
  }

  public var address: String {
    get {
      return resultMap["address"]! as! String
    }
    set {
      resultMap.updateValue(newValue, forKey: "address")
    }
  }

  public var collectionDescription: String {
    get {
      return resultMap["collectionDescription"]! as! String
    }
    set {
      resultMap.updateValue(newValue, forKey: "collectionDescription")
    }
  }

  public var name: String? {
    get {
      return resultMap["name"] as? String
    }
    set {
      resultMap.updateValue(newValue, forKey: "name")
    }
  }

  public var symbol: String? {
    get {
      return resultMap["symbol"] as? String
    }
    set {
      resultMap.updateValue(newValue, forKey: "symbol")
    }
  }

  public var totalSupply: Int? {
    get {
      return resultMap["totalSupply"] as? Int
    }
    set {
      resultMap.updateValue(newValue, forKey: "totalSupply")
    }
  }
}

public struct CollectionDetails: GraphQLFragment {
  /// The raw GraphQL definition of this fragment.
  public static let fragmentDefinition: String =
    """
    fragment CollectionDetails on Collection {
      __typename
      networkInfo {
        __typename
        ...NetworkInfoDetails
      }
      attributes {
        __typename
        traitType
        valueMetrics {
          __typename
          count
          percent
          value
        }
      }
    }
    """

  public static let possibleTypes: [String] = ["Collection"]

  public static var selections: [GraphQLSelection] {
    return [
      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
      GraphQLField("networkInfo", type: .nonNull(.object(NetworkInfo.selections))),
      GraphQLField("attributes", type: .list(.nonNull(.object(Attribute.selections)))),
    ]
  }

  public private(set) var resultMap: ResultMap

  public init(unsafeResultMap: ResultMap) {
    self.resultMap = unsafeResultMap
  }

  public init(networkInfo: NetworkInfo, attributes: [Attribute]? = nil) {
    self.init(unsafeResultMap: ["__typename": "Collection", "networkInfo": networkInfo.resultMap, "attributes": attributes.flatMap { (value: [Attribute]) -> [ResultMap] in value.map { (value: Attribute) -> ResultMap in value.resultMap } }])
  }

  public var __typename: String {
    get {
      return resultMap["__typename"]! as! String
    }
    set {
      resultMap.updateValue(newValue, forKey: "__typename")
    }
  }

  public var networkInfo: NetworkInfo {
    get {
      return NetworkInfo(unsafeResultMap: resultMap["networkInfo"]! as! ResultMap)
    }
    set {
      resultMap.updateValue(newValue.resultMap, forKey: "networkInfo")
    }
  }

  public var attributes: [Attribute]? {
    get {
      return (resultMap["attributes"] as? [ResultMap]).flatMap { (value: [ResultMap]) -> [Attribute] in value.map { (value: ResultMap) -> Attribute in Attribute(unsafeResultMap: value) } }
    }
    set {
      resultMap.updateValue(newValue.flatMap { (value: [Attribute]) -> [ResultMap] in value.map { (value: Attribute) -> ResultMap in value.resultMap } }, forKey: "attributes")
    }
  }

  public struct NetworkInfo: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["NetworkInfo"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("chain", type: .nonNull(.scalar(Chain.self))),
        GraphQLField("network", type: .nonNull(.scalar(Network.self))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(chain: Chain, network: Network) {
      self.init(unsafeResultMap: ["__typename": "NetworkInfo", "chain": chain, "network": network])
    }

    public var __typename: String {
      get {
        return resultMap["__typename"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "__typename")
      }
    }

    public var chain: Chain {
      get {
        return resultMap["chain"]! as! Chain
      }
      set {
        resultMap.updateValue(newValue, forKey: "chain")
      }
    }

    public var network: Network {
      get {
        return resultMap["network"]! as! Network
      }
      set {
        resultMap.updateValue(newValue, forKey: "network")
      }
    }

    public var fragments: Fragments {
      get {
        return Fragments(unsafeResultMap: resultMap)
      }
      set {
        resultMap += newValue.resultMap
      }
    }

    public struct Fragments {
      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public var networkInfoDetails: NetworkInfoDetails {
        get {
          return NetworkInfoDetails(unsafeResultMap: resultMap)
        }
        set {
          resultMap += newValue.resultMap
        }
      }
    }
  }

  public struct Attribute: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["CollectionAttribute"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("traitType", type: .scalar(String.self)),
        GraphQLField("valueMetrics", type: .nonNull(.list(.nonNull(.object(ValueMetric.selections))))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(traitType: String? = nil, valueMetrics: [ValueMetric]) {
      self.init(unsafeResultMap: ["__typename": "CollectionAttribute", "traitType": traitType, "valueMetrics": valueMetrics.map { (value: ValueMetric) -> ResultMap in value.resultMap }])
    }

    public var __typename: String {
      get {
        return resultMap["__typename"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "__typename")
      }
    }

    public var traitType: String? {
      get {
        return resultMap["traitType"] as? String
      }
      set {
        resultMap.updateValue(newValue, forKey: "traitType")
      }
    }

    public var valueMetrics: [ValueMetric] {
      get {
        return (resultMap["valueMetrics"] as! [ResultMap]).map { (value: ResultMap) -> ValueMetric in ValueMetric(unsafeResultMap: value) }
      }
      set {
        resultMap.updateValue(newValue.map { (value: ValueMetric) -> ResultMap in value.resultMap }, forKey: "valueMetrics")
      }
    }

    public struct ValueMetric: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["CollectionAttributeValue"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("count", type: .nonNull(.scalar(Int.self))),
          GraphQLField("percent", type: .nonNull(.scalar(Double.self))),
          GraphQLField("value", type: .nonNull(.scalar(String.self))),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(count: Int, percent: Double, value: String) {
        self.init(unsafeResultMap: ["__typename": "CollectionAttributeValue", "count": count, "percent": percent, "value": value])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var count: Int {
        get {
          return resultMap["count"]! as! Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "count")
        }
      }

      public var percent: Double {
        get {
          return resultMap["percent"]! as! Double
        }
        set {
          resultMap.updateValue(newValue, forKey: "percent")
        }
      }

      public var value: String {
        get {
          return resultMap["value"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "value")
        }
      }
    }
  }
}

public struct PageInfoDefault: GraphQLFragment {
  /// The raw GraphQL definition of this fragment.
  public static let fragmentDefinition: String =
    """
    fragment PageInfoDefault on PageInfo {
      __typename
      endCursor
      hasNextPage
      limit
    }
    """

  public static let possibleTypes: [String] = ["PageInfo"]

  public static var selections: [GraphQLSelection] {
    return [
      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
      GraphQLField("endCursor", type: .scalar(String.self)),
      GraphQLField("hasNextPage", type: .nonNull(.scalar(Bool.self))),
      GraphQLField("limit", type: .nonNull(.scalar(Int.self))),
    ]
  }

  public private(set) var resultMap: ResultMap

  public init(unsafeResultMap: ResultMap) {
    self.resultMap = unsafeResultMap
  }

  public init(endCursor: String? = nil, hasNextPage: Bool, limit: Int) {
    self.init(unsafeResultMap: ["__typename": "PageInfo", "endCursor": endCursor, "hasNextPage": hasNextPage, "limit": limit])
  }

  public var __typename: String {
    get {
      return resultMap["__typename"]! as! String
    }
    set {
      resultMap.updateValue(newValue, forKey: "__typename")
    }
  }

  public var endCursor: String? {
    get {
      return resultMap["endCursor"] as? String
    }
    set {
      resultMap.updateValue(newValue, forKey: "endCursor")
    }
  }

  public var hasNextPage: Bool {
    get {
      return resultMap["hasNextPage"]! as! Bool
    }
    set {
      resultMap.updateValue(newValue, forKey: "hasNextPage")
    }
  }

  public var limit: Int {
    get {
      return resultMap["limit"]! as! Int
    }
    set {
      resultMap.updateValue(newValue, forKey: "limit")
    }
  }
}

public struct OwnerCountInfo: GraphQLFragment {
  /// The raw GraphQL definition of this fragment.
  public static let fragmentDefinition: String =
    """
    fragment OwnerCountInfo on OwnerCount {
      __typename
      owner
      count
    }
    """

  public static let possibleTypes: [String] = ["OwnerCount"]

  public static var selections: [GraphQLSelection] {
    return [
      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
      GraphQLField("owner", type: .nonNull(.scalar(String.self))),
      GraphQLField("count", type: .nonNull(.scalar(Int.self))),
    ]
  }

  public private(set) var resultMap: ResultMap

  public init(unsafeResultMap: ResultMap) {
    self.resultMap = unsafeResultMap
  }

  public init(owner: String, count: Int) {
    self.init(unsafeResultMap: ["__typename": "OwnerCount", "owner": owner, "count": count])
  }

  public var __typename: String {
    get {
      return resultMap["__typename"]! as! String
    }
    set {
      resultMap.updateValue(newValue, forKey: "__typename")
    }
  }

  public var owner: String {
    get {
      return resultMap["owner"]! as! String
    }
    set {
      resultMap.updateValue(newValue, forKey: "owner")
    }
  }

  public var count: Int {
    get {
      return resultMap["count"]! as! Int
    }
    set {
      resultMap.updateValue(newValue, forKey: "count")
    }
  }
}

public struct MarketsOnMintInfo: GraphQLFragment {
  /// The raw GraphQL definition of this fragment.
  public static let fragmentDefinition: String =
    """
    fragment MarketsOnMintInfo on MintWithTokenAndMarkets {
      __typename
      markets(pagination: {limit: 10}, sort: {sortKey: NONE, sortDirection: DESC}) {
        __typename
        ...MarketInfo
        ...MarketDetails
      }
    }
    """

  public static let possibleTypes: [String] = ["MintWithTokenAndMarkets"]

  public static var selections: [GraphQLSelection] {
    return [
      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
      GraphQLField("markets", arguments: ["pagination": ["limit": 10], "sort": ["sortKey": "NONE", "sortDirection": "DESC"]], type: .nonNull(.list(.nonNull(.object(Market.selections))))),
    ]
  }

  public private(set) var resultMap: ResultMap

  public init(unsafeResultMap: ResultMap) {
    self.resultMap = unsafeResultMap
  }

  public init(markets: [Market]) {
    self.init(unsafeResultMap: ["__typename": "MintWithTokenAndMarkets", "markets": markets.map { (value: Market) -> ResultMap in value.resultMap }])
  }

  public var __typename: String {
    get {
      return resultMap["__typename"]! as! String
    }
    set {
      resultMap.updateValue(newValue, forKey: "__typename")
    }
  }

  public var markets: [Market] {
    get {
      return (resultMap["markets"] as! [ResultMap]).map { (value: ResultMap) -> Market in Market(unsafeResultMap: value) }
    }
    set {
      resultMap.updateValue(newValue.map { (value: Market) -> ResultMap in value.resultMap }, forKey: "markets")
    }
  }

  public struct Market: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Market"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("collectionAddress", type: .nonNull(.scalar(String.self))),
        GraphQLField("marketAddress", type: .nonNull(.scalar(String.self))),
        GraphQLField("marketType", type: .nonNull(.scalar(MarketType.self))),
        GraphQLField("transactionInfo", type: .nonNull(.object(TransactionInfo.selections))),
        GraphQLField("price", type: .object(Price.selections)),
        GraphQLField("status", type: .nonNull(.scalar(String.self))),
        GraphQLField("networkInfo", type: .nonNull(.object(NetworkInfo.selections))),
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("properties", type: .nonNull(.object(Property.selections))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(collectionAddress: String, marketAddress: String, marketType: MarketType, transactionInfo: TransactionInfo, price: Price? = nil, status: String, networkInfo: NetworkInfo, properties: Property) {
      self.init(unsafeResultMap: ["__typename": "Market", "collectionAddress": collectionAddress, "marketAddress": marketAddress, "marketType": marketType, "transactionInfo": transactionInfo.resultMap, "price": price.flatMap { (value: Price) -> ResultMap in value.resultMap }, "status": status, "networkInfo": networkInfo.resultMap, "properties": properties.resultMap])
    }

    public var __typename: String {
      get {
        return resultMap["__typename"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "__typename")
      }
    }

    public var collectionAddress: String {
      get {
        return resultMap["collectionAddress"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "collectionAddress")
      }
    }

    public var marketAddress: String {
      get {
        return resultMap["marketAddress"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "marketAddress")
      }
    }

    public var marketType: MarketType {
      get {
        return resultMap["marketType"]! as! MarketType
      }
      set {
        resultMap.updateValue(newValue, forKey: "marketType")
      }
    }

    public var transactionInfo: TransactionInfo {
      get {
        return TransactionInfo(unsafeResultMap: resultMap["transactionInfo"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "transactionInfo")
      }
    }

    public var price: Price? {
      get {
        return (resultMap["price"] as? ResultMap).flatMap { Price(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "price")
      }
    }

    public var status: String {
      get {
        return resultMap["status"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "status")
      }
    }

    public var networkInfo: NetworkInfo {
      get {
        return NetworkInfo(unsafeResultMap: resultMap["networkInfo"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "networkInfo")
      }
    }

    public var properties: Property {
      get {
        return Property(unsafeResultMap: resultMap["properties"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "properties")
      }
    }

    public var fragments: Fragments {
      get {
        return Fragments(unsafeResultMap: resultMap)
      }
      set {
        resultMap += newValue.resultMap
      }
    }

    public struct Fragments {
      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public var marketInfo: MarketInfo {
        get {
          return MarketInfo(unsafeResultMap: resultMap)
        }
        set {
          resultMap += newValue.resultMap
        }
      }

      public var marketDetails: MarketDetails {
        get {
          return MarketDetails(unsafeResultMap: resultMap)
        }
        set {
          resultMap += newValue.resultMap
        }
      }
    }

    public struct TransactionInfo: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["TransactionInfo"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
          GraphQLField("blockTimestamp", type: .nonNull(.scalar(String.self))),
          GraphQLField("transactionHash", type: .scalar(String.self)),
          GraphQLField("logIndex", type: .scalar(Int.self)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(blockNumber: Int, blockTimestamp: String, transactionHash: String? = nil, logIndex: Int? = nil) {
        self.init(unsafeResultMap: ["__typename": "TransactionInfo", "blockNumber": blockNumber, "blockTimestamp": blockTimestamp, "transactionHash": transactionHash, "logIndex": logIndex])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var blockNumber: Int {
        get {
          return resultMap["blockNumber"]! as! Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "blockNumber")
        }
      }

      public var blockTimestamp: String {
        get {
          return resultMap["blockTimestamp"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "blockTimestamp")
        }
      }

      public var transactionHash: String? {
        get {
          return resultMap["transactionHash"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "transactionHash")
        }
      }

      public var logIndex: Int? {
        get {
          return resultMap["logIndex"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "logIndex")
        }
      }

      public var fragments: Fragments {
        get {
          return Fragments(unsafeResultMap: resultMap)
        }
        set {
          resultMap += newValue.resultMap
        }
      }

      public struct Fragments {
        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public var transactionDetails: TransactionDetails {
          get {
            return TransactionDetails(unsafeResultMap: resultMap)
          }
          set {
            resultMap += newValue.resultMap
          }
        }
      }
    }

    public struct Price: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["PriceAtTime"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
          GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
          GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
          GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
        self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var blockNumber: Int {
        get {
          return resultMap["blockNumber"]! as! Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "blockNumber")
        }
      }

      public var chainTokenPrice: ChainTokenPrice? {
        get {
          return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
        }
      }

      public var nativePrice: NativePrice {
        get {
          return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
        }
        set {
          resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
        }
      }

      public var usdcPrice: UsdcPrice? {
        get {
          return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
        }
      }

      public var fragments: Fragments {
        get {
          return Fragments(unsafeResultMap: resultMap)
        }
        set {
          resultMap += newValue.resultMap
        }
      }

      public struct Fragments {
        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public var priceSummary: PriceSummary {
          get {
            return PriceSummary(unsafeResultMap: resultMap)
          }
          set {
            resultMap += newValue.resultMap
          }
        }
      }

      public struct ChainTokenPrice: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["CurrencyAmount"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
            GraphQLField("raw", type: .nonNull(.scalar(String.self))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(decimal: Double, raw: String) {
          self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var decimal: Double {
          get {
            return resultMap["decimal"]! as! Double
          }
          set {
            resultMap.updateValue(newValue, forKey: "decimal")
          }
        }

        public var raw: String {
          get {
            return resultMap["raw"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "raw")
          }
        }
      }

      public struct NativePrice: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["CurrencyAmount"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
            GraphQLField("raw", type: .nonNull(.scalar(String.self))),
            GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(decimal: Double, raw: String, currency: Currency) {
          self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var decimal: Double {
          get {
            return resultMap["decimal"]! as! Double
          }
          set {
            resultMap.updateValue(newValue, forKey: "decimal")
          }
        }

        public var raw: String {
          get {
            return resultMap["raw"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "raw")
          }
        }

        public var currency: Currency {
          get {
            return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
          }
          set {
            resultMap.updateValue(newValue.resultMap, forKey: "currency")
          }
        }

        public struct Currency: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["Currency"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("address", type: .nonNull(.scalar(String.self))),
              GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(address: String, decimals: Int, name: String) {
            self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var address: String {
            get {
              return resultMap["address"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "address")
            }
          }

          public var decimals: Int {
            get {
              return resultMap["decimals"]! as! Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "decimals")
            }
          }

          public var name: String {
            get {
              return resultMap["name"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "name")
            }
          }
        }
      }

      public struct UsdcPrice: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["CurrencyAmount"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
            GraphQLField("raw", type: .nonNull(.scalar(String.self))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(decimal: Double, raw: String) {
          self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var decimal: Double {
          get {
            return resultMap["decimal"]! as! Double
          }
          set {
            resultMap.updateValue(newValue, forKey: "decimal")
          }
        }

        public var raw: String {
          get {
            return resultMap["raw"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "raw")
          }
        }
      }
    }

    public struct NetworkInfo: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["NetworkInfo"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("chain", type: .nonNull(.scalar(Chain.self))),
          GraphQLField("network", type: .nonNull(.scalar(Network.self))),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(chain: Chain, network: Network) {
        self.init(unsafeResultMap: ["__typename": "NetworkInfo", "chain": chain, "network": network])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var chain: Chain {
        get {
          return resultMap["chain"]! as! Chain
        }
        set {
          resultMap.updateValue(newValue, forKey: "chain")
        }
      }

      public var network: Network {
        get {
          return resultMap["network"]! as! Network
        }
        set {
          resultMap.updateValue(newValue, forKey: "network")
        }
      }

      public var fragments: Fragments {
        get {
          return Fragments(unsafeResultMap: resultMap)
        }
        set {
          resultMap += newValue.resultMap
        }
      }

      public struct Fragments {
        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public var networkInfoDetails: NetworkInfoDetails {
          get {
            return NetworkInfoDetails(unsafeResultMap: resultMap)
          }
          set {
            resultMap += newValue.resultMap
          }
        }
      }
    }

    public struct Property: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["V1Ask", "V1Offer", "V1BidShare", "V2Auction", "V3Ask"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLTypeCase(
            variants: ["V2Auction": AsV2Auction.selections, "V3Ask": AsV3Ask.selections, "V1Offer": AsV1Offer.selections, "V1Ask": AsV1Ask.selections],
            default: [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            ]
          )
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public static func makeV1BidShare() -> Property {
        return Property(unsafeResultMap: ["__typename": "V1BidShare"])
      }

      public static func makeV2Auction(firstBidTime: String? = nil, highestBidder: String? = nil, curator: String, collectionAddress: String, curatorFeePercentage: Int, tokenId: String, auctionCurrency: String, duration: String, estimatedExpirationTime: String? = nil, v2AuctionStatus: V2AuctionStatus, tokenOwner: String, address: String, auctionId: String, approved: Bool, reservePrice: AsV2Auction.ReservePrice, highestBidPrice: AsV2Auction.HighestBidPrice? = nil) -> Property {
        return Property(unsafeResultMap: ["__typename": "V2Auction", "firstBidTime": firstBidTime, "highestBidder": highestBidder, "curator": curator, "collectionAddress": collectionAddress, "curatorFeePercentage": curatorFeePercentage, "tokenId": tokenId, "auctionCurrency": auctionCurrency, "duration": duration, "estimatedExpirationTime": estimatedExpirationTime, "v2AuctionStatus": v2AuctionStatus, "tokenOwner": tokenOwner, "address": address, "auctionId": auctionId, "approved": approved, "reservePrice": reservePrice.resultMap, "highestBidPrice": highestBidPrice.flatMap { (value: AsV2Auction.HighestBidPrice) -> ResultMap in value.resultMap }])
      }

      public static func makeV3Ask(buyer: String? = nil, finder: String? = nil, findersFeeBps: Int, sellerFundsRecipient: String, v3AskStatus: V3AskStatus, seller: String, address: String, askCurrency: String, collectionAddress: String, askPrice: AsV3Ask.AskPrice) -> Property {
        return Property(unsafeResultMap: ["__typename": "V3Ask", "buyer": buyer, "finder": finder, "findersFeeBps": findersFeeBps, "sellerFundsRecipient": sellerFundsRecipient, "v3AskStatus": v3AskStatus, "seller": seller, "address": address, "askCurrency": askCurrency, "collectionAddress": collectionAddress, "askPrice": askPrice.resultMap])
      }

      public static func makeV1Offer(v1OfferStatus: V1MarketEntityStatus, sellOnShare: String, bidder: String, currency: String, amount: AsV1Offer.Amount) -> Property {
        return Property(unsafeResultMap: ["__typename": "V1Offer", "v1OfferStatus": v1OfferStatus, "sellOnShare": sellOnShare, "bidder": bidder, "currency": currency, "amount": amount.resultMap])
      }

      public static func makeV1Ask(v1AskStatus: V1MarketEntityStatus, currency: String, amount: AsV1Ask.Amount) -> Property {
        return Property(unsafeResultMap: ["__typename": "V1Ask", "v1AskStatus": v1AskStatus, "currency": currency, "amount": amount.resultMap])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var fragments: Fragments {
        get {
          return Fragments(unsafeResultMap: resultMap)
        }
        set {
          resultMap += newValue.resultMap
        }
      }

      public struct Fragments {
        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public var marketPropertiesFull: MarketPropertiesFull {
          get {
            return MarketPropertiesFull(unsafeResultMap: resultMap)
          }
          set {
            resultMap += newValue.resultMap
          }
        }

        public var v2AuctionMarketProperties: V2AuctionMarketProperties? {
          get {
            if !V2AuctionMarketProperties.possibleTypes.contains(resultMap["__typename"]! as! String) { return nil }
            return V2AuctionMarketProperties(unsafeResultMap: resultMap)
          }
          set {
            guard let newValue = newValue else { return }
            resultMap += newValue.resultMap
          }
        }

        public var v3AskProperties: V3AskProperties? {
          get {
            if !V3AskProperties.possibleTypes.contains(resultMap["__typename"]! as! String) { return nil }
            return V3AskProperties(unsafeResultMap: resultMap)
          }
          set {
            guard let newValue = newValue else { return }
            resultMap += newValue.resultMap
          }
        }

        public var v1OfferProperties: V1OfferProperties? {
          get {
            if !V1OfferProperties.possibleTypes.contains(resultMap["__typename"]! as! String) { return nil }
            return V1OfferProperties(unsafeResultMap: resultMap)
          }
          set {
            guard let newValue = newValue else { return }
            resultMap += newValue.resultMap
          }
        }

        public var v1AskProperties: V1AskProperties? {
          get {
            if !V1AskProperties.possibleTypes.contains(resultMap["__typename"]! as! String) { return nil }
            return V1AskProperties(unsafeResultMap: resultMap)
          }
          set {
            guard let newValue = newValue else { return }
            resultMap += newValue.resultMap
          }
        }
      }

      public var asV2Auction: AsV2Auction? {
        get {
          if !AsV2Auction.possibleTypes.contains(__typename) { return nil }
          return AsV2Auction(unsafeResultMap: resultMap)
        }
        set {
          guard let newValue = newValue else { return }
          resultMap = newValue.resultMap
        }
      }

      public struct AsV2Auction: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["V2Auction"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("firstBidTime", type: .scalar(String.self)),
            GraphQLField("highestBidder", type: .scalar(String.self)),
            GraphQLField("curator", type: .nonNull(.scalar(String.self))),
            GraphQLField("collectionAddress", type: .nonNull(.scalar(String.self))),
            GraphQLField("curatorFeePercentage", type: .nonNull(.scalar(Int.self))),
            GraphQLField("tokenId", type: .nonNull(.scalar(String.self))),
            GraphQLField("auctionCurrency", type: .nonNull(.scalar(String.self))),
            GraphQLField("duration", type: .nonNull(.scalar(String.self))),
            GraphQLField("estimatedExpirationTime", type: .scalar(String.self)),
            GraphQLField("v2AuctionStatus", type: .nonNull(.scalar(V2AuctionStatus.self))),
            GraphQLField("tokenOwner", type: .nonNull(.scalar(String.self))),
            GraphQLField("address", type: .nonNull(.scalar(String.self))),
            GraphQLField("auctionId", type: .nonNull(.scalar(String.self))),
            GraphQLField("approved", type: .nonNull(.scalar(Bool.self))),
            GraphQLField("reservePrice", type: .nonNull(.object(ReservePrice.selections))),
            GraphQLField("highestBidPrice", type: .object(HighestBidPrice.selections)),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(firstBidTime: String? = nil, highestBidder: String? = nil, curator: String, collectionAddress: String, curatorFeePercentage: Int, tokenId: String, auctionCurrency: String, duration: String, estimatedExpirationTime: String? = nil, v2AuctionStatus: V2AuctionStatus, tokenOwner: String, address: String, auctionId: String, approved: Bool, reservePrice: ReservePrice, highestBidPrice: HighestBidPrice? = nil) {
          self.init(unsafeResultMap: ["__typename": "V2Auction", "firstBidTime": firstBidTime, "highestBidder": highestBidder, "curator": curator, "collectionAddress": collectionAddress, "curatorFeePercentage": curatorFeePercentage, "tokenId": tokenId, "auctionCurrency": auctionCurrency, "duration": duration, "estimatedExpirationTime": estimatedExpirationTime, "v2AuctionStatus": v2AuctionStatus, "tokenOwner": tokenOwner, "address": address, "auctionId": auctionId, "approved": approved, "reservePrice": reservePrice.resultMap, "highestBidPrice": highestBidPrice.flatMap { (value: HighestBidPrice) -> ResultMap in value.resultMap }])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var firstBidTime: String? {
          get {
            return resultMap["firstBidTime"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "firstBidTime")
          }
        }

        public var highestBidder: String? {
          get {
            return resultMap["highestBidder"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "highestBidder")
          }
        }

        public var curator: String {
          get {
            return resultMap["curator"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "curator")
          }
        }

        public var collectionAddress: String {
          get {
            return resultMap["collectionAddress"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "collectionAddress")
          }
        }

        public var curatorFeePercentage: Int {
          get {
            return resultMap["curatorFeePercentage"]! as! Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "curatorFeePercentage")
          }
        }

        public var tokenId: String {
          get {
            return resultMap["tokenId"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "tokenId")
          }
        }

        public var auctionCurrency: String {
          get {
            return resultMap["auctionCurrency"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "auctionCurrency")
          }
        }

        public var duration: String {
          get {
            return resultMap["duration"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "duration")
          }
        }

        public var estimatedExpirationTime: String? {
          get {
            return resultMap["estimatedExpirationTime"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "estimatedExpirationTime")
          }
        }

        public var v2AuctionStatus: V2AuctionStatus {
          get {
            return resultMap["v2AuctionStatus"]! as! V2AuctionStatus
          }
          set {
            resultMap.updateValue(newValue, forKey: "v2AuctionStatus")
          }
        }

        public var tokenOwner: String {
          get {
            return resultMap["tokenOwner"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "tokenOwner")
          }
        }

        public var address: String {
          get {
            return resultMap["address"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "address")
          }
        }

        public var auctionId: String {
          get {
            return resultMap["auctionId"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "auctionId")
          }
        }

        public var approved: Bool {
          get {
            return resultMap["approved"]! as! Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "approved")
          }
        }

        public var reservePrice: ReservePrice {
          get {
            return ReservePrice(unsafeResultMap: resultMap["reservePrice"]! as! ResultMap)
          }
          set {
            resultMap.updateValue(newValue.resultMap, forKey: "reservePrice")
          }
        }

        public var highestBidPrice: HighestBidPrice? {
          get {
            return (resultMap["highestBidPrice"] as? ResultMap).flatMap { HighestBidPrice(unsafeResultMap: $0) }
          }
          set {
            resultMap.updateValue(newValue?.resultMap, forKey: "highestBidPrice")
          }
        }

        public var fragments: Fragments {
          get {
            return Fragments(unsafeResultMap: resultMap)
          }
          set {
            resultMap += newValue.resultMap
          }
        }

        public struct Fragments {
          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public var marketPropertiesFull: MarketPropertiesFull {
            get {
              return MarketPropertiesFull(unsafeResultMap: resultMap)
            }
            set {
              resultMap += newValue.resultMap
            }
          }

          public var v2AuctionMarketProperties: V2AuctionMarketProperties {
            get {
              return V2AuctionMarketProperties(unsafeResultMap: resultMap)
            }
            set {
              resultMap += newValue.resultMap
            }
          }

          public var v3AskProperties: V3AskProperties? {
            get {
              if !V3AskProperties.possibleTypes.contains(resultMap["__typename"]! as! String) { return nil }
              return V3AskProperties(unsafeResultMap: resultMap)
            }
            set {
              guard let newValue = newValue else { return }
              resultMap += newValue.resultMap
            }
          }

          public var v1OfferProperties: V1OfferProperties? {
            get {
              if !V1OfferProperties.possibleTypes.contains(resultMap["__typename"]! as! String) { return nil }
              return V1OfferProperties(unsafeResultMap: resultMap)
            }
            set {
              guard let newValue = newValue else { return }
              resultMap += newValue.resultMap
            }
          }

          public var v1AskProperties: V1AskProperties? {
            get {
              if !V1AskProperties.possibleTypes.contains(resultMap["__typename"]! as! String) { return nil }
              return V1AskProperties(unsafeResultMap: resultMap)
            }
            set {
              guard let newValue = newValue else { return }
              resultMap += newValue.resultMap
            }
          }
        }

        public struct ReservePrice: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["PriceAtTime"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
              GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
              GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
              GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
            self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var blockNumber: Int {
            get {
              return resultMap["blockNumber"]! as! Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "blockNumber")
            }
          }

          public var chainTokenPrice: ChainTokenPrice? {
            get {
              return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
            }
            set {
              resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
            }
          }

          public var nativePrice: NativePrice {
            get {
              return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
            }
            set {
              resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
            }
          }

          public var usdcPrice: UsdcPrice? {
            get {
              return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
            }
            set {
              resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
            }
          }

          public var fragments: Fragments {
            get {
              return Fragments(unsafeResultMap: resultMap)
            }
            set {
              resultMap += newValue.resultMap
            }
          }

          public struct Fragments {
            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public var priceSummary: PriceSummary {
              get {
                return PriceSummary(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }
          }

          public struct ChainTokenPrice: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["CurrencyAmount"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                GraphQLField("raw", type: .nonNull(.scalar(String.self))),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(decimal: Double, raw: String) {
              self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var decimal: Double {
              get {
                return resultMap["decimal"]! as! Double
              }
              set {
                resultMap.updateValue(newValue, forKey: "decimal")
              }
            }

            public var raw: String {
              get {
                return resultMap["raw"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "raw")
              }
            }
          }

          public struct NativePrice: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["CurrencyAmount"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(decimal: Double, raw: String, currency: Currency) {
              self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var decimal: Double {
              get {
                return resultMap["decimal"]! as! Double
              }
              set {
                resultMap.updateValue(newValue, forKey: "decimal")
              }
            }

            public var raw: String {
              get {
                return resultMap["raw"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "raw")
              }
            }

            public var currency: Currency {
              get {
                return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
              }
              set {
                resultMap.updateValue(newValue.resultMap, forKey: "currency")
              }
            }

            public struct Currency: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["Currency"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("address", type: .nonNull(.scalar(String.self))),
                  GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                  GraphQLField("name", type: .nonNull(.scalar(String.self))),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(address: String, decimals: Int, name: String) {
                self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var address: String {
                get {
                  return resultMap["address"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "address")
                }
              }

              public var decimals: Int {
                get {
                  return resultMap["decimals"]! as! Int
                }
                set {
                  resultMap.updateValue(newValue, forKey: "decimals")
                }
              }

              public var name: String {
                get {
                  return resultMap["name"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "name")
                }
              }
            }
          }

          public struct UsdcPrice: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["CurrencyAmount"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                GraphQLField("raw", type: .nonNull(.scalar(String.self))),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(decimal: Double, raw: String) {
              self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var decimal: Double {
              get {
                return resultMap["decimal"]! as! Double
              }
              set {
                resultMap.updateValue(newValue, forKey: "decimal")
              }
            }

            public var raw: String {
              get {
                return resultMap["raw"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "raw")
              }
            }
          }
        }

        public struct HighestBidPrice: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["PriceAtTime"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
              GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
              GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
              GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
            self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var blockNumber: Int {
            get {
              return resultMap["blockNumber"]! as! Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "blockNumber")
            }
          }

          public var chainTokenPrice: ChainTokenPrice? {
            get {
              return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
            }
            set {
              resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
            }
          }

          public var nativePrice: NativePrice {
            get {
              return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
            }
            set {
              resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
            }
          }

          public var usdcPrice: UsdcPrice? {
            get {
              return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
            }
            set {
              resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
            }
          }

          public var fragments: Fragments {
            get {
              return Fragments(unsafeResultMap: resultMap)
            }
            set {
              resultMap += newValue.resultMap
            }
          }

          public struct Fragments {
            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public var priceSummary: PriceSummary {
              get {
                return PriceSummary(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }
          }

          public struct ChainTokenPrice: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["CurrencyAmount"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                GraphQLField("raw", type: .nonNull(.scalar(String.self))),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(decimal: Double, raw: String) {
              self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var decimal: Double {
              get {
                return resultMap["decimal"]! as! Double
              }
              set {
                resultMap.updateValue(newValue, forKey: "decimal")
              }
            }

            public var raw: String {
              get {
                return resultMap["raw"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "raw")
              }
            }
          }

          public struct NativePrice: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["CurrencyAmount"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(decimal: Double, raw: String, currency: Currency) {
              self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var decimal: Double {
              get {
                return resultMap["decimal"]! as! Double
              }
              set {
                resultMap.updateValue(newValue, forKey: "decimal")
              }
            }

            public var raw: String {
              get {
                return resultMap["raw"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "raw")
              }
            }

            public var currency: Currency {
              get {
                return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
              }
              set {
                resultMap.updateValue(newValue.resultMap, forKey: "currency")
              }
            }

            public struct Currency: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["Currency"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("address", type: .nonNull(.scalar(String.self))),
                  GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                  GraphQLField("name", type: .nonNull(.scalar(String.self))),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(address: String, decimals: Int, name: String) {
                self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var address: String {
                get {
                  return resultMap["address"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "address")
                }
              }

              public var decimals: Int {
                get {
                  return resultMap["decimals"]! as! Int
                }
                set {
                  resultMap.updateValue(newValue, forKey: "decimals")
                }
              }

              public var name: String {
                get {
                  return resultMap["name"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "name")
                }
              }
            }
          }

          public struct UsdcPrice: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["CurrencyAmount"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                GraphQLField("raw", type: .nonNull(.scalar(String.self))),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(decimal: Double, raw: String) {
              self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var decimal: Double {
              get {
                return resultMap["decimal"]! as! Double
              }
              set {
                resultMap.updateValue(newValue, forKey: "decimal")
              }
            }

            public var raw: String {
              get {
                return resultMap["raw"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "raw")
              }
            }
          }
        }
      }

      public var asV3Ask: AsV3Ask? {
        get {
          if !AsV3Ask.possibleTypes.contains(__typename) { return nil }
          return AsV3Ask(unsafeResultMap: resultMap)
        }
        set {
          guard let newValue = newValue else { return }
          resultMap = newValue.resultMap
        }
      }

      public struct AsV3Ask: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["V3Ask"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("buyer", type: .scalar(String.self)),
            GraphQLField("finder", type: .scalar(String.self)),
            GraphQLField("findersFeeBps", type: .nonNull(.scalar(Int.self))),
            GraphQLField("sellerFundsRecipient", type: .nonNull(.scalar(String.self))),
            GraphQLField("v3AskStatus", type: .nonNull(.scalar(V3AskStatus.self))),
            GraphQLField("seller", type: .nonNull(.scalar(String.self))),
            GraphQLField("address", type: .nonNull(.scalar(String.self))),
            GraphQLField("askCurrency", type: .nonNull(.scalar(String.self))),
            GraphQLField("collectionAddress", type: .nonNull(.scalar(String.self))),
            GraphQLField("askPrice", type: .nonNull(.object(AskPrice.selections))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(buyer: String? = nil, finder: String? = nil, findersFeeBps: Int, sellerFundsRecipient: String, v3AskStatus: V3AskStatus, seller: String, address: String, askCurrency: String, collectionAddress: String, askPrice: AskPrice) {
          self.init(unsafeResultMap: ["__typename": "V3Ask", "buyer": buyer, "finder": finder, "findersFeeBps": findersFeeBps, "sellerFundsRecipient": sellerFundsRecipient, "v3AskStatus": v3AskStatus, "seller": seller, "address": address, "askCurrency": askCurrency, "collectionAddress": collectionAddress, "askPrice": askPrice.resultMap])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var buyer: String? {
          get {
            return resultMap["buyer"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "buyer")
          }
        }

        public var finder: String? {
          get {
            return resultMap["finder"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "finder")
          }
        }

        public var findersFeeBps: Int {
          get {
            return resultMap["findersFeeBps"]! as! Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "findersFeeBps")
          }
        }

        public var sellerFundsRecipient: String {
          get {
            return resultMap["sellerFundsRecipient"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "sellerFundsRecipient")
          }
        }

        public var v3AskStatus: V3AskStatus {
          get {
            return resultMap["v3AskStatus"]! as! V3AskStatus
          }
          set {
            resultMap.updateValue(newValue, forKey: "v3AskStatus")
          }
        }

        public var seller: String {
          get {
            return resultMap["seller"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "seller")
          }
        }

        public var address: String {
          get {
            return resultMap["address"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "address")
          }
        }

        public var askCurrency: String {
          get {
            return resultMap["askCurrency"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "askCurrency")
          }
        }

        public var collectionAddress: String {
          get {
            return resultMap["collectionAddress"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "collectionAddress")
          }
        }

        public var askPrice: AskPrice {
          get {
            return AskPrice(unsafeResultMap: resultMap["askPrice"]! as! ResultMap)
          }
          set {
            resultMap.updateValue(newValue.resultMap, forKey: "askPrice")
          }
        }

        public var fragments: Fragments {
          get {
            return Fragments(unsafeResultMap: resultMap)
          }
          set {
            resultMap += newValue.resultMap
          }
        }

        public struct Fragments {
          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public var marketPropertiesFull: MarketPropertiesFull {
            get {
              return MarketPropertiesFull(unsafeResultMap: resultMap)
            }
            set {
              resultMap += newValue.resultMap
            }
          }

          public var v2AuctionMarketProperties: V2AuctionMarketProperties? {
            get {
              if !V2AuctionMarketProperties.possibleTypes.contains(resultMap["__typename"]! as! String) { return nil }
              return V2AuctionMarketProperties(unsafeResultMap: resultMap)
            }
            set {
              guard let newValue = newValue else { return }
              resultMap += newValue.resultMap
            }
          }

          public var v3AskProperties: V3AskProperties {
            get {
              return V3AskProperties(unsafeResultMap: resultMap)
            }
            set {
              resultMap += newValue.resultMap
            }
          }

          public var v1OfferProperties: V1OfferProperties? {
            get {
              if !V1OfferProperties.possibleTypes.contains(resultMap["__typename"]! as! String) { return nil }
              return V1OfferProperties(unsafeResultMap: resultMap)
            }
            set {
              guard let newValue = newValue else { return }
              resultMap += newValue.resultMap
            }
          }

          public var v1AskProperties: V1AskProperties? {
            get {
              if !V1AskProperties.possibleTypes.contains(resultMap["__typename"]! as! String) { return nil }
              return V1AskProperties(unsafeResultMap: resultMap)
            }
            set {
              guard let newValue = newValue else { return }
              resultMap += newValue.resultMap
            }
          }
        }

        public struct AskPrice: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["PriceAtTime"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
              GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
              GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
              GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
            self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var blockNumber: Int {
            get {
              return resultMap["blockNumber"]! as! Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "blockNumber")
            }
          }

          public var chainTokenPrice: ChainTokenPrice? {
            get {
              return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
            }
            set {
              resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
            }
          }

          public var nativePrice: NativePrice {
            get {
              return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
            }
            set {
              resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
            }
          }

          public var usdcPrice: UsdcPrice? {
            get {
              return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
            }
            set {
              resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
            }
          }

          public var fragments: Fragments {
            get {
              return Fragments(unsafeResultMap: resultMap)
            }
            set {
              resultMap += newValue.resultMap
            }
          }

          public struct Fragments {
            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public var priceSummary: PriceSummary {
              get {
                return PriceSummary(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }
          }

          public struct ChainTokenPrice: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["CurrencyAmount"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                GraphQLField("raw", type: .nonNull(.scalar(String.self))),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(decimal: Double, raw: String) {
              self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var decimal: Double {
              get {
                return resultMap["decimal"]! as! Double
              }
              set {
                resultMap.updateValue(newValue, forKey: "decimal")
              }
            }

            public var raw: String {
              get {
                return resultMap["raw"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "raw")
              }
            }
          }

          public struct NativePrice: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["CurrencyAmount"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(decimal: Double, raw: String, currency: Currency) {
              self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var decimal: Double {
              get {
                return resultMap["decimal"]! as! Double
              }
              set {
                resultMap.updateValue(newValue, forKey: "decimal")
              }
            }

            public var raw: String {
              get {
                return resultMap["raw"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "raw")
              }
            }

            public var currency: Currency {
              get {
                return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
              }
              set {
                resultMap.updateValue(newValue.resultMap, forKey: "currency")
              }
            }

            public struct Currency: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["Currency"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("address", type: .nonNull(.scalar(String.self))),
                  GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                  GraphQLField("name", type: .nonNull(.scalar(String.self))),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(address: String, decimals: Int, name: String) {
                self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var address: String {
                get {
                  return resultMap["address"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "address")
                }
              }

              public var decimals: Int {
                get {
                  return resultMap["decimals"]! as! Int
                }
                set {
                  resultMap.updateValue(newValue, forKey: "decimals")
                }
              }

              public var name: String {
                get {
                  return resultMap["name"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "name")
                }
              }
            }
          }

          public struct UsdcPrice: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["CurrencyAmount"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                GraphQLField("raw", type: .nonNull(.scalar(String.self))),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(decimal: Double, raw: String) {
              self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var decimal: Double {
              get {
                return resultMap["decimal"]! as! Double
              }
              set {
                resultMap.updateValue(newValue, forKey: "decimal")
              }
            }

            public var raw: String {
              get {
                return resultMap["raw"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "raw")
              }
            }
          }
        }
      }

      public var asV1Offer: AsV1Offer? {
        get {
          if !AsV1Offer.possibleTypes.contains(__typename) { return nil }
          return AsV1Offer(unsafeResultMap: resultMap)
        }
        set {
          guard let newValue = newValue else { return }
          resultMap = newValue.resultMap
        }
      }

      public struct AsV1Offer: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["V1Offer"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("v1OfferStatus", type: .nonNull(.scalar(V1MarketEntityStatus.self))),
            GraphQLField("sellOnShare", type: .nonNull(.scalar(String.self))),
            GraphQLField("bidder", type: .nonNull(.scalar(String.self))),
            GraphQLField("currency", type: .nonNull(.scalar(String.self))),
            GraphQLField("amount", type: .nonNull(.object(Amount.selections))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(v1OfferStatus: V1MarketEntityStatus, sellOnShare: String, bidder: String, currency: String, amount: Amount) {
          self.init(unsafeResultMap: ["__typename": "V1Offer", "v1OfferStatus": v1OfferStatus, "sellOnShare": sellOnShare, "bidder": bidder, "currency": currency, "amount": amount.resultMap])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var v1OfferStatus: V1MarketEntityStatus {
          get {
            return resultMap["v1OfferStatus"]! as! V1MarketEntityStatus
          }
          set {
            resultMap.updateValue(newValue, forKey: "v1OfferStatus")
          }
        }

        public var sellOnShare: String {
          get {
            return resultMap["sellOnShare"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "sellOnShare")
          }
        }

        public var bidder: String {
          get {
            return resultMap["bidder"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "bidder")
          }
        }

        public var currency: String {
          get {
            return resultMap["currency"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "currency")
          }
        }

        public var amount: Amount {
          get {
            return Amount(unsafeResultMap: resultMap["amount"]! as! ResultMap)
          }
          set {
            resultMap.updateValue(newValue.resultMap, forKey: "amount")
          }
        }

        public var fragments: Fragments {
          get {
            return Fragments(unsafeResultMap: resultMap)
          }
          set {
            resultMap += newValue.resultMap
          }
        }

        public struct Fragments {
          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public var marketPropertiesFull: MarketPropertiesFull {
            get {
              return MarketPropertiesFull(unsafeResultMap: resultMap)
            }
            set {
              resultMap += newValue.resultMap
            }
          }

          public var v2AuctionMarketProperties: V2AuctionMarketProperties? {
            get {
              if !V2AuctionMarketProperties.possibleTypes.contains(resultMap["__typename"]! as! String) { return nil }
              return V2AuctionMarketProperties(unsafeResultMap: resultMap)
            }
            set {
              guard let newValue = newValue else { return }
              resultMap += newValue.resultMap
            }
          }

          public var v3AskProperties: V3AskProperties? {
            get {
              if !V3AskProperties.possibleTypes.contains(resultMap["__typename"]! as! String) { return nil }
              return V3AskProperties(unsafeResultMap: resultMap)
            }
            set {
              guard let newValue = newValue else { return }
              resultMap += newValue.resultMap
            }
          }

          public var v1OfferProperties: V1OfferProperties {
            get {
              return V1OfferProperties(unsafeResultMap: resultMap)
            }
            set {
              resultMap += newValue.resultMap
            }
          }

          public var v1AskProperties: V1AskProperties? {
            get {
              if !V1AskProperties.possibleTypes.contains(resultMap["__typename"]! as! String) { return nil }
              return V1AskProperties(unsafeResultMap: resultMap)
            }
            set {
              guard let newValue = newValue else { return }
              resultMap += newValue.resultMap
            }
          }
        }

        public struct Amount: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["PriceAtTime"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
              GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
              GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
              GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
            self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var blockNumber: Int {
            get {
              return resultMap["blockNumber"]! as! Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "blockNumber")
            }
          }

          public var chainTokenPrice: ChainTokenPrice? {
            get {
              return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
            }
            set {
              resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
            }
          }

          public var nativePrice: NativePrice {
            get {
              return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
            }
            set {
              resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
            }
          }

          public var usdcPrice: UsdcPrice? {
            get {
              return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
            }
            set {
              resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
            }
          }

          public var fragments: Fragments {
            get {
              return Fragments(unsafeResultMap: resultMap)
            }
            set {
              resultMap += newValue.resultMap
            }
          }

          public struct Fragments {
            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public var priceSummary: PriceSummary {
              get {
                return PriceSummary(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }
          }

          public struct ChainTokenPrice: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["CurrencyAmount"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                GraphQLField("raw", type: .nonNull(.scalar(String.self))),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(decimal: Double, raw: String) {
              self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var decimal: Double {
              get {
                return resultMap["decimal"]! as! Double
              }
              set {
                resultMap.updateValue(newValue, forKey: "decimal")
              }
            }

            public var raw: String {
              get {
                return resultMap["raw"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "raw")
              }
            }
          }

          public struct NativePrice: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["CurrencyAmount"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(decimal: Double, raw: String, currency: Currency) {
              self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var decimal: Double {
              get {
                return resultMap["decimal"]! as! Double
              }
              set {
                resultMap.updateValue(newValue, forKey: "decimal")
              }
            }

            public var raw: String {
              get {
                return resultMap["raw"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "raw")
              }
            }

            public var currency: Currency {
              get {
                return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
              }
              set {
                resultMap.updateValue(newValue.resultMap, forKey: "currency")
              }
            }

            public struct Currency: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["Currency"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("address", type: .nonNull(.scalar(String.self))),
                  GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                  GraphQLField("name", type: .nonNull(.scalar(String.self))),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(address: String, decimals: Int, name: String) {
                self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var address: String {
                get {
                  return resultMap["address"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "address")
                }
              }

              public var decimals: Int {
                get {
                  return resultMap["decimals"]! as! Int
                }
                set {
                  resultMap.updateValue(newValue, forKey: "decimals")
                }
              }

              public var name: String {
                get {
                  return resultMap["name"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "name")
                }
              }
            }
          }

          public struct UsdcPrice: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["CurrencyAmount"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                GraphQLField("raw", type: .nonNull(.scalar(String.self))),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(decimal: Double, raw: String) {
              self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var decimal: Double {
              get {
                return resultMap["decimal"]! as! Double
              }
              set {
                resultMap.updateValue(newValue, forKey: "decimal")
              }
            }

            public var raw: String {
              get {
                return resultMap["raw"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "raw")
              }
            }
          }
        }
      }

      public var asV1Ask: AsV1Ask? {
        get {
          if !AsV1Ask.possibleTypes.contains(__typename) { return nil }
          return AsV1Ask(unsafeResultMap: resultMap)
        }
        set {
          guard let newValue = newValue else { return }
          resultMap = newValue.resultMap
        }
      }

      public struct AsV1Ask: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["V1Ask"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("v1AskStatus", type: .nonNull(.scalar(V1MarketEntityStatus.self))),
            GraphQLField("currency", type: .nonNull(.scalar(String.self))),
            GraphQLField("amount", type: .nonNull(.object(Amount.selections))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(v1AskStatus: V1MarketEntityStatus, currency: String, amount: Amount) {
          self.init(unsafeResultMap: ["__typename": "V1Ask", "v1AskStatus": v1AskStatus, "currency": currency, "amount": amount.resultMap])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var v1AskStatus: V1MarketEntityStatus {
          get {
            return resultMap["v1AskStatus"]! as! V1MarketEntityStatus
          }
          set {
            resultMap.updateValue(newValue, forKey: "v1AskStatus")
          }
        }

        public var currency: String {
          get {
            return resultMap["currency"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "currency")
          }
        }

        public var amount: Amount {
          get {
            return Amount(unsafeResultMap: resultMap["amount"]! as! ResultMap)
          }
          set {
            resultMap.updateValue(newValue.resultMap, forKey: "amount")
          }
        }

        public var fragments: Fragments {
          get {
            return Fragments(unsafeResultMap: resultMap)
          }
          set {
            resultMap += newValue.resultMap
          }
        }

        public struct Fragments {
          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public var marketPropertiesFull: MarketPropertiesFull {
            get {
              return MarketPropertiesFull(unsafeResultMap: resultMap)
            }
            set {
              resultMap += newValue.resultMap
            }
          }

          public var v2AuctionMarketProperties: V2AuctionMarketProperties? {
            get {
              if !V2AuctionMarketProperties.possibleTypes.contains(resultMap["__typename"]! as! String) { return nil }
              return V2AuctionMarketProperties(unsafeResultMap: resultMap)
            }
            set {
              guard let newValue = newValue else { return }
              resultMap += newValue.resultMap
            }
          }

          public var v3AskProperties: V3AskProperties? {
            get {
              if !V3AskProperties.possibleTypes.contains(resultMap["__typename"]! as! String) { return nil }
              return V3AskProperties(unsafeResultMap: resultMap)
            }
            set {
              guard let newValue = newValue else { return }
              resultMap += newValue.resultMap
            }
          }

          public var v1OfferProperties: V1OfferProperties? {
            get {
              if !V1OfferProperties.possibleTypes.contains(resultMap["__typename"]! as! String) { return nil }
              return V1OfferProperties(unsafeResultMap: resultMap)
            }
            set {
              guard let newValue = newValue else { return }
              resultMap += newValue.resultMap
            }
          }

          public var v1AskProperties: V1AskProperties {
            get {
              return V1AskProperties(unsafeResultMap: resultMap)
            }
            set {
              resultMap += newValue.resultMap
            }
          }
        }

        public struct Amount: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["PriceAtTime"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
              GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
              GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
              GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
            self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var blockNumber: Int {
            get {
              return resultMap["blockNumber"]! as! Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "blockNumber")
            }
          }

          public var chainTokenPrice: ChainTokenPrice? {
            get {
              return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
            }
            set {
              resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
            }
          }

          public var nativePrice: NativePrice {
            get {
              return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
            }
            set {
              resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
            }
          }

          public var usdcPrice: UsdcPrice? {
            get {
              return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
            }
            set {
              resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
            }
          }

          public var fragments: Fragments {
            get {
              return Fragments(unsafeResultMap: resultMap)
            }
            set {
              resultMap += newValue.resultMap
            }
          }

          public struct Fragments {
            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public var priceSummary: PriceSummary {
              get {
                return PriceSummary(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }
          }

          public struct ChainTokenPrice: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["CurrencyAmount"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                GraphQLField("raw", type: .nonNull(.scalar(String.self))),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(decimal: Double, raw: String) {
              self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var decimal: Double {
              get {
                return resultMap["decimal"]! as! Double
              }
              set {
                resultMap.updateValue(newValue, forKey: "decimal")
              }
            }

            public var raw: String {
              get {
                return resultMap["raw"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "raw")
              }
            }
          }

          public struct NativePrice: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["CurrencyAmount"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(decimal: Double, raw: String, currency: Currency) {
              self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var decimal: Double {
              get {
                return resultMap["decimal"]! as! Double
              }
              set {
                resultMap.updateValue(newValue, forKey: "decimal")
              }
            }

            public var raw: String {
              get {
                return resultMap["raw"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "raw")
              }
            }

            public var currency: Currency {
              get {
                return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
              }
              set {
                resultMap.updateValue(newValue.resultMap, forKey: "currency")
              }
            }

            public struct Currency: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["Currency"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("address", type: .nonNull(.scalar(String.self))),
                  GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                  GraphQLField("name", type: .nonNull(.scalar(String.self))),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(address: String, decimals: Int, name: String) {
                self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var address: String {
                get {
                  return resultMap["address"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "address")
                }
              }

              public var decimals: Int {
                get {
                  return resultMap["decimals"]! as! Int
                }
                set {
                  resultMap.updateValue(newValue, forKey: "decimals")
                }
              }

              public var name: String {
                get {
                  return resultMap["name"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "name")
                }
              }
            }
          }

          public struct UsdcPrice: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["CurrencyAmount"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                GraphQLField("raw", type: .nonNull(.scalar(String.self))),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(decimal: Double, raw: String) {
              self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var decimal: Double {
              get {
                return resultMap["decimal"]! as! Double
              }
              set {
                resultMap.updateValue(newValue, forKey: "decimal")
              }
            }

            public var raw: String {
              get {
                return resultMap["raw"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "raw")
              }
            }
          }
        }
      }
    }
  }
}

public struct TokensSalesInfo: GraphQLFragment {
  /// The raw GraphQL definition of this fragment.
  public static let fragmentDefinition: String =
    """
    fragment TokensSalesInfo on TokenWithMarketsSummary {
      __typename
      sales(pagination: {limit: 10}, sort: {sortKey: TIME, sortDirection: DESC}) {
        __typename
        ...SaleInfo
      }
    }
    """

  public static let possibleTypes: [String] = ["TokenWithMarketsSummary"]

  public static var selections: [GraphQLSelection] {
    return [
      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
      GraphQLField("sales", arguments: ["pagination": ["limit": 10], "sort": ["sortKey": "TIME", "sortDirection": "DESC"]], type: .nonNull(.list(.nonNull(.object(Sale.selections))))),
    ]
  }

  public private(set) var resultMap: ResultMap

  public init(unsafeResultMap: ResultMap) {
    self.resultMap = unsafeResultMap
  }

  public init(sales: [Sale]) {
    self.init(unsafeResultMap: ["__typename": "TokenWithMarketsSummary", "sales": sales.map { (value: Sale) -> ResultMap in value.resultMap }])
  }

  public var __typename: String {
    get {
      return resultMap["__typename"]! as! String
    }
    set {
      resultMap.updateValue(newValue, forKey: "__typename")
    }
  }

  public var sales: [Sale] {
    get {
      return (resultMap["sales"] as! [ResultMap]).map { (value: ResultMap) -> Sale in Sale(unsafeResultMap: value) }
    }
    set {
      resultMap.updateValue(newValue.map { (value: Sale) -> ResultMap in value.resultMap }, forKey: "sales")
    }
  }

  public struct Sale: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Sale"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("saleContractAddress", type: .scalar(String.self)),
        GraphQLField("transactionInfo", type: .nonNull(.object(TransactionInfo.selections))),
        GraphQLField("buyerAddress", type: .nonNull(.scalar(String.self))),
        GraphQLField("collectionAddress", type: .nonNull(.scalar(String.self))),
        GraphQLField("price", type: .nonNull(.object(Price.selections))),
        GraphQLField("sellerAddress", type: .nonNull(.scalar(String.self))),
        GraphQLField("tokenId", type: .nonNull(.scalar(String.self))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(saleContractAddress: String? = nil, transactionInfo: TransactionInfo, buyerAddress: String, collectionAddress: String, price: Price, sellerAddress: String, tokenId: String) {
      self.init(unsafeResultMap: ["__typename": "Sale", "saleContractAddress": saleContractAddress, "transactionInfo": transactionInfo.resultMap, "buyerAddress": buyerAddress, "collectionAddress": collectionAddress, "price": price.resultMap, "sellerAddress": sellerAddress, "tokenId": tokenId])
    }

    public var __typename: String {
      get {
        return resultMap["__typename"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "__typename")
      }
    }

    public var saleContractAddress: String? {
      get {
        return resultMap["saleContractAddress"] as? String
      }
      set {
        resultMap.updateValue(newValue, forKey: "saleContractAddress")
      }
    }

    public var transactionInfo: TransactionInfo {
      get {
        return TransactionInfo(unsafeResultMap: resultMap["transactionInfo"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "transactionInfo")
      }
    }

    public var buyerAddress: String {
      get {
        return resultMap["buyerAddress"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "buyerAddress")
      }
    }

    public var collectionAddress: String {
      get {
        return resultMap["collectionAddress"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "collectionAddress")
      }
    }

    public var price: Price {
      get {
        return Price(unsafeResultMap: resultMap["price"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "price")
      }
    }

    public var sellerAddress: String {
      get {
        return resultMap["sellerAddress"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "sellerAddress")
      }
    }

    public var tokenId: String {
      get {
        return resultMap["tokenId"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "tokenId")
      }
    }

    public var fragments: Fragments {
      get {
        return Fragments(unsafeResultMap: resultMap)
      }
      set {
        resultMap += newValue.resultMap
      }
    }

    public struct Fragments {
      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public var saleInfo: SaleInfo {
        get {
          return SaleInfo(unsafeResultMap: resultMap)
        }
        set {
          resultMap += newValue.resultMap
        }
      }
    }

    public struct TransactionInfo: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["TransactionInfo"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
          GraphQLField("blockTimestamp", type: .nonNull(.scalar(String.self))),
          GraphQLField("transactionHash", type: .scalar(String.self)),
          GraphQLField("logIndex", type: .scalar(Int.self)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(blockNumber: Int, blockTimestamp: String, transactionHash: String? = nil, logIndex: Int? = nil) {
        self.init(unsafeResultMap: ["__typename": "TransactionInfo", "blockNumber": blockNumber, "blockTimestamp": blockTimestamp, "transactionHash": transactionHash, "logIndex": logIndex])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var blockNumber: Int {
        get {
          return resultMap["blockNumber"]! as! Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "blockNumber")
        }
      }

      public var blockTimestamp: String {
        get {
          return resultMap["blockTimestamp"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "blockTimestamp")
        }
      }

      public var transactionHash: String? {
        get {
          return resultMap["transactionHash"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "transactionHash")
        }
      }

      public var logIndex: Int? {
        get {
          return resultMap["logIndex"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "logIndex")
        }
      }

      public var fragments: Fragments {
        get {
          return Fragments(unsafeResultMap: resultMap)
        }
        set {
          resultMap += newValue.resultMap
        }
      }

      public struct Fragments {
        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public var transactionDetails: TransactionDetails {
          get {
            return TransactionDetails(unsafeResultMap: resultMap)
          }
          set {
            resultMap += newValue.resultMap
          }
        }
      }
    }

    public struct Price: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["PriceAtTime"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
          GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
          GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
          GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
        self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var blockNumber: Int {
        get {
          return resultMap["blockNumber"]! as! Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "blockNumber")
        }
      }

      public var chainTokenPrice: ChainTokenPrice? {
        get {
          return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
        }
      }

      public var nativePrice: NativePrice {
        get {
          return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
        }
        set {
          resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
        }
      }

      public var usdcPrice: UsdcPrice? {
        get {
          return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
        }
      }

      public var fragments: Fragments {
        get {
          return Fragments(unsafeResultMap: resultMap)
        }
        set {
          resultMap += newValue.resultMap
        }
      }

      public struct Fragments {
        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public var priceSummary: PriceSummary {
          get {
            return PriceSummary(unsafeResultMap: resultMap)
          }
          set {
            resultMap += newValue.resultMap
          }
        }
      }

      public struct ChainTokenPrice: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["CurrencyAmount"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
            GraphQLField("raw", type: .nonNull(.scalar(String.self))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(decimal: Double, raw: String) {
          self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var decimal: Double {
          get {
            return resultMap["decimal"]! as! Double
          }
          set {
            resultMap.updateValue(newValue, forKey: "decimal")
          }
        }

        public var raw: String {
          get {
            return resultMap["raw"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "raw")
          }
        }
      }

      public struct NativePrice: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["CurrencyAmount"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
            GraphQLField("raw", type: .nonNull(.scalar(String.self))),
            GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(decimal: Double, raw: String, currency: Currency) {
          self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var decimal: Double {
          get {
            return resultMap["decimal"]! as! Double
          }
          set {
            resultMap.updateValue(newValue, forKey: "decimal")
          }
        }

        public var raw: String {
          get {
            return resultMap["raw"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "raw")
          }
        }

        public var currency: Currency {
          get {
            return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
          }
          set {
            resultMap.updateValue(newValue.resultMap, forKey: "currency")
          }
        }

        public struct Currency: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["Currency"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("address", type: .nonNull(.scalar(String.self))),
              GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(address: String, decimals: Int, name: String) {
            self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var address: String {
            get {
              return resultMap["address"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "address")
            }
          }

          public var decimals: Int {
            get {
              return resultMap["decimals"]! as! Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "decimals")
            }
          }

          public var name: String {
            get {
              return resultMap["name"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "name")
            }
          }
        }
      }

      public struct UsdcPrice: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["CurrencyAmount"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
            GraphQLField("raw", type: .nonNull(.scalar(String.self))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(decimal: Double, raw: String) {
          self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var decimal: Double {
          get {
            return resultMap["decimal"]! as! Double
          }
          set {
            resultMap.updateValue(newValue, forKey: "decimal")
          }
        }

        public var raw: String {
          get {
            return resultMap["raw"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "raw")
          }
        }
      }
    }
  }
}

public struct TokensEventsInfo: GraphQLFragment {
  /// The raw GraphQL definition of this fragment.
  public static let fragmentDefinition: String =
    """
    fragment TokensEventsInfo on TokenWithMarketsSummary {
      __typename
      events(pagination: {limit: 10}, sort: {sortKey: CREATED, sortDirection: DESC}) {
        __typename
        ...EventInfo
      }
    }
    """

  public static let possibleTypes: [String] = ["TokenWithMarketsSummary"]

  public static var selections: [GraphQLSelection] {
    return [
      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
      GraphQLField("events", arguments: ["pagination": ["limit": 10], "sort": ["sortKey": "CREATED", "sortDirection": "DESC"]], type: .nonNull(.list(.nonNull(.object(Event.selections))))),
    ]
  }

  public private(set) var resultMap: ResultMap

  public init(unsafeResultMap: ResultMap) {
    self.resultMap = unsafeResultMap
  }

  public init(events: [Event]) {
    self.init(unsafeResultMap: ["__typename": "TokenWithMarketsSummary", "events": events.map { (value: Event) -> ResultMap in value.resultMap }])
  }

  public var __typename: String {
    get {
      return resultMap["__typename"]! as! String
    }
    set {
      resultMap.updateValue(newValue, forKey: "__typename")
    }
  }

  public var events: [Event] {
    get {
      return (resultMap["events"] as! [ResultMap]).map { (value: ResultMap) -> Event in Event(unsafeResultMap: value) }
    }
    set {
      resultMap.updateValue(newValue.map { (value: Event) -> ResultMap in value.resultMap }, forKey: "events")
    }
  }

  public struct Event: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Event"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("transactionInfo", type: .nonNull(.object(TransactionInfo.selections))),
        GraphQLField("eventType", type: .nonNull(.scalar(EventType.self))),
        GraphQLField("collectionAddress", type: .nonNull(.scalar(String.self))),
        GraphQLField("tokenId", type: .scalar(String.self)),
        GraphQLField("properties", type: .nonNull(.object(Property.selections))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(transactionInfo: TransactionInfo, eventType: EventType, collectionAddress: String, tokenId: String? = nil, properties: Property) {
      self.init(unsafeResultMap: ["__typename": "Event", "transactionInfo": transactionInfo.resultMap, "eventType": eventType, "collectionAddress": collectionAddress, "tokenId": tokenId, "properties": properties.resultMap])
    }

    public var __typename: String {
      get {
        return resultMap["__typename"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "__typename")
      }
    }

    public var transactionInfo: TransactionInfo {
      get {
        return TransactionInfo(unsafeResultMap: resultMap["transactionInfo"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "transactionInfo")
      }
    }

    public var eventType: EventType {
      get {
        return resultMap["eventType"]! as! EventType
      }
      set {
        resultMap.updateValue(newValue, forKey: "eventType")
      }
    }

    public var collectionAddress: String {
      get {
        return resultMap["collectionAddress"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "collectionAddress")
      }
    }

    public var tokenId: String? {
      get {
        return resultMap["tokenId"] as? String
      }
      set {
        resultMap.updateValue(newValue, forKey: "tokenId")
      }
    }

    public var properties: Property {
      get {
        return Property(unsafeResultMap: resultMap["properties"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "properties")
      }
    }

    public var fragments: Fragments {
      get {
        return Fragments(unsafeResultMap: resultMap)
      }
      set {
        resultMap += newValue.resultMap
      }
    }

    public struct Fragments {
      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public var eventInfo: EventInfo {
        get {
          return EventInfo(unsafeResultMap: resultMap)
        }
        set {
          resultMap += newValue.resultMap
        }
      }
    }

    public struct TransactionInfo: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["TransactionInfo"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
          GraphQLField("blockTimestamp", type: .nonNull(.scalar(String.self))),
          GraphQLField("transactionHash", type: .scalar(String.self)),
          GraphQLField("logIndex", type: .scalar(Int.self)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(blockNumber: Int, blockTimestamp: String, transactionHash: String? = nil, logIndex: Int? = nil) {
        self.init(unsafeResultMap: ["__typename": "TransactionInfo", "blockNumber": blockNumber, "blockTimestamp": blockTimestamp, "transactionHash": transactionHash, "logIndex": logIndex])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var blockNumber: Int {
        get {
          return resultMap["blockNumber"]! as! Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "blockNumber")
        }
      }

      public var blockTimestamp: String {
        get {
          return resultMap["blockTimestamp"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "blockTimestamp")
        }
      }

      public var transactionHash: String? {
        get {
          return resultMap["transactionHash"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "transactionHash")
        }
      }

      public var logIndex: Int? {
        get {
          return resultMap["logIndex"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "logIndex")
        }
      }

      public var fragments: Fragments {
        get {
          return Fragments(unsafeResultMap: resultMap)
        }
        set {
          resultMap += newValue.resultMap
        }
      }

      public struct Fragments {
        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public var transactionDetails: TransactionDetails {
          get {
            return TransactionDetails(unsafeResultMap: resultMap)
          }
          set {
            resultMap += newValue.resultMap
          }
        }
      }
    }

    public struct Property: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["ApprovalEvent", "MintEvent", "Sale", "TransferEvent", "V1MarketEvent", "V2AuctionEvent", "V3AskEvent"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLTypeCase(
            variants: ["MintEvent": AsMintEvent.selections, "TransferEvent": AsTransferEvent.selections, "V1MarketEvent": AsV1MarketEvent.selections, "V2AuctionEvent": AsV2AuctionEvent.selections, "V3AskEvent": AsV3AskEvent.selections],
            default: [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            ]
          )
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public static func makeApprovalEvent() -> Property {
        return Property(unsafeResultMap: ["__typename": "ApprovalEvent"])
      }

      public static func makeSale() -> Property {
        return Property(unsafeResultMap: ["__typename": "Sale"])
      }

      public static func makeMintEvent(tokenId: String, collectionAddress: String, originatorAddress: String, toAddress: String, price: AsMintEvent.Price) -> Property {
        return Property(unsafeResultMap: ["__typename": "MintEvent", "tokenId": tokenId, "collectionAddress": collectionAddress, "originatorAddress": originatorAddress, "toAddress": toAddress, "price": price.resultMap])
      }

      public static func makeTransferEvent(fromAddress: String, toAddress: String, collectionAddress: String, tokenId: String) -> Property {
        return Property(unsafeResultMap: ["__typename": "TransferEvent", "fromAddress": fromAddress, "toAddress": toAddress, "collectionAddress": collectionAddress, "tokenId": tokenId])
      }

      public static func makeV1MarketEvent(v1MarketEventType: V1MarketEventType, address: String, collectionAddress: String, tokenId: String, properties: AsV1MarketEvent.Property) -> Property {
        return Property(unsafeResultMap: ["__typename": "V1MarketEvent", "v1MarketEventType": v1MarketEventType, "address": address, "collectionAddress": collectionAddress, "tokenId": tokenId, "properties": properties.resultMap])
      }

      public static func makeV2AuctionEvent(v2AuctionEventType: V2AuctionEventType, address: String, auctionId: Int, collectionAddress: String, tokenId: String, properties: AsV2AuctionEvent.Property) -> Property {
        return Property(unsafeResultMap: ["__typename": "V2AuctionEvent", "v2AuctionEventType": v2AuctionEventType, "address": address, "auctionId": auctionId, "collectionAddress": collectionAddress, "tokenId": tokenId, "properties": properties.resultMap])
      }

      public static func makeV3AskEvent(v3AskEventType: V3AskEventType, address: String, collectionAddress: String, tokenId: String, properties: AsV3AskEvent.Property) -> Property {
        return Property(unsafeResultMap: ["__typename": "V3AskEvent", "v3AskEventType": v3AskEventType, "address": address, "collectionAddress": collectionAddress, "tokenId": tokenId, "properties": properties.resultMap])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var asMintEvent: AsMintEvent? {
        get {
          if !AsMintEvent.possibleTypes.contains(__typename) { return nil }
          return AsMintEvent(unsafeResultMap: resultMap)
        }
        set {
          guard let newValue = newValue else { return }
          resultMap = newValue.resultMap
        }
      }

      public struct AsMintEvent: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["MintEvent"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("tokenId", type: .nonNull(.scalar(String.self))),
            GraphQLField("collectionAddress", type: .nonNull(.scalar(String.self))),
            GraphQLField("originatorAddress", type: .nonNull(.scalar(String.self))),
            GraphQLField("toAddress", type: .nonNull(.scalar(String.self))),
            GraphQLField("price", type: .nonNull(.object(Price.selections))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(tokenId: String, collectionAddress: String, originatorAddress: String, toAddress: String, price: Price) {
          self.init(unsafeResultMap: ["__typename": "MintEvent", "tokenId": tokenId, "collectionAddress": collectionAddress, "originatorAddress": originatorAddress, "toAddress": toAddress, "price": price.resultMap])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var tokenId: String {
          get {
            return resultMap["tokenId"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "tokenId")
          }
        }

        public var collectionAddress: String {
          get {
            return resultMap["collectionAddress"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "collectionAddress")
          }
        }

        public var originatorAddress: String {
          get {
            return resultMap["originatorAddress"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "originatorAddress")
          }
        }

        public var toAddress: String {
          get {
            return resultMap["toAddress"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "toAddress")
          }
        }

        public var price: Price {
          get {
            return Price(unsafeResultMap: resultMap["price"]! as! ResultMap)
          }
          set {
            resultMap.updateValue(newValue.resultMap, forKey: "price")
          }
        }

        public struct Price: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["PriceAtTime"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
              GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
              GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
              GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
            self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var blockNumber: Int {
            get {
              return resultMap["blockNumber"]! as! Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "blockNumber")
            }
          }

          public var chainTokenPrice: ChainTokenPrice? {
            get {
              return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
            }
            set {
              resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
            }
          }

          public var nativePrice: NativePrice {
            get {
              return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
            }
            set {
              resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
            }
          }

          public var usdcPrice: UsdcPrice? {
            get {
              return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
            }
            set {
              resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
            }
          }

          public var fragments: Fragments {
            get {
              return Fragments(unsafeResultMap: resultMap)
            }
            set {
              resultMap += newValue.resultMap
            }
          }

          public struct Fragments {
            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public var priceSummary: PriceSummary {
              get {
                return PriceSummary(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }
          }

          public struct ChainTokenPrice: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["CurrencyAmount"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                GraphQLField("raw", type: .nonNull(.scalar(String.self))),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(decimal: Double, raw: String) {
              self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var decimal: Double {
              get {
                return resultMap["decimal"]! as! Double
              }
              set {
                resultMap.updateValue(newValue, forKey: "decimal")
              }
            }

            public var raw: String {
              get {
                return resultMap["raw"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "raw")
              }
            }
          }

          public struct NativePrice: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["CurrencyAmount"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(decimal: Double, raw: String, currency: Currency) {
              self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var decimal: Double {
              get {
                return resultMap["decimal"]! as! Double
              }
              set {
                resultMap.updateValue(newValue, forKey: "decimal")
              }
            }

            public var raw: String {
              get {
                return resultMap["raw"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "raw")
              }
            }

            public var currency: Currency {
              get {
                return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
              }
              set {
                resultMap.updateValue(newValue.resultMap, forKey: "currency")
              }
            }

            public struct Currency: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["Currency"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("address", type: .nonNull(.scalar(String.self))),
                  GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                  GraphQLField("name", type: .nonNull(.scalar(String.self))),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(address: String, decimals: Int, name: String) {
                self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var address: String {
                get {
                  return resultMap["address"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "address")
                }
              }

              public var decimals: Int {
                get {
                  return resultMap["decimals"]! as! Int
                }
                set {
                  resultMap.updateValue(newValue, forKey: "decimals")
                }
              }

              public var name: String {
                get {
                  return resultMap["name"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "name")
                }
              }
            }
          }

          public struct UsdcPrice: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["CurrencyAmount"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                GraphQLField("raw", type: .nonNull(.scalar(String.self))),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(decimal: Double, raw: String) {
              self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var decimal: Double {
              get {
                return resultMap["decimal"]! as! Double
              }
              set {
                resultMap.updateValue(newValue, forKey: "decimal")
              }
            }

            public var raw: String {
              get {
                return resultMap["raw"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "raw")
              }
            }
          }
        }
      }

      public var asTransferEvent: AsTransferEvent? {
        get {
          if !AsTransferEvent.possibleTypes.contains(__typename) { return nil }
          return AsTransferEvent(unsafeResultMap: resultMap)
        }
        set {
          guard let newValue = newValue else { return }
          resultMap = newValue.resultMap
        }
      }

      public struct AsTransferEvent: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["TransferEvent"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("fromAddress", type: .nonNull(.scalar(String.self))),
            GraphQLField("toAddress", type: .nonNull(.scalar(String.self))),
            GraphQLField("collectionAddress", type: .nonNull(.scalar(String.self))),
            GraphQLField("tokenId", type: .nonNull(.scalar(String.self))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(fromAddress: String, toAddress: String, collectionAddress: String, tokenId: String) {
          self.init(unsafeResultMap: ["__typename": "TransferEvent", "fromAddress": fromAddress, "toAddress": toAddress, "collectionAddress": collectionAddress, "tokenId": tokenId])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var fromAddress: String {
          get {
            return resultMap["fromAddress"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "fromAddress")
          }
        }

        public var toAddress: String {
          get {
            return resultMap["toAddress"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "toAddress")
          }
        }

        public var collectionAddress: String {
          get {
            return resultMap["collectionAddress"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "collectionAddress")
          }
        }

        public var tokenId: String {
          get {
            return resultMap["tokenId"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "tokenId")
          }
        }
      }

      public var asV1MarketEvent: AsV1MarketEvent? {
        get {
          if !AsV1MarketEvent.possibleTypes.contains(__typename) { return nil }
          return AsV1MarketEvent(unsafeResultMap: resultMap)
        }
        set {
          guard let newValue = newValue else { return }
          resultMap = newValue.resultMap
        }
      }

      public struct AsV1MarketEvent: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["V1MarketEvent"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("v1MarketEventType", type: .nonNull(.scalar(V1MarketEventType.self))),
            GraphQLField("address", type: .nonNull(.scalar(String.self))),
            GraphQLField("collectionAddress", type: .nonNull(.scalar(String.self))),
            GraphQLField("tokenId", type: .nonNull(.scalar(String.self))),
            GraphQLField("properties", type: .nonNull(.object(Property.selections))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(v1MarketEventType: V1MarketEventType, address: String, collectionAddress: String, tokenId: String, properties: Property) {
          self.init(unsafeResultMap: ["__typename": "V1MarketEvent", "v1MarketEventType": v1MarketEventType, "address": address, "collectionAddress": collectionAddress, "tokenId": tokenId, "properties": properties.resultMap])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var v1MarketEventType: V1MarketEventType {
          get {
            return resultMap["v1MarketEventType"]! as! V1MarketEventType
          }
          set {
            resultMap.updateValue(newValue, forKey: "v1MarketEventType")
          }
        }

        public var address: String {
          get {
            return resultMap["address"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "address")
          }
        }

        public var collectionAddress: String {
          get {
            return resultMap["collectionAddress"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "collectionAddress")
          }
        }

        public var tokenId: String {
          get {
            return resultMap["tokenId"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "tokenId")
          }
        }

        public var properties: Property {
          get {
            return Property(unsafeResultMap: resultMap["properties"]! as! ResultMap)
          }
          set {
            resultMap.updateValue(newValue.resultMap, forKey: "properties")
          }
        }

        public struct Property: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["V1MarketAskCreatedEventProperties", "V1MarketAskRemovedEventProperties", "V1MarketOfferCreatedEventProperties", "V1MarketOfferFinalizedEventProperties", "V1MarketOfferRemovedEventProperties", "V1MarketBidShareUpdatedEventProperties"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLTypeCase(
                variants: ["V1MarketAskCreatedEventProperties": AsV1MarketAskCreatedEventProperties.selections, "V1MarketAskRemovedEventProperties": AsV1MarketAskRemovedEventProperties.selections, "V1MarketOfferCreatedEventProperties": AsV1MarketOfferCreatedEventProperties.selections, "V1MarketOfferFinalizedEventProperties": AsV1MarketOfferFinalizedEventProperties.selections, "V1MarketOfferRemovedEventProperties": AsV1MarketOfferRemovedEventProperties.selections],
                default: [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                ]
              )
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public static func makeV1MarketBidShareUpdatedEventProperties() -> Property {
            return Property(unsafeResultMap: ["__typename": "V1MarketBidShareUpdatedEventProperties"])
          }

          public static func makeV1MarketAskCreatedEventProperties(amount: String, price: AsV1MarketAskCreatedEventProperties.Price, currency: String) -> Property {
            return Property(unsafeResultMap: ["__typename": "V1MarketAskCreatedEventProperties", "amount": amount, "price": price.resultMap, "currency": currency])
          }

          public static func makeV1MarketAskRemovedEventProperties(amount: String, price: AsV1MarketAskRemovedEventProperties.Price, currency: String) -> Property {
            return Property(unsafeResultMap: ["__typename": "V1MarketAskRemovedEventProperties", "amount": amount, "price": price.resultMap, "currency": currency])
          }

          public static func makeV1MarketOfferCreatedEventProperties(amount: String, price: AsV1MarketOfferCreatedEventProperties.Price, currency: String, bidder: String) -> Property {
            return Property(unsafeResultMap: ["__typename": "V1MarketOfferCreatedEventProperties", "amount": amount, "price": price.resultMap, "currency": currency, "bidder": bidder])
          }

          public static func makeV1MarketOfferFinalizedEventProperties(amount: String, price: AsV1MarketOfferFinalizedEventProperties.Price, currency: String, bidder: String) -> Property {
            return Property(unsafeResultMap: ["__typename": "V1MarketOfferFinalizedEventProperties", "amount": amount, "price": price.resultMap, "currency": currency, "bidder": bidder])
          }

          public static func makeV1MarketOfferRemovedEventProperties(amount: String, price: AsV1MarketOfferRemovedEventProperties.Price, currency: String, bidder: String) -> Property {
            return Property(unsafeResultMap: ["__typename": "V1MarketOfferRemovedEventProperties", "amount": amount, "price": price.resultMap, "currency": currency, "bidder": bidder])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var fragments: Fragments {
            get {
              return Fragments(unsafeResultMap: resultMap)
            }
            set {
              resultMap += newValue.resultMap
            }
          }

          public struct Fragments {
            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public var v1MarketEventPropertiesInfo: V1MarketEventPropertiesInfo {
              get {
                return V1MarketEventPropertiesInfo(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }
          }

          public var asV1MarketAskCreatedEventProperties: AsV1MarketAskCreatedEventProperties? {
            get {
              if !AsV1MarketAskCreatedEventProperties.possibleTypes.contains(__typename) { return nil }
              return AsV1MarketAskCreatedEventProperties(unsafeResultMap: resultMap)
            }
            set {
              guard let newValue = newValue else { return }
              resultMap = newValue.resultMap
            }
          }

          public struct AsV1MarketAskCreatedEventProperties: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["V1MarketAskCreatedEventProperties"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("amount", type: .nonNull(.scalar(String.self))),
                GraphQLField("price", type: .nonNull(.object(Price.selections))),
                GraphQLField("currency", type: .nonNull(.scalar(String.self))),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(amount: String, price: Price, currency: String) {
              self.init(unsafeResultMap: ["__typename": "V1MarketAskCreatedEventProperties", "amount": amount, "price": price.resultMap, "currency": currency])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var amount: String {
              get {
                return resultMap["amount"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "amount")
              }
            }

            public var price: Price {
              get {
                return Price(unsafeResultMap: resultMap["price"]! as! ResultMap)
              }
              set {
                resultMap.updateValue(newValue.resultMap, forKey: "price")
              }
            }

            public var currency: String {
              get {
                return resultMap["currency"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "currency")
              }
            }

            public var fragments: Fragments {
              get {
                return Fragments(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }

            public struct Fragments {
              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public var v1MarketEventPropertiesInfo: V1MarketEventPropertiesInfo {
                get {
                  return V1MarketEventPropertiesInfo(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }
            }

            public struct Price: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["PriceAtTime"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                  GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
                  GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
                  GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
                self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var blockNumber: Int {
                get {
                  return resultMap["blockNumber"]! as! Int
                }
                set {
                  resultMap.updateValue(newValue, forKey: "blockNumber")
                }
              }

              public var chainTokenPrice: ChainTokenPrice? {
                get {
                  return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
                }
                set {
                  resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
                }
              }

              public var nativePrice: NativePrice {
                get {
                  return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
                }
                set {
                  resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
                }
              }

              public var usdcPrice: UsdcPrice? {
                get {
                  return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
                }
                set {
                  resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
                }
              }

              public var fragments: Fragments {
                get {
                  return Fragments(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }

              public struct Fragments {
                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public var priceSummary: PriceSummary {
                  get {
                    return PriceSummary(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }
              }

              public struct ChainTokenPrice: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["CurrencyAmount"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                    GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(decimal: Double, raw: String) {
                  self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var decimal: Double {
                  get {
                    return resultMap["decimal"]! as! Double
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimal")
                  }
                }

                public var raw: String {
                  get {
                    return resultMap["raw"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "raw")
                  }
                }
              }

              public struct NativePrice: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["CurrencyAmount"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                    GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                    GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(decimal: Double, raw: String, currency: Currency) {
                  self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var decimal: Double {
                  get {
                    return resultMap["decimal"]! as! Double
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimal")
                  }
                }

                public var raw: String {
                  get {
                    return resultMap["raw"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "raw")
                  }
                }

                public var currency: Currency {
                  get {
                    return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
                  }
                  set {
                    resultMap.updateValue(newValue.resultMap, forKey: "currency")
                  }
                }

                public struct Currency: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["Currency"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("address", type: .nonNull(.scalar(String.self))),
                      GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                      GraphQLField("name", type: .nonNull(.scalar(String.self))),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(address: String, decimals: Int, name: String) {
                    self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var address: String {
                    get {
                      return resultMap["address"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "address")
                    }
                  }

                  public var decimals: Int {
                    get {
                      return resultMap["decimals"]! as! Int
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "decimals")
                    }
                  }

                  public var name: String {
                    get {
                      return resultMap["name"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "name")
                    }
                  }
                }
              }

              public struct UsdcPrice: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["CurrencyAmount"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                    GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(decimal: Double, raw: String) {
                  self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var decimal: Double {
                  get {
                    return resultMap["decimal"]! as! Double
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimal")
                  }
                }

                public var raw: String {
                  get {
                    return resultMap["raw"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "raw")
                  }
                }
              }
            }
          }

          public var asV1MarketAskRemovedEventProperties: AsV1MarketAskRemovedEventProperties? {
            get {
              if !AsV1MarketAskRemovedEventProperties.possibleTypes.contains(__typename) { return nil }
              return AsV1MarketAskRemovedEventProperties(unsafeResultMap: resultMap)
            }
            set {
              guard let newValue = newValue else { return }
              resultMap = newValue.resultMap
            }
          }

          public struct AsV1MarketAskRemovedEventProperties: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["V1MarketAskRemovedEventProperties"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("amount", type: .nonNull(.scalar(String.self))),
                GraphQLField("price", type: .nonNull(.object(Price.selections))),
                GraphQLField("currency", type: .nonNull(.scalar(String.self))),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(amount: String, price: Price, currency: String) {
              self.init(unsafeResultMap: ["__typename": "V1MarketAskRemovedEventProperties", "amount": amount, "price": price.resultMap, "currency": currency])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var amount: String {
              get {
                return resultMap["amount"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "amount")
              }
            }

            public var price: Price {
              get {
                return Price(unsafeResultMap: resultMap["price"]! as! ResultMap)
              }
              set {
                resultMap.updateValue(newValue.resultMap, forKey: "price")
              }
            }

            public var currency: String {
              get {
                return resultMap["currency"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "currency")
              }
            }

            public var fragments: Fragments {
              get {
                return Fragments(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }

            public struct Fragments {
              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public var v1MarketEventPropertiesInfo: V1MarketEventPropertiesInfo {
                get {
                  return V1MarketEventPropertiesInfo(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }
            }

            public struct Price: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["PriceAtTime"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                  GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
                  GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
                  GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
                self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var blockNumber: Int {
                get {
                  return resultMap["blockNumber"]! as! Int
                }
                set {
                  resultMap.updateValue(newValue, forKey: "blockNumber")
                }
              }

              public var chainTokenPrice: ChainTokenPrice? {
                get {
                  return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
                }
                set {
                  resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
                }
              }

              public var nativePrice: NativePrice {
                get {
                  return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
                }
                set {
                  resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
                }
              }

              public var usdcPrice: UsdcPrice? {
                get {
                  return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
                }
                set {
                  resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
                }
              }

              public var fragments: Fragments {
                get {
                  return Fragments(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }

              public struct Fragments {
                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public var priceSummary: PriceSummary {
                  get {
                    return PriceSummary(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }
              }

              public struct ChainTokenPrice: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["CurrencyAmount"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                    GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(decimal: Double, raw: String) {
                  self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var decimal: Double {
                  get {
                    return resultMap["decimal"]! as! Double
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimal")
                  }
                }

                public var raw: String {
                  get {
                    return resultMap["raw"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "raw")
                  }
                }
              }

              public struct NativePrice: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["CurrencyAmount"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                    GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                    GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(decimal: Double, raw: String, currency: Currency) {
                  self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var decimal: Double {
                  get {
                    return resultMap["decimal"]! as! Double
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimal")
                  }
                }

                public var raw: String {
                  get {
                    return resultMap["raw"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "raw")
                  }
                }

                public var currency: Currency {
                  get {
                    return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
                  }
                  set {
                    resultMap.updateValue(newValue.resultMap, forKey: "currency")
                  }
                }

                public struct Currency: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["Currency"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("address", type: .nonNull(.scalar(String.self))),
                      GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                      GraphQLField("name", type: .nonNull(.scalar(String.self))),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(address: String, decimals: Int, name: String) {
                    self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var address: String {
                    get {
                      return resultMap["address"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "address")
                    }
                  }

                  public var decimals: Int {
                    get {
                      return resultMap["decimals"]! as! Int
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "decimals")
                    }
                  }

                  public var name: String {
                    get {
                      return resultMap["name"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "name")
                    }
                  }
                }
              }

              public struct UsdcPrice: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["CurrencyAmount"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                    GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(decimal: Double, raw: String) {
                  self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var decimal: Double {
                  get {
                    return resultMap["decimal"]! as! Double
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimal")
                  }
                }

                public var raw: String {
                  get {
                    return resultMap["raw"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "raw")
                  }
                }
              }
            }
          }

          public var asV1MarketOfferCreatedEventProperties: AsV1MarketOfferCreatedEventProperties? {
            get {
              if !AsV1MarketOfferCreatedEventProperties.possibleTypes.contains(__typename) { return nil }
              return AsV1MarketOfferCreatedEventProperties(unsafeResultMap: resultMap)
            }
            set {
              guard let newValue = newValue else { return }
              resultMap = newValue.resultMap
            }
          }

          public struct AsV1MarketOfferCreatedEventProperties: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["V1MarketOfferCreatedEventProperties"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("amount", type: .nonNull(.scalar(String.self))),
                GraphQLField("price", type: .nonNull(.object(Price.selections))),
                GraphQLField("currency", type: .nonNull(.scalar(String.self))),
                GraphQLField("bidder", type: .nonNull(.scalar(String.self))),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(amount: String, price: Price, currency: String, bidder: String) {
              self.init(unsafeResultMap: ["__typename": "V1MarketOfferCreatedEventProperties", "amount": amount, "price": price.resultMap, "currency": currency, "bidder": bidder])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var amount: String {
              get {
                return resultMap["amount"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "amount")
              }
            }

            public var price: Price {
              get {
                return Price(unsafeResultMap: resultMap["price"]! as! ResultMap)
              }
              set {
                resultMap.updateValue(newValue.resultMap, forKey: "price")
              }
            }

            public var currency: String {
              get {
                return resultMap["currency"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "currency")
              }
            }

            public var bidder: String {
              get {
                return resultMap["bidder"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "bidder")
              }
            }

            public var fragments: Fragments {
              get {
                return Fragments(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }

            public struct Fragments {
              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public var v1MarketEventPropertiesInfo: V1MarketEventPropertiesInfo {
                get {
                  return V1MarketEventPropertiesInfo(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }
            }

            public struct Price: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["PriceAtTime"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                  GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
                  GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
                  GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
                self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var blockNumber: Int {
                get {
                  return resultMap["blockNumber"]! as! Int
                }
                set {
                  resultMap.updateValue(newValue, forKey: "blockNumber")
                }
              }

              public var chainTokenPrice: ChainTokenPrice? {
                get {
                  return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
                }
                set {
                  resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
                }
              }

              public var nativePrice: NativePrice {
                get {
                  return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
                }
                set {
                  resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
                }
              }

              public var usdcPrice: UsdcPrice? {
                get {
                  return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
                }
                set {
                  resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
                }
              }

              public var fragments: Fragments {
                get {
                  return Fragments(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }

              public struct Fragments {
                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public var priceSummary: PriceSummary {
                  get {
                    return PriceSummary(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }
              }

              public struct ChainTokenPrice: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["CurrencyAmount"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                    GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(decimal: Double, raw: String) {
                  self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var decimal: Double {
                  get {
                    return resultMap["decimal"]! as! Double
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimal")
                  }
                }

                public var raw: String {
                  get {
                    return resultMap["raw"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "raw")
                  }
                }
              }

              public struct NativePrice: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["CurrencyAmount"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                    GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                    GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(decimal: Double, raw: String, currency: Currency) {
                  self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var decimal: Double {
                  get {
                    return resultMap["decimal"]! as! Double
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimal")
                  }
                }

                public var raw: String {
                  get {
                    return resultMap["raw"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "raw")
                  }
                }

                public var currency: Currency {
                  get {
                    return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
                  }
                  set {
                    resultMap.updateValue(newValue.resultMap, forKey: "currency")
                  }
                }

                public struct Currency: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["Currency"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("address", type: .nonNull(.scalar(String.self))),
                      GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                      GraphQLField("name", type: .nonNull(.scalar(String.self))),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(address: String, decimals: Int, name: String) {
                    self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var address: String {
                    get {
                      return resultMap["address"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "address")
                    }
                  }

                  public var decimals: Int {
                    get {
                      return resultMap["decimals"]! as! Int
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "decimals")
                    }
                  }

                  public var name: String {
                    get {
                      return resultMap["name"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "name")
                    }
                  }
                }
              }

              public struct UsdcPrice: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["CurrencyAmount"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                    GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(decimal: Double, raw: String) {
                  self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var decimal: Double {
                  get {
                    return resultMap["decimal"]! as! Double
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimal")
                  }
                }

                public var raw: String {
                  get {
                    return resultMap["raw"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "raw")
                  }
                }
              }
            }
          }

          public var asV1MarketOfferFinalizedEventProperties: AsV1MarketOfferFinalizedEventProperties? {
            get {
              if !AsV1MarketOfferFinalizedEventProperties.possibleTypes.contains(__typename) { return nil }
              return AsV1MarketOfferFinalizedEventProperties(unsafeResultMap: resultMap)
            }
            set {
              guard let newValue = newValue else { return }
              resultMap = newValue.resultMap
            }
          }

          public struct AsV1MarketOfferFinalizedEventProperties: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["V1MarketOfferFinalizedEventProperties"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("amount", type: .nonNull(.scalar(String.self))),
                GraphQLField("price", type: .nonNull(.object(Price.selections))),
                GraphQLField("currency", type: .nonNull(.scalar(String.self))),
                GraphQLField("bidder", type: .nonNull(.scalar(String.self))),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(amount: String, price: Price, currency: String, bidder: String) {
              self.init(unsafeResultMap: ["__typename": "V1MarketOfferFinalizedEventProperties", "amount": amount, "price": price.resultMap, "currency": currency, "bidder": bidder])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var amount: String {
              get {
                return resultMap["amount"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "amount")
              }
            }

            public var price: Price {
              get {
                return Price(unsafeResultMap: resultMap["price"]! as! ResultMap)
              }
              set {
                resultMap.updateValue(newValue.resultMap, forKey: "price")
              }
            }

            public var currency: String {
              get {
                return resultMap["currency"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "currency")
              }
            }

            public var bidder: String {
              get {
                return resultMap["bidder"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "bidder")
              }
            }

            public var fragments: Fragments {
              get {
                return Fragments(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }

            public struct Fragments {
              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public var v1MarketEventPropertiesInfo: V1MarketEventPropertiesInfo {
                get {
                  return V1MarketEventPropertiesInfo(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }
            }

            public struct Price: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["PriceAtTime"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                  GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
                  GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
                  GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
                self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var blockNumber: Int {
                get {
                  return resultMap["blockNumber"]! as! Int
                }
                set {
                  resultMap.updateValue(newValue, forKey: "blockNumber")
                }
              }

              public var chainTokenPrice: ChainTokenPrice? {
                get {
                  return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
                }
                set {
                  resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
                }
              }

              public var nativePrice: NativePrice {
                get {
                  return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
                }
                set {
                  resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
                }
              }

              public var usdcPrice: UsdcPrice? {
                get {
                  return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
                }
                set {
                  resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
                }
              }

              public var fragments: Fragments {
                get {
                  return Fragments(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }

              public struct Fragments {
                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public var priceSummary: PriceSummary {
                  get {
                    return PriceSummary(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }
              }

              public struct ChainTokenPrice: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["CurrencyAmount"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                    GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(decimal: Double, raw: String) {
                  self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var decimal: Double {
                  get {
                    return resultMap["decimal"]! as! Double
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimal")
                  }
                }

                public var raw: String {
                  get {
                    return resultMap["raw"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "raw")
                  }
                }
              }

              public struct NativePrice: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["CurrencyAmount"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                    GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                    GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(decimal: Double, raw: String, currency: Currency) {
                  self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var decimal: Double {
                  get {
                    return resultMap["decimal"]! as! Double
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimal")
                  }
                }

                public var raw: String {
                  get {
                    return resultMap["raw"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "raw")
                  }
                }

                public var currency: Currency {
                  get {
                    return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
                  }
                  set {
                    resultMap.updateValue(newValue.resultMap, forKey: "currency")
                  }
                }

                public struct Currency: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["Currency"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("address", type: .nonNull(.scalar(String.self))),
                      GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                      GraphQLField("name", type: .nonNull(.scalar(String.self))),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(address: String, decimals: Int, name: String) {
                    self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var address: String {
                    get {
                      return resultMap["address"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "address")
                    }
                  }

                  public var decimals: Int {
                    get {
                      return resultMap["decimals"]! as! Int
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "decimals")
                    }
                  }

                  public var name: String {
                    get {
                      return resultMap["name"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "name")
                    }
                  }
                }
              }

              public struct UsdcPrice: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["CurrencyAmount"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                    GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(decimal: Double, raw: String) {
                  self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var decimal: Double {
                  get {
                    return resultMap["decimal"]! as! Double
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimal")
                  }
                }

                public var raw: String {
                  get {
                    return resultMap["raw"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "raw")
                  }
                }
              }
            }
          }

          public var asV1MarketOfferRemovedEventProperties: AsV1MarketOfferRemovedEventProperties? {
            get {
              if !AsV1MarketOfferRemovedEventProperties.possibleTypes.contains(__typename) { return nil }
              return AsV1MarketOfferRemovedEventProperties(unsafeResultMap: resultMap)
            }
            set {
              guard let newValue = newValue else { return }
              resultMap = newValue.resultMap
            }
          }

          public struct AsV1MarketOfferRemovedEventProperties: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["V1MarketOfferRemovedEventProperties"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("amount", type: .nonNull(.scalar(String.self))),
                GraphQLField("price", type: .nonNull(.object(Price.selections))),
                GraphQLField("currency", type: .nonNull(.scalar(String.self))),
                GraphQLField("bidder", type: .nonNull(.scalar(String.self))),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(amount: String, price: Price, currency: String, bidder: String) {
              self.init(unsafeResultMap: ["__typename": "V1MarketOfferRemovedEventProperties", "amount": amount, "price": price.resultMap, "currency": currency, "bidder": bidder])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var amount: String {
              get {
                return resultMap["amount"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "amount")
              }
            }

            public var price: Price {
              get {
                return Price(unsafeResultMap: resultMap["price"]! as! ResultMap)
              }
              set {
                resultMap.updateValue(newValue.resultMap, forKey: "price")
              }
            }

            public var currency: String {
              get {
                return resultMap["currency"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "currency")
              }
            }

            public var bidder: String {
              get {
                return resultMap["bidder"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "bidder")
              }
            }

            public var fragments: Fragments {
              get {
                return Fragments(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }

            public struct Fragments {
              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public var v1MarketEventPropertiesInfo: V1MarketEventPropertiesInfo {
                get {
                  return V1MarketEventPropertiesInfo(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }
            }

            public struct Price: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["PriceAtTime"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                  GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
                  GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
                  GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
                self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var blockNumber: Int {
                get {
                  return resultMap["blockNumber"]! as! Int
                }
                set {
                  resultMap.updateValue(newValue, forKey: "blockNumber")
                }
              }

              public var chainTokenPrice: ChainTokenPrice? {
                get {
                  return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
                }
                set {
                  resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
                }
              }

              public var nativePrice: NativePrice {
                get {
                  return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
                }
                set {
                  resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
                }
              }

              public var usdcPrice: UsdcPrice? {
                get {
                  return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
                }
                set {
                  resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
                }
              }

              public var fragments: Fragments {
                get {
                  return Fragments(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }

              public struct Fragments {
                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public var priceSummary: PriceSummary {
                  get {
                    return PriceSummary(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }
              }

              public struct ChainTokenPrice: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["CurrencyAmount"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                    GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(decimal: Double, raw: String) {
                  self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var decimal: Double {
                  get {
                    return resultMap["decimal"]! as! Double
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimal")
                  }
                }

                public var raw: String {
                  get {
                    return resultMap["raw"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "raw")
                  }
                }
              }

              public struct NativePrice: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["CurrencyAmount"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                    GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                    GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(decimal: Double, raw: String, currency: Currency) {
                  self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var decimal: Double {
                  get {
                    return resultMap["decimal"]! as! Double
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimal")
                  }
                }

                public var raw: String {
                  get {
                    return resultMap["raw"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "raw")
                  }
                }

                public var currency: Currency {
                  get {
                    return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
                  }
                  set {
                    resultMap.updateValue(newValue.resultMap, forKey: "currency")
                  }
                }

                public struct Currency: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["Currency"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("address", type: .nonNull(.scalar(String.self))),
                      GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                      GraphQLField("name", type: .nonNull(.scalar(String.self))),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(address: String, decimals: Int, name: String) {
                    self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var address: String {
                    get {
                      return resultMap["address"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "address")
                    }
                  }

                  public var decimals: Int {
                    get {
                      return resultMap["decimals"]! as! Int
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "decimals")
                    }
                  }

                  public var name: String {
                    get {
                      return resultMap["name"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "name")
                    }
                  }
                }
              }

              public struct UsdcPrice: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["CurrencyAmount"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                    GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(decimal: Double, raw: String) {
                  self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var decimal: Double {
                  get {
                    return resultMap["decimal"]! as! Double
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimal")
                  }
                }

                public var raw: String {
                  get {
                    return resultMap["raw"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "raw")
                  }
                }
              }
            }
          }
        }
      }

      public var asV2AuctionEvent: AsV2AuctionEvent? {
        get {
          if !AsV2AuctionEvent.possibleTypes.contains(__typename) { return nil }
          return AsV2AuctionEvent(unsafeResultMap: resultMap)
        }
        set {
          guard let newValue = newValue else { return }
          resultMap = newValue.resultMap
        }
      }

      public struct AsV2AuctionEvent: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["V2AuctionEvent"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("v2AuctionEventType", type: .nonNull(.scalar(V2AuctionEventType.self))),
            GraphQLField("address", type: .nonNull(.scalar(String.self))),
            GraphQLField("auctionId", type: .nonNull(.scalar(Int.self))),
            GraphQLField("collectionAddress", type: .nonNull(.scalar(String.self))),
            GraphQLField("tokenId", type: .nonNull(.scalar(String.self))),
            GraphQLField("properties", type: .nonNull(.object(Property.selections))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(v2AuctionEventType: V2AuctionEventType, address: String, auctionId: Int, collectionAddress: String, tokenId: String, properties: Property) {
          self.init(unsafeResultMap: ["__typename": "V2AuctionEvent", "v2AuctionEventType": v2AuctionEventType, "address": address, "auctionId": auctionId, "collectionAddress": collectionAddress, "tokenId": tokenId, "properties": properties.resultMap])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var v2AuctionEventType: V2AuctionEventType {
          get {
            return resultMap["v2AuctionEventType"]! as! V2AuctionEventType
          }
          set {
            resultMap.updateValue(newValue, forKey: "v2AuctionEventType")
          }
        }

        public var address: String {
          get {
            return resultMap["address"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "address")
          }
        }

        public var auctionId: Int {
          get {
            return resultMap["auctionId"]! as! Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "auctionId")
          }
        }

        public var collectionAddress: String {
          get {
            return resultMap["collectionAddress"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "collectionAddress")
          }
        }

        public var tokenId: String {
          get {
            return resultMap["tokenId"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "tokenId")
          }
        }

        public var properties: Property {
          get {
            return Property(unsafeResultMap: resultMap["properties"]! as! ResultMap)
          }
          set {
            resultMap.updateValue(newValue.resultMap, forKey: "properties")
          }
        }

        public struct Property: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["V2AuctionBidEventProperties", "V2AuctionCreatedEventProperties", "V2AuctionCanceledEventProperties", "V2AuctionDurationExtendedEventProperties", "V2AuctionEndedEventProperties", "V2AuctionReservePriceUpdatedEventProperties", "V2AuctionApprovalUpdatedEventProperties"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLTypeCase(
                variants: ["V2AuctionBidEventProperties": AsV2AuctionBidEventProperties.selections, "V2AuctionCreatedEventProperties": AsV2AuctionCreatedEventProperties.selections, "V2AuctionCanceledEventProperties": AsV2AuctionCanceledEventProperties.selections, "V2AuctionDurationExtendedEventProperties": AsV2AuctionDurationExtendedEventProperties.selections, "V2AuctionEndedEventProperties": AsV2AuctionEndedEventProperties.selections, "V2AuctionReservePriceUpdatedEventProperties": AsV2AuctionReservePriceUpdatedEventProperties.selections, "V2AuctionApprovalUpdatedEventProperties": AsV2AuctionApprovalUpdatedEventProperties.selections],
                default: [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                ]
              )
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public static func makeV2AuctionBidEventProperties(sender: String, firstBid: Bool, extended: Bool, value: String, price: AsV2AuctionBidEventProperties.Price) -> Property {
            return Property(unsafeResultMap: ["__typename": "V2AuctionBidEventProperties", "sender": sender, "firstBid": firstBid, "extended": extended, "value": value, "price": price.resultMap])
          }

          public static func makeV2AuctionCreatedEventProperties(auctionCurrency: String, tokenOwner: String, curator: String, curatorFeePercentage: Int, duration: String, reservePrice: String, price: AsV2AuctionCreatedEventProperties.Price) -> Property {
            return Property(unsafeResultMap: ["__typename": "V2AuctionCreatedEventProperties", "auctionCurrency": auctionCurrency, "tokenOwner": tokenOwner, "curator": curator, "curatorFeePercentage": curatorFeePercentage, "duration": duration, "reservePrice": reservePrice, "price": price.resultMap])
          }

          public static func makeV2AuctionCanceledEventProperties(tokenOwner: String) -> Property {
            return Property(unsafeResultMap: ["__typename": "V2AuctionCanceledEventProperties", "tokenOwner": tokenOwner])
          }

          public static func makeV2AuctionDurationExtendedEventProperties(duration: String) -> Property {
            return Property(unsafeResultMap: ["__typename": "V2AuctionDurationExtendedEventProperties", "duration": duration])
          }

          public static func makeV2AuctionEndedEventProperties(tokenOwner: String, curator: String, winner: String, auctionCurrency: String, amount: String, curatorFee: String) -> Property {
            return Property(unsafeResultMap: ["__typename": "V2AuctionEndedEventProperties", "tokenOwner": tokenOwner, "curator": curator, "winner": winner, "auctionCurrency": auctionCurrency, "amount": amount, "curatorFee": curatorFee])
          }

          public static func makeV2AuctionReservePriceUpdatedEventProperties(reservePrice: String, price: AsV2AuctionReservePriceUpdatedEventProperties.Price) -> Property {
            return Property(unsafeResultMap: ["__typename": "V2AuctionReservePriceUpdatedEventProperties", "reservePrice": reservePrice, "price": price.resultMap])
          }

          public static func makeV2AuctionApprovalUpdatedEventProperties(approved: Bool) -> Property {
            return Property(unsafeResultMap: ["__typename": "V2AuctionApprovalUpdatedEventProperties", "approved": approved])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var fragments: Fragments {
            get {
              return Fragments(unsafeResultMap: resultMap)
            }
            set {
              resultMap += newValue.resultMap
            }
          }

          public struct Fragments {
            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public var v2AuctionEventPropertiesInfo: V2AuctionEventPropertiesInfo {
              get {
                return V2AuctionEventPropertiesInfo(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }
          }

          public var asV2AuctionBidEventProperties: AsV2AuctionBidEventProperties? {
            get {
              if !AsV2AuctionBidEventProperties.possibleTypes.contains(__typename) { return nil }
              return AsV2AuctionBidEventProperties(unsafeResultMap: resultMap)
            }
            set {
              guard let newValue = newValue else { return }
              resultMap = newValue.resultMap
            }
          }

          public struct AsV2AuctionBidEventProperties: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["V2AuctionBidEventProperties"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("sender", type: .nonNull(.scalar(String.self))),
                GraphQLField("firstBid", type: .nonNull(.scalar(Bool.self))),
                GraphQLField("extended", type: .nonNull(.scalar(Bool.self))),
                GraphQLField("value", type: .nonNull(.scalar(String.self))),
                GraphQLField("price", type: .nonNull(.object(Price.selections))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("sender", type: .nonNull(.scalar(String.self))),
                GraphQLField("firstBid", type: .nonNull(.scalar(Bool.self))),
                GraphQLField("extended", type: .nonNull(.scalar(Bool.self))),
                GraphQLField("value", type: .nonNull(.scalar(String.self))),
                GraphQLField("price", type: .nonNull(.object(Price.selections))),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(sender: String, firstBid: Bool, extended: Bool, value: String, price: Price) {
              self.init(unsafeResultMap: ["__typename": "V2AuctionBidEventProperties", "sender": sender, "firstBid": firstBid, "extended": extended, "value": value, "price": price.resultMap])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var sender: String {
              get {
                return resultMap["sender"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "sender")
              }
            }

            public var firstBid: Bool {
              get {
                return resultMap["firstBid"]! as! Bool
              }
              set {
                resultMap.updateValue(newValue, forKey: "firstBid")
              }
            }

            public var extended: Bool {
              get {
                return resultMap["extended"]! as! Bool
              }
              set {
                resultMap.updateValue(newValue, forKey: "extended")
              }
            }

            public var value: String {
              get {
                return resultMap["value"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "value")
              }
            }

            public var price: Price {
              get {
                return Price(unsafeResultMap: resultMap["price"]! as! ResultMap)
              }
              set {
                resultMap.updateValue(newValue.resultMap, forKey: "price")
              }
            }

            public var fragments: Fragments {
              get {
                return Fragments(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }

            public struct Fragments {
              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public var v2AuctionEventPropertiesInfo: V2AuctionEventPropertiesInfo {
                get {
                  return V2AuctionEventPropertiesInfo(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }
            }

            public struct Price: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["PriceAtTime"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                  GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
                  GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
                  GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
                self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var blockNumber: Int {
                get {
                  return resultMap["blockNumber"]! as! Int
                }
                set {
                  resultMap.updateValue(newValue, forKey: "blockNumber")
                }
              }

              public var chainTokenPrice: ChainTokenPrice? {
                get {
                  return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
                }
                set {
                  resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
                }
              }

              public var nativePrice: NativePrice {
                get {
                  return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
                }
                set {
                  resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
                }
              }

              public var usdcPrice: UsdcPrice? {
                get {
                  return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
                }
                set {
                  resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
                }
              }

              public var fragments: Fragments {
                get {
                  return Fragments(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }

              public struct Fragments {
                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public var priceSummary: PriceSummary {
                  get {
                    return PriceSummary(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }
              }

              public struct ChainTokenPrice: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["CurrencyAmount"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                    GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(decimal: Double, raw: String) {
                  self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var decimal: Double {
                  get {
                    return resultMap["decimal"]! as! Double
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimal")
                  }
                }

                public var raw: String {
                  get {
                    return resultMap["raw"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "raw")
                  }
                }
              }

              public struct NativePrice: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["CurrencyAmount"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                    GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                    GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(decimal: Double, raw: String, currency: Currency) {
                  self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var decimal: Double {
                  get {
                    return resultMap["decimal"]! as! Double
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimal")
                  }
                }

                public var raw: String {
                  get {
                    return resultMap["raw"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "raw")
                  }
                }

                public var currency: Currency {
                  get {
                    return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
                  }
                  set {
                    resultMap.updateValue(newValue.resultMap, forKey: "currency")
                  }
                }

                public struct Currency: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["Currency"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("address", type: .nonNull(.scalar(String.self))),
                      GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                      GraphQLField("name", type: .nonNull(.scalar(String.self))),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(address: String, decimals: Int, name: String) {
                    self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var address: String {
                    get {
                      return resultMap["address"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "address")
                    }
                  }

                  public var decimals: Int {
                    get {
                      return resultMap["decimals"]! as! Int
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "decimals")
                    }
                  }

                  public var name: String {
                    get {
                      return resultMap["name"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "name")
                    }
                  }
                }
              }

              public struct UsdcPrice: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["CurrencyAmount"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                    GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(decimal: Double, raw: String) {
                  self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var decimal: Double {
                  get {
                    return resultMap["decimal"]! as! Double
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimal")
                  }
                }

                public var raw: String {
                  get {
                    return resultMap["raw"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "raw")
                  }
                }
              }
            }
          }

          public var asV2AuctionCreatedEventProperties: AsV2AuctionCreatedEventProperties? {
            get {
              if !AsV2AuctionCreatedEventProperties.possibleTypes.contains(__typename) { return nil }
              return AsV2AuctionCreatedEventProperties(unsafeResultMap: resultMap)
            }
            set {
              guard let newValue = newValue else { return }
              resultMap = newValue.resultMap
            }
          }

          public struct AsV2AuctionCreatedEventProperties: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["V2AuctionCreatedEventProperties"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("auctionCurrency", type: .nonNull(.scalar(String.self))),
                GraphQLField("tokenOwner", type: .nonNull(.scalar(String.self))),
                GraphQLField("curator", type: .nonNull(.scalar(String.self))),
                GraphQLField("curatorFeePercentage", type: .nonNull(.scalar(Int.self))),
                GraphQLField("duration", type: .nonNull(.scalar(String.self))),
                GraphQLField("reservePrice", type: .nonNull(.scalar(String.self))),
                GraphQLField("price", type: .nonNull(.object(Price.selections))),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(auctionCurrency: String, tokenOwner: String, curator: String, curatorFeePercentage: Int, duration: String, reservePrice: String, price: Price) {
              self.init(unsafeResultMap: ["__typename": "V2AuctionCreatedEventProperties", "auctionCurrency": auctionCurrency, "tokenOwner": tokenOwner, "curator": curator, "curatorFeePercentage": curatorFeePercentage, "duration": duration, "reservePrice": reservePrice, "price": price.resultMap])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var auctionCurrency: String {
              get {
                return resultMap["auctionCurrency"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "auctionCurrency")
              }
            }

            public var tokenOwner: String {
              get {
                return resultMap["tokenOwner"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "tokenOwner")
              }
            }

            public var curator: String {
              get {
                return resultMap["curator"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "curator")
              }
            }

            public var curatorFeePercentage: Int {
              get {
                return resultMap["curatorFeePercentage"]! as! Int
              }
              set {
                resultMap.updateValue(newValue, forKey: "curatorFeePercentage")
              }
            }

            public var duration: String {
              get {
                return resultMap["duration"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "duration")
              }
            }

            public var reservePrice: String {
              get {
                return resultMap["reservePrice"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "reservePrice")
              }
            }

            public var price: Price {
              get {
                return Price(unsafeResultMap: resultMap["price"]! as! ResultMap)
              }
              set {
                resultMap.updateValue(newValue.resultMap, forKey: "price")
              }
            }

            public var fragments: Fragments {
              get {
                return Fragments(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }

            public struct Fragments {
              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public var v2AuctionEventPropertiesInfo: V2AuctionEventPropertiesInfo {
                get {
                  return V2AuctionEventPropertiesInfo(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }
            }

            public struct Price: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["PriceAtTime"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                  GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
                  GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
                  GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
                self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var blockNumber: Int {
                get {
                  return resultMap["blockNumber"]! as! Int
                }
                set {
                  resultMap.updateValue(newValue, forKey: "blockNumber")
                }
              }

              public var chainTokenPrice: ChainTokenPrice? {
                get {
                  return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
                }
                set {
                  resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
                }
              }

              public var nativePrice: NativePrice {
                get {
                  return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
                }
                set {
                  resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
                }
              }

              public var usdcPrice: UsdcPrice? {
                get {
                  return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
                }
                set {
                  resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
                }
              }

              public var fragments: Fragments {
                get {
                  return Fragments(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }

              public struct Fragments {
                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public var priceSummary: PriceSummary {
                  get {
                    return PriceSummary(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }
              }

              public struct ChainTokenPrice: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["CurrencyAmount"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                    GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(decimal: Double, raw: String) {
                  self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var decimal: Double {
                  get {
                    return resultMap["decimal"]! as! Double
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimal")
                  }
                }

                public var raw: String {
                  get {
                    return resultMap["raw"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "raw")
                  }
                }
              }

              public struct NativePrice: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["CurrencyAmount"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                    GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                    GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(decimal: Double, raw: String, currency: Currency) {
                  self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var decimal: Double {
                  get {
                    return resultMap["decimal"]! as! Double
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimal")
                  }
                }

                public var raw: String {
                  get {
                    return resultMap["raw"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "raw")
                  }
                }

                public var currency: Currency {
                  get {
                    return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
                  }
                  set {
                    resultMap.updateValue(newValue.resultMap, forKey: "currency")
                  }
                }

                public struct Currency: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["Currency"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("address", type: .nonNull(.scalar(String.self))),
                      GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                      GraphQLField("name", type: .nonNull(.scalar(String.self))),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(address: String, decimals: Int, name: String) {
                    self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var address: String {
                    get {
                      return resultMap["address"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "address")
                    }
                  }

                  public var decimals: Int {
                    get {
                      return resultMap["decimals"]! as! Int
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "decimals")
                    }
                  }

                  public var name: String {
                    get {
                      return resultMap["name"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "name")
                    }
                  }
                }
              }

              public struct UsdcPrice: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["CurrencyAmount"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                    GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(decimal: Double, raw: String) {
                  self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var decimal: Double {
                  get {
                    return resultMap["decimal"]! as! Double
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimal")
                  }
                }

                public var raw: String {
                  get {
                    return resultMap["raw"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "raw")
                  }
                }
              }
            }
          }

          public var asV2AuctionCanceledEventProperties: AsV2AuctionCanceledEventProperties? {
            get {
              if !AsV2AuctionCanceledEventProperties.possibleTypes.contains(__typename) { return nil }
              return AsV2AuctionCanceledEventProperties(unsafeResultMap: resultMap)
            }
            set {
              guard let newValue = newValue else { return }
              resultMap = newValue.resultMap
            }
          }

          public struct AsV2AuctionCanceledEventProperties: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["V2AuctionCanceledEventProperties"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("tokenOwner", type: .nonNull(.scalar(String.self))),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(tokenOwner: String) {
              self.init(unsafeResultMap: ["__typename": "V2AuctionCanceledEventProperties", "tokenOwner": tokenOwner])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var tokenOwner: String {
              get {
                return resultMap["tokenOwner"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "tokenOwner")
              }
            }

            public var fragments: Fragments {
              get {
                return Fragments(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }

            public struct Fragments {
              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public var v2AuctionEventPropertiesInfo: V2AuctionEventPropertiesInfo {
                get {
                  return V2AuctionEventPropertiesInfo(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }
            }
          }

          public var asV2AuctionDurationExtendedEventProperties: AsV2AuctionDurationExtendedEventProperties? {
            get {
              if !AsV2AuctionDurationExtendedEventProperties.possibleTypes.contains(__typename) { return nil }
              return AsV2AuctionDurationExtendedEventProperties(unsafeResultMap: resultMap)
            }
            set {
              guard let newValue = newValue else { return }
              resultMap = newValue.resultMap
            }
          }

          public struct AsV2AuctionDurationExtendedEventProperties: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["V2AuctionDurationExtendedEventProperties"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("duration", type: .nonNull(.scalar(String.self))),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(duration: String) {
              self.init(unsafeResultMap: ["__typename": "V2AuctionDurationExtendedEventProperties", "duration": duration])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var duration: String {
              get {
                return resultMap["duration"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "duration")
              }
            }

            public var fragments: Fragments {
              get {
                return Fragments(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }

            public struct Fragments {
              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public var v2AuctionEventPropertiesInfo: V2AuctionEventPropertiesInfo {
                get {
                  return V2AuctionEventPropertiesInfo(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }
            }
          }

          public var asV2AuctionEndedEventProperties: AsV2AuctionEndedEventProperties? {
            get {
              if !AsV2AuctionEndedEventProperties.possibleTypes.contains(__typename) { return nil }
              return AsV2AuctionEndedEventProperties(unsafeResultMap: resultMap)
            }
            set {
              guard let newValue = newValue else { return }
              resultMap = newValue.resultMap
            }
          }

          public struct AsV2AuctionEndedEventProperties: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["V2AuctionEndedEventProperties"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("tokenOwner", type: .nonNull(.scalar(String.self))),
                GraphQLField("curator", type: .nonNull(.scalar(String.self))),
                GraphQLField("winner", type: .nonNull(.scalar(String.self))),
                GraphQLField("auctionCurrency", type: .nonNull(.scalar(String.self))),
                GraphQLField("amount", type: .nonNull(.scalar(String.self))),
                GraphQLField("curatorFee", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("tokenOwner", type: .nonNull(.scalar(String.self))),
                GraphQLField("curator", type: .nonNull(.scalar(String.self))),
                GraphQLField("winner", type: .nonNull(.scalar(String.self))),
                GraphQLField("auctionCurrency", type: .nonNull(.scalar(String.self))),
                GraphQLField("amount", type: .nonNull(.scalar(String.self))),
                GraphQLField("curatorFee", type: .nonNull(.scalar(String.self))),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(tokenOwner: String, curator: String, winner: String, auctionCurrency: String, amount: String, curatorFee: String) {
              self.init(unsafeResultMap: ["__typename": "V2AuctionEndedEventProperties", "tokenOwner": tokenOwner, "curator": curator, "winner": winner, "auctionCurrency": auctionCurrency, "amount": amount, "curatorFee": curatorFee])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var tokenOwner: String {
              get {
                return resultMap["tokenOwner"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "tokenOwner")
              }
            }

            public var curator: String {
              get {
                return resultMap["curator"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "curator")
              }
            }

            public var winner: String {
              get {
                return resultMap["winner"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "winner")
              }
            }

            public var auctionCurrency: String {
              get {
                return resultMap["auctionCurrency"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "auctionCurrency")
              }
            }

            public var amount: String {
              get {
                return resultMap["amount"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "amount")
              }
            }

            public var curatorFee: String {
              get {
                return resultMap["curatorFee"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "curatorFee")
              }
            }

            public var fragments: Fragments {
              get {
                return Fragments(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }

            public struct Fragments {
              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public var v2AuctionEventPropertiesInfo: V2AuctionEventPropertiesInfo {
                get {
                  return V2AuctionEventPropertiesInfo(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }
            }
          }

          public var asV2AuctionReservePriceUpdatedEventProperties: AsV2AuctionReservePriceUpdatedEventProperties? {
            get {
              if !AsV2AuctionReservePriceUpdatedEventProperties.possibleTypes.contains(__typename) { return nil }
              return AsV2AuctionReservePriceUpdatedEventProperties(unsafeResultMap: resultMap)
            }
            set {
              guard let newValue = newValue else { return }
              resultMap = newValue.resultMap
            }
          }

          public struct AsV2AuctionReservePriceUpdatedEventProperties: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["V2AuctionReservePriceUpdatedEventProperties"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("reservePrice", type: .nonNull(.scalar(String.self))),
                GraphQLField("price", type: .nonNull(.object(Price.selections))),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(reservePrice: String, price: Price) {
              self.init(unsafeResultMap: ["__typename": "V2AuctionReservePriceUpdatedEventProperties", "reservePrice": reservePrice, "price": price.resultMap])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var reservePrice: String {
              get {
                return resultMap["reservePrice"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "reservePrice")
              }
            }

            public var price: Price {
              get {
                return Price(unsafeResultMap: resultMap["price"]! as! ResultMap)
              }
              set {
                resultMap.updateValue(newValue.resultMap, forKey: "price")
              }
            }

            public var fragments: Fragments {
              get {
                return Fragments(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }

            public struct Fragments {
              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public var v2AuctionEventPropertiesInfo: V2AuctionEventPropertiesInfo {
                get {
                  return V2AuctionEventPropertiesInfo(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }
            }

            public struct Price: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["PriceAtTime"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                  GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
                  GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
                  GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
                self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var blockNumber: Int {
                get {
                  return resultMap["blockNumber"]! as! Int
                }
                set {
                  resultMap.updateValue(newValue, forKey: "blockNumber")
                }
              }

              public var chainTokenPrice: ChainTokenPrice? {
                get {
                  return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
                }
                set {
                  resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
                }
              }

              public var nativePrice: NativePrice {
                get {
                  return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
                }
                set {
                  resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
                }
              }

              public var usdcPrice: UsdcPrice? {
                get {
                  return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
                }
                set {
                  resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
                }
              }

              public var fragments: Fragments {
                get {
                  return Fragments(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }

              public struct Fragments {
                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public var priceSummary: PriceSummary {
                  get {
                    return PriceSummary(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }
              }

              public struct ChainTokenPrice: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["CurrencyAmount"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                    GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(decimal: Double, raw: String) {
                  self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var decimal: Double {
                  get {
                    return resultMap["decimal"]! as! Double
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimal")
                  }
                }

                public var raw: String {
                  get {
                    return resultMap["raw"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "raw")
                  }
                }
              }

              public struct NativePrice: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["CurrencyAmount"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                    GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                    GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(decimal: Double, raw: String, currency: Currency) {
                  self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var decimal: Double {
                  get {
                    return resultMap["decimal"]! as! Double
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimal")
                  }
                }

                public var raw: String {
                  get {
                    return resultMap["raw"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "raw")
                  }
                }

                public var currency: Currency {
                  get {
                    return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
                  }
                  set {
                    resultMap.updateValue(newValue.resultMap, forKey: "currency")
                  }
                }

                public struct Currency: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["Currency"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("address", type: .nonNull(.scalar(String.self))),
                      GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                      GraphQLField("name", type: .nonNull(.scalar(String.self))),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(address: String, decimals: Int, name: String) {
                    self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var address: String {
                    get {
                      return resultMap["address"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "address")
                    }
                  }

                  public var decimals: Int {
                    get {
                      return resultMap["decimals"]! as! Int
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "decimals")
                    }
                  }

                  public var name: String {
                    get {
                      return resultMap["name"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "name")
                    }
                  }
                }
              }

              public struct UsdcPrice: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["CurrencyAmount"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                    GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(decimal: Double, raw: String) {
                  self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var decimal: Double {
                  get {
                    return resultMap["decimal"]! as! Double
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimal")
                  }
                }

                public var raw: String {
                  get {
                    return resultMap["raw"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "raw")
                  }
                }
              }
            }
          }

          public var asV2AuctionApprovalUpdatedEventProperties: AsV2AuctionApprovalUpdatedEventProperties? {
            get {
              if !AsV2AuctionApprovalUpdatedEventProperties.possibleTypes.contains(__typename) { return nil }
              return AsV2AuctionApprovalUpdatedEventProperties(unsafeResultMap: resultMap)
            }
            set {
              guard let newValue = newValue else { return }
              resultMap = newValue.resultMap
            }
          }

          public struct AsV2AuctionApprovalUpdatedEventProperties: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["V2AuctionApprovalUpdatedEventProperties"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("approved", type: .nonNull(.scalar(Bool.self))),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(approved: Bool) {
              self.init(unsafeResultMap: ["__typename": "V2AuctionApprovalUpdatedEventProperties", "approved": approved])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var approved: Bool {
              get {
                return resultMap["approved"]! as! Bool
              }
              set {
                resultMap.updateValue(newValue, forKey: "approved")
              }
            }

            public var fragments: Fragments {
              get {
                return Fragments(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }

            public struct Fragments {
              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public var v2AuctionEventPropertiesInfo: V2AuctionEventPropertiesInfo {
                get {
                  return V2AuctionEventPropertiesInfo(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }
            }
          }
        }
      }

      public var asV3AskEvent: AsV3AskEvent? {
        get {
          if !AsV3AskEvent.possibleTypes.contains(__typename) { return nil }
          return AsV3AskEvent(unsafeResultMap: resultMap)
        }
        set {
          guard let newValue = newValue else { return }
          resultMap = newValue.resultMap
        }
      }

      public struct AsV3AskEvent: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["V3AskEvent"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("v3AskEventType", type: .nonNull(.scalar(V3AskEventType.self))),
            GraphQLField("address", type: .nonNull(.scalar(String.self))),
            GraphQLField("collectionAddress", type: .nonNull(.scalar(String.self))),
            GraphQLField("tokenId", type: .nonNull(.scalar(String.self))),
            GraphQLField("properties", type: .nonNull(.object(Property.selections))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(v3AskEventType: V3AskEventType, address: String, collectionAddress: String, tokenId: String, properties: Property) {
          self.init(unsafeResultMap: ["__typename": "V3AskEvent", "v3AskEventType": v3AskEventType, "address": address, "collectionAddress": collectionAddress, "tokenId": tokenId, "properties": properties.resultMap])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var v3AskEventType: V3AskEventType {
          get {
            return resultMap["v3AskEventType"]! as! V3AskEventType
          }
          set {
            resultMap.updateValue(newValue, forKey: "v3AskEventType")
          }
        }

        public var address: String {
          get {
            return resultMap["address"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "address")
          }
        }

        public var collectionAddress: String {
          get {
            return resultMap["collectionAddress"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "collectionAddress")
          }
        }

        public var tokenId: String {
          get {
            return resultMap["tokenId"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "tokenId")
          }
        }

        public var properties: Property {
          get {
            return Property(unsafeResultMap: resultMap["properties"]! as! ResultMap)
          }
          set {
            resultMap.updateValue(newValue.resultMap, forKey: "properties")
          }
        }

        public struct Property: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["V3AskCreatedEventProperties", "V3AskCanceledEventProperties", "V3AskPriceUpdatedEventProperties", "V3AskFilledEventProperties"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLTypeCase(
                variants: ["V3AskCreatedEventProperties": AsV3AskCreatedEventProperties.selections, "V3AskCanceledEventProperties": AsV3AskCanceledEventProperties.selections, "V3AskPriceUpdatedEventProperties": AsV3AskPriceUpdatedEventProperties.selections, "V3AskFilledEventProperties": AsV3AskFilledEventProperties.selections],
                default: [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                ]
              )
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public static func makeV3AskCreatedEventProperties(seller: String, sellerFundsRecipient: String, askCurrency: String, askPrice: String, findersFeeBps: Int, price: AsV3AskCreatedEventProperties.Price) -> Property {
            return Property(unsafeResultMap: ["__typename": "V3AskCreatedEventProperties", "seller": seller, "sellerFundsRecipient": sellerFundsRecipient, "askCurrency": askCurrency, "askPrice": askPrice, "findersFeeBps": findersFeeBps, "price": price.resultMap])
          }

          public static func makeV3AskCanceledEventProperties(seller: String, sellerFundsRecipient: String, askCurrency: String, askPrice: String, findersFeeBps: Int, price: AsV3AskCanceledEventProperties.Price) -> Property {
            return Property(unsafeResultMap: ["__typename": "V3AskCanceledEventProperties", "seller": seller, "sellerFundsRecipient": sellerFundsRecipient, "askCurrency": askCurrency, "askPrice": askPrice, "findersFeeBps": findersFeeBps, "price": price.resultMap])
          }

          public static func makeV3AskPriceUpdatedEventProperties(seller: String, sellerFundsRecipient: String, askCurrency: String, askPrice: String, findersFeeBps: Int, price: AsV3AskPriceUpdatedEventProperties.Price) -> Property {
            return Property(unsafeResultMap: ["__typename": "V3AskPriceUpdatedEventProperties", "seller": seller, "sellerFundsRecipient": sellerFundsRecipient, "askCurrency": askCurrency, "askPrice": askPrice, "findersFeeBps": findersFeeBps, "price": price.resultMap])
          }

          public static func makeV3AskFilledEventProperties(seller: String, sellerFundsRecipient: String, askCurrency: String, askPrice: String, findersFeeBps: Int, price: AsV3AskFilledEventProperties.Price, finder: String, buyer: String) -> Property {
            return Property(unsafeResultMap: ["__typename": "V3AskFilledEventProperties", "seller": seller, "sellerFundsRecipient": sellerFundsRecipient, "askCurrency": askCurrency, "askPrice": askPrice, "findersFeeBps": findersFeeBps, "price": price.resultMap, "finder": finder, "buyer": buyer])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var fragments: Fragments {
            get {
              return Fragments(unsafeResultMap: resultMap)
            }
            set {
              resultMap += newValue.resultMap
            }
          }

          public struct Fragments {
            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public var v3AskEventPropertiesInfo: V3AskEventPropertiesInfo {
              get {
                return V3AskEventPropertiesInfo(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }
          }

          public var asV3AskCreatedEventProperties: AsV3AskCreatedEventProperties? {
            get {
              if !AsV3AskCreatedEventProperties.possibleTypes.contains(__typename) { return nil }
              return AsV3AskCreatedEventProperties(unsafeResultMap: resultMap)
            }
            set {
              guard let newValue = newValue else { return }
              resultMap = newValue.resultMap
            }
          }

          public struct AsV3AskCreatedEventProperties: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["V3AskCreatedEventProperties"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("seller", type: .nonNull(.scalar(String.self))),
                GraphQLField("sellerFundsRecipient", type: .nonNull(.scalar(String.self))),
                GraphQLField("askCurrency", type: .nonNull(.scalar(String.self))),
                GraphQLField("askPrice", type: .nonNull(.scalar(String.self))),
                GraphQLField("findersFeeBps", type: .nonNull(.scalar(Int.self))),
                GraphQLField("price", type: .nonNull(.object(Price.selections))),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(seller: String, sellerFundsRecipient: String, askCurrency: String, askPrice: String, findersFeeBps: Int, price: Price) {
              self.init(unsafeResultMap: ["__typename": "V3AskCreatedEventProperties", "seller": seller, "sellerFundsRecipient": sellerFundsRecipient, "askCurrency": askCurrency, "askPrice": askPrice, "findersFeeBps": findersFeeBps, "price": price.resultMap])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var seller: String {
              get {
                return resultMap["seller"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "seller")
              }
            }

            public var sellerFundsRecipient: String {
              get {
                return resultMap["sellerFundsRecipient"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "sellerFundsRecipient")
              }
            }

            public var askCurrency: String {
              get {
                return resultMap["askCurrency"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "askCurrency")
              }
            }

            public var askPrice: String {
              get {
                return resultMap["askPrice"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "askPrice")
              }
            }

            public var findersFeeBps: Int {
              get {
                return resultMap["findersFeeBps"]! as! Int
              }
              set {
                resultMap.updateValue(newValue, forKey: "findersFeeBps")
              }
            }

            public var price: Price {
              get {
                return Price(unsafeResultMap: resultMap["price"]! as! ResultMap)
              }
              set {
                resultMap.updateValue(newValue.resultMap, forKey: "price")
              }
            }

            public var fragments: Fragments {
              get {
                return Fragments(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }

            public struct Fragments {
              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public var v3AskEventPropertiesInfo: V3AskEventPropertiesInfo {
                get {
                  return V3AskEventPropertiesInfo(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }
            }

            public struct Price: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["PriceAtTime"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                  GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
                  GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
                  GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
                self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var blockNumber: Int {
                get {
                  return resultMap["blockNumber"]! as! Int
                }
                set {
                  resultMap.updateValue(newValue, forKey: "blockNumber")
                }
              }

              public var chainTokenPrice: ChainTokenPrice? {
                get {
                  return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
                }
                set {
                  resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
                }
              }

              public var nativePrice: NativePrice {
                get {
                  return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
                }
                set {
                  resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
                }
              }

              public var usdcPrice: UsdcPrice? {
                get {
                  return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
                }
                set {
                  resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
                }
              }

              public var fragments: Fragments {
                get {
                  return Fragments(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }

              public struct Fragments {
                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public var priceSummary: PriceSummary {
                  get {
                    return PriceSummary(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }
              }

              public struct ChainTokenPrice: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["CurrencyAmount"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                    GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(decimal: Double, raw: String) {
                  self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var decimal: Double {
                  get {
                    return resultMap["decimal"]! as! Double
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimal")
                  }
                }

                public var raw: String {
                  get {
                    return resultMap["raw"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "raw")
                  }
                }
              }

              public struct NativePrice: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["CurrencyAmount"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                    GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                    GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(decimal: Double, raw: String, currency: Currency) {
                  self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var decimal: Double {
                  get {
                    return resultMap["decimal"]! as! Double
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimal")
                  }
                }

                public var raw: String {
                  get {
                    return resultMap["raw"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "raw")
                  }
                }

                public var currency: Currency {
                  get {
                    return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
                  }
                  set {
                    resultMap.updateValue(newValue.resultMap, forKey: "currency")
                  }
                }

                public struct Currency: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["Currency"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("address", type: .nonNull(.scalar(String.self))),
                      GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                      GraphQLField("name", type: .nonNull(.scalar(String.self))),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(address: String, decimals: Int, name: String) {
                    self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var address: String {
                    get {
                      return resultMap["address"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "address")
                    }
                  }

                  public var decimals: Int {
                    get {
                      return resultMap["decimals"]! as! Int
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "decimals")
                    }
                  }

                  public var name: String {
                    get {
                      return resultMap["name"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "name")
                    }
                  }
                }
              }

              public struct UsdcPrice: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["CurrencyAmount"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                    GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(decimal: Double, raw: String) {
                  self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var decimal: Double {
                  get {
                    return resultMap["decimal"]! as! Double
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimal")
                  }
                }

                public var raw: String {
                  get {
                    return resultMap["raw"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "raw")
                  }
                }
              }
            }
          }

          public var asV3AskCanceledEventProperties: AsV3AskCanceledEventProperties? {
            get {
              if !AsV3AskCanceledEventProperties.possibleTypes.contains(__typename) { return nil }
              return AsV3AskCanceledEventProperties(unsafeResultMap: resultMap)
            }
            set {
              guard let newValue = newValue else { return }
              resultMap = newValue.resultMap
            }
          }

          public struct AsV3AskCanceledEventProperties: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["V3AskCanceledEventProperties"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("seller", type: .nonNull(.scalar(String.self))),
                GraphQLField("sellerFundsRecipient", type: .nonNull(.scalar(String.self))),
                GraphQLField("askCurrency", type: .nonNull(.scalar(String.self))),
                GraphQLField("askPrice", type: .nonNull(.scalar(String.self))),
                GraphQLField("findersFeeBps", type: .nonNull(.scalar(Int.self))),
                GraphQLField("price", type: .nonNull(.object(Price.selections))),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(seller: String, sellerFundsRecipient: String, askCurrency: String, askPrice: String, findersFeeBps: Int, price: Price) {
              self.init(unsafeResultMap: ["__typename": "V3AskCanceledEventProperties", "seller": seller, "sellerFundsRecipient": sellerFundsRecipient, "askCurrency": askCurrency, "askPrice": askPrice, "findersFeeBps": findersFeeBps, "price": price.resultMap])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var seller: String {
              get {
                return resultMap["seller"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "seller")
              }
            }

            public var sellerFundsRecipient: String {
              get {
                return resultMap["sellerFundsRecipient"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "sellerFundsRecipient")
              }
            }

            public var askCurrency: String {
              get {
                return resultMap["askCurrency"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "askCurrency")
              }
            }

            public var askPrice: String {
              get {
                return resultMap["askPrice"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "askPrice")
              }
            }

            public var findersFeeBps: Int {
              get {
                return resultMap["findersFeeBps"]! as! Int
              }
              set {
                resultMap.updateValue(newValue, forKey: "findersFeeBps")
              }
            }

            public var price: Price {
              get {
                return Price(unsafeResultMap: resultMap["price"]! as! ResultMap)
              }
              set {
                resultMap.updateValue(newValue.resultMap, forKey: "price")
              }
            }

            public var fragments: Fragments {
              get {
                return Fragments(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }

            public struct Fragments {
              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public var v3AskEventPropertiesInfo: V3AskEventPropertiesInfo {
                get {
                  return V3AskEventPropertiesInfo(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }
            }

            public struct Price: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["PriceAtTime"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                  GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
                  GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
                  GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
                self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var blockNumber: Int {
                get {
                  return resultMap["blockNumber"]! as! Int
                }
                set {
                  resultMap.updateValue(newValue, forKey: "blockNumber")
                }
              }

              public var chainTokenPrice: ChainTokenPrice? {
                get {
                  return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
                }
                set {
                  resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
                }
              }

              public var nativePrice: NativePrice {
                get {
                  return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
                }
                set {
                  resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
                }
              }

              public var usdcPrice: UsdcPrice? {
                get {
                  return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
                }
                set {
                  resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
                }
              }

              public var fragments: Fragments {
                get {
                  return Fragments(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }

              public struct Fragments {
                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public var priceSummary: PriceSummary {
                  get {
                    return PriceSummary(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }
              }

              public struct ChainTokenPrice: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["CurrencyAmount"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                    GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(decimal: Double, raw: String) {
                  self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var decimal: Double {
                  get {
                    return resultMap["decimal"]! as! Double
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimal")
                  }
                }

                public var raw: String {
                  get {
                    return resultMap["raw"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "raw")
                  }
                }
              }

              public struct NativePrice: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["CurrencyAmount"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                    GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                    GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(decimal: Double, raw: String, currency: Currency) {
                  self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var decimal: Double {
                  get {
                    return resultMap["decimal"]! as! Double
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimal")
                  }
                }

                public var raw: String {
                  get {
                    return resultMap["raw"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "raw")
                  }
                }

                public var currency: Currency {
                  get {
                    return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
                  }
                  set {
                    resultMap.updateValue(newValue.resultMap, forKey: "currency")
                  }
                }

                public struct Currency: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["Currency"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("address", type: .nonNull(.scalar(String.self))),
                      GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                      GraphQLField("name", type: .nonNull(.scalar(String.self))),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(address: String, decimals: Int, name: String) {
                    self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var address: String {
                    get {
                      return resultMap["address"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "address")
                    }
                  }

                  public var decimals: Int {
                    get {
                      return resultMap["decimals"]! as! Int
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "decimals")
                    }
                  }

                  public var name: String {
                    get {
                      return resultMap["name"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "name")
                    }
                  }
                }
              }

              public struct UsdcPrice: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["CurrencyAmount"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                    GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(decimal: Double, raw: String) {
                  self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var decimal: Double {
                  get {
                    return resultMap["decimal"]! as! Double
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimal")
                  }
                }

                public var raw: String {
                  get {
                    return resultMap["raw"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "raw")
                  }
                }
              }
            }
          }

          public var asV3AskPriceUpdatedEventProperties: AsV3AskPriceUpdatedEventProperties? {
            get {
              if !AsV3AskPriceUpdatedEventProperties.possibleTypes.contains(__typename) { return nil }
              return AsV3AskPriceUpdatedEventProperties(unsafeResultMap: resultMap)
            }
            set {
              guard let newValue = newValue else { return }
              resultMap = newValue.resultMap
            }
          }

          public struct AsV3AskPriceUpdatedEventProperties: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["V3AskPriceUpdatedEventProperties"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("seller", type: .nonNull(.scalar(String.self))),
                GraphQLField("sellerFundsRecipient", type: .nonNull(.scalar(String.self))),
                GraphQLField("askCurrency", type: .nonNull(.scalar(String.self))),
                GraphQLField("askPrice", type: .nonNull(.scalar(String.self))),
                GraphQLField("findersFeeBps", type: .nonNull(.scalar(Int.self))),
                GraphQLField("price", type: .nonNull(.object(Price.selections))),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(seller: String, sellerFundsRecipient: String, askCurrency: String, askPrice: String, findersFeeBps: Int, price: Price) {
              self.init(unsafeResultMap: ["__typename": "V3AskPriceUpdatedEventProperties", "seller": seller, "sellerFundsRecipient": sellerFundsRecipient, "askCurrency": askCurrency, "askPrice": askPrice, "findersFeeBps": findersFeeBps, "price": price.resultMap])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var seller: String {
              get {
                return resultMap["seller"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "seller")
              }
            }

            public var sellerFundsRecipient: String {
              get {
                return resultMap["sellerFundsRecipient"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "sellerFundsRecipient")
              }
            }

            public var askCurrency: String {
              get {
                return resultMap["askCurrency"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "askCurrency")
              }
            }

            public var askPrice: String {
              get {
                return resultMap["askPrice"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "askPrice")
              }
            }

            public var findersFeeBps: Int {
              get {
                return resultMap["findersFeeBps"]! as! Int
              }
              set {
                resultMap.updateValue(newValue, forKey: "findersFeeBps")
              }
            }

            public var price: Price {
              get {
                return Price(unsafeResultMap: resultMap["price"]! as! ResultMap)
              }
              set {
                resultMap.updateValue(newValue.resultMap, forKey: "price")
              }
            }

            public var fragments: Fragments {
              get {
                return Fragments(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }

            public struct Fragments {
              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public var v3AskEventPropertiesInfo: V3AskEventPropertiesInfo {
                get {
                  return V3AskEventPropertiesInfo(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }
            }

            public struct Price: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["PriceAtTime"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                  GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
                  GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
                  GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
                self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var blockNumber: Int {
                get {
                  return resultMap["blockNumber"]! as! Int
                }
                set {
                  resultMap.updateValue(newValue, forKey: "blockNumber")
                }
              }

              public var chainTokenPrice: ChainTokenPrice? {
                get {
                  return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
                }
                set {
                  resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
                }
              }

              public var nativePrice: NativePrice {
                get {
                  return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
                }
                set {
                  resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
                }
              }

              public var usdcPrice: UsdcPrice? {
                get {
                  return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
                }
                set {
                  resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
                }
              }

              public var fragments: Fragments {
                get {
                  return Fragments(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }

              public struct Fragments {
                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public var priceSummary: PriceSummary {
                  get {
                    return PriceSummary(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }
              }

              public struct ChainTokenPrice: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["CurrencyAmount"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                    GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(decimal: Double, raw: String) {
                  self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var decimal: Double {
                  get {
                    return resultMap["decimal"]! as! Double
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimal")
                  }
                }

                public var raw: String {
                  get {
                    return resultMap["raw"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "raw")
                  }
                }
              }

              public struct NativePrice: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["CurrencyAmount"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                    GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                    GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(decimal: Double, raw: String, currency: Currency) {
                  self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var decimal: Double {
                  get {
                    return resultMap["decimal"]! as! Double
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimal")
                  }
                }

                public var raw: String {
                  get {
                    return resultMap["raw"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "raw")
                  }
                }

                public var currency: Currency {
                  get {
                    return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
                  }
                  set {
                    resultMap.updateValue(newValue.resultMap, forKey: "currency")
                  }
                }

                public struct Currency: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["Currency"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("address", type: .nonNull(.scalar(String.self))),
                      GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                      GraphQLField("name", type: .nonNull(.scalar(String.self))),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(address: String, decimals: Int, name: String) {
                    self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var address: String {
                    get {
                      return resultMap["address"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "address")
                    }
                  }

                  public var decimals: Int {
                    get {
                      return resultMap["decimals"]! as! Int
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "decimals")
                    }
                  }

                  public var name: String {
                    get {
                      return resultMap["name"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "name")
                    }
                  }
                }
              }

              public struct UsdcPrice: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["CurrencyAmount"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                    GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(decimal: Double, raw: String) {
                  self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var decimal: Double {
                  get {
                    return resultMap["decimal"]! as! Double
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimal")
                  }
                }

                public var raw: String {
                  get {
                    return resultMap["raw"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "raw")
                  }
                }
              }
            }
          }

          public var asV3AskFilledEventProperties: AsV3AskFilledEventProperties? {
            get {
              if !AsV3AskFilledEventProperties.possibleTypes.contains(__typename) { return nil }
              return AsV3AskFilledEventProperties(unsafeResultMap: resultMap)
            }
            set {
              guard let newValue = newValue else { return }
              resultMap = newValue.resultMap
            }
          }

          public struct AsV3AskFilledEventProperties: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["V3AskFilledEventProperties"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("seller", type: .nonNull(.scalar(String.self))),
                GraphQLField("sellerFundsRecipient", type: .nonNull(.scalar(String.self))),
                GraphQLField("askCurrency", type: .nonNull(.scalar(String.self))),
                GraphQLField("askPrice", type: .nonNull(.scalar(String.self))),
                GraphQLField("findersFeeBps", type: .nonNull(.scalar(Int.self))),
                GraphQLField("price", type: .nonNull(.object(Price.selections))),
                GraphQLField("finder", type: .nonNull(.scalar(String.self))),
                GraphQLField("buyer", type: .nonNull(.scalar(String.self))),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(seller: String, sellerFundsRecipient: String, askCurrency: String, askPrice: String, findersFeeBps: Int, price: Price, finder: String, buyer: String) {
              self.init(unsafeResultMap: ["__typename": "V3AskFilledEventProperties", "seller": seller, "sellerFundsRecipient": sellerFundsRecipient, "askCurrency": askCurrency, "askPrice": askPrice, "findersFeeBps": findersFeeBps, "price": price.resultMap, "finder": finder, "buyer": buyer])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var seller: String {
              get {
                return resultMap["seller"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "seller")
              }
            }

            public var sellerFundsRecipient: String {
              get {
                return resultMap["sellerFundsRecipient"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "sellerFundsRecipient")
              }
            }

            public var askCurrency: String {
              get {
                return resultMap["askCurrency"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "askCurrency")
              }
            }

            public var askPrice: String {
              get {
                return resultMap["askPrice"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "askPrice")
              }
            }

            public var findersFeeBps: Int {
              get {
                return resultMap["findersFeeBps"]! as! Int
              }
              set {
                resultMap.updateValue(newValue, forKey: "findersFeeBps")
              }
            }

            public var price: Price {
              get {
                return Price(unsafeResultMap: resultMap["price"]! as! ResultMap)
              }
              set {
                resultMap.updateValue(newValue.resultMap, forKey: "price")
              }
            }

            public var finder: String {
              get {
                return resultMap["finder"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "finder")
              }
            }

            public var buyer: String {
              get {
                return resultMap["buyer"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "buyer")
              }
            }

            public var fragments: Fragments {
              get {
                return Fragments(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }

            public struct Fragments {
              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public var v3AskEventPropertiesInfo: V3AskEventPropertiesInfo {
                get {
                  return V3AskEventPropertiesInfo(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }
            }

            public struct Price: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["PriceAtTime"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                  GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
                  GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
                  GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
                self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var blockNumber: Int {
                get {
                  return resultMap["blockNumber"]! as! Int
                }
                set {
                  resultMap.updateValue(newValue, forKey: "blockNumber")
                }
              }

              public var chainTokenPrice: ChainTokenPrice? {
                get {
                  return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
                }
                set {
                  resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
                }
              }

              public var nativePrice: NativePrice {
                get {
                  return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
                }
                set {
                  resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
                }
              }

              public var usdcPrice: UsdcPrice? {
                get {
                  return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
                }
                set {
                  resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
                }
              }

              public var fragments: Fragments {
                get {
                  return Fragments(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }

              public struct Fragments {
                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public var priceSummary: PriceSummary {
                  get {
                    return PriceSummary(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }
              }

              public struct ChainTokenPrice: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["CurrencyAmount"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                    GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(decimal: Double, raw: String) {
                  self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var decimal: Double {
                  get {
                    return resultMap["decimal"]! as! Double
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimal")
                  }
                }

                public var raw: String {
                  get {
                    return resultMap["raw"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "raw")
                  }
                }
              }

              public struct NativePrice: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["CurrencyAmount"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                    GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                    GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(decimal: Double, raw: String, currency: Currency) {
                  self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var decimal: Double {
                  get {
                    return resultMap["decimal"]! as! Double
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimal")
                  }
                }

                public var raw: String {
                  get {
                    return resultMap["raw"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "raw")
                  }
                }

                public var currency: Currency {
                  get {
                    return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
                  }
                  set {
                    resultMap.updateValue(newValue.resultMap, forKey: "currency")
                  }
                }

                public struct Currency: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["Currency"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("address", type: .nonNull(.scalar(String.self))),
                      GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                      GraphQLField("name", type: .nonNull(.scalar(String.self))),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(address: String, decimals: Int, name: String) {
                    self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var address: String {
                    get {
                      return resultMap["address"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "address")
                    }
                  }

                  public var decimals: Int {
                    get {
                      return resultMap["decimals"]! as! Int
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "decimals")
                    }
                  }

                  public var name: String {
                    get {
                      return resultMap["name"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "name")
                    }
                  }
                }
              }

              public struct UsdcPrice: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["CurrencyAmount"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                    GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(decimal: Double, raw: String) {
                  self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var decimal: Double {
                  get {
                    return resultMap["decimal"]! as! Double
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimal")
                  }
                }

                public var raw: String {
                  get {
                    return resultMap["raw"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "raw")
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

public struct TokenFullDetails: GraphQLFragment {
  /// The raw GraphQL definition of this fragment.
  public static let fragmentDefinition: String =
    """
    fragment TokenFullDetails on TokenWithFullMarketHistory {
      __typename
      sales(pagination: {limit: 10}, sort: {sortKey: TIME, sortDirection: DESC}) {
        __typename
        ...SaleInfo @include(if: $includeFullDetails)
      }
      events(pagination: {limit: 10}, sort: {sortKey: CREATED, sortDirection: DESC}) {
        __typename
        ...EventInfo
      }
    }
    """

  public static let possibleTypes: [String] = ["TokenWithFullMarketHistory"]

  public static var selections: [GraphQLSelection] {
    return [
      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
      GraphQLField("sales", arguments: ["pagination": ["limit": 10], "sort": ["sortKey": "TIME", "sortDirection": "DESC"]], type: .nonNull(.list(.nonNull(.object(Sale.selections))))),
      GraphQLField("events", arguments: ["pagination": ["limit": 10], "sort": ["sortKey": "CREATED", "sortDirection": "DESC"]], type: .nonNull(.list(.nonNull(.object(Event.selections))))),
    ]
  }

  public private(set) var resultMap: ResultMap

  public init(unsafeResultMap: ResultMap) {
    self.resultMap = unsafeResultMap
  }

  public init(sales: [Sale], events: [Event]) {
    self.init(unsafeResultMap: ["__typename": "TokenWithFullMarketHistory", "sales": sales.map { (value: Sale) -> ResultMap in value.resultMap }, "events": events.map { (value: Event) -> ResultMap in value.resultMap }])
  }

  public var __typename: String {
    get {
      return resultMap["__typename"]! as! String
    }
    set {
      resultMap.updateValue(newValue, forKey: "__typename")
    }
  }

  public var sales: [Sale] {
    get {
      return (resultMap["sales"] as! [ResultMap]).map { (value: ResultMap) -> Sale in Sale(unsafeResultMap: value) }
    }
    set {
      resultMap.updateValue(newValue.map { (value: Sale) -> ResultMap in value.resultMap }, forKey: "sales")
    }
  }

  public var events: [Event] {
    get {
      return (resultMap["events"] as! [ResultMap]).map { (value: ResultMap) -> Event in Event(unsafeResultMap: value) }
    }
    set {
      resultMap.updateValue(newValue.map { (value: Event) -> ResultMap in value.resultMap }, forKey: "events")
    }
  }

  public struct Sale: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Sale"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLBooleanCondition(variableName: "includeFullDetails", inverted: false, selections: [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("saleContractAddress", type: .scalar(String.self)),
          GraphQLField("transactionInfo", type: .nonNull(.object(TransactionInfo.selections))),
          GraphQLField("buyerAddress", type: .nonNull(.scalar(String.self))),
          GraphQLField("collectionAddress", type: .nonNull(.scalar(String.self))),
          GraphQLField("price", type: .nonNull(.object(Price.selections))),
          GraphQLField("sellerAddress", type: .nonNull(.scalar(String.self))),
          GraphQLField("tokenId", type: .nonNull(.scalar(String.self))),
        ]),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(saleContractAddress: String? = nil, transactionInfo: TransactionInfo? = nil, buyerAddress: String? = nil, collectionAddress: String? = nil, price: Price? = nil, sellerAddress: String? = nil, tokenId: String? = nil) {
      self.init(unsafeResultMap: ["__typename": "Sale", "saleContractAddress": saleContractAddress, "transactionInfo": transactionInfo.flatMap { (value: TransactionInfo) -> ResultMap in value.resultMap }, "buyerAddress": buyerAddress, "collectionAddress": collectionAddress, "price": price.flatMap { (value: Price) -> ResultMap in value.resultMap }, "sellerAddress": sellerAddress, "tokenId": tokenId])
    }

    public var __typename: String {
      get {
        return resultMap["__typename"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "__typename")
      }
    }

    public var saleContractAddress: String? {
      get {
        return resultMap["saleContractAddress"] as? String
      }
      set {
        resultMap.updateValue(newValue, forKey: "saleContractAddress")
      }
    }

    public var transactionInfo: TransactionInfo? {
      get {
        return (resultMap["transactionInfo"] as? ResultMap).flatMap { TransactionInfo(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "transactionInfo")
      }
    }

    public var buyerAddress: String? {
      get {
        return resultMap["buyerAddress"] as? String
      }
      set {
        resultMap.updateValue(newValue, forKey: "buyerAddress")
      }
    }

    public var collectionAddress: String? {
      get {
        return resultMap["collectionAddress"] as? String
      }
      set {
        resultMap.updateValue(newValue, forKey: "collectionAddress")
      }
    }

    public var price: Price? {
      get {
        return (resultMap["price"] as? ResultMap).flatMap { Price(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "price")
      }
    }

    public var sellerAddress: String? {
      get {
        return resultMap["sellerAddress"] as? String
      }
      set {
        resultMap.updateValue(newValue, forKey: "sellerAddress")
      }
    }

    public var tokenId: String? {
      get {
        return resultMap["tokenId"] as? String
      }
      set {
        resultMap.updateValue(newValue, forKey: "tokenId")
      }
    }

    public var fragments: Fragments {
      get {
        return Fragments(unsafeResultMap: resultMap)
      }
      set {
        resultMap += newValue.resultMap
      }
    }

    public struct Fragments {
      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public var saleInfo: SaleInfo {
        get {
          return SaleInfo(unsafeResultMap: resultMap)
        }
        set {
          resultMap += newValue.resultMap
        }
      }
    }

    public struct TransactionInfo: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["TransactionInfo"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
          GraphQLField("blockTimestamp", type: .nonNull(.scalar(String.self))),
          GraphQLField("transactionHash", type: .scalar(String.self)),
          GraphQLField("logIndex", type: .scalar(Int.self)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(blockNumber: Int, blockTimestamp: String, transactionHash: String? = nil, logIndex: Int? = nil) {
        self.init(unsafeResultMap: ["__typename": "TransactionInfo", "blockNumber": blockNumber, "blockTimestamp": blockTimestamp, "transactionHash": transactionHash, "logIndex": logIndex])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var blockNumber: Int {
        get {
          return resultMap["blockNumber"]! as! Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "blockNumber")
        }
      }

      public var blockTimestamp: String {
        get {
          return resultMap["blockTimestamp"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "blockTimestamp")
        }
      }

      public var transactionHash: String? {
        get {
          return resultMap["transactionHash"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "transactionHash")
        }
      }

      public var logIndex: Int? {
        get {
          return resultMap["logIndex"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "logIndex")
        }
      }

      public var fragments: Fragments {
        get {
          return Fragments(unsafeResultMap: resultMap)
        }
        set {
          resultMap += newValue.resultMap
        }
      }

      public struct Fragments {
        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public var transactionDetails: TransactionDetails {
          get {
            return TransactionDetails(unsafeResultMap: resultMap)
          }
          set {
            resultMap += newValue.resultMap
          }
        }
      }
    }

    public struct Price: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["PriceAtTime"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
          GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
          GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
          GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
        self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var blockNumber: Int {
        get {
          return resultMap["blockNumber"]! as! Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "blockNumber")
        }
      }

      public var chainTokenPrice: ChainTokenPrice? {
        get {
          return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
        }
      }

      public var nativePrice: NativePrice {
        get {
          return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
        }
        set {
          resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
        }
      }

      public var usdcPrice: UsdcPrice? {
        get {
          return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
        }
      }

      public var fragments: Fragments {
        get {
          return Fragments(unsafeResultMap: resultMap)
        }
        set {
          resultMap += newValue.resultMap
        }
      }

      public struct Fragments {
        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public var priceSummary: PriceSummary {
          get {
            return PriceSummary(unsafeResultMap: resultMap)
          }
          set {
            resultMap += newValue.resultMap
          }
        }
      }

      public struct ChainTokenPrice: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["CurrencyAmount"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
            GraphQLField("raw", type: .nonNull(.scalar(String.self))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(decimal: Double, raw: String) {
          self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var decimal: Double {
          get {
            return resultMap["decimal"]! as! Double
          }
          set {
            resultMap.updateValue(newValue, forKey: "decimal")
          }
        }

        public var raw: String {
          get {
            return resultMap["raw"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "raw")
          }
        }
      }

      public struct NativePrice: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["CurrencyAmount"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
            GraphQLField("raw", type: .nonNull(.scalar(String.self))),
            GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(decimal: Double, raw: String, currency: Currency) {
          self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var decimal: Double {
          get {
            return resultMap["decimal"]! as! Double
          }
          set {
            resultMap.updateValue(newValue, forKey: "decimal")
          }
        }

        public var raw: String {
          get {
            return resultMap["raw"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "raw")
          }
        }

        public var currency: Currency {
          get {
            return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
          }
          set {
            resultMap.updateValue(newValue.resultMap, forKey: "currency")
          }
        }

        public struct Currency: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["Currency"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("address", type: .nonNull(.scalar(String.self))),
              GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(address: String, decimals: Int, name: String) {
            self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var address: String {
            get {
              return resultMap["address"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "address")
            }
          }

          public var decimals: Int {
            get {
              return resultMap["decimals"]! as! Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "decimals")
            }
          }

          public var name: String {
            get {
              return resultMap["name"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "name")
            }
          }
        }
      }

      public struct UsdcPrice: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["CurrencyAmount"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
            GraphQLField("raw", type: .nonNull(.scalar(String.self))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(decimal: Double, raw: String) {
          self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var decimal: Double {
          get {
            return resultMap["decimal"]! as! Double
          }
          set {
            resultMap.updateValue(newValue, forKey: "decimal")
          }
        }

        public var raw: String {
          get {
            return resultMap["raw"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "raw")
          }
        }
      }
    }
  }

  public struct Event: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Event"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("transactionInfo", type: .nonNull(.object(TransactionInfo.selections))),
        GraphQLField("eventType", type: .nonNull(.scalar(EventType.self))),
        GraphQLField("collectionAddress", type: .nonNull(.scalar(String.self))),
        GraphQLField("tokenId", type: .scalar(String.self)),
        GraphQLField("properties", type: .nonNull(.object(Property.selections))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(transactionInfo: TransactionInfo, eventType: EventType, collectionAddress: String, tokenId: String? = nil, properties: Property) {
      self.init(unsafeResultMap: ["__typename": "Event", "transactionInfo": transactionInfo.resultMap, "eventType": eventType, "collectionAddress": collectionAddress, "tokenId": tokenId, "properties": properties.resultMap])
    }

    public var __typename: String {
      get {
        return resultMap["__typename"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "__typename")
      }
    }

    public var transactionInfo: TransactionInfo {
      get {
        return TransactionInfo(unsafeResultMap: resultMap["transactionInfo"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "transactionInfo")
      }
    }

    public var eventType: EventType {
      get {
        return resultMap["eventType"]! as! EventType
      }
      set {
        resultMap.updateValue(newValue, forKey: "eventType")
      }
    }

    public var collectionAddress: String {
      get {
        return resultMap["collectionAddress"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "collectionAddress")
      }
    }

    public var tokenId: String? {
      get {
        return resultMap["tokenId"] as? String
      }
      set {
        resultMap.updateValue(newValue, forKey: "tokenId")
      }
    }

    public var properties: Property {
      get {
        return Property(unsafeResultMap: resultMap["properties"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "properties")
      }
    }

    public var fragments: Fragments {
      get {
        return Fragments(unsafeResultMap: resultMap)
      }
      set {
        resultMap += newValue.resultMap
      }
    }

    public struct Fragments {
      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public var eventInfo: EventInfo {
        get {
          return EventInfo(unsafeResultMap: resultMap)
        }
        set {
          resultMap += newValue.resultMap
        }
      }
    }

    public struct TransactionInfo: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["TransactionInfo"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
          GraphQLField("blockTimestamp", type: .nonNull(.scalar(String.self))),
          GraphQLField("transactionHash", type: .scalar(String.self)),
          GraphQLField("logIndex", type: .scalar(Int.self)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(blockNumber: Int, blockTimestamp: String, transactionHash: String? = nil, logIndex: Int? = nil) {
        self.init(unsafeResultMap: ["__typename": "TransactionInfo", "blockNumber": blockNumber, "blockTimestamp": blockTimestamp, "transactionHash": transactionHash, "logIndex": logIndex])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var blockNumber: Int {
        get {
          return resultMap["blockNumber"]! as! Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "blockNumber")
        }
      }

      public var blockTimestamp: String {
        get {
          return resultMap["blockTimestamp"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "blockTimestamp")
        }
      }

      public var transactionHash: String? {
        get {
          return resultMap["transactionHash"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "transactionHash")
        }
      }

      public var logIndex: Int? {
        get {
          return resultMap["logIndex"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "logIndex")
        }
      }

      public var fragments: Fragments {
        get {
          return Fragments(unsafeResultMap: resultMap)
        }
        set {
          resultMap += newValue.resultMap
        }
      }

      public struct Fragments {
        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public var transactionDetails: TransactionDetails {
          get {
            return TransactionDetails(unsafeResultMap: resultMap)
          }
          set {
            resultMap += newValue.resultMap
          }
        }
      }
    }

    public struct Property: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["ApprovalEvent", "MintEvent", "Sale", "TransferEvent", "V1MarketEvent", "V2AuctionEvent", "V3AskEvent"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLTypeCase(
            variants: ["MintEvent": AsMintEvent.selections, "TransferEvent": AsTransferEvent.selections, "V1MarketEvent": AsV1MarketEvent.selections, "V2AuctionEvent": AsV2AuctionEvent.selections, "V3AskEvent": AsV3AskEvent.selections],
            default: [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            ]
          )
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public static func makeApprovalEvent() -> Property {
        return Property(unsafeResultMap: ["__typename": "ApprovalEvent"])
      }

      public static func makeSale() -> Property {
        return Property(unsafeResultMap: ["__typename": "Sale"])
      }

      public static func makeMintEvent(tokenId: String, collectionAddress: String, originatorAddress: String, toAddress: String, price: AsMintEvent.Price) -> Property {
        return Property(unsafeResultMap: ["__typename": "MintEvent", "tokenId": tokenId, "collectionAddress": collectionAddress, "originatorAddress": originatorAddress, "toAddress": toAddress, "price": price.resultMap])
      }

      public static func makeTransferEvent(fromAddress: String, toAddress: String, collectionAddress: String, tokenId: String) -> Property {
        return Property(unsafeResultMap: ["__typename": "TransferEvent", "fromAddress": fromAddress, "toAddress": toAddress, "collectionAddress": collectionAddress, "tokenId": tokenId])
      }

      public static func makeV1MarketEvent(v1MarketEventType: V1MarketEventType, address: String, collectionAddress: String, tokenId: String, properties: AsV1MarketEvent.Property) -> Property {
        return Property(unsafeResultMap: ["__typename": "V1MarketEvent", "v1MarketEventType": v1MarketEventType, "address": address, "collectionAddress": collectionAddress, "tokenId": tokenId, "properties": properties.resultMap])
      }

      public static func makeV2AuctionEvent(v2AuctionEventType: V2AuctionEventType, address: String, auctionId: Int, collectionAddress: String, tokenId: String, properties: AsV2AuctionEvent.Property) -> Property {
        return Property(unsafeResultMap: ["__typename": "V2AuctionEvent", "v2AuctionEventType": v2AuctionEventType, "address": address, "auctionId": auctionId, "collectionAddress": collectionAddress, "tokenId": tokenId, "properties": properties.resultMap])
      }

      public static func makeV3AskEvent(v3AskEventType: V3AskEventType, address: String, collectionAddress: String, tokenId: String, properties: AsV3AskEvent.Property) -> Property {
        return Property(unsafeResultMap: ["__typename": "V3AskEvent", "v3AskEventType": v3AskEventType, "address": address, "collectionAddress": collectionAddress, "tokenId": tokenId, "properties": properties.resultMap])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var asMintEvent: AsMintEvent? {
        get {
          if !AsMintEvent.possibleTypes.contains(__typename) { return nil }
          return AsMintEvent(unsafeResultMap: resultMap)
        }
        set {
          guard let newValue = newValue else { return }
          resultMap = newValue.resultMap
        }
      }

      public struct AsMintEvent: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["MintEvent"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("tokenId", type: .nonNull(.scalar(String.self))),
            GraphQLField("collectionAddress", type: .nonNull(.scalar(String.self))),
            GraphQLField("originatorAddress", type: .nonNull(.scalar(String.self))),
            GraphQLField("toAddress", type: .nonNull(.scalar(String.self))),
            GraphQLField("price", type: .nonNull(.object(Price.selections))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(tokenId: String, collectionAddress: String, originatorAddress: String, toAddress: String, price: Price) {
          self.init(unsafeResultMap: ["__typename": "MintEvent", "tokenId": tokenId, "collectionAddress": collectionAddress, "originatorAddress": originatorAddress, "toAddress": toAddress, "price": price.resultMap])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var tokenId: String {
          get {
            return resultMap["tokenId"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "tokenId")
          }
        }

        public var collectionAddress: String {
          get {
            return resultMap["collectionAddress"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "collectionAddress")
          }
        }

        public var originatorAddress: String {
          get {
            return resultMap["originatorAddress"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "originatorAddress")
          }
        }

        public var toAddress: String {
          get {
            return resultMap["toAddress"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "toAddress")
          }
        }

        public var price: Price {
          get {
            return Price(unsafeResultMap: resultMap["price"]! as! ResultMap)
          }
          set {
            resultMap.updateValue(newValue.resultMap, forKey: "price")
          }
        }

        public struct Price: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["PriceAtTime"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
              GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
              GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
              GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
            self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var blockNumber: Int {
            get {
              return resultMap["blockNumber"]! as! Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "blockNumber")
            }
          }

          public var chainTokenPrice: ChainTokenPrice? {
            get {
              return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
            }
            set {
              resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
            }
          }

          public var nativePrice: NativePrice {
            get {
              return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
            }
            set {
              resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
            }
          }

          public var usdcPrice: UsdcPrice? {
            get {
              return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
            }
            set {
              resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
            }
          }

          public var fragments: Fragments {
            get {
              return Fragments(unsafeResultMap: resultMap)
            }
            set {
              resultMap += newValue.resultMap
            }
          }

          public struct Fragments {
            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public var priceSummary: PriceSummary {
              get {
                return PriceSummary(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }
          }

          public struct ChainTokenPrice: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["CurrencyAmount"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                GraphQLField("raw", type: .nonNull(.scalar(String.self))),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(decimal: Double, raw: String) {
              self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var decimal: Double {
              get {
                return resultMap["decimal"]! as! Double
              }
              set {
                resultMap.updateValue(newValue, forKey: "decimal")
              }
            }

            public var raw: String {
              get {
                return resultMap["raw"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "raw")
              }
            }
          }

          public struct NativePrice: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["CurrencyAmount"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(decimal: Double, raw: String, currency: Currency) {
              self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var decimal: Double {
              get {
                return resultMap["decimal"]! as! Double
              }
              set {
                resultMap.updateValue(newValue, forKey: "decimal")
              }
            }

            public var raw: String {
              get {
                return resultMap["raw"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "raw")
              }
            }

            public var currency: Currency {
              get {
                return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
              }
              set {
                resultMap.updateValue(newValue.resultMap, forKey: "currency")
              }
            }

            public struct Currency: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["Currency"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("address", type: .nonNull(.scalar(String.self))),
                  GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                  GraphQLField("name", type: .nonNull(.scalar(String.self))),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(address: String, decimals: Int, name: String) {
                self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var address: String {
                get {
                  return resultMap["address"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "address")
                }
              }

              public var decimals: Int {
                get {
                  return resultMap["decimals"]! as! Int
                }
                set {
                  resultMap.updateValue(newValue, forKey: "decimals")
                }
              }

              public var name: String {
                get {
                  return resultMap["name"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "name")
                }
              }
            }
          }

          public struct UsdcPrice: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["CurrencyAmount"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                GraphQLField("raw", type: .nonNull(.scalar(String.self))),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(decimal: Double, raw: String) {
              self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var decimal: Double {
              get {
                return resultMap["decimal"]! as! Double
              }
              set {
                resultMap.updateValue(newValue, forKey: "decimal")
              }
            }

            public var raw: String {
              get {
                return resultMap["raw"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "raw")
              }
            }
          }
        }
      }

      public var asTransferEvent: AsTransferEvent? {
        get {
          if !AsTransferEvent.possibleTypes.contains(__typename) { return nil }
          return AsTransferEvent(unsafeResultMap: resultMap)
        }
        set {
          guard let newValue = newValue else { return }
          resultMap = newValue.resultMap
        }
      }

      public struct AsTransferEvent: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["TransferEvent"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("fromAddress", type: .nonNull(.scalar(String.self))),
            GraphQLField("toAddress", type: .nonNull(.scalar(String.self))),
            GraphQLField("collectionAddress", type: .nonNull(.scalar(String.self))),
            GraphQLField("tokenId", type: .nonNull(.scalar(String.self))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(fromAddress: String, toAddress: String, collectionAddress: String, tokenId: String) {
          self.init(unsafeResultMap: ["__typename": "TransferEvent", "fromAddress": fromAddress, "toAddress": toAddress, "collectionAddress": collectionAddress, "tokenId": tokenId])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var fromAddress: String {
          get {
            return resultMap["fromAddress"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "fromAddress")
          }
        }

        public var toAddress: String {
          get {
            return resultMap["toAddress"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "toAddress")
          }
        }

        public var collectionAddress: String {
          get {
            return resultMap["collectionAddress"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "collectionAddress")
          }
        }

        public var tokenId: String {
          get {
            return resultMap["tokenId"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "tokenId")
          }
        }
      }

      public var asV1MarketEvent: AsV1MarketEvent? {
        get {
          if !AsV1MarketEvent.possibleTypes.contains(__typename) { return nil }
          return AsV1MarketEvent(unsafeResultMap: resultMap)
        }
        set {
          guard let newValue = newValue else { return }
          resultMap = newValue.resultMap
        }
      }

      public struct AsV1MarketEvent: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["V1MarketEvent"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("v1MarketEventType", type: .nonNull(.scalar(V1MarketEventType.self))),
            GraphQLField("address", type: .nonNull(.scalar(String.self))),
            GraphQLField("collectionAddress", type: .nonNull(.scalar(String.self))),
            GraphQLField("tokenId", type: .nonNull(.scalar(String.self))),
            GraphQLField("properties", type: .nonNull(.object(Property.selections))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(v1MarketEventType: V1MarketEventType, address: String, collectionAddress: String, tokenId: String, properties: Property) {
          self.init(unsafeResultMap: ["__typename": "V1MarketEvent", "v1MarketEventType": v1MarketEventType, "address": address, "collectionAddress": collectionAddress, "tokenId": tokenId, "properties": properties.resultMap])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var v1MarketEventType: V1MarketEventType {
          get {
            return resultMap["v1MarketEventType"]! as! V1MarketEventType
          }
          set {
            resultMap.updateValue(newValue, forKey: "v1MarketEventType")
          }
        }

        public var address: String {
          get {
            return resultMap["address"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "address")
          }
        }

        public var collectionAddress: String {
          get {
            return resultMap["collectionAddress"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "collectionAddress")
          }
        }

        public var tokenId: String {
          get {
            return resultMap["tokenId"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "tokenId")
          }
        }

        public var properties: Property {
          get {
            return Property(unsafeResultMap: resultMap["properties"]! as! ResultMap)
          }
          set {
            resultMap.updateValue(newValue.resultMap, forKey: "properties")
          }
        }

        public struct Property: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["V1MarketAskCreatedEventProperties", "V1MarketAskRemovedEventProperties", "V1MarketOfferCreatedEventProperties", "V1MarketOfferFinalizedEventProperties", "V1MarketOfferRemovedEventProperties", "V1MarketBidShareUpdatedEventProperties"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLTypeCase(
                variants: ["V1MarketAskCreatedEventProperties": AsV1MarketAskCreatedEventProperties.selections, "V1MarketAskRemovedEventProperties": AsV1MarketAskRemovedEventProperties.selections, "V1MarketOfferCreatedEventProperties": AsV1MarketOfferCreatedEventProperties.selections, "V1MarketOfferFinalizedEventProperties": AsV1MarketOfferFinalizedEventProperties.selections, "V1MarketOfferRemovedEventProperties": AsV1MarketOfferRemovedEventProperties.selections],
                default: [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                ]
              )
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public static func makeV1MarketBidShareUpdatedEventProperties() -> Property {
            return Property(unsafeResultMap: ["__typename": "V1MarketBidShareUpdatedEventProperties"])
          }

          public static func makeV1MarketAskCreatedEventProperties(amount: String, price: AsV1MarketAskCreatedEventProperties.Price, currency: String) -> Property {
            return Property(unsafeResultMap: ["__typename": "V1MarketAskCreatedEventProperties", "amount": amount, "price": price.resultMap, "currency": currency])
          }

          public static func makeV1MarketAskRemovedEventProperties(amount: String, price: AsV1MarketAskRemovedEventProperties.Price, currency: String) -> Property {
            return Property(unsafeResultMap: ["__typename": "V1MarketAskRemovedEventProperties", "amount": amount, "price": price.resultMap, "currency": currency])
          }

          public static func makeV1MarketOfferCreatedEventProperties(amount: String, price: AsV1MarketOfferCreatedEventProperties.Price, currency: String, bidder: String) -> Property {
            return Property(unsafeResultMap: ["__typename": "V1MarketOfferCreatedEventProperties", "amount": amount, "price": price.resultMap, "currency": currency, "bidder": bidder])
          }

          public static func makeV1MarketOfferFinalizedEventProperties(amount: String, price: AsV1MarketOfferFinalizedEventProperties.Price, currency: String, bidder: String) -> Property {
            return Property(unsafeResultMap: ["__typename": "V1MarketOfferFinalizedEventProperties", "amount": amount, "price": price.resultMap, "currency": currency, "bidder": bidder])
          }

          public static func makeV1MarketOfferRemovedEventProperties(amount: String, price: AsV1MarketOfferRemovedEventProperties.Price, currency: String, bidder: String) -> Property {
            return Property(unsafeResultMap: ["__typename": "V1MarketOfferRemovedEventProperties", "amount": amount, "price": price.resultMap, "currency": currency, "bidder": bidder])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var fragments: Fragments {
            get {
              return Fragments(unsafeResultMap: resultMap)
            }
            set {
              resultMap += newValue.resultMap
            }
          }

          public struct Fragments {
            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public var v1MarketEventPropertiesInfo: V1MarketEventPropertiesInfo {
              get {
                return V1MarketEventPropertiesInfo(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }
          }

          public var asV1MarketAskCreatedEventProperties: AsV1MarketAskCreatedEventProperties? {
            get {
              if !AsV1MarketAskCreatedEventProperties.possibleTypes.contains(__typename) { return nil }
              return AsV1MarketAskCreatedEventProperties(unsafeResultMap: resultMap)
            }
            set {
              guard let newValue = newValue else { return }
              resultMap = newValue.resultMap
            }
          }

          public struct AsV1MarketAskCreatedEventProperties: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["V1MarketAskCreatedEventProperties"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("amount", type: .nonNull(.scalar(String.self))),
                GraphQLField("price", type: .nonNull(.object(Price.selections))),
                GraphQLField("currency", type: .nonNull(.scalar(String.self))),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(amount: String, price: Price, currency: String) {
              self.init(unsafeResultMap: ["__typename": "V1MarketAskCreatedEventProperties", "amount": amount, "price": price.resultMap, "currency": currency])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var amount: String {
              get {
                return resultMap["amount"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "amount")
              }
            }

            public var price: Price {
              get {
                return Price(unsafeResultMap: resultMap["price"]! as! ResultMap)
              }
              set {
                resultMap.updateValue(newValue.resultMap, forKey: "price")
              }
            }

            public var currency: String {
              get {
                return resultMap["currency"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "currency")
              }
            }

            public var fragments: Fragments {
              get {
                return Fragments(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }

            public struct Fragments {
              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public var v1MarketEventPropertiesInfo: V1MarketEventPropertiesInfo {
                get {
                  return V1MarketEventPropertiesInfo(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }
            }

            public struct Price: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["PriceAtTime"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                  GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
                  GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
                  GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
                self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var blockNumber: Int {
                get {
                  return resultMap["blockNumber"]! as! Int
                }
                set {
                  resultMap.updateValue(newValue, forKey: "blockNumber")
                }
              }

              public var chainTokenPrice: ChainTokenPrice? {
                get {
                  return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
                }
                set {
                  resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
                }
              }

              public var nativePrice: NativePrice {
                get {
                  return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
                }
                set {
                  resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
                }
              }

              public var usdcPrice: UsdcPrice? {
                get {
                  return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
                }
                set {
                  resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
                }
              }

              public var fragments: Fragments {
                get {
                  return Fragments(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }

              public struct Fragments {
                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public var priceSummary: PriceSummary {
                  get {
                    return PriceSummary(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }
              }

              public struct ChainTokenPrice: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["CurrencyAmount"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                    GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(decimal: Double, raw: String) {
                  self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var decimal: Double {
                  get {
                    return resultMap["decimal"]! as! Double
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimal")
                  }
                }

                public var raw: String {
                  get {
                    return resultMap["raw"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "raw")
                  }
                }
              }

              public struct NativePrice: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["CurrencyAmount"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                    GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                    GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(decimal: Double, raw: String, currency: Currency) {
                  self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var decimal: Double {
                  get {
                    return resultMap["decimal"]! as! Double
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimal")
                  }
                }

                public var raw: String {
                  get {
                    return resultMap["raw"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "raw")
                  }
                }

                public var currency: Currency {
                  get {
                    return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
                  }
                  set {
                    resultMap.updateValue(newValue.resultMap, forKey: "currency")
                  }
                }

                public struct Currency: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["Currency"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("address", type: .nonNull(.scalar(String.self))),
                      GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                      GraphQLField("name", type: .nonNull(.scalar(String.self))),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(address: String, decimals: Int, name: String) {
                    self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var address: String {
                    get {
                      return resultMap["address"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "address")
                    }
                  }

                  public var decimals: Int {
                    get {
                      return resultMap["decimals"]! as! Int
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "decimals")
                    }
                  }

                  public var name: String {
                    get {
                      return resultMap["name"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "name")
                    }
                  }
                }
              }

              public struct UsdcPrice: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["CurrencyAmount"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                    GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(decimal: Double, raw: String) {
                  self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var decimal: Double {
                  get {
                    return resultMap["decimal"]! as! Double
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimal")
                  }
                }

                public var raw: String {
                  get {
                    return resultMap["raw"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "raw")
                  }
                }
              }
            }
          }

          public var asV1MarketAskRemovedEventProperties: AsV1MarketAskRemovedEventProperties? {
            get {
              if !AsV1MarketAskRemovedEventProperties.possibleTypes.contains(__typename) { return nil }
              return AsV1MarketAskRemovedEventProperties(unsafeResultMap: resultMap)
            }
            set {
              guard let newValue = newValue else { return }
              resultMap = newValue.resultMap
            }
          }

          public struct AsV1MarketAskRemovedEventProperties: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["V1MarketAskRemovedEventProperties"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("amount", type: .nonNull(.scalar(String.self))),
                GraphQLField("price", type: .nonNull(.object(Price.selections))),
                GraphQLField("currency", type: .nonNull(.scalar(String.self))),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(amount: String, price: Price, currency: String) {
              self.init(unsafeResultMap: ["__typename": "V1MarketAskRemovedEventProperties", "amount": amount, "price": price.resultMap, "currency": currency])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var amount: String {
              get {
                return resultMap["amount"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "amount")
              }
            }

            public var price: Price {
              get {
                return Price(unsafeResultMap: resultMap["price"]! as! ResultMap)
              }
              set {
                resultMap.updateValue(newValue.resultMap, forKey: "price")
              }
            }

            public var currency: String {
              get {
                return resultMap["currency"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "currency")
              }
            }

            public var fragments: Fragments {
              get {
                return Fragments(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }

            public struct Fragments {
              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public var v1MarketEventPropertiesInfo: V1MarketEventPropertiesInfo {
                get {
                  return V1MarketEventPropertiesInfo(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }
            }

            public struct Price: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["PriceAtTime"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                  GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
                  GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
                  GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
                self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var blockNumber: Int {
                get {
                  return resultMap["blockNumber"]! as! Int
                }
                set {
                  resultMap.updateValue(newValue, forKey: "blockNumber")
                }
              }

              public var chainTokenPrice: ChainTokenPrice? {
                get {
                  return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
                }
                set {
                  resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
                }
              }

              public var nativePrice: NativePrice {
                get {
                  return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
                }
                set {
                  resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
                }
              }

              public var usdcPrice: UsdcPrice? {
                get {
                  return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
                }
                set {
                  resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
                }
              }

              public var fragments: Fragments {
                get {
                  return Fragments(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }

              public struct Fragments {
                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public var priceSummary: PriceSummary {
                  get {
                    return PriceSummary(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }
              }

              public struct ChainTokenPrice: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["CurrencyAmount"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                    GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(decimal: Double, raw: String) {
                  self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var decimal: Double {
                  get {
                    return resultMap["decimal"]! as! Double
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimal")
                  }
                }

                public var raw: String {
                  get {
                    return resultMap["raw"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "raw")
                  }
                }
              }

              public struct NativePrice: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["CurrencyAmount"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                    GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                    GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(decimal: Double, raw: String, currency: Currency) {
                  self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var decimal: Double {
                  get {
                    return resultMap["decimal"]! as! Double
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimal")
                  }
                }

                public var raw: String {
                  get {
                    return resultMap["raw"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "raw")
                  }
                }

                public var currency: Currency {
                  get {
                    return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
                  }
                  set {
                    resultMap.updateValue(newValue.resultMap, forKey: "currency")
                  }
                }

                public struct Currency: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["Currency"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("address", type: .nonNull(.scalar(String.self))),
                      GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                      GraphQLField("name", type: .nonNull(.scalar(String.self))),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(address: String, decimals: Int, name: String) {
                    self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var address: String {
                    get {
                      return resultMap["address"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "address")
                    }
                  }

                  public var decimals: Int {
                    get {
                      return resultMap["decimals"]! as! Int
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "decimals")
                    }
                  }

                  public var name: String {
                    get {
                      return resultMap["name"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "name")
                    }
                  }
                }
              }

              public struct UsdcPrice: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["CurrencyAmount"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                    GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(decimal: Double, raw: String) {
                  self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var decimal: Double {
                  get {
                    return resultMap["decimal"]! as! Double
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimal")
                  }
                }

                public var raw: String {
                  get {
                    return resultMap["raw"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "raw")
                  }
                }
              }
            }
          }

          public var asV1MarketOfferCreatedEventProperties: AsV1MarketOfferCreatedEventProperties? {
            get {
              if !AsV1MarketOfferCreatedEventProperties.possibleTypes.contains(__typename) { return nil }
              return AsV1MarketOfferCreatedEventProperties(unsafeResultMap: resultMap)
            }
            set {
              guard let newValue = newValue else { return }
              resultMap = newValue.resultMap
            }
          }

          public struct AsV1MarketOfferCreatedEventProperties: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["V1MarketOfferCreatedEventProperties"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("amount", type: .nonNull(.scalar(String.self))),
                GraphQLField("price", type: .nonNull(.object(Price.selections))),
                GraphQLField("currency", type: .nonNull(.scalar(String.self))),
                GraphQLField("bidder", type: .nonNull(.scalar(String.self))),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(amount: String, price: Price, currency: String, bidder: String) {
              self.init(unsafeResultMap: ["__typename": "V1MarketOfferCreatedEventProperties", "amount": amount, "price": price.resultMap, "currency": currency, "bidder": bidder])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var amount: String {
              get {
                return resultMap["amount"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "amount")
              }
            }

            public var price: Price {
              get {
                return Price(unsafeResultMap: resultMap["price"]! as! ResultMap)
              }
              set {
                resultMap.updateValue(newValue.resultMap, forKey: "price")
              }
            }

            public var currency: String {
              get {
                return resultMap["currency"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "currency")
              }
            }

            public var bidder: String {
              get {
                return resultMap["bidder"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "bidder")
              }
            }

            public var fragments: Fragments {
              get {
                return Fragments(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }

            public struct Fragments {
              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public var v1MarketEventPropertiesInfo: V1MarketEventPropertiesInfo {
                get {
                  return V1MarketEventPropertiesInfo(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }
            }

            public struct Price: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["PriceAtTime"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                  GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
                  GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
                  GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
                self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var blockNumber: Int {
                get {
                  return resultMap["blockNumber"]! as! Int
                }
                set {
                  resultMap.updateValue(newValue, forKey: "blockNumber")
                }
              }

              public var chainTokenPrice: ChainTokenPrice? {
                get {
                  return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
                }
                set {
                  resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
                }
              }

              public var nativePrice: NativePrice {
                get {
                  return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
                }
                set {
                  resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
                }
              }

              public var usdcPrice: UsdcPrice? {
                get {
                  return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
                }
                set {
                  resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
                }
              }

              public var fragments: Fragments {
                get {
                  return Fragments(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }

              public struct Fragments {
                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public var priceSummary: PriceSummary {
                  get {
                    return PriceSummary(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }
              }

              public struct ChainTokenPrice: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["CurrencyAmount"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                    GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(decimal: Double, raw: String) {
                  self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var decimal: Double {
                  get {
                    return resultMap["decimal"]! as! Double
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimal")
                  }
                }

                public var raw: String {
                  get {
                    return resultMap["raw"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "raw")
                  }
                }
              }

              public struct NativePrice: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["CurrencyAmount"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                    GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                    GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(decimal: Double, raw: String, currency: Currency) {
                  self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var decimal: Double {
                  get {
                    return resultMap["decimal"]! as! Double
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimal")
                  }
                }

                public var raw: String {
                  get {
                    return resultMap["raw"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "raw")
                  }
                }

                public var currency: Currency {
                  get {
                    return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
                  }
                  set {
                    resultMap.updateValue(newValue.resultMap, forKey: "currency")
                  }
                }

                public struct Currency: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["Currency"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("address", type: .nonNull(.scalar(String.self))),
                      GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                      GraphQLField("name", type: .nonNull(.scalar(String.self))),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(address: String, decimals: Int, name: String) {
                    self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var address: String {
                    get {
                      return resultMap["address"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "address")
                    }
                  }

                  public var decimals: Int {
                    get {
                      return resultMap["decimals"]! as! Int
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "decimals")
                    }
                  }

                  public var name: String {
                    get {
                      return resultMap["name"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "name")
                    }
                  }
                }
              }

              public struct UsdcPrice: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["CurrencyAmount"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                    GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(decimal: Double, raw: String) {
                  self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var decimal: Double {
                  get {
                    return resultMap["decimal"]! as! Double
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimal")
                  }
                }

                public var raw: String {
                  get {
                    return resultMap["raw"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "raw")
                  }
                }
              }
            }
          }

          public var asV1MarketOfferFinalizedEventProperties: AsV1MarketOfferFinalizedEventProperties? {
            get {
              if !AsV1MarketOfferFinalizedEventProperties.possibleTypes.contains(__typename) { return nil }
              return AsV1MarketOfferFinalizedEventProperties(unsafeResultMap: resultMap)
            }
            set {
              guard let newValue = newValue else { return }
              resultMap = newValue.resultMap
            }
          }

          public struct AsV1MarketOfferFinalizedEventProperties: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["V1MarketOfferFinalizedEventProperties"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("amount", type: .nonNull(.scalar(String.self))),
                GraphQLField("price", type: .nonNull(.object(Price.selections))),
                GraphQLField("currency", type: .nonNull(.scalar(String.self))),
                GraphQLField("bidder", type: .nonNull(.scalar(String.self))),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(amount: String, price: Price, currency: String, bidder: String) {
              self.init(unsafeResultMap: ["__typename": "V1MarketOfferFinalizedEventProperties", "amount": amount, "price": price.resultMap, "currency": currency, "bidder": bidder])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var amount: String {
              get {
                return resultMap["amount"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "amount")
              }
            }

            public var price: Price {
              get {
                return Price(unsafeResultMap: resultMap["price"]! as! ResultMap)
              }
              set {
                resultMap.updateValue(newValue.resultMap, forKey: "price")
              }
            }

            public var currency: String {
              get {
                return resultMap["currency"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "currency")
              }
            }

            public var bidder: String {
              get {
                return resultMap["bidder"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "bidder")
              }
            }

            public var fragments: Fragments {
              get {
                return Fragments(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }

            public struct Fragments {
              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public var v1MarketEventPropertiesInfo: V1MarketEventPropertiesInfo {
                get {
                  return V1MarketEventPropertiesInfo(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }
            }

            public struct Price: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["PriceAtTime"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                  GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
                  GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
                  GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
                self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var blockNumber: Int {
                get {
                  return resultMap["blockNumber"]! as! Int
                }
                set {
                  resultMap.updateValue(newValue, forKey: "blockNumber")
                }
              }

              public var chainTokenPrice: ChainTokenPrice? {
                get {
                  return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
                }
                set {
                  resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
                }
              }

              public var nativePrice: NativePrice {
                get {
                  return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
                }
                set {
                  resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
                }
              }

              public var usdcPrice: UsdcPrice? {
                get {
                  return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
                }
                set {
                  resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
                }
              }

              public var fragments: Fragments {
                get {
                  return Fragments(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }

              public struct Fragments {
                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public var priceSummary: PriceSummary {
                  get {
                    return PriceSummary(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }
              }

              public struct ChainTokenPrice: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["CurrencyAmount"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                    GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(decimal: Double, raw: String) {
                  self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var decimal: Double {
                  get {
                    return resultMap["decimal"]! as! Double
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimal")
                  }
                }

                public var raw: String {
                  get {
                    return resultMap["raw"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "raw")
                  }
                }
              }

              public struct NativePrice: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["CurrencyAmount"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                    GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                    GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(decimal: Double, raw: String, currency: Currency) {
                  self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var decimal: Double {
                  get {
                    return resultMap["decimal"]! as! Double
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimal")
                  }
                }

                public var raw: String {
                  get {
                    return resultMap["raw"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "raw")
                  }
                }

                public var currency: Currency {
                  get {
                    return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
                  }
                  set {
                    resultMap.updateValue(newValue.resultMap, forKey: "currency")
                  }
                }

                public struct Currency: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["Currency"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("address", type: .nonNull(.scalar(String.self))),
                      GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                      GraphQLField("name", type: .nonNull(.scalar(String.self))),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(address: String, decimals: Int, name: String) {
                    self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var address: String {
                    get {
                      return resultMap["address"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "address")
                    }
                  }

                  public var decimals: Int {
                    get {
                      return resultMap["decimals"]! as! Int
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "decimals")
                    }
                  }

                  public var name: String {
                    get {
                      return resultMap["name"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "name")
                    }
                  }
                }
              }

              public struct UsdcPrice: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["CurrencyAmount"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                    GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(decimal: Double, raw: String) {
                  self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var decimal: Double {
                  get {
                    return resultMap["decimal"]! as! Double
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimal")
                  }
                }

                public var raw: String {
                  get {
                    return resultMap["raw"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "raw")
                  }
                }
              }
            }
          }

          public var asV1MarketOfferRemovedEventProperties: AsV1MarketOfferRemovedEventProperties? {
            get {
              if !AsV1MarketOfferRemovedEventProperties.possibleTypes.contains(__typename) { return nil }
              return AsV1MarketOfferRemovedEventProperties(unsafeResultMap: resultMap)
            }
            set {
              guard let newValue = newValue else { return }
              resultMap = newValue.resultMap
            }
          }

          public struct AsV1MarketOfferRemovedEventProperties: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["V1MarketOfferRemovedEventProperties"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("amount", type: .nonNull(.scalar(String.self))),
                GraphQLField("price", type: .nonNull(.object(Price.selections))),
                GraphQLField("currency", type: .nonNull(.scalar(String.self))),
                GraphQLField("bidder", type: .nonNull(.scalar(String.self))),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(amount: String, price: Price, currency: String, bidder: String) {
              self.init(unsafeResultMap: ["__typename": "V1MarketOfferRemovedEventProperties", "amount": amount, "price": price.resultMap, "currency": currency, "bidder": bidder])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var amount: String {
              get {
                return resultMap["amount"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "amount")
              }
            }

            public var price: Price {
              get {
                return Price(unsafeResultMap: resultMap["price"]! as! ResultMap)
              }
              set {
                resultMap.updateValue(newValue.resultMap, forKey: "price")
              }
            }

            public var currency: String {
              get {
                return resultMap["currency"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "currency")
              }
            }

            public var bidder: String {
              get {
                return resultMap["bidder"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "bidder")
              }
            }

            public var fragments: Fragments {
              get {
                return Fragments(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }

            public struct Fragments {
              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public var v1MarketEventPropertiesInfo: V1MarketEventPropertiesInfo {
                get {
                  return V1MarketEventPropertiesInfo(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }
            }

            public struct Price: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["PriceAtTime"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                  GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
                  GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
                  GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
                self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var blockNumber: Int {
                get {
                  return resultMap["blockNumber"]! as! Int
                }
                set {
                  resultMap.updateValue(newValue, forKey: "blockNumber")
                }
              }

              public var chainTokenPrice: ChainTokenPrice? {
                get {
                  return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
                }
                set {
                  resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
                }
              }

              public var nativePrice: NativePrice {
                get {
                  return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
                }
                set {
                  resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
                }
              }

              public var usdcPrice: UsdcPrice? {
                get {
                  return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
                }
                set {
                  resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
                }
              }

              public var fragments: Fragments {
                get {
                  return Fragments(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }

              public struct Fragments {
                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public var priceSummary: PriceSummary {
                  get {
                    return PriceSummary(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }
              }

              public struct ChainTokenPrice: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["CurrencyAmount"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                    GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(decimal: Double, raw: String) {
                  self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var decimal: Double {
                  get {
                    return resultMap["decimal"]! as! Double
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimal")
                  }
                }

                public var raw: String {
                  get {
                    return resultMap["raw"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "raw")
                  }
                }
              }

              public struct NativePrice: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["CurrencyAmount"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                    GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                    GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(decimal: Double, raw: String, currency: Currency) {
                  self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var decimal: Double {
                  get {
                    return resultMap["decimal"]! as! Double
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimal")
                  }
                }

                public var raw: String {
                  get {
                    return resultMap["raw"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "raw")
                  }
                }

                public var currency: Currency {
                  get {
                    return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
                  }
                  set {
                    resultMap.updateValue(newValue.resultMap, forKey: "currency")
                  }
                }

                public struct Currency: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["Currency"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("address", type: .nonNull(.scalar(String.self))),
                      GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                      GraphQLField("name", type: .nonNull(.scalar(String.self))),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(address: String, decimals: Int, name: String) {
                    self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var address: String {
                    get {
                      return resultMap["address"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "address")
                    }
                  }

                  public var decimals: Int {
                    get {
                      return resultMap["decimals"]! as! Int
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "decimals")
                    }
                  }

                  public var name: String {
                    get {
                      return resultMap["name"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "name")
                    }
                  }
                }
              }

              public struct UsdcPrice: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["CurrencyAmount"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                    GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(decimal: Double, raw: String) {
                  self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var decimal: Double {
                  get {
                    return resultMap["decimal"]! as! Double
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimal")
                  }
                }

                public var raw: String {
                  get {
                    return resultMap["raw"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "raw")
                  }
                }
              }
            }
          }
        }
      }

      public var asV2AuctionEvent: AsV2AuctionEvent? {
        get {
          if !AsV2AuctionEvent.possibleTypes.contains(__typename) { return nil }
          return AsV2AuctionEvent(unsafeResultMap: resultMap)
        }
        set {
          guard let newValue = newValue else { return }
          resultMap = newValue.resultMap
        }
      }

      public struct AsV2AuctionEvent: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["V2AuctionEvent"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("v2AuctionEventType", type: .nonNull(.scalar(V2AuctionEventType.self))),
            GraphQLField("address", type: .nonNull(.scalar(String.self))),
            GraphQLField("auctionId", type: .nonNull(.scalar(Int.self))),
            GraphQLField("collectionAddress", type: .nonNull(.scalar(String.self))),
            GraphQLField("tokenId", type: .nonNull(.scalar(String.self))),
            GraphQLField("properties", type: .nonNull(.object(Property.selections))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(v2AuctionEventType: V2AuctionEventType, address: String, auctionId: Int, collectionAddress: String, tokenId: String, properties: Property) {
          self.init(unsafeResultMap: ["__typename": "V2AuctionEvent", "v2AuctionEventType": v2AuctionEventType, "address": address, "auctionId": auctionId, "collectionAddress": collectionAddress, "tokenId": tokenId, "properties": properties.resultMap])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var v2AuctionEventType: V2AuctionEventType {
          get {
            return resultMap["v2AuctionEventType"]! as! V2AuctionEventType
          }
          set {
            resultMap.updateValue(newValue, forKey: "v2AuctionEventType")
          }
        }

        public var address: String {
          get {
            return resultMap["address"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "address")
          }
        }

        public var auctionId: Int {
          get {
            return resultMap["auctionId"]! as! Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "auctionId")
          }
        }

        public var collectionAddress: String {
          get {
            return resultMap["collectionAddress"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "collectionAddress")
          }
        }

        public var tokenId: String {
          get {
            return resultMap["tokenId"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "tokenId")
          }
        }

        public var properties: Property {
          get {
            return Property(unsafeResultMap: resultMap["properties"]! as! ResultMap)
          }
          set {
            resultMap.updateValue(newValue.resultMap, forKey: "properties")
          }
        }

        public struct Property: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["V2AuctionBidEventProperties", "V2AuctionCreatedEventProperties", "V2AuctionCanceledEventProperties", "V2AuctionDurationExtendedEventProperties", "V2AuctionEndedEventProperties", "V2AuctionReservePriceUpdatedEventProperties", "V2AuctionApprovalUpdatedEventProperties"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLTypeCase(
                variants: ["V2AuctionBidEventProperties": AsV2AuctionBidEventProperties.selections, "V2AuctionCreatedEventProperties": AsV2AuctionCreatedEventProperties.selections, "V2AuctionCanceledEventProperties": AsV2AuctionCanceledEventProperties.selections, "V2AuctionDurationExtendedEventProperties": AsV2AuctionDurationExtendedEventProperties.selections, "V2AuctionEndedEventProperties": AsV2AuctionEndedEventProperties.selections, "V2AuctionReservePriceUpdatedEventProperties": AsV2AuctionReservePriceUpdatedEventProperties.selections, "V2AuctionApprovalUpdatedEventProperties": AsV2AuctionApprovalUpdatedEventProperties.selections],
                default: [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                ]
              )
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public static func makeV2AuctionBidEventProperties(sender: String, firstBid: Bool, extended: Bool, value: String, price: AsV2AuctionBidEventProperties.Price) -> Property {
            return Property(unsafeResultMap: ["__typename": "V2AuctionBidEventProperties", "sender": sender, "firstBid": firstBid, "extended": extended, "value": value, "price": price.resultMap])
          }

          public static func makeV2AuctionCreatedEventProperties(auctionCurrency: String, tokenOwner: String, curator: String, curatorFeePercentage: Int, duration: String, reservePrice: String, price: AsV2AuctionCreatedEventProperties.Price) -> Property {
            return Property(unsafeResultMap: ["__typename": "V2AuctionCreatedEventProperties", "auctionCurrency": auctionCurrency, "tokenOwner": tokenOwner, "curator": curator, "curatorFeePercentage": curatorFeePercentage, "duration": duration, "reservePrice": reservePrice, "price": price.resultMap])
          }

          public static func makeV2AuctionCanceledEventProperties(tokenOwner: String) -> Property {
            return Property(unsafeResultMap: ["__typename": "V2AuctionCanceledEventProperties", "tokenOwner": tokenOwner])
          }

          public static func makeV2AuctionDurationExtendedEventProperties(duration: String) -> Property {
            return Property(unsafeResultMap: ["__typename": "V2AuctionDurationExtendedEventProperties", "duration": duration])
          }

          public static func makeV2AuctionEndedEventProperties(tokenOwner: String, curator: String, winner: String, auctionCurrency: String, amount: String, curatorFee: String) -> Property {
            return Property(unsafeResultMap: ["__typename": "V2AuctionEndedEventProperties", "tokenOwner": tokenOwner, "curator": curator, "winner": winner, "auctionCurrency": auctionCurrency, "amount": amount, "curatorFee": curatorFee])
          }

          public static func makeV2AuctionReservePriceUpdatedEventProperties(reservePrice: String, price: AsV2AuctionReservePriceUpdatedEventProperties.Price) -> Property {
            return Property(unsafeResultMap: ["__typename": "V2AuctionReservePriceUpdatedEventProperties", "reservePrice": reservePrice, "price": price.resultMap])
          }

          public static func makeV2AuctionApprovalUpdatedEventProperties(approved: Bool) -> Property {
            return Property(unsafeResultMap: ["__typename": "V2AuctionApprovalUpdatedEventProperties", "approved": approved])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var fragments: Fragments {
            get {
              return Fragments(unsafeResultMap: resultMap)
            }
            set {
              resultMap += newValue.resultMap
            }
          }

          public struct Fragments {
            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public var v2AuctionEventPropertiesInfo: V2AuctionEventPropertiesInfo {
              get {
                return V2AuctionEventPropertiesInfo(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }
          }

          public var asV2AuctionBidEventProperties: AsV2AuctionBidEventProperties? {
            get {
              if !AsV2AuctionBidEventProperties.possibleTypes.contains(__typename) { return nil }
              return AsV2AuctionBidEventProperties(unsafeResultMap: resultMap)
            }
            set {
              guard let newValue = newValue else { return }
              resultMap = newValue.resultMap
            }
          }

          public struct AsV2AuctionBidEventProperties: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["V2AuctionBidEventProperties"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("sender", type: .nonNull(.scalar(String.self))),
                GraphQLField("firstBid", type: .nonNull(.scalar(Bool.self))),
                GraphQLField("extended", type: .nonNull(.scalar(Bool.self))),
                GraphQLField("value", type: .nonNull(.scalar(String.self))),
                GraphQLField("price", type: .nonNull(.object(Price.selections))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("sender", type: .nonNull(.scalar(String.self))),
                GraphQLField("firstBid", type: .nonNull(.scalar(Bool.self))),
                GraphQLField("extended", type: .nonNull(.scalar(Bool.self))),
                GraphQLField("value", type: .nonNull(.scalar(String.self))),
                GraphQLField("price", type: .nonNull(.object(Price.selections))),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(sender: String, firstBid: Bool, extended: Bool, value: String, price: Price) {
              self.init(unsafeResultMap: ["__typename": "V2AuctionBidEventProperties", "sender": sender, "firstBid": firstBid, "extended": extended, "value": value, "price": price.resultMap])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var sender: String {
              get {
                return resultMap["sender"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "sender")
              }
            }

            public var firstBid: Bool {
              get {
                return resultMap["firstBid"]! as! Bool
              }
              set {
                resultMap.updateValue(newValue, forKey: "firstBid")
              }
            }

            public var extended: Bool {
              get {
                return resultMap["extended"]! as! Bool
              }
              set {
                resultMap.updateValue(newValue, forKey: "extended")
              }
            }

            public var value: String {
              get {
                return resultMap["value"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "value")
              }
            }

            public var price: Price {
              get {
                return Price(unsafeResultMap: resultMap["price"]! as! ResultMap)
              }
              set {
                resultMap.updateValue(newValue.resultMap, forKey: "price")
              }
            }

            public var fragments: Fragments {
              get {
                return Fragments(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }

            public struct Fragments {
              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public var v2AuctionEventPropertiesInfo: V2AuctionEventPropertiesInfo {
                get {
                  return V2AuctionEventPropertiesInfo(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }
            }

            public struct Price: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["PriceAtTime"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                  GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
                  GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
                  GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
                self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var blockNumber: Int {
                get {
                  return resultMap["blockNumber"]! as! Int
                }
                set {
                  resultMap.updateValue(newValue, forKey: "blockNumber")
                }
              }

              public var chainTokenPrice: ChainTokenPrice? {
                get {
                  return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
                }
                set {
                  resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
                }
              }

              public var nativePrice: NativePrice {
                get {
                  return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
                }
                set {
                  resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
                }
              }

              public var usdcPrice: UsdcPrice? {
                get {
                  return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
                }
                set {
                  resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
                }
              }

              public var fragments: Fragments {
                get {
                  return Fragments(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }

              public struct Fragments {
                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public var priceSummary: PriceSummary {
                  get {
                    return PriceSummary(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }
              }

              public struct ChainTokenPrice: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["CurrencyAmount"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                    GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(decimal: Double, raw: String) {
                  self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var decimal: Double {
                  get {
                    return resultMap["decimal"]! as! Double
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimal")
                  }
                }

                public var raw: String {
                  get {
                    return resultMap["raw"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "raw")
                  }
                }
              }

              public struct NativePrice: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["CurrencyAmount"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                    GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                    GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(decimal: Double, raw: String, currency: Currency) {
                  self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var decimal: Double {
                  get {
                    return resultMap["decimal"]! as! Double
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimal")
                  }
                }

                public var raw: String {
                  get {
                    return resultMap["raw"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "raw")
                  }
                }

                public var currency: Currency {
                  get {
                    return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
                  }
                  set {
                    resultMap.updateValue(newValue.resultMap, forKey: "currency")
                  }
                }

                public struct Currency: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["Currency"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("address", type: .nonNull(.scalar(String.self))),
                      GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                      GraphQLField("name", type: .nonNull(.scalar(String.self))),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(address: String, decimals: Int, name: String) {
                    self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var address: String {
                    get {
                      return resultMap["address"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "address")
                    }
                  }

                  public var decimals: Int {
                    get {
                      return resultMap["decimals"]! as! Int
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "decimals")
                    }
                  }

                  public var name: String {
                    get {
                      return resultMap["name"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "name")
                    }
                  }
                }
              }

              public struct UsdcPrice: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["CurrencyAmount"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                    GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(decimal: Double, raw: String) {
                  self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var decimal: Double {
                  get {
                    return resultMap["decimal"]! as! Double
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimal")
                  }
                }

                public var raw: String {
                  get {
                    return resultMap["raw"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "raw")
                  }
                }
              }
            }
          }

          public var asV2AuctionCreatedEventProperties: AsV2AuctionCreatedEventProperties? {
            get {
              if !AsV2AuctionCreatedEventProperties.possibleTypes.contains(__typename) { return nil }
              return AsV2AuctionCreatedEventProperties(unsafeResultMap: resultMap)
            }
            set {
              guard let newValue = newValue else { return }
              resultMap = newValue.resultMap
            }
          }

          public struct AsV2AuctionCreatedEventProperties: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["V2AuctionCreatedEventProperties"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("auctionCurrency", type: .nonNull(.scalar(String.self))),
                GraphQLField("tokenOwner", type: .nonNull(.scalar(String.self))),
                GraphQLField("curator", type: .nonNull(.scalar(String.self))),
                GraphQLField("curatorFeePercentage", type: .nonNull(.scalar(Int.self))),
                GraphQLField("duration", type: .nonNull(.scalar(String.self))),
                GraphQLField("reservePrice", type: .nonNull(.scalar(String.self))),
                GraphQLField("price", type: .nonNull(.object(Price.selections))),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(auctionCurrency: String, tokenOwner: String, curator: String, curatorFeePercentage: Int, duration: String, reservePrice: String, price: Price) {
              self.init(unsafeResultMap: ["__typename": "V2AuctionCreatedEventProperties", "auctionCurrency": auctionCurrency, "tokenOwner": tokenOwner, "curator": curator, "curatorFeePercentage": curatorFeePercentage, "duration": duration, "reservePrice": reservePrice, "price": price.resultMap])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var auctionCurrency: String {
              get {
                return resultMap["auctionCurrency"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "auctionCurrency")
              }
            }

            public var tokenOwner: String {
              get {
                return resultMap["tokenOwner"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "tokenOwner")
              }
            }

            public var curator: String {
              get {
                return resultMap["curator"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "curator")
              }
            }

            public var curatorFeePercentage: Int {
              get {
                return resultMap["curatorFeePercentage"]! as! Int
              }
              set {
                resultMap.updateValue(newValue, forKey: "curatorFeePercentage")
              }
            }

            public var duration: String {
              get {
                return resultMap["duration"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "duration")
              }
            }

            public var reservePrice: String {
              get {
                return resultMap["reservePrice"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "reservePrice")
              }
            }

            public var price: Price {
              get {
                return Price(unsafeResultMap: resultMap["price"]! as! ResultMap)
              }
              set {
                resultMap.updateValue(newValue.resultMap, forKey: "price")
              }
            }

            public var fragments: Fragments {
              get {
                return Fragments(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }

            public struct Fragments {
              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public var v2AuctionEventPropertiesInfo: V2AuctionEventPropertiesInfo {
                get {
                  return V2AuctionEventPropertiesInfo(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }
            }

            public struct Price: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["PriceAtTime"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                  GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
                  GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
                  GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
                self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var blockNumber: Int {
                get {
                  return resultMap["blockNumber"]! as! Int
                }
                set {
                  resultMap.updateValue(newValue, forKey: "blockNumber")
                }
              }

              public var chainTokenPrice: ChainTokenPrice? {
                get {
                  return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
                }
                set {
                  resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
                }
              }

              public var nativePrice: NativePrice {
                get {
                  return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
                }
                set {
                  resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
                }
              }

              public var usdcPrice: UsdcPrice? {
                get {
                  return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
                }
                set {
                  resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
                }
              }

              public var fragments: Fragments {
                get {
                  return Fragments(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }

              public struct Fragments {
                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public var priceSummary: PriceSummary {
                  get {
                    return PriceSummary(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }
              }

              public struct ChainTokenPrice: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["CurrencyAmount"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                    GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(decimal: Double, raw: String) {
                  self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var decimal: Double {
                  get {
                    return resultMap["decimal"]! as! Double
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimal")
                  }
                }

                public var raw: String {
                  get {
                    return resultMap["raw"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "raw")
                  }
                }
              }

              public struct NativePrice: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["CurrencyAmount"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                    GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                    GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(decimal: Double, raw: String, currency: Currency) {
                  self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var decimal: Double {
                  get {
                    return resultMap["decimal"]! as! Double
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimal")
                  }
                }

                public var raw: String {
                  get {
                    return resultMap["raw"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "raw")
                  }
                }

                public var currency: Currency {
                  get {
                    return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
                  }
                  set {
                    resultMap.updateValue(newValue.resultMap, forKey: "currency")
                  }
                }

                public struct Currency: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["Currency"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("address", type: .nonNull(.scalar(String.self))),
                      GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                      GraphQLField("name", type: .nonNull(.scalar(String.self))),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(address: String, decimals: Int, name: String) {
                    self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var address: String {
                    get {
                      return resultMap["address"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "address")
                    }
                  }

                  public var decimals: Int {
                    get {
                      return resultMap["decimals"]! as! Int
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "decimals")
                    }
                  }

                  public var name: String {
                    get {
                      return resultMap["name"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "name")
                    }
                  }
                }
              }

              public struct UsdcPrice: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["CurrencyAmount"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                    GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(decimal: Double, raw: String) {
                  self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var decimal: Double {
                  get {
                    return resultMap["decimal"]! as! Double
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimal")
                  }
                }

                public var raw: String {
                  get {
                    return resultMap["raw"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "raw")
                  }
                }
              }
            }
          }

          public var asV2AuctionCanceledEventProperties: AsV2AuctionCanceledEventProperties? {
            get {
              if !AsV2AuctionCanceledEventProperties.possibleTypes.contains(__typename) { return nil }
              return AsV2AuctionCanceledEventProperties(unsafeResultMap: resultMap)
            }
            set {
              guard let newValue = newValue else { return }
              resultMap = newValue.resultMap
            }
          }

          public struct AsV2AuctionCanceledEventProperties: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["V2AuctionCanceledEventProperties"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("tokenOwner", type: .nonNull(.scalar(String.self))),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(tokenOwner: String) {
              self.init(unsafeResultMap: ["__typename": "V2AuctionCanceledEventProperties", "tokenOwner": tokenOwner])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var tokenOwner: String {
              get {
                return resultMap["tokenOwner"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "tokenOwner")
              }
            }

            public var fragments: Fragments {
              get {
                return Fragments(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }

            public struct Fragments {
              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public var v2AuctionEventPropertiesInfo: V2AuctionEventPropertiesInfo {
                get {
                  return V2AuctionEventPropertiesInfo(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }
            }
          }

          public var asV2AuctionDurationExtendedEventProperties: AsV2AuctionDurationExtendedEventProperties? {
            get {
              if !AsV2AuctionDurationExtendedEventProperties.possibleTypes.contains(__typename) { return nil }
              return AsV2AuctionDurationExtendedEventProperties(unsafeResultMap: resultMap)
            }
            set {
              guard let newValue = newValue else { return }
              resultMap = newValue.resultMap
            }
          }

          public struct AsV2AuctionDurationExtendedEventProperties: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["V2AuctionDurationExtendedEventProperties"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("duration", type: .nonNull(.scalar(String.self))),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(duration: String) {
              self.init(unsafeResultMap: ["__typename": "V2AuctionDurationExtendedEventProperties", "duration": duration])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var duration: String {
              get {
                return resultMap["duration"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "duration")
              }
            }

            public var fragments: Fragments {
              get {
                return Fragments(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }

            public struct Fragments {
              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public var v2AuctionEventPropertiesInfo: V2AuctionEventPropertiesInfo {
                get {
                  return V2AuctionEventPropertiesInfo(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }
            }
          }

          public var asV2AuctionEndedEventProperties: AsV2AuctionEndedEventProperties? {
            get {
              if !AsV2AuctionEndedEventProperties.possibleTypes.contains(__typename) { return nil }
              return AsV2AuctionEndedEventProperties(unsafeResultMap: resultMap)
            }
            set {
              guard let newValue = newValue else { return }
              resultMap = newValue.resultMap
            }
          }

          public struct AsV2AuctionEndedEventProperties: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["V2AuctionEndedEventProperties"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("tokenOwner", type: .nonNull(.scalar(String.self))),
                GraphQLField("curator", type: .nonNull(.scalar(String.self))),
                GraphQLField("winner", type: .nonNull(.scalar(String.self))),
                GraphQLField("auctionCurrency", type: .nonNull(.scalar(String.self))),
                GraphQLField("amount", type: .nonNull(.scalar(String.self))),
                GraphQLField("curatorFee", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("tokenOwner", type: .nonNull(.scalar(String.self))),
                GraphQLField("curator", type: .nonNull(.scalar(String.self))),
                GraphQLField("winner", type: .nonNull(.scalar(String.self))),
                GraphQLField("auctionCurrency", type: .nonNull(.scalar(String.self))),
                GraphQLField("amount", type: .nonNull(.scalar(String.self))),
                GraphQLField("curatorFee", type: .nonNull(.scalar(String.self))),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(tokenOwner: String, curator: String, winner: String, auctionCurrency: String, amount: String, curatorFee: String) {
              self.init(unsafeResultMap: ["__typename": "V2AuctionEndedEventProperties", "tokenOwner": tokenOwner, "curator": curator, "winner": winner, "auctionCurrency": auctionCurrency, "amount": amount, "curatorFee": curatorFee])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var tokenOwner: String {
              get {
                return resultMap["tokenOwner"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "tokenOwner")
              }
            }

            public var curator: String {
              get {
                return resultMap["curator"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "curator")
              }
            }

            public var winner: String {
              get {
                return resultMap["winner"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "winner")
              }
            }

            public var auctionCurrency: String {
              get {
                return resultMap["auctionCurrency"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "auctionCurrency")
              }
            }

            public var amount: String {
              get {
                return resultMap["amount"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "amount")
              }
            }

            public var curatorFee: String {
              get {
                return resultMap["curatorFee"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "curatorFee")
              }
            }

            public var fragments: Fragments {
              get {
                return Fragments(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }

            public struct Fragments {
              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public var v2AuctionEventPropertiesInfo: V2AuctionEventPropertiesInfo {
                get {
                  return V2AuctionEventPropertiesInfo(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }
            }
          }

          public var asV2AuctionReservePriceUpdatedEventProperties: AsV2AuctionReservePriceUpdatedEventProperties? {
            get {
              if !AsV2AuctionReservePriceUpdatedEventProperties.possibleTypes.contains(__typename) { return nil }
              return AsV2AuctionReservePriceUpdatedEventProperties(unsafeResultMap: resultMap)
            }
            set {
              guard let newValue = newValue else { return }
              resultMap = newValue.resultMap
            }
          }

          public struct AsV2AuctionReservePriceUpdatedEventProperties: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["V2AuctionReservePriceUpdatedEventProperties"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("reservePrice", type: .nonNull(.scalar(String.self))),
                GraphQLField("price", type: .nonNull(.object(Price.selections))),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(reservePrice: String, price: Price) {
              self.init(unsafeResultMap: ["__typename": "V2AuctionReservePriceUpdatedEventProperties", "reservePrice": reservePrice, "price": price.resultMap])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var reservePrice: String {
              get {
                return resultMap["reservePrice"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "reservePrice")
              }
            }

            public var price: Price {
              get {
                return Price(unsafeResultMap: resultMap["price"]! as! ResultMap)
              }
              set {
                resultMap.updateValue(newValue.resultMap, forKey: "price")
              }
            }

            public var fragments: Fragments {
              get {
                return Fragments(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }

            public struct Fragments {
              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public var v2AuctionEventPropertiesInfo: V2AuctionEventPropertiesInfo {
                get {
                  return V2AuctionEventPropertiesInfo(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }
            }

            public struct Price: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["PriceAtTime"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                  GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
                  GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
                  GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
                self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var blockNumber: Int {
                get {
                  return resultMap["blockNumber"]! as! Int
                }
                set {
                  resultMap.updateValue(newValue, forKey: "blockNumber")
                }
              }

              public var chainTokenPrice: ChainTokenPrice? {
                get {
                  return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
                }
                set {
                  resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
                }
              }

              public var nativePrice: NativePrice {
                get {
                  return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
                }
                set {
                  resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
                }
              }

              public var usdcPrice: UsdcPrice? {
                get {
                  return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
                }
                set {
                  resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
                }
              }

              public var fragments: Fragments {
                get {
                  return Fragments(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }

              public struct Fragments {
                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public var priceSummary: PriceSummary {
                  get {
                    return PriceSummary(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }
              }

              public struct ChainTokenPrice: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["CurrencyAmount"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                    GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(decimal: Double, raw: String) {
                  self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var decimal: Double {
                  get {
                    return resultMap["decimal"]! as! Double
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimal")
                  }
                }

                public var raw: String {
                  get {
                    return resultMap["raw"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "raw")
                  }
                }
              }

              public struct NativePrice: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["CurrencyAmount"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                    GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                    GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(decimal: Double, raw: String, currency: Currency) {
                  self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var decimal: Double {
                  get {
                    return resultMap["decimal"]! as! Double
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimal")
                  }
                }

                public var raw: String {
                  get {
                    return resultMap["raw"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "raw")
                  }
                }

                public var currency: Currency {
                  get {
                    return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
                  }
                  set {
                    resultMap.updateValue(newValue.resultMap, forKey: "currency")
                  }
                }

                public struct Currency: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["Currency"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("address", type: .nonNull(.scalar(String.self))),
                      GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                      GraphQLField("name", type: .nonNull(.scalar(String.self))),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(address: String, decimals: Int, name: String) {
                    self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var address: String {
                    get {
                      return resultMap["address"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "address")
                    }
                  }

                  public var decimals: Int {
                    get {
                      return resultMap["decimals"]! as! Int
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "decimals")
                    }
                  }

                  public var name: String {
                    get {
                      return resultMap["name"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "name")
                    }
                  }
                }
              }

              public struct UsdcPrice: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["CurrencyAmount"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                    GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(decimal: Double, raw: String) {
                  self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var decimal: Double {
                  get {
                    return resultMap["decimal"]! as! Double
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimal")
                  }
                }

                public var raw: String {
                  get {
                    return resultMap["raw"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "raw")
                  }
                }
              }
            }
          }

          public var asV2AuctionApprovalUpdatedEventProperties: AsV2AuctionApprovalUpdatedEventProperties? {
            get {
              if !AsV2AuctionApprovalUpdatedEventProperties.possibleTypes.contains(__typename) { return nil }
              return AsV2AuctionApprovalUpdatedEventProperties(unsafeResultMap: resultMap)
            }
            set {
              guard let newValue = newValue else { return }
              resultMap = newValue.resultMap
            }
          }

          public struct AsV2AuctionApprovalUpdatedEventProperties: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["V2AuctionApprovalUpdatedEventProperties"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("approved", type: .nonNull(.scalar(Bool.self))),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(approved: Bool) {
              self.init(unsafeResultMap: ["__typename": "V2AuctionApprovalUpdatedEventProperties", "approved": approved])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var approved: Bool {
              get {
                return resultMap["approved"]! as! Bool
              }
              set {
                resultMap.updateValue(newValue, forKey: "approved")
              }
            }

            public var fragments: Fragments {
              get {
                return Fragments(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }

            public struct Fragments {
              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public var v2AuctionEventPropertiesInfo: V2AuctionEventPropertiesInfo {
                get {
                  return V2AuctionEventPropertiesInfo(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }
            }
          }
        }
      }

      public var asV3AskEvent: AsV3AskEvent? {
        get {
          if !AsV3AskEvent.possibleTypes.contains(__typename) { return nil }
          return AsV3AskEvent(unsafeResultMap: resultMap)
        }
        set {
          guard let newValue = newValue else { return }
          resultMap = newValue.resultMap
        }
      }

      public struct AsV3AskEvent: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["V3AskEvent"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("v3AskEventType", type: .nonNull(.scalar(V3AskEventType.self))),
            GraphQLField("address", type: .nonNull(.scalar(String.self))),
            GraphQLField("collectionAddress", type: .nonNull(.scalar(String.self))),
            GraphQLField("tokenId", type: .nonNull(.scalar(String.self))),
            GraphQLField("properties", type: .nonNull(.object(Property.selections))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(v3AskEventType: V3AskEventType, address: String, collectionAddress: String, tokenId: String, properties: Property) {
          self.init(unsafeResultMap: ["__typename": "V3AskEvent", "v3AskEventType": v3AskEventType, "address": address, "collectionAddress": collectionAddress, "tokenId": tokenId, "properties": properties.resultMap])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var v3AskEventType: V3AskEventType {
          get {
            return resultMap["v3AskEventType"]! as! V3AskEventType
          }
          set {
            resultMap.updateValue(newValue, forKey: "v3AskEventType")
          }
        }

        public var address: String {
          get {
            return resultMap["address"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "address")
          }
        }

        public var collectionAddress: String {
          get {
            return resultMap["collectionAddress"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "collectionAddress")
          }
        }

        public var tokenId: String {
          get {
            return resultMap["tokenId"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "tokenId")
          }
        }

        public var properties: Property {
          get {
            return Property(unsafeResultMap: resultMap["properties"]! as! ResultMap)
          }
          set {
            resultMap.updateValue(newValue.resultMap, forKey: "properties")
          }
        }

        public struct Property: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["V3AskCreatedEventProperties", "V3AskCanceledEventProperties", "V3AskPriceUpdatedEventProperties", "V3AskFilledEventProperties"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLTypeCase(
                variants: ["V3AskCreatedEventProperties": AsV3AskCreatedEventProperties.selections, "V3AskCanceledEventProperties": AsV3AskCanceledEventProperties.selections, "V3AskPriceUpdatedEventProperties": AsV3AskPriceUpdatedEventProperties.selections, "V3AskFilledEventProperties": AsV3AskFilledEventProperties.selections],
                default: [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                ]
              )
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public static func makeV3AskCreatedEventProperties(seller: String, sellerFundsRecipient: String, askCurrency: String, askPrice: String, findersFeeBps: Int, price: AsV3AskCreatedEventProperties.Price) -> Property {
            return Property(unsafeResultMap: ["__typename": "V3AskCreatedEventProperties", "seller": seller, "sellerFundsRecipient": sellerFundsRecipient, "askCurrency": askCurrency, "askPrice": askPrice, "findersFeeBps": findersFeeBps, "price": price.resultMap])
          }

          public static func makeV3AskCanceledEventProperties(seller: String, sellerFundsRecipient: String, askCurrency: String, askPrice: String, findersFeeBps: Int, price: AsV3AskCanceledEventProperties.Price) -> Property {
            return Property(unsafeResultMap: ["__typename": "V3AskCanceledEventProperties", "seller": seller, "sellerFundsRecipient": sellerFundsRecipient, "askCurrency": askCurrency, "askPrice": askPrice, "findersFeeBps": findersFeeBps, "price": price.resultMap])
          }

          public static func makeV3AskPriceUpdatedEventProperties(seller: String, sellerFundsRecipient: String, askCurrency: String, askPrice: String, findersFeeBps: Int, price: AsV3AskPriceUpdatedEventProperties.Price) -> Property {
            return Property(unsafeResultMap: ["__typename": "V3AskPriceUpdatedEventProperties", "seller": seller, "sellerFundsRecipient": sellerFundsRecipient, "askCurrency": askCurrency, "askPrice": askPrice, "findersFeeBps": findersFeeBps, "price": price.resultMap])
          }

          public static func makeV3AskFilledEventProperties(seller: String, sellerFundsRecipient: String, askCurrency: String, askPrice: String, findersFeeBps: Int, price: AsV3AskFilledEventProperties.Price, finder: String, buyer: String) -> Property {
            return Property(unsafeResultMap: ["__typename": "V3AskFilledEventProperties", "seller": seller, "sellerFundsRecipient": sellerFundsRecipient, "askCurrency": askCurrency, "askPrice": askPrice, "findersFeeBps": findersFeeBps, "price": price.resultMap, "finder": finder, "buyer": buyer])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var fragments: Fragments {
            get {
              return Fragments(unsafeResultMap: resultMap)
            }
            set {
              resultMap += newValue.resultMap
            }
          }

          public struct Fragments {
            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public var v3AskEventPropertiesInfo: V3AskEventPropertiesInfo {
              get {
                return V3AskEventPropertiesInfo(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }
          }

          public var asV3AskCreatedEventProperties: AsV3AskCreatedEventProperties? {
            get {
              if !AsV3AskCreatedEventProperties.possibleTypes.contains(__typename) { return nil }
              return AsV3AskCreatedEventProperties(unsafeResultMap: resultMap)
            }
            set {
              guard let newValue = newValue else { return }
              resultMap = newValue.resultMap
            }
          }

          public struct AsV3AskCreatedEventProperties: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["V3AskCreatedEventProperties"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("seller", type: .nonNull(.scalar(String.self))),
                GraphQLField("sellerFundsRecipient", type: .nonNull(.scalar(String.self))),
                GraphQLField("askCurrency", type: .nonNull(.scalar(String.self))),
                GraphQLField("askPrice", type: .nonNull(.scalar(String.self))),
                GraphQLField("findersFeeBps", type: .nonNull(.scalar(Int.self))),
                GraphQLField("price", type: .nonNull(.object(Price.selections))),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(seller: String, sellerFundsRecipient: String, askCurrency: String, askPrice: String, findersFeeBps: Int, price: Price) {
              self.init(unsafeResultMap: ["__typename": "V3AskCreatedEventProperties", "seller": seller, "sellerFundsRecipient": sellerFundsRecipient, "askCurrency": askCurrency, "askPrice": askPrice, "findersFeeBps": findersFeeBps, "price": price.resultMap])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var seller: String {
              get {
                return resultMap["seller"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "seller")
              }
            }

            public var sellerFundsRecipient: String {
              get {
                return resultMap["sellerFundsRecipient"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "sellerFundsRecipient")
              }
            }

            public var askCurrency: String {
              get {
                return resultMap["askCurrency"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "askCurrency")
              }
            }

            public var askPrice: String {
              get {
                return resultMap["askPrice"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "askPrice")
              }
            }

            public var findersFeeBps: Int {
              get {
                return resultMap["findersFeeBps"]! as! Int
              }
              set {
                resultMap.updateValue(newValue, forKey: "findersFeeBps")
              }
            }

            public var price: Price {
              get {
                return Price(unsafeResultMap: resultMap["price"]! as! ResultMap)
              }
              set {
                resultMap.updateValue(newValue.resultMap, forKey: "price")
              }
            }

            public var fragments: Fragments {
              get {
                return Fragments(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }

            public struct Fragments {
              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public var v3AskEventPropertiesInfo: V3AskEventPropertiesInfo {
                get {
                  return V3AskEventPropertiesInfo(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }
            }

            public struct Price: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["PriceAtTime"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                  GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
                  GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
                  GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
                self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var blockNumber: Int {
                get {
                  return resultMap["blockNumber"]! as! Int
                }
                set {
                  resultMap.updateValue(newValue, forKey: "blockNumber")
                }
              }

              public var chainTokenPrice: ChainTokenPrice? {
                get {
                  return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
                }
                set {
                  resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
                }
              }

              public var nativePrice: NativePrice {
                get {
                  return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
                }
                set {
                  resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
                }
              }

              public var usdcPrice: UsdcPrice? {
                get {
                  return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
                }
                set {
                  resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
                }
              }

              public var fragments: Fragments {
                get {
                  return Fragments(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }

              public struct Fragments {
                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public var priceSummary: PriceSummary {
                  get {
                    return PriceSummary(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }
              }

              public struct ChainTokenPrice: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["CurrencyAmount"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                    GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(decimal: Double, raw: String) {
                  self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var decimal: Double {
                  get {
                    return resultMap["decimal"]! as! Double
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimal")
                  }
                }

                public var raw: String {
                  get {
                    return resultMap["raw"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "raw")
                  }
                }
              }

              public struct NativePrice: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["CurrencyAmount"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                    GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                    GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(decimal: Double, raw: String, currency: Currency) {
                  self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var decimal: Double {
                  get {
                    return resultMap["decimal"]! as! Double
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimal")
                  }
                }

                public var raw: String {
                  get {
                    return resultMap["raw"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "raw")
                  }
                }

                public var currency: Currency {
                  get {
                    return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
                  }
                  set {
                    resultMap.updateValue(newValue.resultMap, forKey: "currency")
                  }
                }

                public struct Currency: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["Currency"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("address", type: .nonNull(.scalar(String.self))),
                      GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                      GraphQLField("name", type: .nonNull(.scalar(String.self))),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(address: String, decimals: Int, name: String) {
                    self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var address: String {
                    get {
                      return resultMap["address"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "address")
                    }
                  }

                  public var decimals: Int {
                    get {
                      return resultMap["decimals"]! as! Int
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "decimals")
                    }
                  }

                  public var name: String {
                    get {
                      return resultMap["name"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "name")
                    }
                  }
                }
              }

              public struct UsdcPrice: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["CurrencyAmount"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                    GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(decimal: Double, raw: String) {
                  self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var decimal: Double {
                  get {
                    return resultMap["decimal"]! as! Double
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimal")
                  }
                }

                public var raw: String {
                  get {
                    return resultMap["raw"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "raw")
                  }
                }
              }
            }
          }

          public var asV3AskCanceledEventProperties: AsV3AskCanceledEventProperties? {
            get {
              if !AsV3AskCanceledEventProperties.possibleTypes.contains(__typename) { return nil }
              return AsV3AskCanceledEventProperties(unsafeResultMap: resultMap)
            }
            set {
              guard let newValue = newValue else { return }
              resultMap = newValue.resultMap
            }
          }

          public struct AsV3AskCanceledEventProperties: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["V3AskCanceledEventProperties"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("seller", type: .nonNull(.scalar(String.self))),
                GraphQLField("sellerFundsRecipient", type: .nonNull(.scalar(String.self))),
                GraphQLField("askCurrency", type: .nonNull(.scalar(String.self))),
                GraphQLField("askPrice", type: .nonNull(.scalar(String.self))),
                GraphQLField("findersFeeBps", type: .nonNull(.scalar(Int.self))),
                GraphQLField("price", type: .nonNull(.object(Price.selections))),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(seller: String, sellerFundsRecipient: String, askCurrency: String, askPrice: String, findersFeeBps: Int, price: Price) {
              self.init(unsafeResultMap: ["__typename": "V3AskCanceledEventProperties", "seller": seller, "sellerFundsRecipient": sellerFundsRecipient, "askCurrency": askCurrency, "askPrice": askPrice, "findersFeeBps": findersFeeBps, "price": price.resultMap])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var seller: String {
              get {
                return resultMap["seller"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "seller")
              }
            }

            public var sellerFundsRecipient: String {
              get {
                return resultMap["sellerFundsRecipient"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "sellerFundsRecipient")
              }
            }

            public var askCurrency: String {
              get {
                return resultMap["askCurrency"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "askCurrency")
              }
            }

            public var askPrice: String {
              get {
                return resultMap["askPrice"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "askPrice")
              }
            }

            public var findersFeeBps: Int {
              get {
                return resultMap["findersFeeBps"]! as! Int
              }
              set {
                resultMap.updateValue(newValue, forKey: "findersFeeBps")
              }
            }

            public var price: Price {
              get {
                return Price(unsafeResultMap: resultMap["price"]! as! ResultMap)
              }
              set {
                resultMap.updateValue(newValue.resultMap, forKey: "price")
              }
            }

            public var fragments: Fragments {
              get {
                return Fragments(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }

            public struct Fragments {
              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public var v3AskEventPropertiesInfo: V3AskEventPropertiesInfo {
                get {
                  return V3AskEventPropertiesInfo(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }
            }

            public struct Price: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["PriceAtTime"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                  GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
                  GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
                  GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
                self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var blockNumber: Int {
                get {
                  return resultMap["blockNumber"]! as! Int
                }
                set {
                  resultMap.updateValue(newValue, forKey: "blockNumber")
                }
              }

              public var chainTokenPrice: ChainTokenPrice? {
                get {
                  return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
                }
                set {
                  resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
                }
              }

              public var nativePrice: NativePrice {
                get {
                  return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
                }
                set {
                  resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
                }
              }

              public var usdcPrice: UsdcPrice? {
                get {
                  return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
                }
                set {
                  resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
                }
              }

              public var fragments: Fragments {
                get {
                  return Fragments(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }

              public struct Fragments {
                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public var priceSummary: PriceSummary {
                  get {
                    return PriceSummary(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }
              }

              public struct ChainTokenPrice: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["CurrencyAmount"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                    GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(decimal: Double, raw: String) {
                  self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var decimal: Double {
                  get {
                    return resultMap["decimal"]! as! Double
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimal")
                  }
                }

                public var raw: String {
                  get {
                    return resultMap["raw"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "raw")
                  }
                }
              }

              public struct NativePrice: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["CurrencyAmount"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                    GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                    GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(decimal: Double, raw: String, currency: Currency) {
                  self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var decimal: Double {
                  get {
                    return resultMap["decimal"]! as! Double
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimal")
                  }
                }

                public var raw: String {
                  get {
                    return resultMap["raw"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "raw")
                  }
                }

                public var currency: Currency {
                  get {
                    return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
                  }
                  set {
                    resultMap.updateValue(newValue.resultMap, forKey: "currency")
                  }
                }

                public struct Currency: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["Currency"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("address", type: .nonNull(.scalar(String.self))),
                      GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                      GraphQLField("name", type: .nonNull(.scalar(String.self))),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(address: String, decimals: Int, name: String) {
                    self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var address: String {
                    get {
                      return resultMap["address"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "address")
                    }
                  }

                  public var decimals: Int {
                    get {
                      return resultMap["decimals"]! as! Int
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "decimals")
                    }
                  }

                  public var name: String {
                    get {
                      return resultMap["name"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "name")
                    }
                  }
                }
              }

              public struct UsdcPrice: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["CurrencyAmount"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                    GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(decimal: Double, raw: String) {
                  self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var decimal: Double {
                  get {
                    return resultMap["decimal"]! as! Double
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimal")
                  }
                }

                public var raw: String {
                  get {
                    return resultMap["raw"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "raw")
                  }
                }
              }
            }
          }

          public var asV3AskPriceUpdatedEventProperties: AsV3AskPriceUpdatedEventProperties? {
            get {
              if !AsV3AskPriceUpdatedEventProperties.possibleTypes.contains(__typename) { return nil }
              return AsV3AskPriceUpdatedEventProperties(unsafeResultMap: resultMap)
            }
            set {
              guard let newValue = newValue else { return }
              resultMap = newValue.resultMap
            }
          }

          public struct AsV3AskPriceUpdatedEventProperties: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["V3AskPriceUpdatedEventProperties"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("seller", type: .nonNull(.scalar(String.self))),
                GraphQLField("sellerFundsRecipient", type: .nonNull(.scalar(String.self))),
                GraphQLField("askCurrency", type: .nonNull(.scalar(String.self))),
                GraphQLField("askPrice", type: .nonNull(.scalar(String.self))),
                GraphQLField("findersFeeBps", type: .nonNull(.scalar(Int.self))),
                GraphQLField("price", type: .nonNull(.object(Price.selections))),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(seller: String, sellerFundsRecipient: String, askCurrency: String, askPrice: String, findersFeeBps: Int, price: Price) {
              self.init(unsafeResultMap: ["__typename": "V3AskPriceUpdatedEventProperties", "seller": seller, "sellerFundsRecipient": sellerFundsRecipient, "askCurrency": askCurrency, "askPrice": askPrice, "findersFeeBps": findersFeeBps, "price": price.resultMap])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var seller: String {
              get {
                return resultMap["seller"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "seller")
              }
            }

            public var sellerFundsRecipient: String {
              get {
                return resultMap["sellerFundsRecipient"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "sellerFundsRecipient")
              }
            }

            public var askCurrency: String {
              get {
                return resultMap["askCurrency"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "askCurrency")
              }
            }

            public var askPrice: String {
              get {
                return resultMap["askPrice"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "askPrice")
              }
            }

            public var findersFeeBps: Int {
              get {
                return resultMap["findersFeeBps"]! as! Int
              }
              set {
                resultMap.updateValue(newValue, forKey: "findersFeeBps")
              }
            }

            public var price: Price {
              get {
                return Price(unsafeResultMap: resultMap["price"]! as! ResultMap)
              }
              set {
                resultMap.updateValue(newValue.resultMap, forKey: "price")
              }
            }

            public var fragments: Fragments {
              get {
                return Fragments(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }

            public struct Fragments {
              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public var v3AskEventPropertiesInfo: V3AskEventPropertiesInfo {
                get {
                  return V3AskEventPropertiesInfo(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }
            }

            public struct Price: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["PriceAtTime"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                  GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
                  GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
                  GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
                self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var blockNumber: Int {
                get {
                  return resultMap["blockNumber"]! as! Int
                }
                set {
                  resultMap.updateValue(newValue, forKey: "blockNumber")
                }
              }

              public var chainTokenPrice: ChainTokenPrice? {
                get {
                  return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
                }
                set {
                  resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
                }
              }

              public var nativePrice: NativePrice {
                get {
                  return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
                }
                set {
                  resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
                }
              }

              public var usdcPrice: UsdcPrice? {
                get {
                  return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
                }
                set {
                  resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
                }
              }

              public var fragments: Fragments {
                get {
                  return Fragments(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }

              public struct Fragments {
                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public var priceSummary: PriceSummary {
                  get {
                    return PriceSummary(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }
              }

              public struct ChainTokenPrice: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["CurrencyAmount"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                    GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(decimal: Double, raw: String) {
                  self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var decimal: Double {
                  get {
                    return resultMap["decimal"]! as! Double
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimal")
                  }
                }

                public var raw: String {
                  get {
                    return resultMap["raw"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "raw")
                  }
                }
              }

              public struct NativePrice: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["CurrencyAmount"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                    GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                    GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(decimal: Double, raw: String, currency: Currency) {
                  self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var decimal: Double {
                  get {
                    return resultMap["decimal"]! as! Double
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimal")
                  }
                }

                public var raw: String {
                  get {
                    return resultMap["raw"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "raw")
                  }
                }

                public var currency: Currency {
                  get {
                    return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
                  }
                  set {
                    resultMap.updateValue(newValue.resultMap, forKey: "currency")
                  }
                }

                public struct Currency: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["Currency"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("address", type: .nonNull(.scalar(String.self))),
                      GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                      GraphQLField("name", type: .nonNull(.scalar(String.self))),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(address: String, decimals: Int, name: String) {
                    self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var address: String {
                    get {
                      return resultMap["address"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "address")
                    }
                  }

                  public var decimals: Int {
                    get {
                      return resultMap["decimals"]! as! Int
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "decimals")
                    }
                  }

                  public var name: String {
                    get {
                      return resultMap["name"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "name")
                    }
                  }
                }
              }

              public struct UsdcPrice: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["CurrencyAmount"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                    GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(decimal: Double, raw: String) {
                  self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var decimal: Double {
                  get {
                    return resultMap["decimal"]! as! Double
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimal")
                  }
                }

                public var raw: String {
                  get {
                    return resultMap["raw"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "raw")
                  }
                }
              }
            }
          }

          public var asV3AskFilledEventProperties: AsV3AskFilledEventProperties? {
            get {
              if !AsV3AskFilledEventProperties.possibleTypes.contains(__typename) { return nil }
              return AsV3AskFilledEventProperties(unsafeResultMap: resultMap)
            }
            set {
              guard let newValue = newValue else { return }
              resultMap = newValue.resultMap
            }
          }

          public struct AsV3AskFilledEventProperties: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["V3AskFilledEventProperties"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("seller", type: .nonNull(.scalar(String.self))),
                GraphQLField("sellerFundsRecipient", type: .nonNull(.scalar(String.self))),
                GraphQLField("askCurrency", type: .nonNull(.scalar(String.self))),
                GraphQLField("askPrice", type: .nonNull(.scalar(String.self))),
                GraphQLField("findersFeeBps", type: .nonNull(.scalar(Int.self))),
                GraphQLField("price", type: .nonNull(.object(Price.selections))),
                GraphQLField("finder", type: .nonNull(.scalar(String.self))),
                GraphQLField("buyer", type: .nonNull(.scalar(String.self))),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(seller: String, sellerFundsRecipient: String, askCurrency: String, askPrice: String, findersFeeBps: Int, price: Price, finder: String, buyer: String) {
              self.init(unsafeResultMap: ["__typename": "V3AskFilledEventProperties", "seller": seller, "sellerFundsRecipient": sellerFundsRecipient, "askCurrency": askCurrency, "askPrice": askPrice, "findersFeeBps": findersFeeBps, "price": price.resultMap, "finder": finder, "buyer": buyer])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var seller: String {
              get {
                return resultMap["seller"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "seller")
              }
            }

            public var sellerFundsRecipient: String {
              get {
                return resultMap["sellerFundsRecipient"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "sellerFundsRecipient")
              }
            }

            public var askCurrency: String {
              get {
                return resultMap["askCurrency"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "askCurrency")
              }
            }

            public var askPrice: String {
              get {
                return resultMap["askPrice"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "askPrice")
              }
            }

            public var findersFeeBps: Int {
              get {
                return resultMap["findersFeeBps"]! as! Int
              }
              set {
                resultMap.updateValue(newValue, forKey: "findersFeeBps")
              }
            }

            public var price: Price {
              get {
                return Price(unsafeResultMap: resultMap["price"]! as! ResultMap)
              }
              set {
                resultMap.updateValue(newValue.resultMap, forKey: "price")
              }
            }

            public var finder: String {
              get {
                return resultMap["finder"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "finder")
              }
            }

            public var buyer: String {
              get {
                return resultMap["buyer"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "buyer")
              }
            }

            public var fragments: Fragments {
              get {
                return Fragments(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }

            public struct Fragments {
              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public var v3AskEventPropertiesInfo: V3AskEventPropertiesInfo {
                get {
                  return V3AskEventPropertiesInfo(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }
            }

            public struct Price: GraphQLSelectionSet {
              public static let possibleTypes: [String] = ["PriceAtTime"]

              public static var selections: [GraphQLSelection] {
                return [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("blockNumber", type: .nonNull(.scalar(Int.self))),
                  GraphQLField("chainTokenPrice", type: .object(ChainTokenPrice.selections)),
                  GraphQLField("nativePrice", type: .nonNull(.object(NativePrice.selections))),
                  GraphQLField("usdcPrice", type: .object(UsdcPrice.selections)),
                ]
              }

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(blockNumber: Int, chainTokenPrice: ChainTokenPrice? = nil, nativePrice: NativePrice, usdcPrice: UsdcPrice? = nil) {
                self.init(unsafeResultMap: ["__typename": "PriceAtTime", "blockNumber": blockNumber, "chainTokenPrice": chainTokenPrice.flatMap { (value: ChainTokenPrice) -> ResultMap in value.resultMap }, "nativePrice": nativePrice.resultMap, "usdcPrice": usdcPrice.flatMap { (value: UsdcPrice) -> ResultMap in value.resultMap }])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var blockNumber: Int {
                get {
                  return resultMap["blockNumber"]! as! Int
                }
                set {
                  resultMap.updateValue(newValue, forKey: "blockNumber")
                }
              }

              public var chainTokenPrice: ChainTokenPrice? {
                get {
                  return (resultMap["chainTokenPrice"] as? ResultMap).flatMap { ChainTokenPrice(unsafeResultMap: $0) }
                }
                set {
                  resultMap.updateValue(newValue?.resultMap, forKey: "chainTokenPrice")
                }
              }

              public var nativePrice: NativePrice {
                get {
                  return NativePrice(unsafeResultMap: resultMap["nativePrice"]! as! ResultMap)
                }
                set {
                  resultMap.updateValue(newValue.resultMap, forKey: "nativePrice")
                }
              }

              public var usdcPrice: UsdcPrice? {
                get {
                  return (resultMap["usdcPrice"] as? ResultMap).flatMap { UsdcPrice(unsafeResultMap: $0) }
                }
                set {
                  resultMap.updateValue(newValue?.resultMap, forKey: "usdcPrice")
                }
              }

              public var fragments: Fragments {
                get {
                  return Fragments(unsafeResultMap: resultMap)
                }
                set {
                  resultMap += newValue.resultMap
                }
              }

              public struct Fragments {
                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public var priceSummary: PriceSummary {
                  get {
                    return PriceSummary(unsafeResultMap: resultMap)
                  }
                  set {
                    resultMap += newValue.resultMap
                  }
                }
              }

              public struct ChainTokenPrice: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["CurrencyAmount"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                    GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(decimal: Double, raw: String) {
                  self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var decimal: Double {
                  get {
                    return resultMap["decimal"]! as! Double
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimal")
                  }
                }

                public var raw: String {
                  get {
                    return resultMap["raw"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "raw")
                  }
                }
              }

              public struct NativePrice: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["CurrencyAmount"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                    GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                    GraphQLField("currency", type: .nonNull(.object(Currency.selections))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(decimal: Double, raw: String, currency: Currency) {
                  self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw, "currency": currency.resultMap])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var decimal: Double {
                  get {
                    return resultMap["decimal"]! as! Double
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimal")
                  }
                }

                public var raw: String {
                  get {
                    return resultMap["raw"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "raw")
                  }
                }

                public var currency: Currency {
                  get {
                    return Currency(unsafeResultMap: resultMap["currency"]! as! ResultMap)
                  }
                  set {
                    resultMap.updateValue(newValue.resultMap, forKey: "currency")
                  }
                }

                public struct Currency: GraphQLSelectionSet {
                  public static let possibleTypes: [String] = ["Currency"]

                  public static var selections: [GraphQLSelection] {
                    return [
                      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                      GraphQLField("address", type: .nonNull(.scalar(String.self))),
                      GraphQLField("decimals", type: .nonNull(.scalar(Int.self))),
                      GraphQLField("name", type: .nonNull(.scalar(String.self))),
                    ]
                  }

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(address: String, decimals: Int, name: String) {
                    self.init(unsafeResultMap: ["__typename": "Currency", "address": address, "decimals": decimals, "name": name])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var address: String {
                    get {
                      return resultMap["address"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "address")
                    }
                  }

                  public var decimals: Int {
                    get {
                      return resultMap["decimals"]! as! Int
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "decimals")
                    }
                  }

                  public var name: String {
                    get {
                      return resultMap["name"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "name")
                    }
                  }
                }
              }

              public struct UsdcPrice: GraphQLSelectionSet {
                public static let possibleTypes: [String] = ["CurrencyAmount"]

                public static var selections: [GraphQLSelection] {
                  return [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("decimal", type: .nonNull(.scalar(Double.self))),
                    GraphQLField("raw", type: .nonNull(.scalar(String.self))),
                  ]
                }

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(decimal: Double, raw: String) {
                  self.init(unsafeResultMap: ["__typename": "CurrencyAmount", "decimal": decimal, "raw": raw])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var decimal: Double {
                  get {
                    return resultMap["decimal"]! as! Double
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "decimal")
                  }
                }

                public var raw: String {
                  get {
                    return resultMap["raw"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "raw")
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
